---
# Source: grr/templates/serviceaccount/sa-grr.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grr-sa
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-mysql
stringData:
  fleetspeak-password: fleetspeak-password
  grr-password: grr-password
  mysql-password: password
---
# Source: grr/templates/secret/sec-fleetspeak-admin-components.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-fleetspeak-admin-components
stringData:
  admin.components.textproto: |
    mysql_data_source_name: "fleetspeak-user:fleetspeak-password@tcp(mysql:3306)/fleetspeak"
    admin_config: <
      listen_address: "0.0.0.0:4444"
    >
    notification_use_http_notifier: true
    stats_config: <
      address: "0.0.0.0:19090"
    >
---
# Source: grr/templates/secret/sec-fleetspeak-frontend-components.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-fleetspeak-frontend-components
stringData:
  frontend.components.textproto: |
    mysql_data_source_name: "fleetspeak-user:fleetspeak-password@tcp(mysql:3306)/fleetspeak"
    https_config: <
      listen_address: "0.0.0.0:4443"
      certificates: "-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIRAKLPU4FufhZFMpOilABRKyQwDQYJKoZIhvcNAQELBQAw\nHjEcMBoGA1UEAxMTZmxlZXRzcGVhay1mcm9udGVuZDAeFw0yNDA1MTUxMDU0MzJa\nFw0zNDA1MTMxMDU0MzJaMB4xHDAaBgNVBAMTE2ZsZWV0c3BlYWstZnJvbnRlbmQw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCep+DhSafl+tt7JsZmVSKZ\n46mm9OKjFU3lwIByzsjcfc0tk3CL7dZN5Igj464EOtGBZ4VLRFGOjfDQ1Cu0zZQD\nCo+1CN9TDpUH/OMxc/VVkGAS2rM20lMEM+I1NaO+NmdPxHMx9k0Lyg6cWvAzw/7J\nETWr8FFbfFPiK6KWvQ9RR/khu9UqjcoRFJo4JVHKsgEejN/tG60ytoisrmcZEsGO\nnQ9b6ZhwiiQAMyOdCMoxRl2MNQVaHItlvsBC8vqQirXw96TQOtMz9LohVrG7GENq\n7okDluG3JpfdgBfauumpQ491ERDZ9VM64iGm3pPscNON80BU5V3753uJL2b79bIR\nAgMBAAGjXzBdMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\nKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAeBgNVHREEFzAVghNmbGVldHNwZWFrLWZy\nb250ZW5kMA0GCSqGSIb3DQEBCwUAA4IBAQCQYQMdc4fT/jItawgm6ZF2ZJJCXiUf\n8TOJ/FctBZI+qTUAxiMKbq5ufRYBNQaCFyOehDCiyhDNfDybGvIuP1uo5TM+FEPm\njWwZwDvbkFPLe6yhOgzp6PGyN9MI3XWk/OeMeniH/+a85kENrQ+phOqz0c4KW9zO\n4Hd7SZojwWxYNPinQeF4+wL+coqBk96X1gOfJLZBj2c/orgZSMFEI1nMYKa7eLHv\nB5tYB9DXFtXba7G4CnGi2odHwNlaZCO1QaqXTGisNiUVxAfSq0dkY2V5sBsYNJ6j\n0WbZ630payZLPNgqW7z0rklSEi5Yw6v/6G8z5yGaQb6+lzSudI3nZu9n\n-----END CERTIFICATE-----\n"
      key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAnqfg4Umn5frbeybGZlUimeOppvTioxVN5cCAcs7I3H3NLZNw\ni+3WTeSII+OuBDrRgWeFS0RRjo3w0NQrtM2UAwqPtQjfUw6VB/zjMXP1VZBgEtqz\nNtJTBDPiNTWjvjZnT8RzMfZNC8oOnFrwM8P+yRE1q/BRW3xT4iuilr0PUUf5IbvV\nKo3KERSaOCVRyrIBHozf7RutMraIrK5nGRLBjp0PW+mYcIokADMjnQjKMUZdjDUF\nWhyLZb7AQvL6kIq18Pek0DrTM/S6IVaxuxhDau6JA5bhtyaX3YAX2rrpqUOPdREQ\n2fVTOuIhpt6T7HDTjfNAVOVd++d7iS9m+/WyEQIDAQABAoIBAQCaVaSkgwoY5hZr\njiShl1+5Y4W9K6rsCeVlAgXxqMYr9xSIqUxqUkqOKylkAC9fXfg/cXxw41yS1/DS\ntBJwJys8aiGxcZgNK7o9svsvOCYHvhI3RRfg1Gh9Rhtet3c5qaKGLgwBJh98wGnG\nH5BaSuamoV8ciwIZhK/0642WJQOphFm5H/SfujEXOIno3rkO1f6N2QXhyCOjcBEg\nm6sKcv4Ozx/KjZ87OmU9WZYX2qRdQVrOo6tVE3M+qO6I9s0c/7nLdIg7TtkU2Dgr\nOydTG6c6s1AbuyCEuP6agDyNXEtkWTmOTHmltNHJo4Zy2KlGufHt+xQpbqki8/bo\nv5wuqZmhAoGBANCayksu/b8Q+8Y7x9mp93DYqWM2VOAWQ4hbfVpc8CVaRj2GVKgX\n3vi1YJe2Td1KQABZMQafD+ajVLbwkpHbUpJsQf8fxBh80basgJJCfCqJRywCATIb\nk5XNOGiKfVvaNOdjv/FQSxM59EmWCumPL/j21JfDSf1L1ixsFfzNwNIbAoGBAMKz\n4QEBUVUrjgu3U7pQZ8HTXdWXVatNQ3iGNbmrJjTBokkjTSIrA2GNMkN8pvWLWcqE\n18BwNEiupBCCkvLT8WfNYcFhmhSuZMjIgeHdBNiCtzi1mOnZmb2oEqaufYLBYsRO\nlhADS2NxcJcd1z8zD5q6Jb/XRgt0fQPTu5+kf29DAoGBAI4fB3fVmhdUkNRr4irP\ne7+sPStU1tqdEIGUI4EvFIW+TWCZZo/nQ4gauqZiFAaSEayrF5W1RPYTjSHeIV2y\nGT2c+BHDKKyuTYqxWB9NoJ6yTIUVEI987j3/RVEkGWg88BI9iYX0+FEvCNohmWmq\nnjp2oDyNVpl104MMWKaV36rFAoGAQZshDxilkkBZ3cLJWLdtLteM/8K9oDopqPv4\nMHbmKdKxX1mgzQmXWxCbxjfDfmuVNvNqS7LDO1Z1fAazg1U9O8/tx56er6dP2IQP\nl87EqjvphxdRzkJ/VnPCzR1wt1V4dVNRp1Wk2n5IBPOOKwKGmIlu3OSp+oQm99op\nl5JzSkcCgYAmfSFx60z/mw8HMkO+nShfUkFiHuefXTjJor+vbHZAJuJ8rThJTDK6\npb0Ft9rO9GFmH9w6F9EJeo9N84+q1Pil8aIJJiVrNHnhVL77ylut/URlfntl+IcJ\nvUAvNvQD4enXjBOUOPicNANE3beWsB3lfr8u0I5BWo4DS760mr5zpA==\n-----END RSA PRIVATE KEY-----\n"
    >
    health_check_config: <
      listen_address: "0.0.0.0:8080"
    >
    notification_listen_address: "0.0.0.0:12000"
    notification_public_address: "FLEETSPEAK_FRONTEND_IP:12000"
    stats_config: <
      address: "0.0.0.0:19090"
    >
---
# Source: grr/templates/secret/sec-grr-executable-cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-grr-executable-signing-cert
  labels:
    chart: "grr-1.0.1"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
    executable-signing.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvekNDQWVlZ0F3SUJBZ0lRR2xIclBZdlg4cHpyUzJNQ2NjRUYvekFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbmNuSXRjbVZ6Y0c5dWMyVXVZMjl0TUI0WERUSTBNRFV4TlRFd05UUXpNbG9YRFRNMApNRFV4TXpFd05UUXpNbG93R3pFWk1CY0dBMVVFQXhNUVozSnlMWEpsYzNCdmJuTmxMbU52YlRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU9HbVBkUVJETG5zVmZDMndXdUhCNVlkKzBoOGZaYjkKaXNCUTAyaG4rbWtBY252SWlXRzhzTVRwQzh2cXpEcHpMZUFWSEV2UHArK3BZdTNzZ1VISnFHZGNTZURvWS9RZApuK000Y2FMZmo5NkRrM3J2TlF6Q2JocXNIT2YvNCtMdVVYbzN2WDB1VlErMngzenA0ZDhBbkFRV2FsT1lmU0IvCnAvb3lVT2ZpRWhMYnNkUEtPY1NldkxKTlBIOUFaeFZHU3cwNlVPcXVSMWNkblpXMndkdWNmOVFpL214NTlpQ2sKa1RSVVQ1Rmp4bHA2S2RvYUxrcW5JU0RPWGErZlBpYlRpaitzS2crSmhZbHBkVTVYWUI3VEc1M3BZbDZWdFpGcwpnMjF5bWlZQzJJaFlZSnd6ZjJkVWY1Z2RadlBJa0tqcmluNG1QbUJhejBmMkVlaUdNdEgwNzNFQ0F3RUFBYU0vCk1EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURjbDI4QjlZRWJNc3lzbXFjcgo2OWxtaXM0a0FCVVFWL3U4QTRheTVXVlFYTTB4Z1BrcThQWjBPY3h0bUdMbVNvZ2RVWmRhVnBjWEg2RzY2M2g0CnFnWjFJUXE3a1JLakF3Slc5TGFTMnh1cnZVc1piU1BHaUVvQm44UXcwTmJYVjhuVHJQQ0h3Z1h1TlBTTW80WlYKb0RrRWs5U3hBYnJvREI4U2wxKy8zdHI4YzZ1T1VCbFNEaVV5dEhWeUNyVGpCZDRhekJXSkhyNm90cjZXT21qNAo1V3lTMG1PaEdCakhqdTBoZEpYbmp0S0Y0My9SbDZYTTFDRWJFYW9Yb0QwaUtxODY3S09HUmJmaExXWVYvMS9XClo4dU9HS0ltNWhRa2dYdUFaaWQ3emVnNnc2a3UzclBXa3BGdHhuaW1ySC9STkx4dUF3WGwwUDJreDJZQk5UTU8KNDFQdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    executable-signing.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNGFZOTFCRU11ZXhWOExiQmE0Y0hsaDM3U0h4OWx2Mkt3RkRUYUdmNmFRQnllOGlKCllieXd4T2tMeStyTU9uTXQ0QlVjUzgrbjc2bGk3ZXlCUWNtb1oxeEo0T2hqOUIyZjR6aHhvdCtQM29PVGV1ODEKRE1KdUdxd2M1Ly9qNHU1UmVqZTlmUzVWRDdiSGZPbmgzd0NjQkJacVU1aDlJSCtuK2pKUTUrSVNFdHV4MDhvNQp4SjY4c2swOGYwQm5GVVpMRFRwUTZxNUhWeDJkbGJiQjI1eC8xQ0wrYkhuMklLU1JORlJQa1dQR1dub3AyaG91ClNxY2hJTTVkcjU4K0p0T0tQNndxRDRtRmlXbDFUbGRnSHRNYm5lbGlYcFcxa1d5RGJYS2FKZ0xZaUZoZ25ETi8KWjFSL21CMW04OGlRcU91S2ZpWStZRnJQUi9ZUjZJWXkwZlR2Y1FJREFRQUJBb0lCQUcxQ1pvdXBtY1RvdDVBdgpuYVlvSXJkQVd5ejFBb2E2eTVWbFRZZ3ZXS1BCRUszNUl2Uk5QamFLTlNrT3pzYTZnSXNSRGJ0emwvaEd4MTAyCitEdFhucEExc3B3UlNseW9mNE94RCt6eVhTSThDWXdzQ1Q3ZFloek9HODBHTFZ6elVrWmdlUU1GRFREbnF0NUUKRFJkQ24waW5aZUtHWW9mNjUrWVF1UFllayt2R3hlbGNMQ280cUxLWTZoNVJ1TDAwOU9HTUNjMkxhYXhJaE5pcQpONEd3RHR4Q09oSEduZTEwMVRNRWRKcDVOSlpoNVhOV21zdExnT2lKVVl0WXVLRDFRYi9xTHpERlVVSzhUZmMwCnI2Y2c4UWFUWGY1enMycmVyOHV4N1pYNm56YWFvZjBzVmlyOHNEWm5wVklHbDZ0U0pMaVRIS3NlS2hiWFFQVmUKRytlMXJQVUNnWUVBKzg0SUZzbmNrcDNXTnlBUFB2OXN4NEFJenlZbzArblJRU21WckZYUUZHL3BxN3A3ZnJYSwpJUWJJUHkwaHNuR2NPTUtETS9BSW9uRGorU3hXcVViNlNYM2h1RmpCNm5ldFVYZVp1NlR6ZklLYWl5QmFQa3dpClZBK3AzUGx6WEttN2ZuL09DSFQ2dVdxY3hCZXF2bUpyNjkwWVI4QTN6QWNQVUNLZDV5MjBlS2NDZ1lFQTVXaW4KbzZ5V2JxQTF4RXlNdkhuZTR0QjV0TjZQa3Rmd1EzZjgyQ1cyVjhrT2VaSlhKUTdBTG85QzNVTDNRdE1LZmFXagpkdzh0NWRQU1JVMlg2bW9wNDFvdXp3dUo4bkFWN0d1Y0ZXZGUwVXdjcm9WUTJuaEVLMlRtMkFuNVovYzRLSGV1CjlJRHpHNkErdUdzWUdxZnY0RDRxc25xbU9kSWVTUzJLSDZDNHdpY0NnWUVBeWVnTTZHajRhc0FROHFiTVV0RngKSWc3eUFWZ3h5S3BsMWdCSU9hV2RjYVhERXFZM1BBVDhqTHJwZW03djVDdmcva3BKOWkxMFh2eHljR3d6R1EwRwp5RU1kNlRtU1ZEV2VUZ0srekkyWmg2OFp5SkVxaTJWMDZUNmVEOGdkenFGeTdCNEMwUmtycWQxbzBudS90MlVuCjhEcWFxMzNmdjhPeGJhbzBQeGlRNjJVQ2dZQWZlQkcyOUEvV3NRZHZIQWthT2FXSGU0MldjQWxGM1hWSjdBVzEKS01jd2w1WHl1MDVVK1FjSDNBTVNFd09VR1JzUlRVMTFJWkhzT3ZoWEpXTzNka1MwdVVRK2hwaXZ0d3hxMkFBYgpONGpjTVJLbUpnZUhVSVFaWjhmNnpyTjF2WVhvbHpKYXUrMmRWb2dFQ0R6UU8wVStmNGlmM3c4NlUwWndSMXp4CkpienlkUUtCZ0RtMGN3NmdPeTNLYUJvVW95aXpPNDd6SGo5ZmVUV0lOaGhyYlIxQkdqUW91NXlLSFRIS2NFVG0KNitCTWxmSmg3NUsrblRFK1U4b1pSSHI4Rk84QS9vSGQ4eDZDUlNTWE5vMk9RVGxuMnhWQ25tTC9IeVJ5ZnRYdwpEYXFQT2tOeG4xTXpObDJIV2VQSE1XdE0yUDhiZklpMXg4bXNMcWEzV04rb1lCbXI4ZThmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: grr/templates/secret/sec-grr-server-local.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sec-grr-server-local
stringData:
  server.local.yaml: |
    Database.implementation: MysqlDB
    Blobstore.implementation: DbBlobStore
    Mysql.host: mysql
    Mysql.port: 3306
    Mysql.database: grr
    Mysql.username: grr-user
    Mysql.password: grr-password
    Mysql.flow_processing_threads_max: 20
    AdminUI.csrf_secret_key: KPK,_0a_xY&DTeiaokEdsH1uXGobNIhfrr67BTSLlPPv64_UE0nyn8QsD6
    AdminUI.url: http://localhost:8000
    AdminUI.bind: 0.0.0.0
    AdminUI.use_precompiled_js: true
    API.DefaultRouter: ApiCallRouterWithoutChecks

    Logging.domain: localhost
    Logging.verbose: true
    Logging.engines: file,stderr
    Logging.path: /grr
    Logging.filename: /grr/grr-server.log
    Monitoring.alert_email: grr-monitoring@localhost
    Monitoring.emergency_access_email: grr-emergency@localhost
    Monitoring.http_address: 0.0.0.0
    Monitoring.http_port: 19090

    Client.executable_signing_public_key: "%(/grr/certs/executable-signing.pub|file)"
    PrivateKeys.executable_signing_private_key: "%(/grr/certs/executable-signing.key|file)"

    Server.initialized: true
    Server.fleetspeak_enabled: true
    Server.fleetspeak_server: svc-fleetspeak-admin:4444
    Server.fleetspeak_message_listen_address: 0.0.0.0:11111
---
# Source: grr/templates/configmap/cfm-fleetspeak-services.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfm-fleetspeak-services
data:
  services.textproto: |
    services {
      name: "GRR"
      factory: "GRPC"
      config {
        [type.googleapis.com/fleetspeak.grpcservice.Config] {
          target: "svc-grr-frontend:11111"
          insecure: true
        }
      }
    }
    broadcast_poll_time {
      seconds: 1
    }
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfm-mysql-init
data:
  init.sh: |
    #!/bin/bash
    set -ex
    echo "** Creating default DB for GRR and fleetspeak"
    mariadb -u root -p"$MYSQL_ROOT_PASSWORD" --execute \
    "CREATE USER'grr-user'@'%' IDENTIFIED BY '$GRR_PASSWORD';
     CREATE DATABASE grr;
     GRANT ALL ON grr.* TO 'grr-user'@'%';
     CREATE USER 'fleetspeak-user'@'%' IDENTIFIED BY '$FLEETSPEAK_PASSWORD';
     CREATE DATABASE fleetspeak;
     GRANT ALL ON fleetspeak.* TO 'fleetspeak-user'@'%';
     FLUSH PRIVILEGES;"
    echo "** Finished creating DBs and users"
---
# Source: grr/templates/database/mysql.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
# Source: grr/templates/service/svc-fleetspeak-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-fleetspeak-admin
spec:
  selector:
    app.kubernetes.io/name: fleetspeak-admin
  ports:
    - protocol: TCP
      name: admin
      port: 4444
      targetPort: 4444
---
# Source: grr/templates/service/svc-fleetspeak-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-fleetspeak-frontend
spec:
  selector:
    app.kubernetes.io/name: fleetspeak-frontend
  ports:
    - protocol: TCP
      name: frontend
      port: 4443
      targetPort: 4443
---
# Source: grr/templates/service/svc-fleetspeak-frontend.yaml
kind: Service
apiVersion: v1
metadata:
  name: fleetspeak-frontend
spec:
  type: ExternalName
  externalName: svc-fleetspeak-frontend.default.svc.cluster.local
  ports:
  - port: 4443
---
# Source: grr/templates/service/svc-grr-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-grr-admin
spec:
  selector:
    app.kubernetes.io/name: grr-admin
  ports:
    - protocol: TCP
      name: admin
      port: 8000
      targetPort: 8000
---
# Source: grr/templates/service/svc-grr-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: svc-grr-frontend
spec:
  selector:
    app.kubernetes.io/name: grr-frontend
  ports:
    - protocol: TCP
      name: frontend
      port: 11111
      targetPort: 11111
---
# Source: grr/templates/daemonset/dst-grr.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grr
  labels:
    app: grr
spec:
  selector:
    matchLabels:
      app: grr
  template:
    metadata:
      labels:
        app: grr
    spec:
      # Only deploying GRR to nodes with the label 'grrclient=installed'.
      nodeSelector:
        grrclient: installed
      serviceAccountName: grr-sa
      # Uses the host network rather than the container network. This way
      # the hostname that shows up in GRR will contain the cluster name too.
      hostNetwork: true
      # Allows us to list all processes on the host rather than just those
      # from the container.
      hostPID: true
      # Labeling volumes from the root file system so they can be exposed to
      # our container.
      volumes:
      - name: root
        hostPath:
          path: /
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: grr
        image: grr-daemon:v0.1
        imagePullPolicy: Never
        # Making it a privileged container. This way the processes within
        # the container get almost the same privileges as those outside the
        # container (e.g. manipulating the network stack or accessing devices).
        securityContext:
          privileged: true
        # Exposing the machine's file system to the container (read-only).
        volumeMounts:
        - mountPath: /hostroot
          name: root
          readOnly: true
---
# Source: grr/templates/database/mysql.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mariadb:11.3.2
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: mysql-password
        - name: GRR_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: grr-password
        - name: FLEETSPEAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sec-mysql
              key: fleetspeak-password
        args: ["--max_allowed_packet=40M", "--log_bin_trust_function_creators=ON"]
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d/
      volumes:
      - name: mysql-init
        configMap:
          name: cfm-mysql-init
          items:
          - key: init.sh
            path: init.sh
---
# Source: grr/templates/deployment/dpl-fleetspeak-admin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-fleetspeak-admin
  labels:
    app: fleetspeak-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fleetspeak-admin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fleetspeak-admin
        prometheus: fleetspeak-admin
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: fleetspeak-admin
        image: ghcr.io/google/fleetspeak:latest
        ports:
        - containerPort: 4444
          name: admin
        - containerPort: 19090
          name: metrics
        command: ["/fleetspeak/bin/server"]
        args: ["-alsologtostderr"]
        volumeMounts:
        - name: fleetspeak-admin-components
          mountPath: /etc/fleetspeak-server/server.components.config
          subPath: server.components.config
        - name: fleetspeak-services
          mountPath: /etc/fleetspeak-server/server.services.config
          subPath: server.services.config
      volumes:
      - name: fleetspeak-admin-components
        secret:
          secretName: sec-fleetspeak-admin-components
          items:
          - key: admin.components.textproto
            path: server.components.config
      - name: fleetspeak-services
        configMap:
          name: cfm-fleetspeak-services
          items:
          - key: services.textproto
            path: server.services.config
---
# Source: grr/templates/deployment/dpl-fleetspeak-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-fleetspeak-frontend
  labels:
    app: fleetspeak-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fleetspeak-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fleetspeak-frontend
        prometheus: fleetspeak-frontend
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      initContainers:
      - name: init-fleetspeak-frontend
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: busybox:1.36
        command: ['sh', '-c', "cp /stage/fleetspeak-server/server.*.config /etc/fleetspeak-server/; sed -i \"s/FLEETSPEAK_FRONTEND_IP/$POD_IP/g\" /etc/fleetspeak-server/server.components.config"]
        volumeMounts:
        - name: fleetspeak-config-volume
          mountPath: /etc/fleetspeak-server
        - name: fleetspeak-frontend-components
          mountPath: /stage/fleetspeak-server/server.components.config
          subPath: server.components.config
        - name: fleetspeak-services
          mountPath: /stage/fleetspeak-server/server.services.config
          subPath: server.services.config
      containers:
      - name: fleetspeak-frontend
        image: ghcr.io/google/fleetspeak:latest
        ports:
        - containerPort: 4443
          name: frontend
        - containerPort: 8080
          name: healthz
        - containerPort: 12000
          name: notification
        - containerPort: 19090
          name: metrics
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        command: ["/fleetspeak/bin/server"]
        args: ["-alsologtostderr"]
        volumeMounts:
        - name: fleetspeak-config-volume
          mountPath: /etc/fleetspeak-server
      volumes:
      - name: fleetspeak-config-volume
        emptyDir:
          sizeLimit: 5Mi
      - name: fleetspeak-frontend-components
        secret:
          secretName: sec-fleetspeak-frontend-components
          items:
          - key: frontend.components.textproto
            path: server.components.config
      - name: fleetspeak-services
        configMap:
          name: cfm-fleetspeak-services
          items:
          - key: services.textproto
            path: server.services.config
---
# Source: grr/templates/deployment/dpl-grr-admin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-admin
  labels:
    app: grr-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-admin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-admin
        prometheus: grr-admin
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-admin
        image: ghcr.io/google/grr:latest
        ports:
        - containerPort: 8000
          name: admin
        - containerPort: 19090
          name: metrics
        args: ["-component", "admin_ui", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-admin-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: cert-volume
          readOnly: true
          mountPath: "/grr/certs"
      volumes:
      - name: grr-admin-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: cert-volume
        secret:
          secretName: sec-grr-executable-signing-cert
---
# Source: grr/templates/deployment/dpl-grr-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-frontend
  labels:
    app: grr-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-frontend
        prometheus: grr-frontend
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-frontend
        image: ghcr.io/google/grr:latest
        ports:
        - containerPort: 11111
          name: frontend
        - containerPort: 19090
          name: metrics
        args: ["-component", "frontend", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-frontend-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: cert-volume
          readOnly: true
          mountPath: "/grr/certs"
      volumes:
      - name: grr-frontend-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: cert-volume
        secret:
          secretName: sec-grr-executable-signing-cert
---
# Source: grr/templates/deployment/dpl-grr-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpl-grr-worker
  labels:
    app: grr-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grr-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grr-worker
        prometheus: grr-worker
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: nodepool
                operator: In
                values:
                - grr
      containers:
      - name: grr-worker
        image: ghcr.io/google/grr:latest
        ports:
        - containerPort: 19090
          name: metrics
        args: ["-component", "worker", "-config", "/usr/src/grr/grr/core/install_data/etc/server.local.yaml", "--logtostderr"]
        volumeMounts:
        - name: grr-worker-config
          mountPath: /usr/src/grr/grr/core/install_data/etc/server.local.yaml
          subPath: server.local.yaml
        - name: cert-volume
          readOnly: true
          mountPath: "/grr/certs"
      volumes:
      - name: grr-worker-config
        secret:
          secretName: sec-grr-server-local
          items:
          - key: server.local.yaml
            path: server.local.yaml
      - name: cert-volume
        secret:
          secretName: sec-grr-executable-signing-cert
