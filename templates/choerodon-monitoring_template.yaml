---
# Source: choerodon-monitoring/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring
---
# Source: choerodon-monitoring/charts/alertmanager/templates/configmap.yaml
apiVersion: v1
data:
  config.yml: |-
    global:
      # ResolveTimeout is the time after which an alert is declared resolved
      # if it has not been updated.
      resolve_timeout: 5m

      # The smarthost and SMTP sender used for mail notifications.
      smtp_smarthost: 'mail.exmail.com:465'
      smtp_from: 'admin@mail.exmail.com'
      smtp_auth_username: 'admin@mail.exmail.com'
      smtp_auth_password: '}'
      smtp_require_tls: false

    # # The directory from which notification templates are read.
    templates:
    - '/etc/alertmanager-templates/*.tmpl'

    # The root route on which each incoming alert enters.
    route:

      # The labels by which incoming alerts are grouped together. For example,
      # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
      # be batched into a single group.

      group_by: ['alertname']

      # When a new group of alerts is created by an incoming alert, wait at
      # least 'group_wait' to send the initial notification.
      # This way ensures that you get multiple alerts for the same group that start
      # firing shortly after another are batched together on the first
      # notification.

      group_wait: 30s

      # When the first notification was sent, wait 'group_interval' to send a batch
      # of new alerts that started firing for that group.

      group_interval: 5m

      # If an alert has successfully been sent, wait 'repeat_interval' to
      # resend them.

      #repeat_interval: 1m
      repeat_interval: 15m

      # A default receiver

      # If an alert isn't caught by a route, send it to default.
      receiver: email_default_alert

      # All the above attributes are inherited by all child routes and can
      # overwritten on each.

      # The child route trees.
      routes:
      - match:
          app: prometheus
        receiver: "email_default_alert"
        continue: true
      - match:
          app: prometheus
        receiver: "email_xxxxx_alert"
    receivers:
    - name: 'email_default_alert'
      webhook_configs:
      - url: "http://ml.hd.wenqi.us/receive"
    - name: 'email_xxxxx_alert'
      webhook_configs:
      - url: "http://ml.hd.wenqi.us/receive"
kind: ConfigMap
metadata:
  name: alertmanager-release-name
---
# Source: choerodon-monitoring/charts/alertmanager/templates/configmap.yaml
apiVersion: v1
data:
  default.tmpl: 
kind: ConfigMap
metadata:
  name: alertmanager-templates-release-name
---
# Source: choerodon-monitoring/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    ##################### Grafana Configuration Example #####################
    #
    # Everything has defaults so you only need to uncomment things you want to
    # change

    # possible values : production, development
    ;app_mode = production

    # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
    ;instance_name = ${HOSTNAME}

    #################################### Paths ####################################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
    ;data = /var/lib/grafana

    # Directory where grafana can store logs
    ;logs = /var/log/grafana

    # Directory where grafana will automatically scan and look for plugins
    ;plugins = /var/lib/grafana/plugins

    # folder that contains provisioning config files that grafana will apply on startup and while running.
    ;provisioning = conf/provisioning

    #################################### Server ####################################
    [server]
    # Protocol (http, https, socket)
    ;protocol = http

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port  to use
    ;http_port = 3000

    # The public facing domain name used to access grafana from a browser
    ;domain = localhost

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false

    # The full public facing url you use in browser, used for redirects and emails
    # If you use reverse proxy and sub path specify full url (with sub path)
    ;root_url = http://localhost:3000

    # Log web requests
    ;router_logging = false

    # the path relative working path
    ;static_root_path = public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    ;cert_file =
    ;cert_key =

    # Unix socket path
    ;socket =

    #################################### Database ####################################
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url properties.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =

    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    ;url =

    # For "postgres" only, either "disable", "require" or "verify-full"
    ;ssl_mode = disable

    # For "sqlite3" only, path relative to data_path setting
    ;path = grafana.db

    # Max idle conn setting default is 2
    ;max_idle_conn = 2

    # Max conn setting default is 0 (mean not set)
    ;max_open_conn =

    # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
    ;conn_max_lifetime = 14400

    # Set to true to log the sql calls and execution times.
    log_queries =

    #################################### Session ####################################
    [session]
    # Either "memory", "file", "redis", "mysql", "postgres", default is "file"
    ;provider = file

    # Provider config options
    # memory: not have any config yet
    # file: session dir path, is relative to grafana data_path
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
    # mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
    # postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
    ;provider_config = sessions

    # Session cookie name
    ;cookie_name = grafana_sess

    # If you use session in https only, default is false
    ;cookie_secure = false

    # Session life time, default is 86400
    ;session_life_time = 86400

    #################################### Data proxy ###########################
    [dataproxy]

    # This enables data proxy logging, default is false
    ;logging = false

    #################################### Analytics ####################################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    ;reporting_enabled = true

    # Set to false to disable all checks to https://grafana.net
    # for new vesions (grafana itself and plugins), check is used
    # in some UI views to notify that grafana or plugin update exists
    # This option does not cause any auto updates, nor send any information
    # only a GET request to http://grafana.com to get latest versions
    ;check_for_updates = true

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    #################################### Security ####################################
    [security]
    # default admin user, created on startup
    ;admin_user = admin

    # default admin password, can be changed before first start of grafana,  or in profile settings
    ;admin_password = admin

    # used for signing
    ;secret_key = SW2YcwTIb9zpOOhoPsMm

    # Auto-login remember days
    ;login_remember_days = 7
    ;cookie_username = grafana_user
    ;cookie_remember_name = grafana_remember

    # disable gravatar profile images
    ;disable_gravatar = false

    # data source proxy whitelist (ip_or_domain:port separated by spaces)
    ;data_source_proxy_whitelist =

    # disable protection against brute force login attempts
    ;disable_brute_force_login_protection = false

    #################################### Snapshots ###########################
    [snapshots]
    # snapshot sharing options
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io

    # remove expired snapshot
    ;snapshot_remove_expired = true

    #################################### Dashboards History ##################
    [dashboards]
    # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
    ;versions_to_keep = 20

    #################################### Users ###############################
    [users]
    # disable user signup / registration
    ;allow_sign_up = true

    # Allow non admin users to create organizations
    ;allow_org_create = true

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Default role new users will be automatically assigned (if disabled above is set to true)
    ;auto_assign_org_role = Viewer

    # Background text for the user field on the login page
    ;login_hint = email or username

    # Default UI theme ("dark" or "light")
    ;default_theme = dark

    # External user management, these options affect the organization users view
    ;external_manage_link_url =
    ;external_manage_link_name =
    ;external_manage_info =

    # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
    ;viewers_can_edit = false

    [auth]
    # Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
    ;disable_login_form = false

    # Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false
    ;disable_signout_menu = false

    # URL to redirect the user to after sign out
    ;signout_redirect_url =

    #################################### Anonymous Auth ##########################
    [auth.anonymous]
    # enable anonymous access
    ;enabled = false

    # specify organization name that should be used for unauthenticated users
    ;org_name = Main Org.

    # specify role for unauthenticated users
    ;org_role = Viewer

    #################################### Github Auth ##########################
    [auth.github]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =

    #################################### Google Auth ##########################
    [auth.google]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =

    #################################### Generic OAuth ##########################
    [auth.generic_oauth]
    ;enabled = false
    ;name = OAuth
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://foo.bar/login/oauth/authorize
    ;token_url = https://foo.bar/login/oauth/access_token
    ;api_url = https://foo.bar/user
    ;team_ids =
    ;allowed_organizations =

    #################################### Grafana.com Auth ####################
    [auth.grafana_com]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true
    ;ldap_sync_ttl = 60
    ;whitelist = 192.168.1.1, 192.168.2.1

    #################################### Basic Auth ##########################
    [auth.basic]
    ;enabled = true

    #################################### Auth LDAP ##########################
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    ;allow_sign_up = true

    #################################### SMTP / Emailing ##########################
    [smtp]

    ;enabled = false
    ;host = localhost:25
    ;user =
    # If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    ;from_name = Grafana
    # EHLO identity in SMTP dialog (defaults to instance_name)
    ;ehlo_identity = dashboard.example.com

    [emails]
    ;welcome_email_on_sign_up = false

    #################################### Logging ##########################
    [log]
    # Either "console", "file", "syslog". Default is console and  file
    # Use space to separate multiple modes, e.g. "console file"
    ;mode = console file

    # Either "debug", "info", "warn", "error", "critical", default is "info"
    ;level = info

    # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
    ;filters =

    # For "console" mode only
    [log.console]
    ;level =

    # log line format, valid options are text, console and json
    ;format = console

    # For "file" mode only
    [log.file]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_size_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    [log.syslog]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
    ;network =
    ;address =

    # Syslog facility. user, daemon and local0 through local7 are valid.
    ;facility =

    # Syslog tag. By default, the process' argv[0] is used.
    ;tag =

    #################################### Alerting ############################
    [alerting]
    # Disable alerting engine & UI features
    ;enabled = true
    # Makes it possible to turn off alert rule execution but alerting UI is visible
    ;execute_alerts = true

    #################################### Explore #############################
    [explore]
    # Enable the Explore section
    ;enabled = false

    #################################### Internal Grafana Metrics ##########################
    # Metrics available at HTTP API Url /metrics
    [metrics]
    # Disable / Enable internal metrics
    ;enabled           = true

    # Publish interval
    ;interval_seconds  = 10

    # Send internal metrics to Graphite
    [metrics.graphite]
    # Enable by setting the address setting (ex localhost:2003)
    ;address =
    ;prefix = prod.grafana.%(instance_name)s.

    #################################### Distributed tracing ############
    [tracing.jaeger]
    # Enable by setting the address sending traces to jaeger (ex localhost:6831)
    ;address = localhost:6831
    # Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
    ;always_included_tag = tag1:value1
    # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
    ;sampler_type = const
    # jaeger samplerconfig param
    # for "const" sampler, 0 or 1 for always false/true respectively
    # for "probabilistic" sampler, a probability between 0 and 1
    # for "rateLimiting" sampler, the number of spans per second
    # for "remote" sampler, param is the same as for "probabilistic"
    # and indicates the initial sampling rate before the actual one
    # is received from the mothership
    ;sampler_param = 1

    #################################### Grafana.com integration  ##########################
    # Url used to to import dashboards directly from Grafana.com
    [grafana_com]
    ;url = https://grafana.com

    #################################### External image storage ##########################
    [external_image_storage]
    # Used for uploading images to public servers so they can be included in slack/email messages.
    # you can choose between (s3, webdav, gcs, azure_blob, local)
    ;provider =

    [external_image_storage.s3]
    ;bucket =
    ;region =
    ;path =
    ;access_key =
    ;secret_key =

    [external_image_storage.webdav]
    ;url =
    ;public_url =
    ;username =
    ;password =

    [external_image_storage.gcs]
    ;key_file =
    ;bucket =
    ;path =

    [external_image_storage.azure_blob]
    ;account_name =
    ;account_key =
    ;container_name =

    [external_image_storage.local]
    # does not require any configuration
---
# Source: choerodon-monitoring/charts/prometheus/templates/configmap.yaml
apiVersion: v1
data:
  prometheus.yaml: |
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager-release-name:9093
        scheme: http
        path_prefix: /
        timeout: 10s
    rule_files:
    - /etc/prometheus-rules/*.rules
    scrape_configs:
    - job_name: kubernetes-pod
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        role: pod
        namespaces:
          names: []
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        separator: ;
        regex: "true"
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        separator: ;
        regex: (https?)
        target_label: __scheme__
        replacement: $1
        action: replace
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        separator: ;
        regex: (.+)(?::\d+);(\d+)
        target_label: __address__
        replacement: $1:$2
        action: replace
      - source_labels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        target_label: pod_name
        replacement: $1
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
    - job_name: kubernetes-pod-java
      metrics_path: /prometheus
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        role: pod
        namespaces:
          names: []
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_choerodon_io_metrics_port]
        separator: ;
        regex: .+
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]
        separator: ;
        regex: .+
        replacement: $1
        action: drop
      - source_labels: [__address__, __meta_kubernetes_pod_label_choerodon_io_metrics_port]
        separator: ;
        regex: (.+)(?::\d+);(\d+)
        target_label: __address__
        replacement: $1:$2
        action: replace
      - source_labels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        target_label: pod_name
        replacement: $1
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
    - job_name: kubernetes-pod-choerodon
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        role: pod
        namespaces:
          names: []
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]
        separator: ;
        regex: .+
        replacement: $1
        action: keep
      - source_labels: [__address__, __meta_kubernetes_pod_label_choerodon_io_metrics_port]
        separator: ;
        regex: (.+)(?::\d+);(\d+)
        target_label: __address__
        replacement: $1:$2
        action: replace
      - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]
        separator: ;
        regex: (.+)
        target_label: __metrics_path__
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        target_label: pod_name
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_node_name]
        separator: ;
        regex: (.+)
        target_label: node_name
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.+)
        target_label: namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_group]
        separator: ;
        regex: (.*)
        target_label: choerodon_group
        replacement: $1
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
    - job_name: kubernetes-pod-redis
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        role: pod
        namespaces:
          names: []
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_group]
        separator: ;
        regex: redis
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_pod_ip]
        separator: ;
        regex: (.*)
        target_label: __address__
        replacement: $1:9121
        action: replace
      - source_labels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        target_label: pod_name
        replacement: $1
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
    - job_name: kubernetes-endpoints
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        role: endpoints
        namespaces:
          names: []
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        separator: ;
        regex: "true"
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        separator: ;
        regex: (https?)
        target_label: __scheme__
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_node_name]
        separator: ;
        regex: (.+)
        target_label: node_name
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        separator: ;
        regex: (.+)
        target_label: __metrics_path__
        replacement: $1
        action: replace
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        separator: ;
        regex: (.+)(?::\d+);(\d+)
        target_label: __address__
        replacement: $1:$2
        action: replace
      - separator: ;
        regex: __meta_kubernetes_service_label_(.+)
        replacement: $1
        action: labelmap
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        target_label: kubernetes_namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: kubernetes_name
        replacement: $1
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
    - job_name: kubernetes-cadvisor
      metrics_path: /metrics
      scheme: https
      kubernetes_sd_configs:
      - api_server: null
        role: node
        namespaces:
          names: []
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: false
      relabel_configs:
      - separator: ;
        regex: __meta_kubernetes_node_label_(.+)
        replacement: $1
        action: labelmap
      - source_labels: [__address__]
        separator: ;
        regex: ([^:;]+):(\d+)
        target_label: __address__
        replacement: ${1}:10250
        action: replace
      - source_labels: [__meta_kubernetes_node_name]
        separator: ;
        regex: (.+)
        target_label: __metrics_path__
        replacement: /metrics/cadvisor
        action: replace
      - source_labels: [__metrics_path__]
        separator: ;
        regex: (.*)
        target_label: cluster
        replacement: default
        action: replace
kind: ConfigMap
metadata:
  name: prometheus-core
---
# Source: choerodon-monitoring/charts/prometheus/templates/configmap.yaml
apiVersion: v1
data:
  portal.rules: |
    groups:
    - name: container_cpu
      rules:
      - record: cpu_irate25s_sum
        expr: sum(irate (container_cpu_usage_seconds_total{image!="",name=~"^k8s_.*", pod_name!="",container_name!="POD"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)
      - record: memory_rss
        expr: sum(container_memory_rss{container_name!="POD",image!="",name=~"^k8s_.*"}) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)
      - record: net_irate25s_receive
        expr: sum(irate( container_network_receive_bytes_total{ image!="",name=~"^k8s_.*"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)
      - record: net_irate25s_transmit
        expr: sum(irate( container_network_receive_bytes_total{ image!="",name=~"^k8s_.*"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)
      - record: fsio_irate25s
        expr: sum(irate(container_fs_io_time_seconds_total{image!="",container_name!="POD", pod_name!=""}[25s])) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)
  host.rules: | 
    groups:
    - name: host_alert
      rules:
      - alert: HighCpuUsage
        expr: 1 - avg(irate(node_cpu{mode="idle"}[25s])) by (node_name) > 0.75
        for: 5m
        annotations:
          summary: Cpu使用率持续5分钟超过75%
kind: ConfigMap
metadata:
  name: prometheus-rules
---
# Source: choerodon-monitoring/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: monitoring-reader
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
# Source: choerodon-monitoring/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: monitoring-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: monitoring-reader
subjects:
- kind: ServiceAccount
  name: monitoring
  namespace: default
---
# Source: choerodon-monitoring/charts/alertmanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-release-name
  labels:
    choerodon.io/metrics-port: "9093"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "alertmanager"
spec:
  type: ClusterIP
  ports:
    - port: 9093
      targetPort: http
      protocol: TCP
      name: http
  selector:
    choerodon.io/release: "release-name"
    choerodon.io/infra: "alertmanager"
---
# Source: choerodon-monitoring/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana
  labels:
    choerodon.io/infra: "grafana"
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    choerodon.io/metrics-port: "3000"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "grafana"
---
# Source: choerodon-monitoring/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  name: release-name-kube-state
  labels:
    choerodon.io/infra: "kube-state-metrics"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    choerodon.io/release: "release-name"
    choerodon.io/infra: "kube-state-metrics"
---
# Source: choerodon-monitoring/charts/prometheus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    choerodon.io/metrics-port: "9090"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "prometheus"
  name: prometheus
spec:
  ports:
  - name: webui
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    choerodon.io/metrics-port: "9090"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "prometheus"
  sessionAffinity: None
---
# Source: choerodon-monitoring/charts/node-exporter/templates/daemonset.yaml
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    choerodon.io/release: "release-name"
    choerodon.io/infra: "node-exporter"
    choerodon.io/logs-parser: "docker"
  name: release-name-node-exporter
spec:
  selector:
    matchLabels:
      choerodon.io/release: "release-name"
      choerodon.io/infra: "node-exporter"
  template:
    metadata:
      annotations:
        choerodon.io/metrics-group: "node"
        choerodon.io/metrics-path: "/metrics"
      labels:
        choerodon.io/release: "release-name"
        choerodon.io/infra: "node-exporter"
      name: node-exporter
    spec:
      containers:
      - image: dockerhub.azk8s.cn/prom/node-exporter:v0.18.1
        imagePullPolicy: IfNotPresent
        name: node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: prom-node-exp
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      hostNetwork: true
      hostPID: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
# Source: choerodon-monitoring/charts/alertmanager/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: release-name-alertmanager
  labels:
    choerodon.io/metrics-port: "9093"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "alertmanager"
    choerodon.io/logs-parser: "docker"
spec:
  replicas: 1
  selector:
    matchLabels:
      choerodon.io/metrics-port: "9093"
      choerodon.io/release: "release-name"
      choerodon.io/infra: "alertmanager"
  template:
    metadata:
      annotations:
        choerodon.io/metrics-group: "alertmanager"
        choerodon.io/metrics-path: "/metrics"
      labels:
        choerodon.io/metrics-port: "9093"
        choerodon.io/release: "release-name"
        choerodon.io/infra: "alertmanager"
    spec:
      initContainers:
        - name: alertmanager-init
          image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/alertmanager:init
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-data
            subPath: alertmanager/config
      containers:
        - name: alertmanager
          image: "registry.cn-hangzhou.aliyuncs.com/choerodon-tools/alertmanager:v0.7.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-data
            subPath: alertmanager/config
          - mountPath: /etc/alertmanager-templates
            name: alertmanager-data
            subPath: alertmanager/templates
          - mountPath: /alertmanager
            name: alertmanager-data
            subPath: alertmanager/data
          ports:
            - name: http
              containerPort: 9093
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      nodeName: 
      volumes:

      - name: alertmanager-data
        emptyDir: {}
---
# Source: choerodon-monitoring/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: release-name-grafana
  labels:
    choerodon.io/metrics-port: "3000"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "grafana"
    choerodon.io/logs-parser: "docker"
spec:
  replicas: 1
  selector:
    matchLabels:
      choerodon.io/metrics-port: "3000"
      choerodon.io/release: "release-name"
      choerodon.io/infra: "grafana"
  template:
    metadata:
      annotations:
        choerodon.io/metrics-group: "grafana"
        choerodon.io/metrics-path: "/metrics"
      labels:
        choerodon.io/metrics-port: "3000"
        choerodon.io/release: "release-name"
        choerodon.io/infra: "grafana"
    spec:
      containers:
        - name: grafana
          image: "registry.cn-shanghai.aliyuncs.com/choerodon/grafana:6.2.2"
          imagePullPolicy: IfNotPresent
          env:
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-data
            subPath: grafana
          - mountPath: /etc/grafana/grafana.ini
            name: grafana-config
            subPath: grafana.ini
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 200m
              memory: 864Mi
            requests:
              cpu: 100m
              memory: 512Mi
      nodeName: 
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
            items: 
            - key: grafana.ini
              path: grafana.ini

        - name: grafana-data
          emptyDir: {}
---
# Source: choerodon-monitoring/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: release-name-kube-state
  labels:
    choerodon.io/release: "release-name"
    choerodon.io/infra: "kube-state-metrics"
    choerodon.io/logs-parser: "docker"
spec:
  replicas: 1
  selector:
    matchLabels:
      choerodon.io/release: "release-name"
      choerodon.io/infra: "kube-state-metrics"
  template:
    metadata:
      labels:
        choerodon.io/release: "release-name"
        choerodon.io/infra: "kube-state-metrics"
    spec:
      serviceAccountName: monitoring
      containers:
      - name: kube-state-metrics
        image: "gcr.azk8s.cn/google_containers/kube-state-metrics:v1.7.1"
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
            limits:
              cpu: 100m
              memory: 228Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: choerodon-monitoring/charts/prometheus/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-prometheus
  labels:
    choerodon.io/metrics-port: "9090"
    choerodon.io/release: "release-name"
    choerodon.io/infra: "prometheus"
    choerodon.io/logs-parser: "docker"
spec:
  replicas: 1
  selector:
    matchLabels:
      choerodon.io/metrics-port: "9090"
      choerodon.io/release: "release-name"
      choerodon.io/infra: "prometheus"
  template:
    metadata:
      annotations:
        choerodon.io/metrics-group: "prometheus"
        choerodon.io/metrics-path: "/metrics"
      labels:
        choerodon.io/metrics-port: "9090"
        choerodon.io/release: "release-name"
        choerodon.io/infra: "prometheus"
      name: prometheus-core
    spec:
      initContainers:
        - name: prometheus-init
          image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/prometheus:init
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /configmap/prometheus
            name: config-volume
          - mountPath: /configmap/prometheus-rules
            name: rules-volume
          - mountPath: /etc/prometheus
            name: data
            subPath: prometheus/config
          - mountPath: /etc/prometheus-rules
            name: data
            subPath: prometheus/rules
          - mountPath: /var/data
            name: data
            subPath: prometheus/data
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yaml
        - --web.external-url=http://prometheus.example.com
        - --storage.tsdb.path=/var/data
        - --storage.tsdb.retention=14d
        - --web.enable-lifecycle
        image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/prometheus:v2.2.1
        imagePullPolicy: IfNotPresent
        name: prometheus
        ports:
        - containerPort: 9090
          name: webui
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus
          name: data
          subPath: prometheus/config
        - mountPath: /etc/prometheus-rules
          name: data
          subPath: prometheus/rules
        - mountPath: /var/data
          name: data
          subPath: prometheus/data
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 500m
            memory: 4G
          requests:
            cpu: 100m
            memory: 2G
      - name: watch-rules
        image: weaveworks/watch:master-5b2a6e5
        imagePullPolicy: IfNotPresent
        args: ["-v", "-t", "-p=/etc/prometheus-rules", "curl", "-X", "POST", "--fail", "-o", "-", "-sS", "http://localhost:9090/-/reload"]
        volumeMounts:
        - mountPath: /etc/prometheus-rules
          name: data
          subPath: prometheus/rules
      - name: watch-core
        image: weaveworks/watch:master-5b2a6e5
        imagePullPolicy: IfNotPresent
        args: ["-v", "-t", "-p=/etc/prometheus", "curl", "-X", "POST", "--fail", "-o", "-", "-sS", "http://localhost:9090/-/reload"]
        volumeMounts:
        - mountPath: /etc/prometheus
          name: data
          subPath: prometheus/config
      restartPolicy: Always
      serviceAccountName: monitoring
      nodeName: 
      volumes:
      - configMap:
          defaultMode: 420
          name: prometheus-core
        name: config-volume
      - configMap:
          defaultMode: 420
          name: prometheus-rules
        name: rules-volume

      - name: data
        emptyDir: {}
