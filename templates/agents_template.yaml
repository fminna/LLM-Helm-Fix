---
# Source: agents/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: agents-mysql
      app.kubernetes.io/instance: release-name
  ingress:
    # Allow inbound connections
    - ports:
        - port: 3306
---
# Source: agents/charts/scribe/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
  ingress:
    # Allow inbound connections
    - ports:
        - port: 3306
    # Allow prometheus scrapes
    - ports:
        - port: 9104
---
# Source: agents/charts/jaeger/templates/allinone-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-jaeger
  labels:
    helm.sh/chart: jaeger-0.69.1
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.42.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: all-in-one
---
# Source: agents/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: agents-mysql
---
# Source: agents/charts/omnirpc/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agents-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: agents/charts/scribe/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: scribe-mysql
---
# Source: agents/charts/scribe/charts/omnirpc/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scribe-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: agents/charts/scribe/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: executor-scribe
  labels:
    helm.sh/chart: scribe-0.2.16
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: agents/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-agents
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: agents/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "TXlzcWxQYXNzd29yZA=="
  mysql-password: "b3U1anE2eE5hWA=="
---
# Source: agents/charts/scribe/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "TXlzcWxQYXNzd29yZA=="
  mysql-password: "Tld3SXdVUHdiRA=="
---
# Source: agents/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: agents/charts/omnirpc/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: agents-omnirpc-release-name
  labels:
    app: agents-omnirpc
    chart: "omnirpc"
    release: release-name
    heritage: Helm
data:
  config.yml: |-
    client_type: resty
    chains:
      1:
        rpcs:
          - https://eth.llamarpc.com
        confirmations: 1
---
# Source: agents/charts/scribe/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: agents/charts/scribe/charts/omnirpc/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scribe-omnirpc-release-name
  labels:
    app: scribe-omnirpc
    chart: "omnirpc"
    release: release-name
    heritage: Helm
data:
  config.yml: |-
    client_type: resty
    chains:
      1:
        rpcs:
          - https://eth.llamarpc.com
        confirmations: 1
---
# Source: agents/charts/scribe/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: executor-scribe-release-name
  labels:
    app: executor-scribe
    chart: "scribe"
    release: release-name
    heritage: Helm
data:
  config.yaml: |-
    chains:
      - chain_id: 137
        required_confirmations: 50
        contract_sub_chunk_size: 20000
        contract_chunk_size: 20000
        store_concurrency: 100
        store_concurrency_threshold: 50000
        contracts:
          - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
            start_block: 40189736
          - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
            start_block: 40189736
      - chain_id: 10
        required_confirmations: 50
        store_concurrency: 1
        store_concurrency_threshold: 500
        contracts:
          - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
            start_block: 79864523
          - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
            start_block: 79864305
          - address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
            start_block: 79864192
      - chain_id: 43114
        required_confirmations: 50
        contract_sub_chunk_size: 2000
        contract_chunk_size: 10000
        contracts:
          - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
            start_block: 27262747
          - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
            start_block: 27262744
    rpc_url: http://scribe-omnirpc/confirmations
    refresh_rate: 0
---
# Source: agents/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-agents-release-name
  labels:
    app: agents
    chart: "agents"
    release: "release-name"
    heritage: Helm
data:
  executor_config.yaml: |-
    execute_interval: 5
    summit_chain_id: 10
    summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
    chains:
      - chain_id: 137
        temp_rpc: "https://rpc.interoperability.institute/confirmations/1/rpc/137"
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
      - chain_id: 10
        temp_rpc: "https://mainnet.optimism.io"
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
      - chain_id: 43114
        temp_rpc: "https://api.avax.network/ext/bc/C/rpc"
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
    unbonded_signer:
      type: "File"
      file: "/config/executor_signer.txt"
  executor_signer.txt: 16c909570a212af6a328a1cf594a20d7cf6edf56fafa0b50967f2039b1f68445
  notary_config1.yaml: |-
    refresh_interval_seconds: 10
    domains:
      domain_client1:
        domain_id: 137
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://rpc.interoperability.institute/confirmations/1/rpc/137"
        start_height: 39145588
      domain_client2:
        domain_id: 10
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://mainnet.optimism.io"
        start_height: 73536295
      domain_client3:
        domain_id: 43114
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://api.avax.network/ext/bc/C/rpc"
        start_height: 26091228
    summit_domain_id: 10
    domain_id: 43114
    unbonded_signer:
      type: "File"
      file: "/config/notary_signer1.txt"
    bonded_signer:
      type: "File"
      file: "/config/notary_signer1.txt"
    embedded_scribe_config:
      chains:
        - chain_id: 137
          required_confirmations: 50
          contract_sub_chunk_size: 1000
          contract_chunk_size: 1000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 40189736
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 40189736
        - chain_id: 10
          required_confirmations: 50
          contract_sub_chunk_size: 500
          contract_chunk_size: 500
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 79864523
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 79864305
            - address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
              start_block: 79864192
        - chain_id: 43114
          required_confirmations: 50
          contract_sub_chunk_size: 2000
          contract_chunk_size: 10000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 27262747
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 27262744
      rpc_url: "https://rpc.interoperability.institute/confirmations"
      refresh_rate: 0
  notary_config2.yaml: |-
    refresh_interval_seconds: 10
    domains:
      domain_client1:
        domain_id: 137
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://rpc.interoperability.institute/confirmations/1/rpc/137"
        start_height: 39145588
      domain_client2:
        domain_id: 10
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://mainnet.optimism.io"
        start_height: 73536295
      domain_client3:
        domain_id: 43114
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://api.avax.network/ext/bc/C/rpc"
        start_height: 26091228
    summit_domain_id: 10
    domain_id: 137
    unbonded_signer:
      type: "File"
      file: "/config/notary_signer2.txt"
    bonded_signer:
      type: "File"
      file: "/config/notary_signer2.txt"
    embedded_scribe_config:
      chains:
        - chain_id: 137
          required_confirmations: 50
          contract_sub_chunk_size: 1000
          contract_chunk_size: 1000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 40189736
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 40189736
        - chain_id: 10
          required_confirmations: 50
          contract_sub_chunk_size: 500
          contract_chunk_size: 500
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 79864523
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 79864305
            - address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
              start_block: 79864192
        - chain_id: 43114
          required_confirmations: 50
          contract_sub_chunk_size: 2000
          contract_chunk_size: 10000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 27262747
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 27262744
      rpc_url: "https://rpc.interoperability.institute/confirmations"
      refresh_rate: 0
  notary_config3.yaml: |-
    refresh_interval_seconds: 10
    domains:
      domain_client1:
        domain_id: 137
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://rpc.interoperability.institute/confirmations/1/rpc/137"
        start_height: 39145588
      domain_client2:
        domain_id: 10
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://mainnet.optimism.io"
        start_height: 73536295
      domain_client3:
        domain_id: 43114
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://api.avax.network/ext/bc/C/rpc"
        start_height: 26091228
    summit_domain_id: 10
    domain_id: 10
    unbonded_signer:
      type: "File"
      file: "/config/notary_signer3.txt"
    bonded_signer:
      type: "File"
      file: "/config/notary_signer3.txt"
    embedded_scribe_config:
      chains:
        - chain_id: 137
          required_confirmations: 50
          contract_sub_chunk_size: 1000
          contract_chunk_size: 1000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 40189736
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 40189736
        - chain_id: 10
          required_confirmations: 50
          contract_sub_chunk_size: 500
          contract_chunk_size: 500
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 79864523
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 79864305
            - address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
              start_block: 79864192
        - chain_id: 43114
          required_confirmations: 50
          contract_sub_chunk_size: 2000
          contract_chunk_size: 10000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 27262747
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 27262744
      rpc_url: "https://rpc.interoperability.institute/confirmations"
      refresh_rate: 0
  notary_signer1.txt: 04486fc4ef3f3fb489c9f4ed4ff07cb9aa998abc0a244f2464c76164bcfad41d
  notary_signer2.txt: 479cc41efe8ccb6dd3fd96951db601beacd7bdade60e6dbd8ae6fab02020cf92
  notary_signer3.txt: 2633f34da513bb717df6262fb5db89aa4db081a44c1d9ffc30ee38941dd58c0b
  guard_config.yaml: |-
    refresh_interval_seconds: 10
    scribe_port: 443
    scribe_url: "https://scribe.interoperability.institute"
    domains:
      domain_client1:
        domain_id: 137
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://rpc.interoperability.institute/confirmations/1/rpc/137"
        start_height: 39145588
      domain_client2:
        domain_id: 10
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://mainnet.optimism.io"
        start_height: 73536295
      domain_client3:
        domain_id: 43114
        type: EVM
        required_confirmations: 50
        origin_address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
        summit_address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
        destination_address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
        rpc_url: "https://api.avax.network/ext/bc/C/rpc"
        start_height: 26091228
    summit_domain_id: 10
    domain_id: 0
    unbonded_signer:
      type: "File"
      file: "/config/guard_signer.txt"
    bonded_signer:
      type: "File"
      file: "/config/guard_signer.txt"
    embedded_scribe_config:
      chains:
        - chain_id: 137
          required_confirmations: 50
          contract_sub_chunk_size: 1000
          contract_chunk_size: 1000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 40189736
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 40189736
        - chain_id: 10
          required_confirmations: 50
          contract_sub_chunk_size: 500
          contract_chunk_size: 500
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 79864523
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 79864305
            - address: 0x128fF47f1a614c61beC9935898C33B91486aA04e
              start_block: 79864192
        - chain_id: 43114
          required_confirmations: 50
          contract_sub_chunk_size: 2000
          contract_chunk_size: 10000
          store_concurrency: 1
          store_concurrency_threshold: 500
          contracts:
            - address: 0xF3773BE7cb59235Ced272cF324aaeb0A4115280f
              start_block: 27262747
            - address: 0xde5BB62aBCF588EC200674757EDB2f6889aCd065
              start_block: 27262744
      rpc_url: "https://rpc.interoperability.institute/confirmations"
      refresh_rate: 0
  guard_signer.txt: dd03ef81893502797024462da191deaf1e90f30879b3b7673acb11ce72f73094
---
# Source: agents/charts/jaeger/templates/allinone-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-jaeger-agent
  labels:
    helm.sh/chart: jaeger-0.69.1
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.42.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: service-agent
spec:
  clusterIP: None
  ports:
    - name: zk-compact-trft
      port: 5775
      protocol: UDP
      targetPort: 0
    - name: config-rest
      port: 5778
      targetPort: 0
    - name: jg-compact-trft
      port: 6831
      protocol: UDP
      targetPort: 0
    - name: jg-binary-trft
      port: 6832
      protocol: UDP
      targetPort: 0
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: all-in-one
---
# Source: agents/charts/jaeger/templates/allinone-collector-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-jaeger-collector
  labels:
    helm.sh/chart: jaeger-0.69.1
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.42.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: service-collector
spec:
  clusterIP: None
  ports:
    - name: http-zipkin
      port: 9411
      targetPort: 0
    - name: grpc-http
      port: 14250
      targetPort: 0
    - name: c-tchan-trft
      port: 14267
      targetPort: 0
    - name: http-c-binary-trft
      port: 14268
      targetPort: 0
    - name: otlp-grpc
      port: 4317
      targetPort: 0
    - name: otlp-http
      port: 4318
      targetPort: 0
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: all-in-one
---
# Source: agents/charts/jaeger/templates/allinone-query-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-jaeger-query
  labels:
    helm.sh/chart: jaeger-0.69.1
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.42.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: service-query
spec:
  clusterIP: None
  ports:
    - name: http-query
      port: 16686
      targetPort: 16686
    - name: grpc-query
      port: 16685
      targetPort: 16685
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: all-in-one
---
# Source: agents/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: agents-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: agents-mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: agents/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: agents-mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: agents/charts/omnirpc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: agents-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 5080
    - name: prometheus
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
---
# Source: agents/charts/scribe/charts/mysql/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: scribe-mysql-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9104'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 9104
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
---
# Source: agents/charts/scribe/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: scribe-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: agents/charts/scribe/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: agents/charts/scribe/charts/omnirpc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scribe-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 5080
    - name: prometheus
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
---
# Source: agents/charts/scribe/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: executor-scribe
  labels:
    helm.sh/chart: scribe-0.2.16
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 5080
  selector:
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    scribe-type: server
---
# Source: agents/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-agents
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
---
# Source: agents/charts/jaeger/templates/allinone-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-jaeger
  labels:
    helm.sh/chart: jaeger-0.69.1
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.42.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: all-in-one
    prometheus.io/port: "14269"
    prometheus.io/scrape: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: all-in-one
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: all-in-one
      annotations:
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
    spec:
      containers:
        - env:
            - name: SPAN_STORAGE_TYPE
              value: memory
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: :9411
            - name: JAEGER_DISABLED
              value: "false"
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
          image: jaegertracing/all-in-one:1.42.0
          imagePullPolicy: IfNotPresent
          name: jaeger
          args:
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
              protocol: TCP
            - containerPort: 16686
              protocol: TCP
            - containerPort: 16685
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
            - containerPort: 4317
              protocol: TCP
            - containerPort: 4318
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      serviceAccountName: release-name-jaeger
---
# Source: agents/charts/omnirpc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agents-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: omnirpc
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: d6bbc9c07520f63d112b6462af88202ccfcff078d248e4a4849b2871c10a01e2
      labels:
        app.kubernetes.io/name: omnirpc
        app.kubernetes.io/instance: release-name
        
    spec:
      serviceAccountName: agents-omnirpc
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
      containers:
        - name: omnirpc
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/omnirpc:latest"
          imagePullPolicy: Always
          args:
            - server
            - --port=5080
            - --config=/config/config.yml
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          ports:
            - containerPort: 5080
              name: http
            - containerPort: 8080
              name: prometheus
          livenessProbe:
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            httpGet:
              path: /health-check
              port: http
          resources:
            {}
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: agents-omnirpc-release-name
---
# Source: agents/charts/scribe/charts/omnirpc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scribe-omnirpc
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: omnirpc
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 521451319412b44e6832cfd671fbff70c26bee509aef1e4730fa1da3e675ec42
      labels:
        app.kubernetes.io/name: omnirpc
        app.kubernetes.io/instance: release-name
        
    spec:
      serviceAccountName: scribe-omnirpc
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
      containers:
        - name: omnirpc
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/omnirpc:latest"
          imagePullPolicy: Always
          args:
            - server
            - --port=5080
            - --config=/config/config.yml
          env:
            - name: GOLOG_LOG_FMT
              value: json
          ports:
            - containerPort: 5080
              name: http
            - containerPort: 8080
              name: prometheus
          livenessProbe:
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            httpGet:
              path: /health-check
              port: http
          resources:
            {}
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: scribe-omnirpc-release-name
---
# Source: agents/charts/scribe/templates/indexer_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor-scribe-indexer
  labels:
    helm.sh/chart: scribe-0.2.16
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scribe
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 0e86fec824b6b95ab176402b6183b4afed1d6b998a7fb1592196953f08d0f488
      labels:
        app.kubernetes.io/name: scribe
        app.kubernetes.io/instance: release-name
        
        scribe-type: indexer
    spec:
      serviceAccountName: executor-scribe
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp -v /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: scribe-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: scribe-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - bash
          - -c
          - until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute="CREATE
            DATABASE IF NOT EXISTS scribe"; do 'echo waiting for db'; sleep 10; done
          env:
          - name: POD_NAME
            value: scribe-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: mysql/mysql-server:latest
          imagePullPolicy: IfNotPresent
          name: create-database-scribe
      containers:
        - name: scribe
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/scribe:6e3887fc2a05aff0d159453cedbfbe5024b910bf"
          imagePullPolicy: Always
          args:
            - scribe
            - --db=mysql
            - --path=root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true
            - --config=/config/config.yaml
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: executor-scribe-release-name
---
# Source: agents/charts/scribe/templates/server_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor-scribe-server
  labels:
    helm.sh/chart: scribe-0.2.16
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scribe
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 0e86fec824b6b95ab176402b6183b4afed1d6b998a7fb1592196953f08d0f488
      labels:
        app.kubernetes.io/name: scribe
        app.kubernetes.io/instance: release-name
        
        scribe-type: server
    spec:
      serviceAccountName: executor-scribe
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp -v /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: scribe-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: scribe-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - bash
          - -c
          - until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute="CREATE
            DATABASE IF NOT EXISTS scribe"; do 'echo waiting for db'; sleep 10; done
          env:
          - name: POD_NAME
            value: scribe-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: mysql/mysql-server:latest
          imagePullPolicy: IfNotPresent
          name: create-database-scribe
      containers:
        - name: scribe
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/scribe:6e3887fc2a05aff0d159453cedbfbe5024b910bf"
          imagePullPolicy: Always
          args:
            - server
            - --port=5080
            - --db=mysql
            - --path=root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true
            - --omnirpc=http://scribe-omnirpc
          ports:
            - containerPort: 5080
              name: http
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          livenessProbe:
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            httpGet:
              path: /health-check
              port: http
          volumeMounts:
            - name: configmap
              mountPath: /config
          resources:
            {}
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: executor-scribe-release-name
---
# Source: agents/templates/executor_remote_fresh_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-agents-executor
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: agents
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agents
        app.kubernetes.io/instance: release-name
        
        type: "agents"
    spec:
      serviceAccountName: release-name-agents
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: [ 'sh', '-c', 'cp -v /configmap/* /config/' ]
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: agents-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: agents-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - bash
          - -c
          - until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword -e'CREATE DATABASE
            IF NOT EXISTS agents;'; do 'echo waiting for db'; sleep 1; done
          env:
          - name: POD_NAME
            value: agents-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: mysql/mysql-server:latest
          imagePullPolicy: IfNotPresent
          name: create-database-agents
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for scribe...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: executor-scribe
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-scribe
      containers:
        - name: agents
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/agents:6e3887fc2a05aff0d159453cedbfbe5024b910bf"
          imagePullPolicy: Always
          args:
            - executor-run
            - --config=/config/executor_config.yaml
            - --metrics-port=5080
            - --scribe-type=remote
            - --db=mysql
            - --path=root:MysqlPassword@tcp(agents-mysql:3306)/agents?parseTime=true
            - --scribe-port=80
            - --scribe-url=executor-scribe.$(POD_NAMESPACE)
          ports:
            - name: http
              containerPort: 5080
              protocol: TCP
          resources:
            {}
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          livenessProbe:
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 20
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: { }
        - name: configmap
          configMap:
            name: release-name-agents-release-name
---
# Source: agents/templates/guard_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-agents-guard
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: agents
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agents
        app.kubernetes.io/instance: release-name
        
        type: "agents"
    spec:
      serviceAccountName: release-name-agents
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: [ 'sh', '-c', 'cp -v /configmap/* /config/' ]
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: agents-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
      containers:
        - name: agents
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/agents:6e3887fc2a05aff0d159453cedbfbe5024b910bf"
          imagePullPolicy: Always
          args:
            - guard-run
            - --config=/config/guard_config.yaml
            - --metrics-port=5082
          ports:
            - name: http
              containerPort: 5082
              protocol: TCP
          resources:
            {}
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          livenessProbe:
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 20
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: { }
        - name: configmap
          configMap:
            name: release-name-agents-release-name
---
# Source: agents/templates/notary_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-agents-notary
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: agents
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agents
        app.kubernetes.io/instance: release-name
        
        type: "agents"
    spec:
      serviceAccountName: release-name-agents
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: [ 'sh', '-c', 'cp -v /configmap/* /config/' ]
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: agents-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: agents-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for scribe...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: executor-scribe
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-scribe
      containers:
        - name: agents
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/agents:6e3887fc2a05aff0d159453cedbfbe5024b910bf"
          imagePullPolicy: Always
          args:
            - notary-run
            - --config=/config/notary_config1.yaml
            - --metrics-port=5080
            - --scribe-type=remote
            - --scribe-port=80
            - --scribe-url=executor-scribe.$(POD_NAMESPACE)
          ports:
            - name: http
              containerPort: 5080
              protocol: TCP
          resources:
            {}
          env:
            - name: GOLOG_LOG_FMT
              value: json
            - name: GOLOG_LOG_LEVEL
              value: error
            - name: GOMEMLIMIT
              value: 2GiB
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_HANDLER
              value: jaeger
            - name: JAEGER_ENDPOINT
              value: http://agents-devnet-jaeger-collector:14268/api/traces
          livenessProbe:
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 20
            timeoutSeconds: 30
            httpGet:
              path: /health-check
              port: http
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: { }
        - name: configmap
          configMap:
            name: release-name-agents-release-name
---
# Source: agents/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: agents-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: agents-mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: agents-mysql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: agents-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 56002e2f491ac1eb514a5151d4e2fea4bffc52ad91673f59ce8fece885fb17ee
      labels:
        app.kubernetes.io/name: agents-mysql
        helm.sh/chart: mysql-9.3.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: agents-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: agents-mysql
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.30-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: agents-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "agents"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: agents-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: agents-mysql
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: agents/charts/scribe/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scribe-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: scribe-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: e8b77da3664c7bb0d55ef9983f69017fe9e1e9aecbe4c04cde32d4d8ad4bbd8d
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.3.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: scribe-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.30-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: scribe-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "scribe"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
        - name: metrics
          image: docker.io/bitnami/mysqld-exporter:0.14.0-debian-11-r33
          imagePullPolicy: "IfNotPresent"
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: scribe-mysql
                  key: mysql-root-password
          command:
            - /bin/bash
            - -ec
            - |
              password_aux="${MYSQL_ROOT_PASSWORD:-}"
              if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                  password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
              fi
              DATA_SOURCE_NAME="root:${password_aux}@(localhost:3306)/" /bin/mysqld_exporter
          ports:
            - name: metrics
              containerPort: 9104
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /metrics
              port: metrics
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: config
          configMap:
            name: scribe-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: agents/charts/omnirpc/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "agents-omnirpc-test-connection"
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['agents-omnirpc:80/health-check']
  restartPolicy: Never
---
# Source: agents/charts/scribe/charts/omnirpc/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "scribe-omnirpc-test-connection"
  labels:
    helm.sh/chart: omnirpc-0.2.92
    app.kubernetes.io/name: omnirpc
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['scribe-omnirpc:80/health-check']
  restartPolicy: Never
---
# Source: agents/charts/scribe/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "executor-scribe-test-connection"
  labels:
    helm.sh/chart: scribe-0.2.16
    app.kubernetes.io/name: scribe
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['executor-scribe:80/health-check']
  restartPolicy: Never
---
# Source: agents/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-agents-test-connection"
  labels:
    helm.sh/chart: agents-0.1.30
    app.kubernetes.io/name: agents
    app.kubernetes.io/instance: release-name
    
    type: "agents"
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-agents:80/health-check']
  restartPolicy: Never
