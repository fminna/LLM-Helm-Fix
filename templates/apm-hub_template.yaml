---
# Source: apm-hub/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-apm-hub-sa
  labels:
    helm.sh/chart: apm-hub-0.0.47
    app.kubernetes.io/name: apm-hub
    app.kubernetes.io/instance: release-name
    control-plane: apm-hub
    app.kubernetes.io/version: "0.0.47"
    app.kubernetes.io/managed-by: Helm
---
# Source: apm-hub/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: apm-hub-role
rules:
  - apiGroups:
      - ""
    resources:
      - "services"
      - "namespaces"
      - "nodes"
      - "pods"
      - "pods/log"
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
      - "extensions"
    resources:
      - "deployments"
    verbs:
      - get
      - list
      - watch
  # For operator
  - apiGroups:
    - apm-hub.flanksource.com
    resources:
    - loggingbackends
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apm-hub.flanksource.com
    resources:
    - loggingbackends/status
    verbs:
    - get
---
# Source: apm-hub/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-apm-hub-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: apm-hub-role
subjects:
  - kind: ServiceAccount
    name: release-name-apm-hub-sa
    namespace: default
---
# Source: apm-hub/templates/postgres.yaml
# PostgreSQL StatefulSet Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
# Source: apm-hub/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: apm-hub
  labels:
    helm.sh/chart: apm-hub-0.0.47
    app.kubernetes.io/name: apm-hub
    app.kubernetes.io/instance: release-name
    control-plane: apm-hub
    app.kubernetes.io/version: "0.0.47"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: apm-hub
    app.kubernetes.io/instance: release-name
    control-plane: apm-hub
---
# Source: apm-hub/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apm-hub
  labels:
    helm.sh/chart: apm-hub-0.0.47
    app.kubernetes.io/name: apm-hub
    app.kubernetes.io/instance: release-name
    control-plane: apm-hub
    app.kubernetes.io/version: "0.0.47"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apm-hub
      app.kubernetes.io/instance: release-name
      control-plane: apm-hub
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apm-hub
        app.kubernetes.io/instance: release-name
        control-plane: apm-hub
    spec:
      serviceAccountName: release-name-apm-hub-sa
      containers:
        - name: apm-hub
          image: "docker.io/flanksource/apm-hub:v0.0.47"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 200Mi
          command:
            - /app/apm-hub
          args:
            - operator
            - -vvv
          env:
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: 
                  key: DB_URL
---
# Source: apm-hub/templates/postgres.yaml
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: postgresql
  selector:
    matchLabels:
      app: postgresql
  replicas: 1
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:14
        volumeMounts:
          - name: postgresql
            mountPath: /data
        envFrom:
          - secretRef:
              name: 
    volumeClaimTemplates:
    - metadata:
        name: postgresql
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: 
        resources:
          requests:
            storage:
---
# Source: apm-hub/templates/postgres.yaml
---
---
# Source: apm-hub/templates/logging-backends.yaml
apiVersion: apm-hub.flanksource.com/v1
kind: LoggingBackend
metadata:
  name: kubernetes
spec:
  backends:
  - kubernetes:
      routes:
      - type: KubernetesPod
      - type: KubernetesNode
