---
# Source: mission-control-argocd/templates/argocd.yaml
apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: argocd
spec:
  icon: argo
  type: Topology
  schedule: "@every 5m"
  components:
    - name: Controllers
      icon: pod
      selectors:
        - types:
            - Kubernetes::Pod
          labelSelector: 'namespace=argocd'
    - name: Application
      icon: argo
      components:
      - name: Application Component
        type: lookup
        lookup:
          catalog:
            - selector:
                - types: ['Kubernetes::Application']
              display:
                expr: |
                  dyn(results).map(c, {
                    'name': c.name,
                    'namespace': c.tags['namespace'],
                    'icon': 'Argo',
                    'type': 'Application',
                    'configs': [{"id": c.id}],
                    'status': c.status,
                    'status_reason': has(c.description) ? c.description : '',
                    'selectors': [{'labelSelector': 'argocd.argoproj.io/instance='+c.name}],
                    'properties': [
                      {'name': 'Message', 'text': c.config.status.sync.status},
                      {'name': 'Revision', 'text': c.config.status.sync.revision, 'headline': true},
                    ],
                    'components': c.config.status.resources.map(r, {
                      "name": r.name,
                      "icon": r.kind,
                      "type": r.kind,
                      'configs': [{
                        "types": ["Kubernetes::"+ r.kind],
                        "namespace": r.namespace,
                        "name": r.name,
                      }],
                      "status": r.health.status.toLower(),
                    })
                  }).toJSON()
    - name: AppProject
      icon: argo
      components:
      - name: AppProject Component
        type: lookup
        lookup:
          catalog:
            - selector:
                - types: ['Kubernetes::AppProject']
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'icon': 'argo',
                    'type': 'Kubernetes::AppProject',
                    'namespace': r.config.metadata.namespace,
                    'status': r.status,
                    'status_reason': has(r.description) ? r.description : '',
                    'selectors': [{'labelSelector': 'argocd.argoproj.io/instance='+r.name}],
                    'configs': [{'name': r.name, 'namespace': r.config.metadata.namespace, 'type': 'Kubernetes::AppProject'}],
                    'properties': [
                      {'name': 'Source Repos', 'text': r.config.spec.sourceRepos.toJSON()},
                    ],
                  }).toJSON()
