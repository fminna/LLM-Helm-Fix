---
# Source: feeds/charts/feeds-db/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-feeds-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: feeds-db
    helm.sh/chart: feeds-db-12.5.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "MHduakpCZUhoZQ=="
  password: "YW5jaG9yZS1wb3N0Z3JlcywxMjM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: feeds/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-feeds
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
type: Opaque
stringData:
  ANCHORE_FEEDS_DB_NAME: "anchore-feeds"
  ANCHORE_FEEDS_DB_USER: "anchore-feeds"
  ANCHORE_FEEDS_DB_PASSWORD: "anchore-postgres,123"
  ANCHORE_FEEDS_DB_HOST: "release-name-feeds-db"
  ANCHORE_FEEDS_DB_PORT: "5432"
---
# Source: feeds/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-feeds
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
data:
  config.yaml: |
    # Anchore Feeds Service Configuration File, mounted from a configmap
    #
    service_dir: ${ANCHORE_SERVICE_DIR}
    tmp_dir: ${ANCHORE_FEEDS_TMP_DIR}
    log_level: ${ANCHORE_LOG_LEVEL} # Deprecated - prefer use of logging.log_level
    
    logging:
      colored_logging: false
      exception_backtrace_logging: false
      exception_diagnose_logging: false
      file_retention_rule: 10
      file_rotation_rule: 10 MB
      log_level: INFO
      server_access_logging: true
      server_log_level: info
      server_response_debug_logging: false
      structured_logging: false
    
    server:
      max_connection_backlog: 2048
      max_wsgi_middleware_worker_count: 50
      max_wsgi_middleware_worker_queue_size: 100
      timeout_graceful_shutdown: false
      timeout_keep_alive: 5
    
    host_id: "${ANCHORE_HOST_ID}"
    internal_ssl_verify: ${ANCHORE_INTERNAL_SSL_VERIFY}
    
    global_client_connect_timeout: ${ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT}
    global_client_read_timeout: ${ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT}
    server_request_timeout_seconds: ${ANCHORE_GLOBAL_SERVER_REQUEST_TIMEOUT_SEC}
    
    license_file: ${ANCHORE_LICENSE_FILE}
    auto_restart_services: false
    
    max_source_import_size_mb: ${ANCHORE_MAX_IMPORT_SOURCE_SIZE_MB}
    max_import_content_size_mb: ${ANCHORE_MAX_IMPORT_CONTENT_SIZE_MB}
    max_compressed_image_size_mb: ${ANCHORE_MAX_COMPRESSED_IMAGE_SIZE_MB}
    
    metrics:
      enabled: ${ANCHORE_ENABLE_METRICS}
      auth_disabled: true
    
    keys:
      secret: ${ANCHORE_SAML_SECRET}
      public_key_path: ${ANCHORE_AUTH_PRIVKEY}
      private_key_path: ${ANCHORE_AUTH_PUBKEY}
    
    user_authentication:
      hashed_passwords: ${ANCHORE_AUTH_ENABLE_HASHED_PASSWORDS}
      sso_require_existing_users: ${ANCHORE_SSO_REQUIRES_EXISTING_USERS}
      oauth:
        enabled: ${ANCHORE_OAUTH_ENABLED}
        default_token_expiration_seconds: ${ANCHORE_OAUTH_TOKEN_EXPIRATION}
        refresh_token_expiration_seconds: ${ANCHORE_OAUTH_REFRESH_TOKEN_EXPIRATION}
    
    credentials:
      database:
        user: "${ANCHORE_FEEDS_DB_USER}"
        password: "${ANCHORE_FEEDS_DB_PASSWORD}"
        host: "${ANCHORE_FEEDS_DB_HOST}"
        port: "${ANCHORE_FEEDS_DB_PORT}"
        name: "${ANCHORE_FEEDS_DB_NAME}"
        db_connect_args:
          timeout: ${ANCHORE_FEEDS_DB_TIMEOUT}
          ssl: ${ANCHORE_FEEDS_DB_SSL}
        db_pool_size: ${ANCHORE_FEEDS_DB_POOL_SIZE}
        db_pool_max_overflow: ${ANCHORE_FEEDS_DB_POOL_MAX_OVERFLOW}
    
    services:
      feeds:
        enabled: true
        require_auth: true
        endpoint_hostname: ${ANCHORE_ENDPOINT_HOSTNAME}
        listen: '0.0.0.0'
        port: ${ANCHORE_PORT}
        max_request_threads: ${ANCHORE_MAX_REQUEST_THREADS}
        ssl_enable: ${ANCHORE_SSL_ENABLED}
        ssl_cert: ${ANCHORE_SSL_CERT}
        ssl_key: ${ANCHORE_SSL_KEY}
        cycle_timers:
          driver_sync: 7200
        local_workspace: ${ANCHORE_FEEDS_LOCAL_WORKSPACE}
        workspace_preload:
          enabled: ${ANCHORE_FEEDS_WORKSPACE_PRELOAD}
          workspace_preload_file: ${ANCHORE_FEEDS_LOCAL_WORKSPACE}/data.tar.gz
        api_only: ${ANCHORE_FEEDS_API_ONLY}
        drivers:
          amzn:
            enabled: ${ANCHORE_FEEDS_DRIVER_AMAZON_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_AMAZON_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_AMAZON_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_AMAZON_PROVIDER_IMPORT_RESULTS_PATH}"
          alpine:
            enabled: ${ANCHORE_FEEDS_DRIVER_ALPINE_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_ALPINE_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_ALPINE_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_ALPINE_PROVIDER_IMPORT_RESULTS_PATH}"
          centos:
            enabled: false
          debian:
            enabled: ${ANCHORE_FEEDS_DRIVER_DEBIAN_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_DEBIAN_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_DEBIAN_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_DEBIAN_PROVIDER_IMPORT_RESULTS_PATH}"
          ol:
            enabled: ${ANCHORE_FEEDS_DRIVER_OL_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_ORACLE_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_ORACLE_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_ORACLE_PROVIDER_IMPORT_RESULTS_PATH}"
          ubuntu:
            enabled: ${ANCHORE_FEEDS_DRIVER_UBUNTU_ENABLED}
            git_url: ${ANCHORE_FEEDS_DRIVER_UBUNTU_URL}
            git_branch: ${ANCHORE_FEEDS_DRIVER_UBUNTU_BRANCH}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_UBUNTU_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_UBUNTU_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_UBUNTU_PROVIDER_IMPORT_RESULTS_PATH}"
          rhel:
            enabled: ${ANCHORE_FEEDS_DRIVER_RHEL_ENABLED}
            concurrency: ${ANCHORE_FEEDS_DRIVER_RHEL_CONCURRENCY}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_RHEL_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_RHEL_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_RHEL_PROVIDER_IMPORT_RESULTS_PATH}"
          npm:
            enabled: ${ANCHORE_FEEDS_DRIVER_NPM_ENABLED}
          gem:
            enabled: ${ANCHORE_FEEDS_DRIVER_GEM_ENABLED}
          nvdv2:
            enabled: ${ANCHORE_FEEDS_DRIVER_NVDV2_ENABLED}
            api_key: ${ANCHORE_NVD_API_KEY}
            overrides:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_NVD_PROVIDER_OVERRIDES_ENABLED}"
              url: "${ANCHORE_ENTERPRISE_FEEDS_NVD_PROVIDER_OVERRIDES_URL}"
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_NVD_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_NVD_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_NVD_PROVIDER_IMPORT_RESULTS_PATH}"
          mariner:
            enabled: ${ANCHORE_FEEDS_DRIVER_MARINER_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_MARINER_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_MARINER_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_MARINER_PROVIDER_IMPORT_RESULTS_PATH}"
          msrc:
            enabled: ${ANCHORE_FEEDS_DRIVER_MSRC_ENABLED}
          github:
            enabled: ${ANCHORE_FEEDS_DRIVER_GITHUB_ENABLED}
            token: ${ANCHORE_GITHUB_TOKEN}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_GITHUB_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_GITHUB_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_GITHUB_PROVIDER_IMPORT_RESULTS_PATH}"
          grypedb:
            enabled: ${ANCHORE_FEEDS_DRIVER_GRYPEDB_ENABLED}
            external_feeds_url: ${ANCHORE_FEEDS_EXTERNAL_URL}
            preload:
              enabled: ${ANCHORE_FEEDS_GRYPEDB_PRELOAD_ENABLED}
              workspace_archive_path: ${ANCHORE_FEEDS_GRYPEDB_PRELOAD_PATH}
            persist_provider_workspaces: ${ANCHORE_FEEDS_GRYPEDB_PERSIST_WORKSPACE}
            restore_provider_workspaces: ${ANCHORE_FEEDS_GRYPEDB_RESTORE_WORKSPACE}
          sles:
            enabled: ${ANCHORE_FEEDS_DRIVER_SLES_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_SLES_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_SLES_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_SLES_PROVIDER_IMPORT_RESULTS_PATH}"
          anchore_match_exclusions:
            enabled: ${ANCHORE_FEEDS_DRIVER_MATCH_EXCLUSIONS}
          wolfi:
            enabled: ${ANCHORE_FEEDS_DRIVER_WOLFI_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_WOLFI_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_WOLFI_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_WOLFI_PROVIDER_IMPORT_RESULTS_PATH}"
          chainguard:
            enabled: ${ANCHORE_FEEDS_DRIVER_CHAINGUARD_ENABLED}
            import_results:
              enabled: "${ANCHORE_ENTERPRISE_FEEDS_CHAINGUARD_PROVIDER_IMPORT_RESULTS_ENABLED}"
              host: "${ANCHORE_ENTERPRISE_FEEDS_CHAINGUARD_PROVIDER_IMPORT_RESULTS_HOST}"
              path: "${ANCHORE_ENTERPRISE_FEEDS_CHAINGUARD_PROVIDER_IMPORT_RESULTS_PATH}"
---
# Source: feeds/templates/envvars_configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-feeds-config-env-vars
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
data:
  ANCHORE_AUTH_ENABLE_HASHED_PASSWORDS: "false"
  ANCHORE_AUTH_PRIVKEY: "null"
  ANCHORE_AUTH_PUBKEY: "null"
  ANCHORE_CLI_URL: "http://localhost:8228"
  ANCHORE_CLI_USER: "admin"
  ANCHORECTL_URL: "http://localhost:8228"
  ANCHORECTL_USERNAME: "admin"
  ANCHORE_DISABLE_METRICS_AUTH: "false"
  ANCHORE_ENABLE_METRICS: "false"
  ANCHORE_FEEDS_API_ONLY: "false"
  ANCHORE_FEEDS_DB_POOL_MAX_OVERFLOW: "100"
  ANCHORE_FEEDS_DB_POOL_SIZE: "30"
  ANCHORE_FEEDS_DB_SSL: "false"
  ANCHORE_FEEDS_DB_SSL_MODE: "require"
  ANCHORE_FEEDS_DB_SSL_ROOT_CERT: "null"
  ANCHORE_FEEDS_DB_TIMEOUT: "120"
  ANCHORE_FEEDS_DRIVER_ALPINE_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_AMAZON_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_CHAINGUARD_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_DEBIAN_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_GEM_ENABLED: "false"
  ANCHORE_FEEDS_DRIVER_GITHUB_ENABLED: "false"
  ANCHORE_FEEDS_DRIVER_GRYPEDB_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_MARINER_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_MATCH_EXCLUSIONS: "true"
  ANCHORE_FEEDS_DRIVER_MSRC_ENABLED: "false"
  ANCHORE_FEEDS_DRIVER_NPM_ENABLED: "false"
  ANCHORE_FEEDS_DRIVER_NVDV2_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_OL_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_RHEL_CONCURRENCY: "5"
  ANCHORE_FEEDS_DRIVER_RHEL_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_SLES_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_UBUNTU_ENABLED: "true"
  ANCHORE_FEEDS_DRIVER_UBUNTU_URL: "https://git.launchpad.net/ubuntu-cve-tracker"
  ANCHORE_FEEDS_DRIVER_UBUNTU_BRANCH: "master"
  ANCHORE_FEEDS_DRIVER_WOLFI_ENABLED: "true"
  ANCHORE_FEEDS_EXTERNAL_URL: "http://release-name-feeds:8448/v2/"
  ANCHORE_FEEDS_LOCAL_WORKSPACE: "/workspace"
  ANCHORE_FEEDS_GRYPEDB_PRELOAD_ENABLED: "true"
  ANCHORE_FEEDS_GRYPEDB_PRELOAD_PATH: "/preload/grype-db-workspace.tar.gz"
  ANCHORE_FEEDS_GRYPEDB_PERSIST_WORKSPACE: "true"
  ANCHORE_FEEDS_GRYPEDB_RESTORE_WORKSPACE: "true"
  ANCHORE_FEEDS_PACKAGES_ENABLED: "false"
  ANCHORE_FEEDS_TMP_DIR: "/anchore_scratch"
  ANCHORE_FEEDS_WORKSPACE_PRELOAD: "true"
  ANCHORE_GITHUB_TOKEN: "default-unset"
  ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT: "0"
  ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT: "0"
  ANCHORE_GLOBAL_SERVER_REQUEST_TIMEOUT_SEC: "180"
  ANCHORE_INTERNAL_SSL_VERIFY: "false"
  ANCHORE_LICENSE_FILE: "/home/anchore/license.yaml"
  ANCHORE_LOG_LEVEL: "INFO"
  ANCHORE_MAX_COMPRESSED_IMAGE_SIZE_MB: "-1"
  ANCHORE_MAX_IMPORT_CONTENT_SIZE_MB: "100"
  ANCHORE_MAX_IMPORT_SOURCE_SIZE_MB: "100"
  ANCHORE_MAX_REQUEST_THREADS: "50"
  ANCHORE_NVD_API_KEY: "null"
  ANCHORE_OAUTH_ENABLED: "false"
  ANCHORE_OAUTH_TOKEN_EXPIRATION: "3600"
  ANCHORE_OAUTH_REFRESH_TOKEN_EXPIRATION: "86400"
  ANCHORE_SAML_SECRET: "null"
  ANCHORE_SERVICE_DIR: "/anchore_service"
  ANCHORE_SSL_ENABLED: "false"
  ANCHORE_SSL_CERT: "null"
  ANCHORE_SSL_KEY: "null"
  ANCHORE_SSO_REQUIRES_EXISTING_USERS: "false"
---
# Source: feeds/templates/scripts_configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-feeds-scripts
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
data:
  
  anchore-config: |
    #!/bin/bash
    while IFS= read -r line; do
      while [[ "$line" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]]; do
        VAR_NAME=${BASH_REMATCH[1]#*\{}; VAR_NAME=${VAR_NAME%\}};
        line=${line//${BASH_REMATCH[1]}/${!VAR_NAME}};
      done;
      printf '%s\n' "$line";
    done < /config/config.yaml
---
# Source: feeds/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-feeds
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    
    "helm.sh/resource-policy": keep
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "40Gi"
---
# Source: feeds/charts/feeds-db/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-feeds-db-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: feeds-db
    helm.sh/chart: feeds-db-12.5.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: feeds-db
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: feeds/charts/feeds-db/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-feeds-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: feeds-db
    helm.sh/chart: feeds-db-12.5.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: feeds-db
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: feeds/templates/deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-feeds
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
  ports:
    - name: feeds-api
      port: 8448
      targetPort: 8448
      protocol: TCP
---
# Source: feeds/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-feeds
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    {}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name-feeds
      app.kubernetes.io/component: feeds
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name-feeds
        app.kubernetes.io/component: feeds
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 5.5.0
        app.kubernetes.io/part-of: anchore
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: feeds-2.5.0
      annotations:
        
        checksum/secrets: 4358259020668a9c0ec7f3d7341ece5e79bb207d9fd8d35685c2542d5c8a756d
        checksum/feeds-config: 3df52753372ec7b6cf82ab80c6020f55df1dbf2490902eb054260ee3240beeaa
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      imagePullSecrets:
        - name: anchore-enterprise-pullcreds
      containers:
        - name: "feeds-feeds"
          image: docker.io/anchore/enterprise:v5.5.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            -  /docker-entrypoint.sh anchore-enterprise-manager service start --no-auto-upgrade feeds
          ports:
            - containerPort: 8448
              name: feeds-api
          envFrom:
            - configMapRef:
                name: release-name-feeds-config-env-vars
            - secretRef:
                name: release-name-feeds
          env:
            
            - name: ANCHORE_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ANCHORE_ENDPOINT_HOSTNAME
              value: release-name-feeds.default.svc.cluster.local
            - name: ANCHORE_PORT
              value: "8448"
          volumeMounts:
            - name: data
              mountPath: /workspace
              subPath: feeds-workspace
            - name: config-volume
              mountPath: /config/config.yaml
              subPath: config.yaml
            - name: "anchore-scratch"
              mountPath: /anchore_scratch
            - name: anchore-license
              mountPath: /home/anchore/license.yaml
              subPath: license.yaml
            - name: anchore-scripts
              mountPath: /scripts
          livenessProbe:
            httpGet:
              path: /health
              port: feeds-api
              scheme: HTTP
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: feeds-api
              scheme: HTTP
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-feeds
        - name: config-volume
          configMap:
            name: release-name-feeds
        - name: anchore-scripts
          configMap:
            name: release-name-feeds-scripts
            defaultMode: 0755
        - name: "anchore-scratch"
          emptyDir: {}
        - name: anchore-license
          secret:
            secretName: anchore-enterprise-license
---
# Source: feeds/charts/feeds-db/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-feeds-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: feeds-db
    helm.sh/chart: feeds-db-12.5.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-feeds-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: feeds-db
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-feeds-db
      labels:
        app.kubernetes.io/name: feeds-db
        helm.sh/chart: feeds-db-12.5.9
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: feeds-db
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13.11.0-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "anchore-feeds"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-feeds-db
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-feeds-db
                  key: password
            - name: POSTGRES_DB
              value: "anchore-feeds"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "anchore-feeds" -d "dbname=anchore-feeds" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "anchore-feeds" -d "dbname=anchore-feeds" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: feeds/templates/hooks/pre-upgrade/upgrade_rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-feeds-upgrade-sa
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
---
# Source: feeds/templates/hooks/pre-upgrade/upgrade_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-feeds-upgrade-role
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
rules:
  - apiGroups:
      - extensions
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - apps
    resources:
      - deployments/scale
    verbs:
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - watch
      - list
      - get
---
# Source: feeds/templates/hooks/pre-upgrade/upgrade_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-feeds-upgrade-role-binding
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-feeds-upgrade-role
subjects:
  - kind: ServiceAccount
    name: release-name-feeds-upgrade-sa
    namespace: default
---
# Source: feeds/templates/hooks/pre-upgrade/upgrade_job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-feeds-550-upgrade
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-feeds
    app.kubernetes.io/component: feeds
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.5.0
    app.kubernetes.io/part-of: anchore
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: feeds-2.5.0
  annotations:
    
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: release-name-feeds-550-upgrade
      labels:
        app.kubernetes.io/name: release-name-feeds
        app.kubernetes.io/component: feeds
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 5.5.0
        app.kubernetes.io/part-of: anchore
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: feeds-2.5.0
      annotations:
        {}
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      serviceAccountName: release-name-feeds-upgrade-sa
      imagePullSecrets:
        - name: anchore-enterprise-pullcreds
      restartPolicy: Never
      initContainers:
        - name: scale-down-anchore
          image: bitnami/kubectl:1.27
          command: ["/bin/bash", "-c"]
          args:
            - |
              kubectl scale deployments --all --replicas=0 -l app.kubernetes.io/name=release-name-feeds;
              while [[ $(kubectl get pods -l app.kubernetes.io/name=release-name-feeds --field-selector=status.phase=Running --no-headers | tee /dev/stderr | wc -l) -gt 0 ]]; do
                echo 'waiting for pods to go down...' && sleep 5;
              done
        - name: wait-for-db
          image: docker.io/anchore/enterprise:v5.5.0
          imagePullPolicy: IfNotPresent
          env:
            
            - name: ANCHORE_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ANCHORE_ENDPOINT_HOSTNAME
              value: release-name-feeds.default.svc.cluster.local
            - name: ANCHORE_PORT
              value: "8448"
          command: ["/bin/bash", "-c"]
          args:
            - |
              while true; do
                CONNSTR=postgresql://"${ANCHORE_FEEDS_DB_USER}":"${ANCHORE_FEEDS_DB_PASSWORD}"@"${ANCHORE_FEEDS_DB_HOST}":"${ANCHORE_FEEDS_DB_PORT}"/"${ANCHORE_FEEDS_DB_NAME}"
                if [[ ${ANCHORE_FEEDS_DB_SSL_MODE} != null ]]; then
                  CONNSTR=${CONNSTR}?sslmode=${ANCHORE_FEEDS_DB_SSL_MODE}
                fi
                if [[ ${ANCHORE_FEEDS_DB_SSL_ROOT_CERT} != null ]]; then
                  CONNSTR=${CONNSTR}\&sslrootcert=${ANCHORE_FEEDS_DB_SSL_ROOT_CERT}
                fi
                err=$(anchore-enterprise-manager db --db-connect ${CONNSTR} pre-upgrade-check 2>&1 > /dev/null)
                if [[ !$err ]]; then
                  echo "Database is ready"
                  exit 0
                fi
                echo "Database is not ready yet, sleeping 10 seconds..."
                sleep 10
              done
      containers:
        - name: upgrade-feeds-db
          image: docker.io/anchore/enterprise:v5.5.0
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-feeds-config-env-vars
            - secretRef:
                name: release-name-feeds
          env:
            
            - name: ANCHORE_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ANCHORE_ENDPOINT_HOSTNAME
              value: release-name-feeds.default.svc.cluster.local
            - name: ANCHORE_PORT
              value: "8448"
          volumeMounts:
          command: ["/bin/bash", "-c"]
          args:
            - |
               anchore-enterprise-manager db --db-connect postgresql://"${ANCHORE_FEEDS_DB_USER}":"${ANCHORE_FEEDS_DB_PASSWORD}"@"${ANCHORE_FEEDS_DB_HOST}":"${ANCHORE_FEEDS_DB_PORT}"/"${ANCHORE_FEEDS_DB_NAME}" upgrade --dontask;
