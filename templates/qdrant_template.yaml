---
# Source: qdrant/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config-template
  namespace: "default"
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm

data:
  production.yaml: |-
    debug: false
    log_level: INFO

    service:
      host: 0.0.0.0
      http_port: 6333
      grpc_port: 6334
  config.yaml: |-
    storage:
      # Where to store all the data
      storage_path: ./storage

      # Where to store snapshots
      snapshots_path: ./snapshots

      # If true - point's payload will not be stored in memory.
      # It will be read from the disk every time it is requested.
      # This setting saves RAM by (slightly) increasing the response time.
      # Note: those payload values that are involved in filtering and are indexed - remain in RAM.
      on_disk_payload: true

      # Write-ahead-log related configuration
      wal:
        # Size of a single WAL segment
        wal_capacity_mb: 32

        # Number of WAL segments to create ahead of actual data requirement
        wal_segments_ahead: 0

      # Normal node - receives all updates and answers all queries
      node_type: "Normal"

      # Listener node - receives all updates, but does not answer search/read queries
      # Useful for setting up a dedicated backup node
      # node_type: "Listener"

      performance:
        # Number of parallel threads used for search operations. If 0 - auto selection.
        max_search_threads: 0
        # Max total number of threads, which can be used for running optimization processes across all collections.
        # Note: Each optimization thread will also use `max_indexing_threads` for index building.
        # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`
        max_optimization_threads: 1

      optimizers:
        # The minimal fraction of deleted vectors in a segment, required to perform segment optimization
        deleted_threshold: 0.2

        # The minimal number of vectors in a segment, required to perform segment optimization
        vacuum_min_vector_number: 1000

        # Target amount of segments optimizer will try to keep.
        # Real amount of segments may vary depending on multiple parameters:
        #  - Amount of stored points
        #  - Current write RPS
        #
        # It is recommended to select default number of segments as a factor of the number of search threads,
        # so that each segment would be handled evenly by one of the threads.
        # If `default_segment_number = 0`, will be automatically selected by the number of available CPUs
        default_segment_number: 0

        # Do not create segments larger this size (in KiloBytes).
        # Large segments might require disproportionately long indexation times,
        # therefore it makes sense to limit the size of segments.
        #
        # If indexation speed have more priority for your - make this parameter lower.
        # If search speed is more important - make this parameter higher.
        # Note: 1Kb = 1 vector of size 256
        # If not set, will be automatically selected considering the number of available CPUs.
        max_segment_size_kb: null

        # Maximum size (in KiloBytes) of vectors to store in-memory per segment.
        # Segments larger than this threshold will be stored as read-only memmaped file.
        # To enable memmap storage, lower the threshold
        # Note: 1Kb = 1 vector of size 256
        # If not set, mmap will not be used.
        memmap_threshold_kb: null

        # Maximum size (in KiloBytes) of vectors allowed for plain index.
        # Default value based on https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md
        # Note: 1Kb = 1 vector of size 256
        indexing_threshold_kb: 20000

        # Interval between forced flushes.
        flush_interval_sec: 5

        # Max number of threads, which can be used for optimization per collection.
        # Note: Each optimization thread will also use `max_indexing_threads` for index building.
        # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`
        # If `max_optimization_threads = 0`, optimization will be disabled.
        max_optimization_threads: 1

      # Default parameters of HNSW Index. Could be overridden for each collection individually
      hnsw_index:
        # Number of edges per node in the index graph. Larger the value - more accurate the search, more space required.
        m: 16
        # Number of neighbours to consider during the index building. Larger the value - more accurate the search, more time required to build index.
        ef_construct: 100
        # Minimal size (in KiloBytes) of vectors for additional payload-based indexing.
        # If payload chunk is smaller than `full_scan_threshold_kb` additional indexing won't be used -
        # in this case full-scan search should be preferred by query planner and additional indexing is not required.
        # Note: 1Kb = 1 vector of size 256
        full_scan_threshold_kb: 10000
        # Number of parallel threads used for background index building. If 0 - auto selection.
        max_indexing_threads: 0
        # Store HNSW index on disk. If set to false, index will be stored in RAM. Default: false
        on_disk: false
        # Custom M param for hnsw graph built for payload index. If not set, default M will be used.
        payload_m: null

    service:

      # Maximum size of POST data in a single request in megabytes
      max_request_size_mb: 32

      # Number of parallel workers used for serving the api. If 0 - equal to the number of available cores.
      # If missing - Same as storage.max_search_threads
      max_workers: 0

      # Host to bind the service on
      host: 0.0.0.0

      # HTTP port to bind the service on
      http_port: 6333

      # gRPC port to bind the service on.
      # If `null` - gRPC is disabled. Default: null
      grpc_port: 6334
      # Uncomment to enable gRPC:
      # grpc_port: 6334

      # Enable CORS headers in REST API.
      # If enabled, browsers would be allowed to query REST endpoints regardless of query origin.
      # More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
      # Default: true
      enable_cors: true

    cluster:
      # Use `enabled: true` to run Qdrant in distributed deployment mode
      enabled: true

      # Configuration of the inter-cluster communication
      p2p:
        # Port for internal communication between peers
        port: 6335

      # Configuration related to distributed consensus algorithm
      consensus:
        # How frequently peers should ping each other.
        # Setting this parameter to lower value will allow consensus
        # to detect disconnected nodes earlier, but too frequent
        # tick period may create significant network and CPU overhead.
        # We encourage you NOT to change this parameter unless you know what you are doing.
        tick_period_ms: 100


    # Set to true to prevent service from sending usage statistics to the developers.
    # Read more: https://qdrant.tech/documentation/telemetry
    telemetry_disabled: false
---
# Source: qdrant/templates/scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-scripts
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
data:
  setup.sh: |-
    #!/usr/bin/env bash
    
    IDX=${KB_POD_NAME##*-}
    HOSTNAME=$(eval echo \$KB_QDRANT_"${IDX}"_HOSTNAME).${KB_NAMESPACE}.svc${CLUSTER_DOMAIN}
    BOOTSTRAP_HOSTNAME=$(eval echo \$KB_QDRANT_0_HOSTNAME).${KB_NAMESPACE}.svc${CLUSTER_DOMAIN}
    
    if [ "$IDX" == "0" ]; then
      ./qdrant --uri "http://${HOSTNAME}:6335"
    else
      echo "BOOTSTRAP_HOSTNAME: ${BOOTSTRAP_HOSTNAME}"
      until ./tools/curl http://${BOOTSTRAP_HOSTNAME}:6333/cluster; do
        echo "INFO: wait for bootstrap node starting..."
        sleep 1;
      done
      ./qdrant --bootstrap "http://${BOOTSTRAP_HOSTNAME}:6335" --uri "http://${HOSTNAME}:6335"
    fi
    
  pre-stop.sh: |-
    #!/usr/bin/env bash
    
    set -x
    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
    
    curl=/qdrant/tools/curl
    jq=/qdrant/tools/jq
    
    idx=${KB_POD_NAME##*-}
    current_component_replicas=$(cat /etc/annotations/component-replicas)
    local_uri=http://localhost:6333
    
    cluster_info=`$curl -s ${local_uri}/cluster`
    local_peer_id=`echo "${cluster_info}"| $jq -r .result.peer_id`
    leader_peer_id=`echo "${cluster_info}" | $jq -r .result.raft_info.leader`
    
    move_shards() {
        cols=`$curl -s ${local_uri}/collections`
        col_count=`echo ${cols} | $jq -r '.result.collections | length'`
        if [[ ${col_count} -eq 0 ]]; then
            echo "no collections found in the cluster"
            return
        fi
        col_names=`echo ${cols} | $jq -r '.result.collections[].name'`
        for col_name in ${col_names}; do
            col_cluster_info=`$curl -s ${local_uri}/collections/${col_name}/cluster`
            col_shard_count=`echo ${col_cluster_info} | $jq -r '.result.local_shards[] | length'`
            if [[ ${col_shard_count} -eq 0 ]]; then
                echo "no shards found in collection ${col_name}"
                continue
            fi
    
            local_shard_ids=`echo ${col_cluster_info} | $jq -r '.result.local_shards[].shard_id'`
            for shard_id in ${local_shard_ids}; do
                echo "move shard ${shard_id} in col_name ${col_name} from ${local_peer_id} to ${leader_peer_id}"
                $curl -s -X POST -H "Content-Type: application/json" \
                    -d '{"move_shard":{"shard_id": '${shard_id}',"to_peer_id": '${leader_peer_id}',"from_peer_id": '${local_peer_id}}}'' \
                    ${local_uri}/collections/${col_name}/cluster
            done
    
            while true; do
                col_cluster_info=`$curl -s ${local_uri}/collections/${col_name}/cluster`
                local_shard_ids=`echo ${col_cluster_info} | $jq -r '.result.local_shards[].shard_id'`
                if [ -z "${local_shard_ids}" ]; then
                    echo "all shards in collection ${col_name} has been moved"
                    break
                fi
                sleep 1
            done
        done
    }
    
    remove_peer() {
    #    declare -A peer_to_uri=()
    #    peer_ids="`echo ${cluster_info} | jq -r '.result.peers | keys'`"
    #    for peer_id in "${peer_ids[@]}"; do
    #        peer_uri=`echo ${cluster_info} | jq -r ".result.peers.${peer_id}.uri"`
    #        peer_to_uri[peer_id]=peer_uri
    #    done
    
        echo "remove local peer ${local_peer_id} from cluster"
        $curl -v -XDELETE ${local_uri}/cluster/peer/${local_peer_id}
    }
    
    if [ ! "$idx" -lt "$current_component_replicas" ] && [ "$current_component_replicas" -ne 0 ]; then
        echo "scaling in, we need to move local shards to other peers and remove local peer from the cluster"
    
        echo "cluster info: ${cluster_info}"
    
        move_shards
    
        remove_peer
    else
        # stop, do nothing.
        echo "stop, do nothing"
    fi
  member-leave.sh: |-
    #!/usr/bin/env sh
    
    set -x
    set -o errtrace
    set -o nounset
    set -o pipefail
    
    leave_peer_uri=http://${KB_LEAVE_MEMBER_POD_IP}:6333
    cluster_info=`curl -s ${leave_peer_uri}/cluster`
    leave_peer_id=`echo "${cluster_info}"| jq -r .result.peer_id`
    leader_peer_id=`echo "${cluster_info}" | jq -r .result.raft_info.leader`
    
    move_shards() {
        cols=`curl -s ${leave_peer_uri}/collections`
        col_count=`echo ${cols} | jq -r '.result.collections | length'`
        if [[ ${col_count} -eq 0 ]]; then
            echo "no collections found in the cluster"
            return
        fi
        col_names=`echo ${cols} | jq -r '.result.collections[].name'`
        for col_name in ${col_names}; do
            col_cluster_info=`curl -s ${leave_peer_uri}/collections/${col_name}/cluster`
            col_shard_count=`echo ${col_cluster_info} | jq -r '.result.local_shards[] | length'`
            if [[ ${col_shard_count} -eq 0 ]]; then
                echo "no shards found in collection ${col_name}"
                continue
            fi
    
            leave_shard_ids=`echo ${col_cluster_info} | jq -r '.result.local_shards[].shard_id'`
            for shard_id in ${leave_shard_ids}; do
                echo "move shard ${shard_id} in col_name ${col_name} from ${leave_peer_id} to ${leader_peer_id}"
                curl -s -X POST -H "Content-Type: application/json" \
                    -d '{"move_shard":{"shard_id": '${shard_id}',"to_peer_id": '${leader_peer_id}',"from_peer_id": '${leave_peer_id}}}'' \
                    ${leave_peer_uri}/collections/${col_name}/cluster
            done
    
            while true; do
                col_cluster_info=`curl -s ${leave_peer_uri}/collections/${col_name}/cluster`
                leave_shard_ids=`echo ${col_cluster_info} | jq -r '.result.local_shards[].shard_id'`
                if [ -z "${leave_shard_ids}" ]; then
                    echo "all shards in collection ${col_name} has been moved"
                    break
                fi
                sleep 1
            done
        done
    }
    
    remove_peer() {
        echo "remove peer ${leave_peer_id} from cluster"
        curl -v -XDELETE ${leave_peer_uri}/cluster/peer/${leave_peer_id}
    }
    
    leave_member() {
        echo "scaling in, we need to move local shards to other peers and remove local peer from the cluster"
        echo "cluster info: ${cluster_info}"
        move_shards
        remove_peer
    }
    
    # lock file to prevent concurrent leave_member
    # flock will return 1 if the lock is already held by another process, this is expected
    (
      flock -n -x 9
      if [ $? != 0 ]; then
        echo "member is already in leaving"
        exit 1
      fi
      set -o errexit && leave_member
    ) 9>/var/lock/qdrant-leave-member-lock
---
# Source: qdrant/templates/actionset-datafile.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  name: qdrant-snapshot
  labels:
    clusterdefinition.kubeblocks.io/name: qdrant
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  backupType: Full
  env:
    - name: DATA_DIR
      value: /qdrant/storage/
  backup:
    preBackup: []
    postBackup: []
    backupData:
      image: docker.io/apecloud/curl-jq:latest
      runOnTargetPodNode: false
      command:
      # no bash available in the image
      - sh
      - -c
      - |
        #!/usr/bin/env bash
        
        set -e
        set -o pipefail
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
        
        # if the script exits with a non-zero exit code, touch a file to indicate that the backup failed,
        # the sync progress container will check this file and exit if it exists
        function handle_exit() {
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "failed with exit code $exit_code"
            touch "${DP_BACKUP_INFO_FILE}.exit"
            exit 1
          fi
        }
        trap handle_exit EXIT
        
        function save_backup_size() {
            export DATASAFED_BACKEND_BASE_PATH="$(dirname $DP_BACKUP_BASE_PATH)"
            TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
            echo "{\"totalSize\":\"$TOTAL_SIZE\"}" >"${DP_BACKUP_INFO_FILE}"
        }
        
        endpoint=http://${DP_DB_HOST}:6333
        collectionRes=$(curl ${endpoint}/collections)
        collections=$(echo ${collectionRes}  | jq -r '.result.collections[].name')
        if [ -z $collections ]; then
           save_backup_size
           exit 0
        fi
        # snapshot all collections
        for c in ${collections}; do
          echo "INFO: start to snapshot collection ${c}..."
          snapshot=$(curl -XPOST ${endpoint}/collections/${c}/snapshots)
          status=$(echo ${snapshot} | jq '.status')
          if [ "${status}" != "ok" ] && [ "${status}" != "\"ok\"" ]; then
            echo "backup failed, status: ${status}"
            exit 1
          fi
          name=$(echo ${snapshot} | jq -r '.result.name')
          curl -v --fail-with-body ${endpoint}/collections/${c}/snapshots/${name} | datasafed push - "/${c}.snapshot"
          curl -XDELETE ${endpoint}/collections/${c}/snapshots/${name}
          echo "INFO: snapshot collection ${c} successfully."
        done
        save_backup_size
        
      syncProgress:
        enabled: true
        intervalSeconds: 5
  restore:
    postReady:
    - job:
        image: docker.io/apecloud/curl-jq:latest
        runOnTargetPodNode: false
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          
          set -e
          set -o pipefail
          export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          
          SNAPSHOT_DIR="${DATA_DIR}/_dp_snapshots"
          mkdir -p "${SNAPSHOT_DIR}"
          for snapshot in $(datasafed list /) ; do
            collection_name=${snapshot%.*}
            echo "INFO: start to restore collection ${collection_name}..."
            # download snapshot file
            datasafed pull "${snapshot}" "${SNAPSHOT_DIR}/${snapshot}"
            curl -X POST "http://${DP_DB_HOST}:6333/collections/${collection_name}/snapshots/upload?priority=snapshot" \
              -H 'Content-Type:multipart/form-data' \
              -F "snapshot=@${SNAPSHOT_DIR}/${snapshot}"
            echo "upload collection ${collection_name} successfully"
          done
---
# Source: qdrant/templates/backuppolicytemplate.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: BackupPolicyTemplate
metadata:
  name: qdrant-backup-policy-template
  labels:
    clusterdefinition.kubeblocks.io/name: qdrant
    service-kind/qdrant: "true"
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: qdrant
  backupPolicies:
  - componentDefRef: qdrant
    target:
      role: ""
      strategy: All
    backupMethods: &backupMethods
    - name: datafile
      snapshotVolumes: false
      actionSetName: qdrant-snapshot
      targetVolumes:
        volumeMounts:
        - name: data
          mountPath: /qdrant/storage
    - name: volume-snapshot
      snapshotVolumes: true
      targetVolumes:
        volumes:
        - data
    schedules: &backupSchedules
    - backupMethod: datafile
      enabled: false
      cronExpression: "0 18 * * 0"
      retentionPeriod: 7d
    - backupMethod: volume-snapshot
      enabled: false
      cronExpression: "0 18 * * 0"
      retentionPeriod: 7d
  - componentDefs:
    - qdrant
    target:
      role: ""
      strategy: All
    backupMethods: *backupMethods
    schedules: *backupSchedules
---
# Source: qdrant/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: qdrant
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: qdrant
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-qdrant)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-qdrant)"
  componentDefs:
    - name: qdrant
      workloadType: Stateful
      characterType: qdrant
      probes:
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: 6333
      logConfigs:
      scriptSpecs:
      - name: qdrant-scripts
        templateRef: qdrant-scripts
        namespace: default
        volumeName: scripts
        defaultMode: 0555
      configSpecs:
        - name: qdrant-config-template
          templateRef: qdrant-config-template
          constraintRef: qdrant-config-constraints
          volumeName: qdrant-config
          namespace: default
      service:
        ports:
          - name: tcp-qdrant
            port: 6333
            targetPort: tcp-qdrant
          - name: grpc-qdrant
            port: 6334
            targetPort: grpc-qdrant
      volumeTypes:
        - name: data
          type: data
      podSpec:
        securityContext:
          fsGroup: 1001
        initContainers:
        - name: qdrant-tools
          command:
          - /bin/sh
          - -c
          - |
            cp /bin/jq /qdrant/tools/jq
            cp /bin/curl /qdrant/tools/curl
          imagePullPolicy: IfNotPresent
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /qdrant/tools
            name: tools
        containers:
          - name: qdrant
            imagePullPolicy: IfNotPresent
            securityContext:
              runAsUser: 0
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: tcp-qdrant
                scheme: HTTP
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 10
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  consensus_status=`/qdrant/tools/curl -s http://localhost:6333/cluster | /qdrant/tools/jq -r .result.consensus_thread_status.consensus_thread_status`
                  if [ "$consensus_status" != "working" ]; then
                    echo "consensus stopped"
                    exit 1
                  fi
              failureThreshold: 2
              initialDelaySeconds: 5
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 3
            startupProbe:
              failureThreshold: 18
              httpGet:
                path: /
                port: tcp-qdrant
                scheme: HTTP
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "/qdrant/scripts/pre-stop.sh > /proc/1/fd/1 2>&1"]
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /qdrant/config/
                name: qdrant-config
              - mountPath: /qdrant/storage
                name: data
              - mountPath: /qdrant/scripts
                name: scripts
              - mountPath: /etc/annotations
                name: annotations
              - mountPath: /qdrant/tools
                name: tools
            ports:
              - name: tcp-qdrant
                containerPort: 6333
              - name: grpc-qdrant
                containerPort: 6334
              - name: tcp-metrics
                containerPort: 9091
              - name: p2p
                containerPort: 6335
            command: ["/bin/sh", "-c"]
            args: ["/qdrant/scripts/setup.sh"]
            env:
            - name: QDRANT__TELEMETRY_DISABLED
              value: "true"
            - name: SERVICE_PORT
              value: "6333"
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        volumes:
        - name: annotations
          downwardAPI:
            items:
            - path: "component-replicas"
              fieldRef:
                fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']
        - emptyDir: {}
          name: tools
---
# Source: qdrant/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: qdrant-1.5.0
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: qdrant
  componentVersions:
    - componentDefRef: qdrant
      versionsContext:
        initContainers:
          - name: qdrant-tools
            image: docker.io/apecloud/curl-jq:latest
        containers:
          - name: qdrant
            image: docker.io/qdrant/qdrant:v1.5.0
---
# Source: qdrant/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: qdrant-1.7.3
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: qdrant
  componentVersions:
  - componentDefRef: qdrant
    versionsContext:
      initContainers:
        - name: qdrant-tools
          image: docker.io/apecloud/curl-jq:latest
      containers:
        - name: qdrant
          image: docker.io/qdrant/qdrant:v1.7.3
---
# Source: qdrant/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: qdrant-1.8.1
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: qdrant
  componentVersions:
  - componentDefRef: qdrant
    versionsContext:
      initContainers:
      - name: qdrant-tools
        image: docker.io/apecloud/curl-jq:latest
      containers:
      - name: qdrant
        image: docker.io/qdrant/qdrant:v1.8.1
---
# Source: qdrant/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: qdrant-1.8.4
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: qdrant
  componentVersions:
  - componentDefRef: qdrant
    versionsContext:
      initContainers:
      - name: qdrant-tools
        image: docker.io/apecloud/curl-jq:latest
      containers:
      - name: qdrant
        image: docker.io/qdrant/qdrant:v1.8.4
---
# Source: qdrant/templates/componentdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: qdrant
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  provider: kubeblocks
  description: High-performance, massive-scale Vector Database for the next generation of AI.
  serviceKind: qdrant
  serviceVersion: 1.8.4
  updateStrategy: BestEffortParallel
  services:
  - name: qdrant
    serviceName: qdrant
    spec:
      ipFamilyPolicy: PreferDualStack
      ports:
      - name: tcp-qdrant
        port: 6333
        targetPort: tcp-qdrant
      - name: grpc-qdrant
        port: 6334
        targetPort: grpc-qdrant
  lifecycleActions:
    memberLeave:
      customHandler:
        image: docker.io/apecloud/curl-jq:latest
        exec:
          command:
          - /bin/sh
          - -c
          - |
            #!/usr/bin/env sh
            
            set -x
            set -o errtrace
            set -o nounset
            set -o pipefail
            
            leave_peer_uri=http://${KB_LEAVE_MEMBER_POD_IP}:6333
            cluster_info=`curl -s ${leave_peer_uri}/cluster`
            leave_peer_id=`echo "${cluster_info}"| jq -r .result.peer_id`
            leader_peer_id=`echo "${cluster_info}" | jq -r .result.raft_info.leader`
            
            move_shards() {
                cols=`curl -s ${leave_peer_uri}/collections`
                col_count=`echo ${cols} | jq -r '.result.collections | length'`
                if [[ ${col_count} -eq 0 ]]; then
                    echo "no collections found in the cluster"
                    return
                fi
                col_names=`echo ${cols} | jq -r '.result.collections[].name'`
                for col_name in ${col_names}; do
                    col_cluster_info=`curl -s ${leave_peer_uri}/collections/${col_name}/cluster`
                    col_shard_count=`echo ${col_cluster_info} | jq -r '.result.local_shards[] | length'`
                    if [[ ${col_shard_count} -eq 0 ]]; then
                        echo "no shards found in collection ${col_name}"
                        continue
                    fi
            
                    leave_shard_ids=`echo ${col_cluster_info} | jq -r '.result.local_shards[].shard_id'`
                    for shard_id in ${leave_shard_ids}; do
                        echo "move shard ${shard_id} in col_name ${col_name} from ${leave_peer_id} to ${leader_peer_id}"
                        curl -s -X POST -H "Content-Type: application/json" \
                            -d '{"move_shard":{"shard_id": '${shard_id}',"to_peer_id": '${leader_peer_id}',"from_peer_id": '${leave_peer_id}}}'' \
                            ${leave_peer_uri}/collections/${col_name}/cluster
                    done
            
                    while true; do
                        col_cluster_info=`curl -s ${leave_peer_uri}/collections/${col_name}/cluster`
                        leave_shard_ids=`echo ${col_cluster_info} | jq -r '.result.local_shards[].shard_id'`
                        if [ -z "${leave_shard_ids}" ]; then
                            echo "all shards in collection ${col_name} has been moved"
                            break
                        fi
                        sleep 1
                    done
                done
            }
            
            remove_peer() {
                echo "remove peer ${leave_peer_id} from cluster"
                curl -v -XDELETE ${leave_peer_uri}/cluster/peer/${leave_peer_id}
            }
            
            leave_member() {
                echo "scaling in, we need to move local shards to other peers and remove local peer from the cluster"
                echo "cluster info: ${cluster_info}"
                move_shards
                remove_peer
            }
            
            # lock file to prevent concurrent leave_member
            # flock will return 1 if the lock is already held by another process, this is expected
            (
              flock -n -x 9
              if [ $? != 0 ]; then
                echo "member is already in leaving"
                exit 1
              fi
              set -o errexit && leave_member
            ) 9>/var/lock/qdrant-leave-member-lock
        targetPodSelector: Any
        container: qdrant
  configs:
  - name: qdrant-config-template
    templateRef: qdrant-config-template
    constraintRef: qdrant-config-constraints
    volumeName: qdrant-config
    namespace: default
  scripts:
  - name: qdrant-scripts
    templateRef: qdrant-scripts
    namespace: default
    volumeName: scripts
    defaultMode: 0555
  volumes:
  - name: data
    needSnapshot: true
  runtime:
    securityContext:
      fsGroup: 1001
    initContainers:
    - name: qdrant-tools
      command:
      - /bin/sh
      - -c
      - |
        cp /bin/jq /qdrant/tools/jq
        cp /bin/curl /qdrant/tools/curl
      image: docker.io/apecloud/curl-jq:latest
      imagePullPolicy: IfNotPresent
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /qdrant/tools
        name: tools
    containers:
    - name: qdrant
      image: docker.io/qdrant/qdrant:v1.8.4
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: tcp-qdrant
          scheme: HTTP
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 10
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - |
            consensus_status=`/qdrant/tools/curl -s http://localhost:6333/cluster | /qdrant/tools/jq -r .result.consensus_thread_status.consensus_thread_status`
            if [ "$consensus_status" != "working" ]; then
              echo "consensus stopped"
              exit 1
            fi
        failureThreshold: 2
        initialDelaySeconds: 5
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 3
      startupProbe:
        failureThreshold: 18
        httpGet:
          path: /
          port: tcp-qdrant
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /qdrant/config/
        name: qdrant-config
      - mountPath: /qdrant/storage
        name: data
      - mountPath: /qdrant/scripts
        name: scripts
      - mountPath: /qdrant/tools
        name: tools
      ports:
      - name: tcp-qdrant
        containerPort: 6333
      - name: grpc-qdrant
        containerPort: 6334
      - name: tcp-metrics
        containerPort: 9091
      - name: p2p
        containerPort: 6335
      command: ["/bin/sh", "-c"]
      args: ["/qdrant/scripts/setup.sh"]
      env:
      - name: QDRANT__TELEMETRY_DISABLED
        value: "true"
      - name: SERVICE_PORT
        value: "6333"
      - name: CLUSTER_DOMAIN
        value: ".cluster.local"
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    volumes:
    - emptyDir: {}
      name: tools
---
# Source: qdrant/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1beta1
kind: ConfigConstraint
metadata:
  name: qdrant-config-constraints
  labels:
    helm.sh/chart: qdrant-0.9.0
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.4"
    app.kubernetes.io/managed-by: Helm
spec:
  parametersSchema:
    cue: ""

  # mysql configuration file format
  fileFormatConfig:
    format: yaml
---
# Source: qdrant/templates/grafana/configmap-dashboards.yaml
apiVersion: v1
kind: ConfigMapList
items:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: release-name-qdrant-grafana-qdrant-overview
    labels:
      grafana_dashboard: "1"
      app: qdrant-grafana
      helm.sh/chart: qdrant-0.9.0
      app.kubernetes.io/name: qdrant
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/version: "1.8.4"
      app.kubernetes.io/managed-by: Helm
  data:
    qdrant-overview.json: "{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": {\n          \"type\": \"datasource\",\n          \"uid\": \"grafana\"\n        },\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations \u0026 Alerts\",\n        \"target\": {\n          \"limit\": 100,\n          \"matchAny\": false,\n          \"tags\": [],\n          \"type\": \"dashboard\"\n        },\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"description\": \"\",\n  \"editable\": true,\n  \"fiscalYearStartMonth\": 0,\n  \"gnetId\": 11323,\n  \"graphTooltip\": 0,\n  \"id\": 9,\n  \"links\": [\n    {\n      \"asDropdown\": false,\n      \"icon\": \"cloud\",\n      \"includeVars\": false,\n      \"keepTime\": false,\n      \"tags\": [],\n      \"targetBlank\": true,\n      \"title\": \"ApeCloud\",\n      \"tooltip\": \"Improved productivity, cost-efficiency and business continuity.\",\n      \"type\": \"link\",\n      \"url\": \"https://kubeblocks.io/\"\n    },\n    {\n      \"asDropdown\": false,\n      \"icon\": \"external link\",\n      \"includeVars\": false,\n      \"keepTime\": false,\n      \"tags\": [],\n      \"targetBlank\": true,\n      \"title\": \"KubeBlocks\",\n      \"tooltip\": \"An open-source and cloud-neutral DBaaS with Kubernetes.\",\n      \"type\": \"link\",\n      \"url\": \"https://github.com/apecloud/kubeblocks\"\n    }\n  ],\n  \"liveNow\": false,\n  \"panels\": [\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 54,\n      \"panels\": [],\n      \"title\": \"Cluster\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 6,\n        \"x\": 0,\n        \"y\": 1\n      },\n      \"id\": 58,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"9.2.4\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"max(cluster_term{namespace=~\\\"$namespace\\\",app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"})\",\n          \"interval\": \"\",\n          \"legendFormat\": \"__auto\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Term\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 6,\n        \"x\": 6,\n        \"y\": 1\n      },\n      \"id\": 62,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"9.2.4\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(cluster_voter{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"})\",\n          \"interval\": \"\",\n          \"legendFormat\": \"__auto\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Voters\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 6,\n        \"x\": 12,\n        \"y\": 1\n      },\n      \"id\": 56,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"9.2.4\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"max(cluster_peers_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"})\",\n          \"interval\": \"\",\n          \"legendFormat\": \"__auto\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Peers\",\n      \"type\": \"stat\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 6,\n        \"x\": 18,\n        \"y\": 1\n      },\n      \"id\": 60,\n      \"options\": {\n        \"colorMode\": \"value\",\n        \"graphMode\": \"none\",\n        \"justifyMode\": \"auto\",\n        \"orientation\": \"auto\",\n        \"reduceOptions\": {\n          \"calcs\": [\n            \"lastNotNull\"\n          ],\n          \"fields\": \"\",\n          \"values\": false\n        },\n        \"textMode\": \"auto\"\n      },\n      \"pluginVersion\": \"9.2.4\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(cluster_pending_operations_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"})\",\n          \"interval\": \"\",\n          \"legendFormat\": \"__auto\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Pending Operations\",\n      \"type\": \"stat\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 9\n      },\n      \"id\": 44,\n      \"panels\": [],\n      \"title\": \"Collections\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"description\": \"\",\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 10\n      },\n      \"id\": 40,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"pluginVersion\": \"9.2.4\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(collections_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by (namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"{{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Collections\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 10\n      },\n      \"id\": 46,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(collections_vector_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"{{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        }\n      ],\n      \"title\": \"Vectors\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 18\n      },\n      \"id\": 52,\n      \"panels\": [],\n      \"title\": \"REST Query\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 19\n      },\n      \"id\": 50,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"avg(rest_responses_avg_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"avg | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(rest_responses_min_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"min | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"B\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(rest_responses_max_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"max | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"C\"\n        }\n      ],\n      \"title\": \"Latency\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 19\n      },\n      \"id\": 48,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(rest_responses_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}[$__rate_interval])) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"total | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"sum(rate(rest_responses_fail_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}[$__rate_interval])) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"failed | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"QPS\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 27\n      },\n      \"id\": 68,\n      \"panels\": [],\n      \"title\": \"gRPC Query\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 28\n      },\n      \"id\": 64,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"avg(grpc_responses_avg_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"avg | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(grpc_responses_min_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"min | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"B\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"avg(grpc_responses_max_duration_seconds{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"max | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"C\"\n        }\n      ],\n      \"title\": \"Latency\",\n      \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"uid\": \"prometheus\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"palette-classic\"\n          },\n          \"custom\": {\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineInterpolation\": \"linear\",\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 1,\n            \"pointSize\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"showPoints\": \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n              \"group\": \"A\",\n              \"mode\": \"none\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"none\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 28\n      },\n      \"id\": 66,\n      \"options\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"Prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"exemplar\": true,\n          \"expr\": \"sum(rate(grpc_responses_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}[$__rate_interval])) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"interval\": \"\",\n          \"legendFormat\": \"total | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"A\"\n        },\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\",\n            \"uid\": \"prometheus\"\n          },\n          \"editorMode\": \"code\",\n          \"expr\": \"sum(rate(grpc_responses_fail_total{namespace=~\\\"$namespace\\\", app_kubernetes_io_instance=~\\\"$cluster\\\",pod=~\\\"$instance\\\"}[$__rate_interval])) by(namespace, app_kubernetes_io_instance, pod)\",\n          \"hide\": false,\n          \"legendFormat\": \"failed | {{namespace}} | {{app_kubernetes_io_instance}} | {{pod}}\",\n          \"range\": true,\n          \"refId\": \"B\"\n        }\n      ],\n      \"title\": \"QPS\",\n      \"type\": \"timeseries\"\n    }\n  ],\n  \"refresh\": \"\",\n  \"schemaVersion\": 37,\n  \"style\": \"dark\",\n  \"tags\": [\n    \"db\",\n    \"qdrant\"\n  ],\n  \"templating\": {\n    \"list\": [\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"default\",\n          \"value\": \"default\"\n        },\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Data Source\",\n        \"multi\": false,\n        \"name\": \"datasource\",\n        \"options\": [],\n        \"query\": \"prometheus\",\n        \"queryValue\": \"\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"type\": \"datasource\"\n      },\n      {\n        \"allValue\": \".+\",\n        \"current\": {\n          \"selected\": true,\n          \"text\": [\n            \"All\"\n          ],\n          \"value\": [\n            \"$__all\"\n          ]\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"$datasource\"\n        },\n        \"definition\": \"label_values(app_info{app_kubernetes_io_name=\\\"qdrant\\\"}, namespace)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"namespace\",\n        \"multi\": true,\n        \"name\": \"namespace\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(app_info{app_kubernetes_io_name=\\\"qdrant\\\"}, namespace)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 5,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": \".+\",\n        \"current\": {\n          \"selected\": true,\n          \"text\": [\n            \"All\"\n          ],\n          \"value\": [\n            \"$__all\"\n          ]\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"$datasource\"\n        },\n        \"definition\": \"label_values(app_info{namespace=~\\\"$namespace\\\",app_kubernetes_io_name=\\\"qdrant\\\"}, app_kubernetes_io_instance)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"cluster\",\n        \"multi\": true,\n        \"name\": \"cluster\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(app_info{namespace=~\\\"$namespace\\\",app_kubernetes_io_name=\\\"qdrant\\\"}, app_kubernetes_io_instance)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": \".+\",\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"All\",\n          \"value\": \"$__all\"\n        },\n        \"datasource\": {\n          \"type\": \"prometheus\",\n          \"uid\": \"$datasource\"\n        },\n        \"definition\": \"label_values(app_info{namespace=~\\\"$namespace\\\",app_kubernetes_io_instance=~\\\"$cluster\\\",app_kubernetes_io_name=\\\"qdrant\\\"}, pod)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"instance\",\n        \"multi\": true,\n        \"name\": \"instance\",\n        \"options\": [],\n        \"query\": {\n          \"query\": \"label_values(app_info{namespace=~\\\"$namespace\\\",app_kubernetes_io_instance=~\\\"$cluster\\\",app_kubernetes_io_name=\\\"qdrant\\\"}, pod)\",\n          \"refId\": \"StandardVariableQuery\"\n        },\n        \"refresh\": 2,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 5,\n        \"tagValuesQuery\": \"\",\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-30m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"collapse\": false,\n    \"enable\": true,\n    \"hidden\": false,\n    \"notice\": false,\n    \"now\": true,\n    \"refresh_intervals\": [\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"status\": \"Stable\",\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"7d\",\n      \"30d\"\n    ],\n    \"type\": \"timepicker\"\n  },\n  \"timezone\": \"\",\n  \"title\": \"Qdrant\",\n  \"uid\": \"dlhv5WQVx\",\n  \"version\": 11,\n  \"weekStart\": \"\"\n}"
