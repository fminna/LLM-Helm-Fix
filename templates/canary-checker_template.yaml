---
# Source: canary-checker/charts/flanksource-ui/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: canary-checker-ui
  labels:
    helm.sh/chart: flanksource-ui-1.0.395
    app.kubernetes.io/version: "1.0.395"
    app.kubernetes.io/managed-by: Helm
---
# Source: canary-checker/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-canary-checker-sa
  labels:
    helm.sh/chart: canary-checker-1.0.259
    app.kubernetes.io/version: "1.0.259"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: canary-checker
    app.kubernetes.io/instance: release-name
    control-plane: canary-checker
---
# Source: canary-checker/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: canary-checker
  labels:
    helm.sh/chart: canary-checker-1.0.259
    app.kubernetes.io/version: "1.0.259"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: canary-checker
    app.kubernetes.io/instance: release-name
    control-plane: canary-checker
data:
  canary-checker.properties: |
---
# Source: canary-checker/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "ClusterRole"
metadata:
  name: canary-checker-role
rules:
  - apiGroups:
      - v1
    resources:
      - secrets
    verbs:
      - get
      - list
  - apiGroups:
      - v1
    resources:
      - configmaps
    verbs:
      - get
      - list
  - apiGroups:
      - authentication.k8s.io/v1
    resources:
      - serviceaccounts/token
    verbs:
      - create
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - canaries.flanksource.com
    resources:
      - canaries
      - topologies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - canaries.flanksource.com
    resources:
      - canaries/status
      - topologies/status
    verbs:
      - get
      - patch
      - update
  # for creating and destroying pods during the pod canary test
  - apiGroups:
      - ""
    resources:
      - pods
      - namespaces
      - services
    verbs:
      - "*"
  - apiGroups:
      - "networking.k8s.io/v1"
    resources:
      - ingresses
    verbs:
      - "*"
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - "*"
  - apiGroups:
      - "v1"
    resources:
      - namespaces
    verbs:
      - "*"
  - apiGroups:
      - "metrics.k8s.io"
    resources:
      - pods
      - nodes
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  # for leader election
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
---
# Source: canary-checker/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "ClusterRoleBinding"
metadata:
  name: release-name-canary-checker-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: "ClusterRole"
  name: canary-checker-role
subjects:
  - kind: ServiceAccount
    name: release-name-canary-checker-sa
    namespace: default
---
# Source: canary-checker/charts/flanksource-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: canary-checker-ui
  labels:
    helm.sh/chart: flanksource-ui-1.0.395
    app.kubernetes.io/version: "1.0.395"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: canary-checker-ui
    app.kubernetes.io/instance: release-name
---
# Source: canary-checker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: canary-checker
  labels:
    helm.sh/chart: canary-checker-1.0.259
    app.kubernetes.io/version: "1.0.259"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: canary-checker
    app.kubernetes.io/instance: release-name
    control-plane: canary-checker
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: canary-checker
    app.kubernetes.io/instance: release-name
    control-plane: canary-checker
---
# Source: canary-checker/charts/flanksource-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canary-checker-ui
  labels:
    helm.sh/chart: flanksource-ui-1.0.395
    app.kubernetes.io/version: "1.0.395"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: canary-checker-ui
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: canary-checker-ui
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: canary-checker-ui
      securityContext:
        {}
      containers:
        - name: flanksource-ui
          securityContext:
            {}
          image: docker.io/flanksource/canary-checker-ui:v1.0.395
          env:
          - name: ORY_KRATOS_URL
            value: 
          - name: BACKEND_URL
            value: "http://canary-checker:8080"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000 # TODO(infra): application port. Make configurable.
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 128Mi
---
# Source: canary-checker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canary-checker
  labels:
    helm.sh/chart: canary-checker-1.0.259
    app.kubernetes.io/version: "1.0.259"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: canary-checker
    app.kubernetes.io/instance: release-name
    control-plane: canary-checker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: canary-checker
      app.kubernetes.io/instance: release-name
      control-plane: canary-checker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: canary-checker
        app.kubernetes.io/instance: release-name
        control-plane: canary-checker
    spec:
      serviceAccountName: release-name-canary-checker-sa
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: config
          configMap:
            name: canary-checker
      securityContext:
        fsGroup: 1000
        sysctls:
          - name: net.ipv4.ping_group_range
            value: "0 2147483647"
      containers:
        - name: canary-checker
          image: docker.io/flanksource/canary-checker:v1.0.259
          imagePullPolicy: "IfNotPresent"
          env:
            - name: PING_MODE
              value:  "unprivileged"
            - name: DB_URL
              value: "embedded:///opt/database/"
          volumeMounts:
            - mountPath: /etc/podinfo
              name: podinfo
            - mountPath: /app/canary-checker.properties
              name: config
              subPath: canary-checker.properties
          command:
            - /app/canary-checker
          args:
            - operator
            - -v
            - --httpPort
            - "8080"
            - --disable-postgrest=false
            - --db-migrations=true
            - --cache-timeout=90
            - --default-window=1h
            - --otel-service-name=canary-checker
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 200Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
---
# Source: canary-checker/charts/flanksource-ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: canary-checker-ui
  labels:
    helm.sh/chart: flanksource-ui-1.0.395
    app.kubernetes.io/version: "1.0.395"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "canary-checker-ui.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: canary-checker-ui
                port:
                  number: 80
---
# Source: canary-checker/charts/flanksource-ui/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "canary-checker-ui-test-connection"
  labels:
    helm.sh/chart: flanksource-ui-1.0.395
    app.kubernetes.io/version: "1.0.395"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['canary-checker-ui:80']
  restartPolicy: Never
