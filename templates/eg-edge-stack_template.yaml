---
# Source: eg-edge-stack/templates/edge-stack/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eg-edge-stack
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
data:
  envoy-gateway.yaml: |
    apiVersion: config.gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    extensionManager:
      service:
        host: eg-edge-stack.default
        port: 8500
      hooks:
        xdsTranslator:
          post:
          - "HTTPListener"
          - "Translation"
          - "VirtualHost"
    gateway:
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
    logging:
      level:
        default: info
    provider:
      type: Kubernetes
---
# Source: eg-edge-stack/templates/edge-stack/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  name:  eg-edge-stack
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
  - create
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - secrets
  - configmaps
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.getambassador.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
- apiGroups:
  - gateway.getambassador.io
  resources:
  - mappings/status
  verbs:
  - update
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - clusteringresses
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.x-k8s.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses/status
  - clusteringresses/status
  verbs:
  - update
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
---
# Source: eg-edge-stack/templates/edge-stack/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    rbac.gateway.getambassador.io/role-group: eg-edge-stack
  name: eg-edge-stack-watch
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - secrets
  - configmaps
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.getambassador.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
- apiGroups:
  - gateway.getambassador.io
  resources:
  - mappings/status
  verbs:
  - update
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - clusteringresses
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.x-k8s.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses/status
  - clusteringresses/status
  verbs:
  - update
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
---
# Source: eg-edge-stack/templates/edge-stack/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    rbac.gateway.getambassador.io/role-group: eg-edge-stack
  name: eg-edge-stack-crd
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - delete
---
# Source: eg-edge-stack/templates/envoy-gateway/metrics-reader-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eg-edge-stack-eg-metrics-reader
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: eg-edge-stack/templates/envoy-gateway/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eg-edge-stack-eg-proxy-role
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: eg-edge-stack/templates/envoy-gateway/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eg-edge-stack-eg-envoy-gateway-role
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - config.gateway.envoyproxy.io
  resources:
  - envoyproxies
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - authenticationfilters
  - envoypatchpolicies
  - ratelimitfilters
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoypatchpolicies/status
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - grpcroutes
  - httproutes
  - referencegrants
  - referencepolicies
  - tcproutes
  - tlsroutes
  - udproutes
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - grpcroutes/status
  - httproutes/status
  - tcproutes/status
  - tlsroutes/status
  - udproutes/status
  verbs:
  - update
---
# Source: eg-edge-stack/templates/edge-stack/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  name: eg-edge-stack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eg-edge-stack
subjects:
- kind: ServiceAccount
  name: eg-edge-stack
  namespace: default
- kind: ServiceAccount
  name: default
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eg-edge-stack-eg-envoy-gateway-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eg-edge-stack-eg-envoy-gateway-role
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eg-edge-stack-eg-proxy-rolebinding
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'eg-edge-stack-eg-proxy-role'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/infra-manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eg-edge-stack-eg-infra-manager
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - get
  - update
  - delete
---
# Source: eg-edge-stack/templates/envoy-gateway/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eg-edge-stack-eg-leader-election-role
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: eg-edge-stack/templates/envoy-gateway/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eg-edge-stack-eg-eg-init
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eg-edge-stack-eg-eg-init
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'eg-edge-stack-eg-eg-init'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/infra-manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eg-edge-stack-eg-infra-manager
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'eg-edge-stack-eg-infra-manager'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eg-edge-stack-eg-leader-election-rolebinding
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'eg-edge-stack-eg-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: default
---
# Source: eg-edge-stack/templates/edge-stack/auth-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eg-edge-stack-auth-service
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-auth-service.default
spec:
  ports:
    - name: ext-authz
      port: 5000
      targetPort: 5000
    - name: metrics
      port: 8080
      targetPort: 8080
    - name: health
      port: 8081
      targetPort: 8081
  selector:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/name: eg-edge-stack-auth-service.default
---
# Source: eg-edge-stack/templates/edge-stack/edge-stack.yaml
apiVersion: v1
kind: Service
metadata:
  name: eg-edge-stack
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack.default
spec:
  ports:
    - name: hooks-server
      port: 8500
      targetPort: 8500
    - name: metrics
      port: 8080
      targetPort: 8080
    - name: health
      port: 8081
      targetPort: 8081
  selector:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/name: eg-edge-stack.default
---
# Source: eg-edge-stack/templates/edge-stack/redis.yaml
# Note, deploying redis via the chart is a temporary solution
# the long-term goal is to have a hook in the EG infra manager dynamically create
# instances of redis and the auth service

apiVersion: v1
kind: Service
metadata:
  name: eg-edge-stack-redis
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-redis
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/description: "The Ambassador edge-stack Redis store for auth and rate limiting, among other things."
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/name: eg-edge-stack-redis.default
---
# Source: eg-edge-stack/templates/edge-stack/waf-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eg-edge-stack-waf-service
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-waf-service.default
spec:
  ports:
    - name: firewall
      port: 8800
      targetPort: 8800
    - name: metrics
      port: 8080
      targetPort: 8080
    - name: health
      port: 8081
      targetPort: 8081
  selector:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/name: eg-edge-stack-waf-service.default
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: envoy-gateway-metrics-service
  namespace: default
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    control-plane: envoy-gateway
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: envoy-gateway
  namespace: default
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    control-plane: envoy-gateway
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
  ports:
  - name: grpc
    port: 18000
    targetPort: 18000
  - name: ratelimit
    port: 18001
    targetPort: 18001
---
# Source: eg-edge-stack/templates/edge-stack/auth-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eg-edge-stack-auth-service
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-auth-service.default
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: edge-stack
      app.kubernetes.io/instance: eg-edge-stack
      app.kubernetes.io/name: eg-edge-stack-auth-service.default
  template:
    metadata:
      labels:
        control-plane: edge-stack
        app.kubernetes.io/instance: eg-edge-stack
        app.kubernetes.io/name: eg-edge-stack-auth-service.default
      annotations:
        kubectl.kubernetes.io/default-container: edge-stack
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: eg-edge-stack-auth-service
        image: docker.io/ambassador/aes-authsvc:v4.0.0-preview.1
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 5000
            name: ext-authz
          - containerPort: 8080
            name: metrics
          - containerPort: 8081
            name: health-probe
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AES_LOG_LEVEL
          value: "debug"
        - name: AMBASSADOR_JSON_LOGGING
          value: "false"
        - name: REDIS_URL
          value: eg-edge-stack-redis.default:6379
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /readyz
            port: 8081
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      terminationGracePeriodSeconds: 10
      serviceAccount: eg-edge-stack
---
# Source: eg-edge-stack/templates/edge-stack/edge-stack.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eg-edge-stack
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack.default
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: edge-stack
      app.kubernetes.io/instance: eg-edge-stack
      app.kubernetes.io/name: eg-edge-stack.default
  template:
    metadata:
      labels:
        control-plane: edge-stack
        app.kubernetes.io/instance: eg-edge-stack
        app.kubernetes.io/name: eg-edge-stack.default
      annotations:
        kubectl.kubernetes.io/default-container: edge-stack
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: eg-edge-stack
        args:
        - server
        image: docker.io/ambassador/aes-eg-ext:v4.0.0-preview.1
        ports:
          - containerPort: 8500
            name: hooks-server
          - containerPort: 8080
            name: metrics
          - containerPort: 8081
            name: health-probe
        env:
        - name: AES_LOG_LEVEL
          value: "debug"
        - name: AMBASSADOR_JSON_LOGGING
          value: "false"
        - name: AUTHSVC_NAME
          value: eg-edge-stack-auth-service
        - name: WAFSVC_NAME
          value: eg-edge-stack-waf-service
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REDIS_URL
          value: eg-edge-stack-redis.default:6379
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /readyz
            port: 8081
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      terminationGracePeriodSeconds: 10
      serviceAccount: eg-edge-stack
---
# Source: eg-edge-stack/templates/edge-stack/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eg-edge-stack-redis
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-redis.default
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: edge-stack
      app.kubernetes.io/instance: eg-edge-stack
      app.kubernetes.io/name: eg-edge-stack-redis.default
  template:
    metadata:
      labels:
        control-plane: edge-stack
        app.kubernetes.io/instance: eg-edge-stack
        app.kubernetes.io/name: eg-edge-stack-redis.default
    spec:
      containers:
      - name: redis
        image: "redis:7.0.10"
        imagePullPolicy: IfNotPresent
        resources:
          {}
      restartPolicy: Always
---
# Source: eg-edge-stack/templates/edge-stack/waf-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eg-edge-stack-waf-service
  namespace: default
  labels:
    control-plane: edge-stack
    app.kubernetes.io/instance: eg-edge-stack
    app.kubernetes.io/version: "v4.0.0-preview.1"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: eg-edge-stack-waf-service.default
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: edge-stack
      app.kubernetes.io/instance: eg-edge-stack
      app.kubernetes.io/name: eg-edge-stack-waf-service.default
  template:
    metadata:
      labels:
        control-plane: edge-stack
        app.kubernetes.io/instance: eg-edge-stack
        app.kubernetes.io/name: eg-edge-stack-waf-service.default
      annotations:
        kubectl.kubernetes.io/default-container: edge-stack
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: eg-edge-stack-waf-service
        image: docker.io/ambassador/aes-wafsvc:v4.0.0-preview.1
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8800
            name: firewall
          - containerPort: 8080
            name: metrics
          - containerPort: 8081
            name: health-probe
        env:
        - name: AES_LOG_LEVEL
          value: "debug"
        - name: AMBASSADOR_JSON_LOGGING
          value: "false"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REDIS_URL
          value: eg-edge-stack-redis.default:6379
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /readyz
            port: 8081
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      terminationGracePeriodSeconds: 10
      serviceAccount: eg-edge-stack
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-gateway
  namespace: default
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: envoy-gateway
      app.kubernetes.io/name: eg-edge-stack-eg
      app.kubernetes.io/instance: eg-edge-stack-eg
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        control-plane: envoy-gateway
        app.kubernetes.io/name: eg-edge-stack-eg
        app.kubernetes.io/instance: eg-edge-stack-eg
    spec:
      initContainers:
      - name: wait-for-edge-stack
        image: istio/kubectl:1.5.10
        securityContext:
          runAsUser: 0  # Run the init container as root
        command: ["/bin/sh", "-c"]
        args:
          - kubectl -n default wait --for condition=available --timeout=90s deploy -l control-plane=edge-stack,app.kubernetes.io/name=eg-edge-stack.default
      containers:
      - args:
        - server
        - --config-path=/config/envoy-gateway.yaml
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v0.5.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: envoy-gateway
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false      
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /config
          name: envoy-gateway-config
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.11.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: envoy-gateway-config
        name: envoy-gateway-config
      - name: certs
        secret:
          secretName: envoy-gateway
---
# Source: eg-edge-stack/templates/envoy-gateway/envoy-proxy.yaml
apiVersion: config.gateway.envoyproxy.io/v1alpha1
kind: EnvoyProxy
metadata:
  name: edge-stack-proxy
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
spec:
  provider:
    type: Kubernetes
    kubernetes:
      envoyDeployment:
        container:
          image: docker.io/ambassador/aes-envoy:v4.0.0-preview.1
---
# Source: eg-edge-stack/templates/envoy-gateway/certgen-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eg-edge-stack-eg-certgen
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
---
# Source: eg-edge-stack/templates/envoy-gateway/certgen-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eg-edge-stack-eg-certgen
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
# Source: eg-edge-stack/templates/envoy-gateway/certgen-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eg-edge-stack-eg-certgen
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'eg-edge-stack-eg-certgen'
subjects:
- kind: ServiceAccount
  name: 'eg-edge-stack-eg-certgen'
  namespace: default
---
# Source: eg-edge-stack/templates/envoy-gateway/certgen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: eg-edge-stack-eg-certgen
  namespace: default
  labels:
    app.kubernetes.io/name: eg-edge-stack-eg
    app.kubernetes.io/instance: eg-edge-stack-eg
    app.kubernetes.io/version: "v0.5.0"
    helm.sh/chart: eg-edge-stack
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: certgen
    spec:
      containers:
      - command:
        - envoy-gateway
        - certgen
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v0.5.0
        imagePullPolicy: Always
        name: envoy-gateway-certgen
      restartPolicy: Never
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: eg-edge-stack-eg-certgen
