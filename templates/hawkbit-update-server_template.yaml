---
# Source: hawkbit-update-server/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
---
# Source: hawkbit-update-server/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  mysql-root-password: "Mm92YTkxTFR3MQ=="
  
  
  mysql-password:  "aGF3a2JpdA=="
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  rabbitmq-password: "aGF3a2JpdA=="
  
  
  rabbitmq-erlang-cookie: "Ukw4VjU0MXFvWWkxM0VnVEZyWlczZk1uM3NwMngxUjA="
---
# Source: hawkbit-update-server/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hawkbit-update-server
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.0M5-mysql"
    app.kubernetes.io/managed-by: Helm  
type: Opaque
data:
  SPRING_APPLICATION_JSON: eyJoYXdrYml0Ijp7ImRtZiI6eyJob25vIjp7InBhc3N3b3JkIjoiW0tFWUNMT0FLX0hBV0tCSVRfVVNFUl9QQVNTV09SRF0ifX19LCJzcHJpbmciOnsiZGF0YXNvdXJjZSI6eyJwYXNzd29yZCI6Imhhd2tiaXQiLCJ1c2VybmFtZSI6Imhhd2tiaXQifSwic2VjdXJpdHkiOnsidXNlciI6eyJwYXNzd29yZCI6Intub29wfWFkbWluIn19fX0=
---
# Source: hawkbit-update-server/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hawkbit-update-server-rabbitmq-pass
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-pass: "aGF3a2JpdA=="
---
# Source: hawkbit-update-server/charts/mysql/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-test
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    heritage: "Helm"
    release: "release-name"
data:
  run.sh: |-
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-config
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
data:
  enabled_plugins: |-
    [rabbitmq_management, rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |-
    ##username and password
    default_user=hawkbit
    default_pass=CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator=min-masters
    # enable guest user
    loopback_users.guest = false
    #disk_free_limit.absolute = 50MB
    #management.load_definitions = /app/load_definition.json
---
# Source: hawkbit-update-server/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-hawkbit-update-server
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.0M5-mysql"
    app.kubernetes.io/managed-by: Helm  
data:
  application.yaml: |-
    hawkbit:
      dmf:
        hono:
          authentication-method: oidc
          credentials-list-uri: http://[DEVICE_REGISTRY_HOST]:8080/v1/credentials/$$tenantId/$$deviceId
          device-list-uri: http://[DEVICE_REGISTRY_HOST]:8080/admin/$$tenantId/devices
          enabled: false
          oidc-client-id: '[KEYCLOAK_DEVICE_REGISTRY_CLIENT_ID]'
          oidc-token-uri: http://[KEYCLOAK_HOST]:8080/auth/realms/kiwigrid/protocol/openid-connect/token
          tenant-list-uri: http://[DEVICE_REGISTRY_HOST]:8080/admin/tenants
          username: '[KEYCLOAK_HAWKBIT_USERNAME]'
    spring:
      cloud:
        stream:
          bindings:
            default:
              group: hawkbit
            device-created:
              destination: device-registry.device-created
            device-deleted:
              destination: device-registry.device-deleted
            device-updated:
              destination: device-registry.device-updated
      security:
        user:
          name: admin
---
# Source: hawkbit-update-server/charts/mysql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    release: "release-name"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
subjects:
- kind: ServiceAccount
  name: release-name-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq-endpoint-reader
---
# Source: hawkbit-update-server/charts/mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    release: "release-name"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  - name: metrics
    port: 9104
    targetPort: metrics
  selector:
    app: release-name-mysql
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq-headless
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
spec:
  clusterIP: None
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  selector:
    app: rabbitmq
    release: "release-name"
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
    nodePort: null
  - name: amqp
    port: 5672
    targetPort: amqp
    nodePort: null
  - name: dist
    port: 25672
    targetPort: dist
    nodePort: null
  - name: stats
    port: 15672
    targetPort: stats
    nodePort: null
  selector:
    app: rabbitmq
    release: "release-name"
---
# Source: hawkbit-update-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-hawkbit-update-server
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.0M5-mysql"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hawkbit-update-server
    app.kubernetes.io/instance: release-name
---
# Source: hawkbit-update-server/charts/mysql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    release: "release-name"
    heritage: "Helm"

spec:
  template:
    metadata:
      labels:
        app: release-name-mysql
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.29.3"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
      
      containers:
      - name: release-name-mysql
        image: "mysql:5.7.14"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-password
        - name: MYSQL_USER
          value: "hawkbit"
        - name: MYSQL_DATABASE
          value: "hawkbit"
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        # - name: extras
        #   mountPath: /usr/share/extras
        #   readOnly: true
        
      - name: metrics
        image: "prom/mysqld-exporter:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        command:
        - 'sh'
        - '-c'
        - 'DATA_SOURCE_NAME="root:$MYSQL_ROOT_PASSWORD@(localhost:3306)/" /bin/mysqld_exporter'
        ports:
        - name: metrics
          containerPort: 9104
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          {}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: release-name-mysql
      # - name: extras
      #   emptyDir: {}
---
# Source: hawkbit-update-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hawkbit-update-server
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.0M5-mysql"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: hawkbit-update-server
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hawkbit-update-server
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/config: 1e824310dcb8de4b30f6ca84a9c3eb92edfc8e699e57a51092066af848d99693
    spec:
      containers:
        - name: hawkbit-update-server
          image: "hawkbit/hawkbit-update-server:0.3.0M5-mysql"
          imagePullPolicy: IfNotPresent
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "mysql"
            - name: MANAGEMENT_SERVER_PORT
              value: "9090"
            - name: "SPRING_DATASOURCE_URL"
              value: "jdbc:mysql://release-name-mysql:3306/hawkbit"
            - name: "SPRING_APPLICATION_JSON"
              valueFrom:
                secretKeyRef:
                  name: release-name-hawkbit-update-server
                  key: "SPRING_APPLICATION_JSON"
            - name: "SPRING_RABBITMQ_HOST"
              value: "release-name-rabbitmq"
            - name: "SPRING_RABBITMQ_USERNAME"
              value: "hawkbit"
            - name: "SPRING_RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "release-name-hawkbit-update-server-rabbitmq-pass"
                  key: "rabbitmq-pass"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: management
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /VAADIN/themes/hawkbit/favicon.ico
              port: http
            initialDelaySeconds: 240
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /VAADIN/themes/hawkbit/favicon.ico
              port: http  
            initialDelaySeconds: 120
            timeoutSeconds: 5
          volumeMounts:
            - name: configmap
              mountPath: /opt/hawkbit/config
          resources:
            {}
      volumes:
      - name: configmap
        configMap:
          name: release-name-hawkbit-update-server
---
# Source: hawkbit-update-server/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.7.4
    release: "release-name"
    heritage: "Helm"
spec:
  serviceName: release-name-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: rabbitmq
      release: "release-name"
  template:
    metadata:
      labels:
        app: rabbitmq
        release: "release-name"
        chart: rabbitmq-6.7.4
    spec:      
      serviceAccountName: release-name-rabbitmq
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: volume-permissions
        image: "docker.io/bitnami/minideb:stretch"
        imagePullPolicy: "Always"
        command: ["/bin/chown", "-R", "1001:1001", "/opt/bitnami/rabbitmq/var/lib/rabbitmq"]
        securityContext:
          runAsUser: 0
        resources:
          {}
        volumeMounts:
        - name: data
          mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
      containers:
      - name: rabbitmq
        image: docker.io/bitnami/rabbitmq:3.7.18-debian-9-r1
        imagePullPolicy: "IfNotPresent"
        command:
         - bash
         - -ec
         - |
            mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
            mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
            touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
            #persist the erlang cookie in both places for server and cli tools
            echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
            #change permission so only the user has access to the cookie file
            chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            #copy the mounted configuration to both places
            cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
            # Apply resources limits
            ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
            #replace the default password that is generated
            sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
            #api check for probes
            cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check <<EOF
            #!/bin/sh
            set -e
            URL=\$1
            EXPECTED=\$2
            ACTUAL=\$(curl --silent --show-error --fail "\${URL}")
            echo "\${ACTUAL}"
            test "\${EXPECTED}" = "\${ACTUAL}"
            EOF
            chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check
            #health check for probes, handle period during rabbtmq sync
            cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check <<EOF
            #!/bin/sh
            START_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
            if [ -f \${START_FLAG} ]; then
               rabbitmqctl node_health_check
               RESULT=\$?
               if [ \$RESULT -ne 0 ]; then
                  rabbitmqctl status
                  exit $?
               fi
               rm -f \${START_FLAG}
               exit \${RESULT}
            fi
            rabbitmq-api-check \$1 \$2
            EOF
            chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check
            exec rabbitmq-server
        volumeMounts:
          - name: config-volume
            mountPath: /opt/bitnami/rabbitmq/conf
          - name: data
            mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
        ports:
        - name: epmd
          containerPort: 4369
        - name: amqp
          containerPort: 5672
        - name: dist
          containerPort: 25672
        - name: stats
          containerPort: 15672
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - rabbitmq-api-check "http://hawkbit:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
          initialDelaySeconds: 120
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - rabbitmq-health-check "http://hawkbit:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
          initialDelaySeconds: 10
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_SERVICE_NAME
            value: "release-name-rabbitmq-headless"
          - name: K8S_ADDRESS_TYPE
            value: hostname
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: K8S_HOSTNAME_SUFFIX
            value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: RABBITMQ_LOGS
            value: "-"
          - name: RABBITMQ_ULIMIT_NOFILES
            value: "65536"
          - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
            value: +S 2:1
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_ERL_COOKIE
            valueFrom:
              secretKeyRef:
                name: release-name-rabbitmq
                key: rabbitmq-erlang-cookie
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: release-name-rabbitmq
                key: rabbitmq-password
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes:
        - name: config-volume
          configMap:
            name: release-name-rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: rabbitmq
          release: "release-name"
          heritage: "Helm"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
            requests:
              storage: "8Gi"
---
# Source: hawkbit-update-server/charts/mysql/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-mysql-test
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.3.2"
    heritage: "Helm"
    release: "release-name"
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: test-framework
      image: "dduportal/bats:0.4.0"
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: release-name-test
      image: "mysql:5.7.14"
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: release-name-mysql-test
  - name: tools
    emptyDir: {}
  restartPolicy: Never
---
# Source: hawkbit-update-server/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-hawkbit-update-server-test-connection"
  labels:
    app.kubernetes.io/name: hawkbit-update-server
    helm.sh/chart: hawkbit-update-server-2.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['release-name-hawkbit-update-server:80']
  restartPolicy: Never
