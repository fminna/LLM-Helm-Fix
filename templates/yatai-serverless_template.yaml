---
# Source: yatai-serverless/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-yatai-serverless
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
---
# Source: yatai-serverless/templates/secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: yatai-serverless-env
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  YATAI_SYSTEM_NAMESPACE: yatai-system
  YATAI_API_TOKEN: "8Bj3Oc3T0TrfPl61"

  INTERNAL_IMAGES_METRICS_TRANSFORMER: "quay.io/bentoml/yatai-bento-metrics-transformer:0.0.3"
  INTERNAL_IMAGES_PROXY: "quay.io/bentoml/yatai-serverless-proxy:0.0.1"
  INTERNAL_IMAGES_MONITOR_EXPORTER: "quay.io/bentoml/bentoml-monitor-exporter:0.0.3"
---
# Source: yatai-serverless/templates/secret-shared-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: yatai-serverless-shared-env
  namespace: yatai-system
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  YATAI_SERVERLESS_NAMESPACE: default
  BENTO_FUNCTION_NAMESPACES: "yatai"
---
# Source: yatai-serverless/templates/configmap-network.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: network
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
data:
  ingress-class: nginx
  ingress-path: "/"
  ingress-path-type: "ImplementationSpecific"
---
# Source: yatai-serverless/templates/configmap-routing-table.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: yatai-serverless-routing-table
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
data:
  routing-table: "{}"
---
# Source: yatai-serverless/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-yatai-serverless
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: yatai-serverless/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-yatai-serverless
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-yatai-serverless
subjects:
  - kind: ServiceAccount
    name: release-name-yatai-serverless
    namespace: default
---
# Source: yatai-serverless/templates/role-in-yatai-system-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-yatai-serverless-in-yatai-system
  namespace: yatai-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  resourceNames:
  - yatai-common-env
  - yatai-serverless-shared-env
  verbs:
  - get
  - list
  - watch
---
# Source: yatai-serverless/templates/role-with-bento-function.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-yatai-serverless-with-bento-function
  namespace: "yatai"
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions/finalizers
  verbs:
  - update
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - resources.yatai.ai
  resources:
  - bentorequests
  verbs:
  - get
  - list
  - watch
  - patch
  - update
  - create
- apiGroups:
  - resources.yatai.ai
  resources:
  - bentorequests/status
  verbs:
  - get
- apiGroups:
  - resources.yatai.ai
  resources:
  - bentoes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - resources.yatai.ai
  resources:
  - bentoes/status
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - keda.sh
  resources:
  - scaledobjects
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: yatai-serverless/templates/role-yatai-in-yatai-system-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: yatai-role-for-yatai-serverless
  namespace: yatai-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  resourceNames:
  - yatai-common-env
  - yatai-serverless-shared-env
  verbs:
  - get
  - list
  - watch
---
# Source: yatai-serverless/templates/role-yatai-with-bento-function.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: yatai-with-bento-function
  namespace: "yatai"
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/attach
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/ephemeralcontainers
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions/finalizers
  verbs:
  - update
- apiGroups:
  - serving.yatai.ai
  resources:
  - bentofunctions/status
  verbs:
  - get
  - patch
  - update
---
# Source: yatai-serverless/templates/role-yatai-with-yatai-serverless.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: yatai-with-yatai-serverless
  namespace: default
rules:
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/attach
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/ephemeralcontainers
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  resourceNames:
  - yatai-serverless-env
  verbs:
  - get
  - list
  - watch
---
# Source: yatai-serverless/templates/rolebinding-in-yatai-system-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-yatai-serverless-in-yatai-system
  namespace: yatai-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-yatai-serverless-in-yatai-system
subjects:
  - kind: ServiceAccount
    name: release-name-yatai-serverless
    namespace: default
---
# Source: yatai-serverless/templates/rolebinding-with-bento-function.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-yatai-serverless-with-bento-function
  namespace: "yatai"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-yatai-serverless-with-bento-function
subjects:
  - kind: ServiceAccount
    name: release-name-yatai-serverless
    namespace: default
---
# Source: yatai-serverless/templates/rolebinding-yatai-in-yatai-system-namespace.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: yatai-role-for-yatai-serverless
  namespace: yatai-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: yatai-role-for-yatai-serverless
subjects:
  - kind: ServiceAccount
    name: yatai
    namespace: yatai-system
---
# Source: yatai-serverless/templates/rolebinding-yatai-with-bento-function.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: yatai-with-bento-function
  namespace: "yatai"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: yatai-with-bento-function
subjects:
  - kind: ServiceAccount
    name: yatai
    namespace: yatai-system
---
# Source: yatai-serverless/templates/rolebinding-yatai-with-yatai-serverless.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: yatai-with-yatai-serverless
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: yatai-with-yatai-serverless
subjects:
  - kind: ServiceAccount
    name: yatai
    namespace: yatai-system
---
# Source: yatai-serverless/templates/svc-interceptor-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-yatai-serverless-interceptor-admin
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: http
    port: 9090
    protocol: TCP
    targetPort: admin
  selector:
    control-plane: interceptor
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
---
# Source: yatai-serverless/templates/svc-interceptor-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-yatai-serverless-interceptor-proxy
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: proxy
    port: 8080
    protocol: TCP
    targetPort: proxy
  selector:
    control-plane: interceptor
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
---
# Source: yatai-serverless/templates/svc-operator-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-yatai-serverless-operator-webhook-service
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: operator
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
---
# Source: yatai-serverless/templates/svc-scaler.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-yatai-serverless-scaler
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: grpc
    port: 9090
    protocol: TCP
    targetPort: grpc
  - name: health
    port: 9091
    protocol: TCP
    targetPort: health
  selector:
    control-plane: scaler
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
---
# Source: yatai-serverless/templates/deployment-interceptor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-yatai-serverless-interceptor
  namespace: default
  labels:
    control-plane: interceptor
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: yatai-serverless
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        control-plane: interceptor
        app.kubernetes.io/name: yatai-serverless
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-yatai-serverless
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: app
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CURRENT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ROUTING_TABLE_UPDATE_DURATION_MS
              value: "500"
            - name: PROXY_PORT
              value: "8080"
            - name: ADMIN_PORT
              value: "9090"
            - name: S3_ENDPOINT
              value: ""
            - name: S3_SECURE
              value: "false"
            - name: AWS_ACCESS_KEY_ID
              value: ""
            - name: AWS_SECRET_ACCESS_KEY
              value: ""
            - name: S3_REQUEST_BUCKET_NAME
              value: ""
            - name: S3_RESPONSE_BUCKET_NAME
              value: ""
            - name: CONTENT_LENGTH_THRESHOLD
              value: "100MiB"
            - name: USE_GLOBAL_QUEUE
              value: "false"
            - name: GLOBAL_QUEUE_NAME
              value: ""
            - name: REDIS_ADDR
              value: ""
            - name: REDIS_PASSWORD
              value: ""
            - name: CONDITION_WAIT_TIMEOUT
              value: "20s"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "quay.io/bentoml/yatai-serverless-interceptor:0.0.9"
          imagePullPolicy: IfNotPresent

          ports:
          - containerPort: 9090
            name: admin
            protocol: TCP
          - containerPort: 8080
            name: proxy
            protocol: TCP
---
# Source: yatai-serverless/templates/deployment-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-yatai-serverless-operator
  namespace: default
  labels:
    control-plane: operator
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: yatai-serverless
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        control-plane: operator
        app.kubernetes.io/name: yatai-serverless
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-yatai-serverless
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: manager
          args:
            - --health-probe-bind-address=:8081
            - --metrics-bind-address=127.0.0.1:8080
            - --leader-elect
          command:
            - /bin/manager
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CURRENT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: EXTERNAL_SCALER_SERVICE_NAME
              value: release-name-yatai-serverless-scaler
            - name: EXTERNAL_SCALER_PORT
              value: "9090"
            - name: INTERCEPTOR_PROXY_SERVICE_NAME
              value: release-name-yatai-serverless-interceptor-proxy
            - name: INTERCEPTOR_PROXY_PORT
              value: "8080"
            - name: INTERCEPTOR_ADMIN_PORT
              value: "9090"
            - name: PASSTHROUGH_TO_PROXY_S3_ENDPOINT
              value: ""
            - name: PASSTHROUGH_TO_PROXY_S3_SECURE
              value: "false"
            - name: PASSTHROUGH_TO_PROXY_AWS_ACCESS_KEY_ID
              value: ""
            - name: PASSTHROUGH_TO_PROXY_AWS_SECRET_ACCESS_KEY
              value: ""
            - name: PASSTHROUGH_TO_PROXY_S3_REQUEST_BUCKET_NAME
              value: ""
            - name: PASSTHROUGH_TO_PROXY_S3_RESPONSE_BUCKET_NAME
              value: ""
            - name: PASSTHROUGH_TO_PROXY_CONTENT_LENGTH_THRESHOLD
              value: "100MiB"
            - name: PASSTHROUGH_TO_PROXY_USE_GLOBAL_QUEUE
              value: "false"
            - name: PASSTHROUGH_TO_PROXY_GLOBAL_QUEUE_NAME
              value: ""
            - name: PASSTHROUGH_TO_PROXY_REDIS_ADDR
              value: ""
            - name: PASSTHROUGH_TO_PROXY_REDIS_PASSWORD
              value: ""
          envFrom:
            - secretRef:
                name: yatai-serverless-env
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "quay.io/bentoml/yatai-serverless-operator:0.0.9"
          imagePullPolicy: IfNotPresent

          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP

          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1

          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1

          resources:
            {}
---
# Source: yatai-serverless/templates/deployment-scaler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-yatai-serverless-scaler
  namespace: default
  labels:
    control-plane: scaler
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: yatai-serverless
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        control-plane: scaler
        app.kubernetes.io/name: yatai-serverless
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-yatai-serverless
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: app
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CURRENT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GRPC_PORT
              value: "9090"
            - name: HEALTH_PORT
              value: "9091"
            - name: TARGET_ADMIN_DEPLOYMENT
              value: release-name-yatai-serverless-interceptor
            - name: TARGET_ADMIN_SERVICE
              value: release-name-yatai-serverless-interceptor-admin
            - name: TARGET_ADMIN_PORT
              value: "9090"
            - name: TARGET_ADMIN_NAMESPACE
              value: "default"
            - name: TARGET_PENDING_REQUESTS_INTERCEPTOR
              value: "200"
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "quay.io/bentoml/yatai-serverless-scaler:0.0.9"
          imagePullPolicy: IfNotPresent

          ports:
          - containerPort: 9091
            name: health
            protocol: TCP
          - containerPort: 9090
            name: grpc
            protocol: TCP
---
# Source: yatai-serverless/templates/job-default-domain.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: 'release-name-yatai-serverless-default-domain'
  namespace: default
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
    app: "yatai-default-domain"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: yatai-serverless
        app.kubernetes.io/instance: release-name
        app: "yatai-default-domain"
    spec:
      serviceAccountName: release-name-yatai-serverless
      containers:
        - name: default-domain
          # This is the Go import path for the binary that is containerized
          # and substituted here.
          image: "quay.io/bentoml/yatai-default-domain:0.0.2"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 1000m
              memory: 1000Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CURRENT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: Never
  backoffLimit: 10
---
# Source: yatai-serverless/templates/scaledobject-interceptor.yaml
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: release-name-yatai-serverless-interceptor
  namespace: default
spec:
  minReplicaCount: 3
  maxReplicaCount: 50
  pollingInterval: 1
  scaleTargetRef:
    name: release-name-yatai-serverless-interceptor
    kind: Deployment
  triggers:
    - type: external
      metadata:
        scalerAddress: release-name-yatai-serverless-scaler.default:9090
        hosts: interceptor
---
# Source: yatai-serverless/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-yatai-serverless-test-connection"
  labels:
    helm.sh/chart: yatai-serverless-0.0.9
    app.kubernetes.io/name: yatai-serverless
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-yatai-serverless:80']
  restartPolicy: Never
