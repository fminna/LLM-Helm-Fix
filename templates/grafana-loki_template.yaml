---
# Source: grafana-loki/templates/promtail/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-grafana-loki
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: loki
  annotations:
automountServiceAccountToken: true
---
# Source: grafana-loki/templates/promtail/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-grafana-loki-promtail
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: loki
stringData:
  promtail.yaml: |-
    server:
      log_level: info
      http_listen_port: 8080
    
    clients:
      - url: http://release-name-grafana-loki-gateway:80/loki/api/v1/push
    positions:
      filename: /run/promtail/positions.yaml
    
    scrape_configs:
      # See also https://github.com/grafana/loki/blob/master/production/ksonnet/promtail/scrape_config.libsonnet for reference
      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - namespace
            - app
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: replace
            regex: true/(.*)
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
            - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
            - __meta_kubernetes_pod_container_name
            target_label: __path__
---
# Source: grafana-loki/templates/gateway/configmap-http.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana-loki-gateway
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: gateway
data:
  nginx.conf: |+
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        default_type application/octet-stream;
        log_format  main '$remote_addr - $remote_user [$time_local]  $status ' '"$request" $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"';

        include /opt/bitnami/nginx/conf/resolvers.conf;

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   /dev/stderr  main  if=$loggable;

        sendfile     on;
        tcp_nopush   on;

        server {
          listen             8080;

          location = / {
            return 200 'OK';
            auth_basic off;
          }

          location = /api/prom/push {
            proxy_pass       http://release-name-grafana-loki-distributor.default.svc.cluster.local:3100$request_uri;
          }

          location = /api/prom/tail {
            proxy_pass       http://release-name-grafana-loki-querier.default.svc.cluster.local:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          # Ruler
          location ~ /prometheus/api/v1/alerts.* {
            proxy_pass       http://release-name-grafana-loki-ruler.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /prometheus/api/v1/rules.* {
            proxy_pass       http://release-name-grafana-loki-ruler.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /api/prom/rules.* {
            proxy_pass       http://release-name-grafana-loki-ruler.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /api/prom/alerts.* {
            proxy_pass       http://release-name-grafana-loki-ruler.default.svc.cluster.local:3100$request_uri;
          }

          location ~ /api/prom/.* {
            proxy_pass       http://release-name-grafana-loki-query-frontend.default.svc.cluster.local:3100$request_uri;
          }

          location = /loki/api/v1/push {
            proxy_pass       http://release-name-grafana-loki-distributor.default.svc.cluster.local:3100$request_uri;
          }

          location = /loki/api/v1/tail {
            proxy_pass       http://release-name-grafana-loki-querier.default.svc.cluster.local:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location ~ /loki/api/.* {
            proxy_pass       http://release-name-grafana-loki-query-frontend.default.svc.cluster.local:3100$request_uri;
          }
        }
      }
---
# Source: grafana-loki/templates/loki-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana-loki
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: loki
data:
  loki.yaml: |-
    auth_enabled: false
    chunk_store_config:
      chunk_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100
        memcached_client:
          addresses: dns+release-name-memcachedchunks:11211
          consistent_hash: true
      max_look_back_period: 0s
    compactor:
      shared_store: filesystem
    distributor:
      ring:
        kvstore:
          store: memberlist
    frontend:
      compress_responses: true
      log_queries_longer_than: 5s
      tail_proxy_url: http://release-name-grafana-loki-querier:3100
    frontend_worker:
      frontend_address: release-name-grafana-loki-query-frontend:9095
    ingester:
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_idle_period: 30m
      chunk_retain_period: 1m
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1
      max_transfer_retries: 0
      wal:
        dir: /bitnami/grafana-loki/wal
    limits_config:
      enforce_metric_name: false
      max_cache_freshness_per_query: 10m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
    memberlist:
      join_members:
      - release-name-grafana-loki-gossip-ring
    query_range:
      align_queries_with_step: true
      cache_results: true
      max_retries: 5
      results_cache:
        cache:
          memcached_client:
            addresses: dns+release-name-memcachedfrontend:11211
            consistent_hash: true
            max_idle_conns: 16
            timeout: 500ms
            update_interval: 1m
    ruler:
      alertmanager_url: https://alertmanager.xx
      external_url: https://alertmanager.xx
      ring:
        kvstore:
          store: memberlist
      rule_path: /tmp/loki/scratch
      storage:
        local:
          directory: /bitnami/grafana-loki/conf/rules
        type: local
    schema_config:
      configs:
      - from: "2020-10-24"
        index:
          period: 24h
          prefix: index_
        object_store: filesystem
        schema: v11
        store: boltdb-shipper
    server:
      http_listen_port: 3100
    storage_config:
      boltdb_shipper:
        active_index_directory: /bitnami/grafana-loki/loki/index
        cache_location: /bitnami/grafana-loki/loki/cache
        cache_ttl: 168h
        shared_store: filesystem
      filesystem:
        directory: /bitnami/grafana-loki/chunks
      index_queries_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100
        memcached_client:
          addresses: dns+release-name-memcachedindexqueries:11211
          consistent_hash: true
          service: http
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
---
# Source: grafana-loki/templates/promtail/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: promtail
  name: release-name-grafana-loki-default-promtail
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - watch
      - list
---
# Source: grafana-loki/templates/promtail/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: promtail
  name: release-name-grafana-loki-default-promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-grafana-loki-default-promtail
subjects:
  - kind: ServiceAccount
    name: release-name-grafana-loki
    namespace: "default"
---
# Source: grafana-loki/charts/memcachedchunks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcachedchunks
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedchunks
    helm.sh/chart: memcachedchunks-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/instance: release-name
---
# Source: grafana-loki/charts/memcachedfrontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcachedfrontend
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedfrontend
    helm.sh/chart: memcachedfrontend-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/instance: release-name
---
# Source: grafana-loki/charts/memcachedindexqueries/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcachedindexqueries
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedindexqueries
    helm.sh/chart: memcachedindexqueries-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcachedindexqueries
    app.kubernetes.io/instance: release-name
---
# Source: grafana-loki/templates/distributor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-distributor
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: distributor
spec:
  type: ClusterIP
  sessionAffinity: None
  
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      protocol: TCP
      targetPort: grpc
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: distributor
---
# Source: grafana-loki/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-gateway
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: gateway
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: gateway
---
# Source: grafana-loki/templates/gossip-ring-headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-gossip-ring
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: loki
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: http
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    loki-gossip-member: "true"
---
# Source: grafana-loki/templates/ingester/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-ingester
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: ingester
spec:
  type: ClusterIP
  sessionAffinity: None
  
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: ingester
---
# Source: grafana-loki/templates/promtail/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-promtail
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: promtail
spec:
  type: ClusterIP
  sessionAffinity: None
  
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: promtail
---
# Source: grafana-loki/templates/querier/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-querier
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: querier
spec:
  type: ClusterIP
  sessionAffinity: None
  
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: querier
---
# Source: grafana-loki/templates/query-frontend/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-query-frontend-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: query-frontend
spec:
  # NOTE: this is based on this https://github.com/grafana/helm-charts/pull/451. Should be reviewed if it is actually necessary in the future
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: query-frontend
---
# Source: grafana-loki/templates/query-frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana-loki-query-frontend
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: query-frontend
spec:
  type: ClusterIP
  sessionAffinity: None
  
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana-loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: query-frontend
---
# Source: grafana-loki/templates/promtail/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-grafana-loki-promtail
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: promtail
spec:
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: promtail
  template:
    metadata:
      annotations:
        checksum/config: 6e459a911d4e1a5dbc091f87e14be9e55ffaa6f26a69f6942dbea1c902cff8eb
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: promtail
        loki-gossip-member: "true"
    spec:
      serviceAccountName: release-name-grafana-loki
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: promtail
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 0
      initContainers:
      containers:
        - name: promtail
          image: marketplace.azurecr.io/bitnami/promtail:2.6.1-debian-11-r29
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          args:
            - -config.file=/bitnami/promtail/conf/promtail.yaml
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: loki-config
              mountPath: /bitnami/promtail/conf/promtail.yaml
              subPath: promtail.yaml
            - name: containers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: pods
              mountPath: /var/log/pods
              readOnly: true
            - name: run
              mountPath: /run/promtail
      volumes:
        - name: loki-config
          secret:
            secretName: release-name-grafana-loki-promtail
        - name: containers
          hostPath:
            path: /var/lib/docker/containers
        - name: pods
          hostPath:
            path: /var/log/pods
        - name: run
          hostPath:
            path: /run/promtail
---
# Source: grafana-loki/templates/distributor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana-loki-distributor
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: distributor
    loki-gossip-member: "true"
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: distributor
      loki-gossip-member: "true"
  template:
    metadata:
      annotations:
        checksum/config: 6e459a911d4e1a5dbc091f87e14be9e55ffaa6f26a69f6942dbea1c902cff8eb
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: distributor
        loki-gossip-member: "true"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: distributor
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: grafana-loki-distributor
          image: marketplace.azurecr.io/bitnami/grafana-loki:2.6.1-debian-11-r30
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - -target=distributor
            - -config.file=/bitnami/grafana-loki/conf/loki.yaml
          envFrom:
          ports:
            - containerPort: 3100
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: loki-config
              mountPath: /bitnami/grafana-loki/conf/loki.yaml
              subPath: loki.yaml
      volumes:
        - name: loki-config
          configMap:
            name: release-name-grafana-loki
---
# Source: grafana-loki/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana-loki-gateway
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: gateway
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: gateway
      annotations:
        checksum/configmap: ded9f2e5f2ba29878a07c93a25d0bbf68b644fa711894073154a201fe8a734a2
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: gateway
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: gateway
          image: marketplace.azurecr.io/bitnami/nginx:1.23.1-debian-11-r32
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /bin/bash
            - -ec
            - |
              # Generate resolver data
              echo resolver $(awk 'BEGIN{ORS=" "} $1=="nameserver" {print $2}' /etc/resolv.conf) ";" > /opt/bitnami/nginx/conf/resolvers.conf
              /opt/bitnami/scripts/nginx/entrypoint.sh /opt/bitnami/scripts/nginx/run.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: config
          configMap:
            name: release-name-grafana-loki-gateway
---
# Source: grafana-loki/templates/query-frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana-loki-query-frontend
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      annotations:
        checksum/config: 6e459a911d4e1a5dbc091f87e14be9e55ffaa6f26a69f6942dbea1c902cff8eb
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: query-frontend
        loki-gossip-member: "true"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: query-frontend
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: grafana-loki-query-frontend
          image: marketplace.azurecr.io/bitnami/grafana-loki:2.6.1-debian-11-r30
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - -target=query-frontend
            - -config.file=/bitnami/grafana-loki/conf/loki.yaml
          envFrom:
          ports:
            - containerPort: 3100
              name: http
            - containerPort: 9095
              name: grpc
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: loki-config
              mountPath: /bitnami/grafana-loki/conf/loki.yaml
              subPath: loki.yaml
      volumes:
        - name: loki-config
          configMap:
            name: release-name-grafana-loki
---
# Source: grafana-loki/charts/memcachedchunks/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcachedchunks
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedchunks
    helm.sh/chart: memcachedchunks-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcachedchunks
      app.kubernetes.io/instance: release-name
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcachedchunks
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcachedchunks
        helm.sh/chart: memcachedchunks-6.2.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcachedchunks
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: marketplace.azurecr.io/bitnami/memcached:1.6.17-debian-11-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: grafana-loki/charts/memcachedfrontend/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcachedfrontend
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedfrontend
    helm.sh/chart: memcachedfrontend-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcachedfrontend
      app.kubernetes.io/instance: release-name
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcachedfrontend
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcachedfrontend
        helm.sh/chart: memcachedfrontend-6.2.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcachedfrontend
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: marketplace.azurecr.io/bitnami/memcached:1.6.17-debian-11-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: grafana-loki/charts/memcachedindexqueries/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcachedindexqueries
  namespace: default
  labels:
    app.kubernetes.io/name: memcachedindexqueries
    helm.sh/chart: memcachedindexqueries-6.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcachedindexqueries
      app.kubernetes.io/instance: release-name
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: release-name-memcachedindexqueries
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcachedindexqueries
        helm.sh/chart: memcachedindexqueries-6.2.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcachedindexqueries
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: marketplace.azurecr.io/bitnami/memcached:1.6.17-debian-11-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: grafana-loki/templates/ingester/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-grafana-loki-ingester
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: ingester
spec:
  replicas: 1
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: ingester
  serviceName: release-name-grafana-loki-ingester
  podManagementPolicy: 
  template:
    metadata:
      annotations:
        checksum/config: 6e459a911d4e1a5dbc091f87e14be9e55ffaa6f26a69f6942dbea1c902cff8eb
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: ingester
        loki-gossip-member: "true"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: ingester
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: grafana-loki-ingester
          image: marketplace.azurecr.io/bitnami/grafana-loki:2.6.1-debian-11-r30
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - -target=ingester
            - -config.file=/bitnami/grafana-loki/conf/loki.yaml
          envFrom:
          ports:
            - containerPort: 3100
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          volumeMounts:
            - name: loki-config
              mountPath: /bitnami/grafana-loki/conf/loki.yaml
              subPath: loki.yaml
            - name: data
              mountPath: /bitnami/grafana-loki
      volumes:
        - name: loki-config
          configMap:
            name: release-name-grafana-loki
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: grafana-loki/templates/querier/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-grafana-loki-querier
  namespace: "default"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.4.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: querier
    loki-gossip-member: "true"
spec:
  replicas: 1
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  podManagementPolicy: 
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: querier
      loki-gossip-member: "true"
  serviceName: release-name-grafana-loki-querier
  template:
    metadata:
      annotations:
        checksum/config: 6e459a911d4e1a5dbc091f87e14be9e55ffaa6f26a69f6942dbea1c902cff8eb
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.4.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: querier
        loki-gossip-member: "true"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: querier
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: grafana-loki-querier
          image: marketplace.azurecr.io/bitnami/grafana-loki:2.6.1-debian-11-r30
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - -target=querier
            - -config.file=/bitnami/grafana-loki/conf/loki.yaml
          envFrom:
          ports:
            - containerPort: 3100
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          volumeMounts:
            - name: loki-config
              mountPath: /bitnami/grafana-loki/conf/loki.yaml
              subPath: loki.yaml
            - name: data
              mountPath: /bitnami/grafana-loki
      volumes:
        - name: loki-config
          configMap:
            name: release-name-grafana-loki
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
