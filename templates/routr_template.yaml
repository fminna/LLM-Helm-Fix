---
# Source: routr/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  namespace: default
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: routr/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: default
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: routr/templates/configmaps.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-routr-log4j2
  namespace: default
data:
  log4j2.yml: |-
    Configuration:
      Appenders:
        Console:
          PatternLayout:
            pattern: '[%-5level] %msg%n'
          name: Console
          target: SYSTEM_OUT
        # Do not remove this appender as is needed by the /system/logs endpoint
        # If you want to save the logs elsewhere just add another appender.
        RollingFile:
          - name: LogToRollingFile
            fileName: "${sys:ROUTR_DATA}/logs/routr.log"
            filePattern: "${sys:ROUTR_DATA}/logs/$${date:yyyy-MM}/routr-%d{MM-dd-yyyy}-%i.log.gz"
            PatternLayout:
              pattern: "[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: 10MB
            DefaultRollOverStrategy:
              max: 10
      Loggers:
        Root:
          level: info
          AppenderRef:
          - ref: Console
          - ref: LogToRollingFile
---
# Source: routr/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: default
  labels:
    app: redis
    chart: redis-10.6.18
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
---
# Source: routr/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.6.18
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
# Source: routr/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: release-name-routr-api
  labels:
    helm.sh/chart: routr-0.0.10
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 4567
    targetPort: 4567
  selector:
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
---
# Source: routr/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: release-name-routr-sipudp
  labels:
    helm.sh/chart: routr-0.0.10
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: sipudp
    port: 5060
    protocol: UDP
    #targetPort: 5060
  selector:
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
---
# Source: routr/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: release-name-routr-siptcp
  labels:
    helm.sh/chart: routr-0.0.10
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: siptcp
    port: 5060
    #targetPort: 5060
  selector:
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
---
# Source: routr/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-routr
  labels:
    helm.sh/chart: routr-0.0.10
    app.kubernetes.io/name: routr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: routr
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: routr
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      containers:
      - name: routr
        image: "fonoster/routr:1.0.0-rc5"
        imagePullPolicy: Always
        env:
        - name: EX_CONVERT_TEL_TO_E164
          value: "false"
        - name: EX_UNIQUE_GATEWAY_PER_HOST_PORT
          value: "false"
        - name: EX_RTP_ENGINE_ENABLED
          value: "false"
        - name: EX_RTP_ENGINE_HOST
          value: 
        - name: EX_RTP_ENGINE_PORT
          value:                 
        - name: DATA_SOURCE_PROVIDER
          value: redis_data_provider
        - name: DATA_SOURCE_PARAMETERS
          value: host=release-name-redis-master,port=6379
        - name: EXTERN_ADDR
          value: ""
        - name: LOCALNETS
          value: 
        - name: USER_AGENT
          value: ""
        - name: BIND_ADDR
          value: ""
        - name: RECORD_ROUTE
          value: "false"
        - name: USE_TO_AS_AOR
          value: "false"
        - name: PATCH_REQUEST_URI
          value: "false"
        - name: REGISTRAR_INTF
          value: "External"
        - name: ACCESS_CONTROL_LIST_ALLOW
          value: 
        - name: ACCESS_CONTROL_LIST_DENY
          value: 
        - name: REST_SERVICE_BIND_ADDR
          value: "0.0.0.0"
        - name: REST_SERVICE_PORT
          value: "4567"
        - name: REST_SERVICE_MIN_THREADS
          value: "8"
        - name: REST_SERVICE_MAX_THREADS
          value: "200"
        - name: REST_SERVICE_TIMEOUT_MILLIS
          value: "5000"
        - name: REST_SERVICE_UNSECURED
          value: "false"
        - name: REST_SERVICE_KEY_STORE
          value: ""
        - name: REST_SERVICE_KEY_STORE_PASSWORD
          value: ""
        - name: REST_SERVICE_TRUST_STORE
          value: ""
        - name: REST_SERVICE_TRUST_STORE_PASSWORD
          value: ""
        - name: SECURITY_CONTEXT_KEY_STORE
          value: ""
        - name: SECURITY_CONTEXT_TRUST_STORE
          value: ""
        - name: SECURITY_CONTEXT_KEY_STORE_PASSWORD
          value: ""
        - name: SECURITY_CONTEXT_DEBUGGING
          value: "false"
        - name: SECURITY_CONTEXT_CLIENT_KEY_STORE_TYPE
          value: "jks"
        - name: SECURITY_CONTEXT_CLIENT_PROTOCOLS
          value: TLSv1.2,TLSv1.1,TLSv1
        ports:
        - name: api
          containerPort: 4567
          protocol: TCP
        - name: sipudp
          containerPort: 5060
          protocol: UDP
        - name: siptcp
          containerPort: 5060
          protocol: TCP
        volumeMounts:
        - name: log4j2
          mountPath: /opt/routr/config/log4j2.yml
          subPath: log4j2.yml
      volumes:
      - name: log4j2
        configMap:
          name: release-name-routr-log4j2
---
# Source: routr/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.6.18
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.6.18
        release: release-name
        role: master
      annotations:
        checksum/health: f410bc72eabef03857b66f345302ad097b3c3be2901c4adcbb612e757fc2c0ac
        checksum/configmap: 19cb7906ae7d97767193b20902df082abcd06c2eb4035d65764bd4a42d4f0b69
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.4-debian-10-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--protected-mode" "no")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh ${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources:
            null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
