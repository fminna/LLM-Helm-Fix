---
# Source: witcom-id-generator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-witcom-id-generator
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: generator
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
---
# Source: witcom-id-generator/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  redis-password: "NTZ2Y2VzZzVjSA=="
---
# Source: witcom-id-generator/charts/redis/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: release-name
data:
  start-master.sh: |
    #!/bin/bash
    useradd redis
    chown -R redis /data
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec /run.sh "${ARGS[@]}"
---
# Source: witcom-id-generator/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: witcom-id-generator/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: witcom-id-generator/templates/webapp-configmap.yaml
apiVersion: v1
data:
  appconfig.json: |+
    {
      "APP_KEYCLOAK_REALM":"",
      "APP_KEYCLOAK_CLIENT_ID": "id-generator-webapp",
      "APP_KEYCLOAK_URL": ""
    }
kind: ConfigMap
metadata:
  name: release-name-witcom-id-generator-webapp
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: webapp
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
---
# Source: witcom-id-generator/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
---
# Source: witcom-id-generator/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
# Source: witcom-id-generator/templates/generator-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-witcom-id-generator
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: generator
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: generator
---
# Source: witcom-id-generator/templates/webapp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-witcom-id-generator-webapp
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: webapp
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: webapp
---
# Source: witcom-id-generator/templates/generator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-witcom-id-generator
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: generator
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: witcom-id-generator
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: generator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: witcom-id-generator
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: generator
    spec:
      serviceAccountName: release-name-witcom-id-generator
      securityContext:
        {}
      containers:
        - name: generator
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "witcom/id-generator:v1.2.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: KEYCLOAK_SECRET
              valueFrom:
                secretKeyRef:
                  name: id-generator-keycloak
                  key: client-secret
            - name: KEYCLOAK_SERVER_URL
              value: 
            - name: KEYCLOAK_REALM
              value: 
            - name: KEYCLOAK_RESOURCE_ID
              value: id-generator-service
            - name: REDIS_HOST
              value: release-name-redis-master
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
          envFrom:
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/live
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 1
            
          resources:
            {}
          volumeMounts:
      volumes:
---
# Source: witcom-id-generator/templates/webapp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-witcom-id-generator-webapp
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: webapp
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: witcom-id-generator
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: webapp
  template:
    metadata:
      annotations:
        checksum/config: e12e1b5223ee6b63452bfe948c4462b9bb18a9bc9c8956dcf236d0c8b88c30b4
      labels:
        app.kubernetes.io/name: witcom-id-generator
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: webapp
    spec:
      serviceAccountName: release-name-witcom-id-generator
      securityContext:
        {}
      containers:
        - name: generator-webapp
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "witcom/id-generator-webapp:v1.0.9"
          imagePullPolicy: IfNotPresent
          env:
          envFrom:
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: "/opt/app-root/src/assets/configdata"
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: release-name-witcom-id-generator-webapp
---
# Source: witcom-id-generator/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app: redis
    chart: redis-12.1.1
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-12.1.1
        release: release-name
        role: master
      annotations:
        checksum/health: b3a7a7dcf7f372dae4d566296377075cc2aeeb627a0eb6bf4c4f2f3e027ec3d6
        checksum/configmap: b14ae5775db2ae137326031f65dee857226c17207e8c18131d5b30b8329756ff
        checksum/secret: db07307d8bceebafc48b4bf9524656a77f550e112b6c80792a26888d1f014bb8
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.9-debian-10-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            null
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: witcom-id-generator/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-witcom-id-generator-test-connection"
  labels:
    helm.sh/chart: witcom-id-generator-1.1.1
    app.kubernetes.io/name: witcom-id-generator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: generator
    app.kubernetes.io/version: "v1.0.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-witcom-id-generator:3000']
  restartPolicy: Never
