---
# Source: sikalabs-harbor-master-snapshot/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "RXl0cHMyS0Z6OXdIemNPYg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBL0lkQnd4OHJFdXorbC9WTm8yTjFDQVBRaHpzSkU1Y1lLdnhNMW1EWVljT3FTMGJJCktyb2c4dnhLNFFYZkZ4eXRVY1FCdmF2cFB6dWdKc3BjdWpReHdYcERXWW1mRG0yVzRQUVZpb3VERGlncWtLVlEKQjZLVWlRODZLOS9xQjNvK08vaklpT1VkbDNpRUFHd3h5NWM1dkVkdkxGTTNoNHVaZ0ZKTkx1MlB6UnhlZnFmVgpIdm5qQ3hFazJ6NUFsMlR1Q1g4bVBDb01reWUrdFBKemdWTHBXREQ3TjVYclZmRHZZQ2VzZXV5K2F5SzlnM3YwCktreG9uSFVINUpDbmk5ekFLdXZpQmprV25CMlpGdUlmQkxhMDZzWk5FbUtuRmFIQ2dvK1dOamZXT1lUelpoYloKWkgzQ0VRNll3am1jNXZaSncxVkc1WEJ2VHZhcG9GS2JMOElZZFFJREFRQUJBb0lCQVFDSlh2NjhLVUZpU3ovMwo0LzUzQ2t5SXJxS0tYZWdER3llUGdxNDkxSE1CUTlKb25ybVczS2U5NXRiSThFdTZvK1A0M2RwZ2xwc014ZC9LCkdqMDFJZDJMTlhwYnc4eWRxYW53OTNhY1ptWkZsajRKYjVSSWd2MndUWE5FbU1zVGhFRkVtSUptVGRTNktGb08KYk16dHhuY20zK2t2UUptdGg1aGFRT3N4d3hOOTdJTXR2dG0xZzB5UXRheWoxM090d3RqTzV3RkhYdXFoSnd1dwplOFdGemY5RlROWGVsRGxUbmEvTGNwYi8ySzJQaVRTNFM4SkZqRHZFV0dDWE9ocUdUdm5YaVFFdDdpTE44MzdmClhUanNmUHVOM3M0eURLMG4wQ2xpT0hucDVOL3FENnhFWjdxYlY2R3VQNC9vMExsdXVyYzJFVmpXU3V3dEJsd2wKTEV2TjRiREJBb0dCQVA4U2dYUm82TTVHMUlCQnJXOUtFOUt3QkFQS3VEYmk1Um5XU0dZZ09IQTJMd1dIYUhWdQppZ05KUWZjbkJZRmczck9sK0RoazhidE51ZkNlbW9US3FvUnQ3RG90czg0OEYrTGtwWThWNUlySjJjak5zWmNPCnBXTmd0NC9JQll0MGQva0ZCTmFtZGhqY0ZhWERTY0pPYmVxVmY5b29NU3NhTlU2bEhCeEc4V2FsQW9HQkFQMXkKWWZCSmhBSVBpaGQ4M1JvVHZzUkt6K2JWVUJJcUFURmZCK0FrejNEMWc5OUdNSDNUVFpmRnZPei9MRXk2ZTRBbwpMU01Wd001Z3Q2NDNCeHNJVGFmTUhYeUdZcCtPUGhNUXgraklOZnZITU9RY1NXRHZxUm8rcVQzaWNJV0hzY0pLClBGVjA0TkFtRzBzaEhOVUk0Wm1UQVk3a3N5TnZBamU0V1poa2ZoR1JBb0dBUmpoWC95NHFlUzh5clNSbmxLMjIKQzFoOW9uV2FoVEd0bEpGVFdSb2hyM0tiTzFCdHgzWm85RUtrc0YvRHVqeHEwdFlzSVlwWXFoSFowSTQ1UjdscgpmQTJ1N00xTUpNaVNZdHBEWWNMTEtoSXJySVpFRDZ2dWlBOUdPWVQ5VWNqOGhrZUZiM3BnSkxQaUdjSkxlZnlSCmNmVTZQMXExUG9KMmpuSVI3UTd5d2lrQ2dZRUFwcU9ZUlhid3RySWs1NENQbDErNEpEUFVNais2bjliQ1pnWEgKbGRaZUZqVTIrWXlhd1lBM0dqMUhGTVJLQ2tEcWhyN2p2cGZFNTJ5c0dIM1J6REpQYks1R0RPUUc0RVdVQnRFWAp2N1F6MmxHRGtkZ1BYdzcwcm03WXMvbTRaZk5zS3dUSVdwKzRXT05WT3JhUTBIbEFhOHMrVVFlSnlSaHA2dHpvCis4dkhJQ0VDZ1lFQTRaNmNkVkJMVE1HT0s4VHpzbjBJaElCV0dVOCsrelg5NEpFaWxtVEJCSGV4S0pEWTlvZnQKeFZ0ZGNEdFFGak91M2E5MVpsRlZ2VXovd1NQcFpzTzZZc29mV1duSlUybmJHRkliYnQ0TnVzcG5VQWZvM3VrRgpqbXNjeFBPQ3hiZWxRRndFejBRb3d2ZUpvQmtkWWtZb2tka2JRSmFsNFlPNTZBWW1ubGZiRDZzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRT3U5bTBLZTQ4YVF1RFNaTzlkTlp1ekFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qUXdOVEUxTURjek9EVTVXaGNOTWpVdwpOVEUxTURjek9EVTVXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQ4aDBIREh5c1M3UDZYOVUyalkzVUlBOUNIT3drVGx4Z3EKL0V6V1lOaGh3NnBMUnNncXVpRHkvRXJoQmQ4WEhLMVJ4QUc5cStrL082QW15bHk2TkRIQmVrTlppWjhPYlpiZwo5QldLaTRNT0tDcVFwVkFIb3BTSkR6b3IzK29IZWo0NytNaUk1UjJYZUlRQWJESExsem04UjI4c1V6ZUhpNW1BClVrMHU3WS9OSEY1K3A5VWUrZU1MRVNUYlBrQ1haTzRKZnlZOEtneVRKNzYwOG5PQlV1bFlNUHMzbGV0VjhPOWcKSjZ4NjdMNXJJcjJEZS9RcVRHaWNkUWZra0tlTDNNQXE2K0lHT1JhY0haa1c0aDhFdHJUcXhrMFNZcWNWb2NLQwpqNVkyTjlZNWhQTm1GdGxrZmNJUkRwakNPWnptOWtuRFZVYmxjRzlPOXFtZ1Vwc3Z3aGgxQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVblE1d0N3QmlDeG1VRkZFVzNMTDU3WmdEWmZNdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQkl6N1NNUE9SaEhzbzAxaktYTXFWSmNZbkRQcXh0ZW1aWVB3RjF1ClMzdkM0RTJvRzN1cWFBSlJmSXlTWm83bHltS3hUSTAwTDhtZEpLZ3VkWlh5cWUxbEJNZmVnRzc3QjdoWWxDQzEKVzBrRDAzOWlSblNvQzF1S3lJRWNmZGVKZ0xPd2g5aTZubCs3bktBK1Y2Q2RiR1VJcEFpMWhXcGxvZk9CT256MwpIODR1bWhmQXlpS3E0Q2FUelZkZlJ2NHV0c2dLUzF3SDNUMUlPeVBPQ1NTSDRWMkpDWTJkT0RvMEFNNGVtOERkCm0wRFVRQkI2aThCYXJrSHB6Q0twOGNOMmxTaFNoUVpydDVOOUVabEdkdWdTc09qaVVBUmxnQ3FMVkdOZ1dyMU0KNDdiS1NBOWg0UENxNGVnVEVQdlpybWExRkY5NXNwcG9sQVJWMW1aTDFTbVlueE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "ZFNYZlNCaFp6ZXZYdHIxSDNsU0h2VWVnajhyMTl1cEY="
---
# Source: sikalabs-harbor-master-snapshot/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: sikalabs-harbor-master-snapshot/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU1CbkFYcE0wNE9DYUtFWjl5TWc5NlF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURVeE5UQTNNemcxT1ZvWERUSTFNRFV4TlRBMwpNemcxT1Zvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFuN3VkSjd2OTFFaXVHd0xXNXlrdnpGRjF1dWs0KzJNaXRmN0cKaDA2Y2hONWtkc1JlSlJ1ZzhkcTYyckV6K3JJQktXM01uOENwb2RZckFWbGNveG1pM29TaDVpV1VMSmRJdnlCTgp4bmpDeUtXUTV5S0d3VGpiWmxONU90SVR0aXd2WjdUQTNkMDBHT09oUllzSnRYaDNTNlVqVnFjeUhZYnpRTzVCCmxaVWUvSFpZejVsTEJzVktaclUxY3NYT0NRNXlKTHhxa3BZTThuZ3BwQjUxQjNLenl1Q2RjdlhqNFMraFhzT2oKSldYMWEyZlZVdys2Y0lsNEZZUlpNM3RxQ2NUWWFuVmE0U2JSOEJWbzVJTndiL0RhT2Vua0piOHc2M3RPL3lnNApibmt0czBndWZvalVXQXZRZWRWRFJpSlVHMERtbGR2YkdVcWJDU1AwMVNiQytZQlRFd0lEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVMNW1MZTkxcmpDZmtsYXZiaW1WVHVlZ09SWGN3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNKCmprSnhJOUhNT0pEVVBTalFXRGR6dStveVFRZzlEazlHYkpMcUNJdUZPTE03MDk5Ky9kUG81aGZHWEdvRHd0SWsKQldrbG84REZIamg1dXN5Z0M1UERrR3Q5Qjl4MkE5TnJQZmNQekFQdVVpOHFDWUdWUS9pVVp4Z3JhOFIzMzZSaApJRFFOMGpwOThXTjRYWk56UXpNMzNNL3YwK0x6blRvTDZLaTBZNWlBa0hnTmtyRlJxeGdIZ1dpM3pHUWlYVjJMCkV1TUNpN0YyRGRhaThlRks2dFpFczNKOVpsWVBVa1M3MTgxV3RyeDdaY1JxS3I2R2lXWFRSUDJOUWJ4M1h5RWsKSnBQV2VlOTV1N1JQMWF6ck9IblNCdC8zR0VJSjB5bmhxUmZBK3FuZzdUTWx3OWdsbmdTUXRtZHpUTjc1WW1tUgo1MVhtN3Jsa0NndVpaUTdSZ1FnawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbjd1ZEo3djkxRWl1R3dMVzV5a3Z6RkYxdXVrNCsyTWl0ZjdHaDA2Y2hONWtkc1JlCkpSdWc4ZHE2MnJFeitySUJLVzNNbjhDcG9kWXJBVmxjb3htaTNvU2g1aVdVTEpkSXZ5Qk54bmpDeUtXUTV5S0cKd1RqYlpsTjVPdElUdGl3dlo3VEEzZDAwR09PaFJZc0p0WGgzUzZValZxY3lIWWJ6UU81QmxaVWUvSFpZejVsTApCc1ZLWnJVMWNzWE9DUTV5Skx4cWtwWU04bmdwcEI1MUIzS3p5dUNkY3ZYajRTK2hYc09qSldYMWEyZlZVdys2CmNJbDRGWVJaTTN0cUNjVFlhblZhNFNiUjhCVm81SU53Yi9EYU9lbmtKYjh3NjN0Ty95ZzRibmt0czBndWZvalUKV0F2UWVkVkRSaUpVRzBEbWxkdmJHVXFiQ1NQMDFTYkMrWUJURXdJREFRQUJBb0lCQUgzeWRmRXRwdkFxdXJWcgpvTDIyV1F6MnNpakYybnRGYU1vdDhLWWgwd0psUkx2dEMvcWdkV0FlUXJWTGdodkxIV1ZvUVM4NXY4ZHUwb3dHCnhTZUpnRVdLT1FuNldZSnJheDNndjlLZHg2QmtCQVJyMGVzckJMd0RWNVNNcnFRMjVNNFYxUGxiZ01lYlBMOVQKNlR6Z2x0ZmJoeWk5UHFQUGs2Qi8vTkNRTzFWK1VJVE9DUE5YeWgxTVJSak42RUNjak1mNTJqUVBTcExMVmhqRwo1OTVqblBscmxZSFM3RWExZTJQQVJLMDBpbkxwaWIzbTdoYWNlbi8yYzFYbGFnU0xhNnVmNnVHOGRkVUlVUmVHCkdEcWdNQzY1RWowUTdJWS9BckRtaThyS25ZU3VEb0hRcXgxV29YSWhOanVCdXptZjhQZE5SRFFzR2x1QTVxSXYKeU1ya3Yxa0NnWUVBemxwOWJSRnlDRmdjWlhaelhjcm8yK3VIcXNGUUZTbURGV243Qlk0ejByWjdDWERXWlBiNQpnTTFYZ0xZdG9HQTZPVmVSUUFNK3Q5UTQ2NWdPSGdTRHkvSW5KYUlJeHJEOU9ORVcrZVgrTGhlVjVnT1pSN1ZZCkRiakc3ZE0rUDJySjY4SmQzWEMrMks1MStvSkszYldRdThZd096VS96ckkydzhOS2ZLNklCcThDZ1lFQXhpbTMKTFdqSkRZeDQ0dnZuNXN1WnVqVDk4bUpBTm8vcGVpa3VSRWhvQkFrRHZIblBmTTVwR3BLUVF4K3lYS0JGSWY4MAp6VUsvdEpZTExEdGVqZDFvRmVIa211ekxYUGRDbW9uNlZvckhOT1FMYmx0SVA5eWJESVpWNU1vTncyWklzUlQ2CllDYnRPT2dUM2Zva24zdjRlVFVxNlVJSW5hVU02cXJmc1dhWjB0MENnWUVBeXZmNjB1TUw5T1VsMlM3dlB0d3MKdXRRcXQydzVwdmNUOW1ZdUFFTGsrbWQvRWNRcFBWb29BK2IySUtZUXJ1UzNvRnRmaFVVcjFZa3JDNkNla2l3Qwpyd0hhTzR2cmNmUDR2bi83UjRaUHcycHppTEVWZlpFRHNVdUViNzBPUnpaMHNpNldRUTk2eUlxaGhPdlBVOUFaCk1uazRTNlNPeEhKS3A3ZFpkdFg4K2dVQ2dZQWxBMHVzbHFMZS9mcmlZcXpaQmZScnZGUW1mc1dCcTNXdmxKdUkKczRHQ0ozRGtObGhUOW5YWk9jRHFXTFJHNnNTZTZmMGh6YkxpOXhlVkptMnR6OG9PTkVndnk4VGNVMjdFVUx0SwppTmRXZ0xYRjRoVG5vTHZ4SmZKTExwWk5oZ0JUMnhnODkyaGR0Yk5vUmIycmNFdGowRk40aUJYMTVBczZsYm44CmQ2NkpuUUtCZ1FDR291dG1mMGVNMVRvUmxhVExubDNzc3laWCtnL3ozbGx3RlhFa2Nhbk1lTG9Dd0JCRTFVSmoKZW5TTjJlWXlpOVVmeXd1Vmk2a1pGaG9SZkNkbGh1bmFvbFQzaEdLTVBIYS80ZTd0NFE2OExJdFBKRnpJY29BVwo1L1h5VmhGSTUvTzFybVZjTC9yVzZaTHhlYmxxYWtzK2plaTJVWjdZMDBKTm9nUXRQZ0xKY2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8xNS8vdE1KRStJVVNLVTV1aHhGSnN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURVeE5UQTNNemcxT1ZvWERUSTFNRFV4TlRBMwpNemcxT1Zvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEwb25qZUVhTUZvWkxQdzAvYmNKM0EwZHQydjVFYkxlWUx0VVNzZFhUYjdSckR3WjIKNzZ0cXE1VTY5YUFxenp4ZkErbFlROGRHV3F4RGpXZ0tlR0dmaW5qSDcrUkYwU3Rnck9pVEttaVJ6V0drSXlUSwplaFhkTi80ZWV5OE1tNTlSNkRDNTJ4MVRsVlF3NnZud3hQTTdpV2c4bmxndzJSNU9OU0hFMVBCajdjV3hFT1l3CkphSmk3RytRMDVmWWQ3MHZ6b2tUNVlPeGo1a3lYWHhBUGVnYm96TTJXcDZpYU5ZMEthSktpZ215SEVsaHdzd24KU056c1lUc3ovYURlZ3FnWm9DK0kzSFlOWHF1ZnZTNklnZ1lIMjNpdWM3NlZuWXJ5ZW00aEFkUmQ4YkZLYmpqOQo5NGRCcDhGN1VzZEpUV0FMWjFQbVFjcUNJaTBrQisrSmxPVm9vUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQytaaTN2ZGE0d241SldyMjRwbFU3bm9Ea1YzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUhIZHdLbjVDazBXRkwzMGVGME5lblBhNTFCTFJGenlIUkh4MDBZdjBUdXIwUlR0TmFId1JiCmliVXJKY3ErSlA0RzNJQ3RwbmxvN3VwTmZMaW9LeEFMcncyT0RoMUhtN3RHdTV3cE1mN3hFK2F4UDdpZkltOTQKMmJPRFIwQkQ3Y3padHI4amx3RGlQeXFpaWU2ZWlHSHFZaC9iZ2ZjKzJhMllBb3NZeVhpTVJJT3VLT0JGdVVXTApIeGl6K1NSaFBkZzZZdlpTdUJWMUd5ZjFIRE9qaXZRaGhiL090TUZKNGxUNVpFNzB3WkJIWGZ5WXJ6a2UvcEpwCnB2K3loL3ZXbjBCbWEvRitOblc0SU9FT3RkajZubkJWQTJXa3dtRjF6ckZQMHBLd0pHSzdXdTBWZVZYTjNzVTQKZnVSc1B5dDh5c2N0TUVJY1IyVEg5L1RHRGFpMkpoaFgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "aUFPTTIwWDJKQWxvS0VYZw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "bHhEV3k3akNYRUhKQlQ1cg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJDZoaDlRQVBORW01R2YuSG1hdXI5Qy5UbzNyRU9IWFovSmFBR203dGtGOElQcHU2UkNuNHRp"
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registryctl"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
---
# Source: sikalabs-harbor-master-snapshot/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-trivy
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtaGFyYm9yLXJlZGlzOjYzNzkvNT9pZGxlX3RpbWVvdXRfc2Vjb25kcz0zMA==
  gitHubToken: ""
---
# Source: sikalabs-harbor-master-snapshot/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "release-name-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://release-name-harbor-core:80"
  JOBSERVICE_URL: "http://release-name-harbor-jobservice"
  REGISTRY_URL: "http://release-name-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://release-name-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://release-name-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://release-name-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://release-name-harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://release-name-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://release-name-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
  CORE_URL: "http://release-name-harbor-core:80"
  TOKEN_SERVICE_URL: "http://release-name-harbor-core:80/service/token"
  REGISTRY_URL: "http://release-name-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://release-name-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://release-name-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: sikalabs-harbor-master-snapshot/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: release-name-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-registryctl"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
data:
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: sikalabs-harbor-master-snapshot/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: core
---
# Source: sikalabs-harbor-master-snapshot/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: release-name
    app: "harbor"
    component: database
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: jobservice
---
# Source: sikalabs-harbor-master-snapshot/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: portal
---
# Source: sikalabs-harbor-master-snapshot/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: release-name
    app: "harbor"
    component: redis
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: registry
---
# Source: sikalabs-harbor-master-snapshot/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-trivy"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: trivy
---
# Source: sikalabs-harbor-master-snapshot/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: f4b189557b7d5efd6774dc6c8bb6210389b2730b6e6f2f8a378127c62fc4190f
        checksum/secret: cc2ec646faa98013e02c5636dcb76dfec03e76de0a01908117bae6e16c2a53ab
        checksum/secret-jobservice: edc0e01dd9da9e8ef7b5dbb297e5e7a68191ec92b73f1d90a8c8268eec9dd76a
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-core"
        - secretRef:
            name: "release-name-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "release-name-harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: release-name-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: release-name-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: release-name-harbor-core
      - name: ca-download
        secret:
          secretName: "release-name-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: sikalabs-harbor-master-snapshot/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 0a8d9748cf54c1cdfd9093819358da6825418f7aa579b23aa4dba0384cc1d3be
        checksum/configmap-env: 4985f840832281281da198a2ca6dee1472268fb1233e576b4e333d1907e49637
        checksum/secret: ea7c8abc011d7e1ee74daa12e708c77c9bce45f2adda229b704926cc695afb99
        checksum/secret-core: 21c9bbc78a0a7579c7e50eef3987d6080396aa7602fdd9a664b77ccee873b286
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "release-name-harbor-jobservice-env"
        - secretRef:
            name: "release-name-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "release-name-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: release-name-harbor-jobservice
---
# Source: sikalabs-harbor-master-snapshot/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: c49211d1e3fe85b582a15405e8c5b22df8a5cb3ed2df69985d0de6f40d2d4009
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "release-name-harbor-portal"
---
# Source: sikalabs-harbor-master-snapshot/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 4e6ef8ef83e32aab1f3e6f57cfd5139d7107220532f2e3949440494f68883fe0
        checksum/secret: f4740686c9418327ff414a814bc786aeeeffcf32d4f5bab0c4f6577f1ecefb52
        checksum/secret-jobservice: a0197a7fc0b74ed0db7d9985aaba1a958a78ac6c7c0da4327de865693cbb21db
        checksum/secret-core: af62f946084bc1d90069b3b9ad57b18df99ab6f9e4ef347e275326efe73b8785
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "release-name-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-registryctl"
        - secretRef:
            name: "release-name-harbor-registry"
        - secretRef:
            name: "release-name-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: release-name-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: release-name-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: release-name-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "release-name-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: release-name-harbor-registry
---
# Source: sikalabs-harbor-master-snapshot/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "release-name-harbor-database"
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
        component: database
      annotations:
        checksum/secret: e0f71d00f5744d5e4d81a72ca5625895746b2d5d2395c65ee7a66d2d124ef430
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "release-name-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: sikalabs-harbor-master-snapshot/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: release-name-harbor-redis
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: sikalabs-harbor-master-snapshot/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-trivy
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: release-name-harbor-trivy
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 0daea867b9ac351e54450b0a3d70a35ae483d7b4355e356c129f44b258f3f411
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:dev
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: release-name
        chart: sikalabs-harbor-master-snapshot
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: sikalabs-harbor-master-snapshot/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Helm
    release: release-name
    chart: sikalabs-harbor-master-snapshot
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: release-name-harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-portal
            port:
              number: 80
    host: core.harbor.domain
