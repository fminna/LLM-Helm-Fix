---
# Source: terrakube/charts/dex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: terrakube/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: release-name-minio
---
# Source: terrakube/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: terrakube/charts/dex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.yaml: "Y29ubmVjdG9yczoKLSBjb25maWc6CiAgICBiaW5kRE46IGNuPWFkbWluLGRjPWV4YW1wbGUsZGM9b3JnCiAgICBiaW5kUFc6IGFkbWluCiAgICBncm91cFNlYXJjaDoKICAgICAgYmFzZUROOiBvdT1Hcm91cHMsZGM9ZXhhbXBsZSxkYz1vcmcKICAgICAgZmlsdGVyOiAob2JqZWN0Q2xhc3M9Z3JvdXBPZk5hbWVzKQogICAgICBuYW1lQXR0cjogY24KICAgICAgdXNlck1hdGNoZXJzOgogICAgICAtIGdyb3VwQXR0cjogbWVtYmVyCiAgICAgICAgdXNlckF0dHI6IEROCiAgICBob3N0OiB0ZXJyYWt1YmUtb3BlbmxkYXAtc2VydmljZToxMzg5CiAgICBpbnNlY3VyZU5vU1NMOiB0cnVlCiAgICB1c2VyU2VhcmNoOgogICAgICBiYXNlRE46IG91PXVzZXJzLGRjPWV4YW1wbGUsZGM9b3JnCiAgICAgIGVtYWlsQXR0cjogbWFpbAogICAgICBmaWx0ZXI6IChvYmplY3RDbGFzcz1wZXJzb24pCiAgICAgIGlkQXR0cjogRE4KICAgICAgbmFtZUF0dHI6IGNuCiAgICAgIHVzZXJuYW1lOiBtYWlsCiAgICB1c2VybmFtZVByb21wdDogRW1haWwgQWRkcmVzcwogIGlkOiBsZGFwCiAgbmFtZTogT3BlbkxEQVAKICB0eXBlOiBsZGFwCmlzc3VlcjogaHR0cDovL3RlcnJha3ViZS1hcGkubWluaWt1YmUubmV0L2RleApvYXV0aDI6CiAgcmVzcG9uc2VUeXBlczoKICAtIGNvZGUKICAtIHRva2VuCiAgLSBpZF90b2tlbgpzdGF0aWNDbGllbnRzOgotIGlkOiBleGFtcGxlLWFwcAogIG5hbWU6IGV4YW1wbGUtYXBwCiAgcHVibGljOiB0cnVlCiAgcmVkaXJlY3RVUklzOgogIC0gaHR0cDovL3RlcnJha3ViZS11aS5taW5pa3ViZS5uZXQKICAtIC9kZXZpY2UvY2FsbGJhY2sKICAtIGh0dHA6Ly9sb2NhbGhvc3Q6MTAwMDAvbG9naW4KICAtIGh0dHA6Ly9sb2NhbGhvc3Q6MTAwMDEvbG9naW4Kc3RvcmFnZToKICB0eXBlOiBtZW1vcnkKd2ViOgogIGFsbG93ZWRPcmlnaW5zOgogIC0gJyonCiAgaHR0cDogMC4wLjAuMDo1NTU2CiAgc2tpcEFwcHJvdmFsU2NyZWVuOiB0cnVl"
---
# Source: terrakube/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-user: "YWRtaW4="
  root-password: "c3VwZXJhZG1pbg=="
---
# Source: terrakube/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "VkxEbURlTnJUZQ=="
  password: "dGVycmFrdWJlcGFzc3dvcmQ="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: terrakube/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "N3A5aVdWZVJWNFM5NDQ="
---
# Source: terrakube/templates/secret-dex.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-dex-secrets
type: Opaque
stringData:
  # This is just to mount the GCP credentials inside a volume in dex
  gcp-credentials: "empty"
---
# Source: terrakube/templates/secret-openldap.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-openldap-secrets
type: Opaque
stringData:
  config-ldap.ldif: |
    dn: dc=example,dc=org
    dc: example
    objectClass: dcObject
    objectClass: organization
    o: Example, Inc

    dn: ou=users,dc=example,dc=org
    ou: users
    objectClass: organizationalunit

    dn: cn=lester,ou=users,dc=example,dc=org
    objectClass: inetOrgPerson
    sn: Parkinson
    cn: Lester
    mail: admin@example.com
    userpassword: admin

    dn: cn=grady,ou=users,dc=example,dc=org
    objectClass: inetOrgPerson
    sn: Chambers
    cn: Grady
    mail: aws@example.com
    userpassword: azure

    dn: cn=saarah,ou=users,dc=example,dc=org
    objectClass: inetOrgPerson
    sn: Lott
    cn: Saarah
    mail: azure@example.com
    userpassword: aws

    dn: cn=eugene,ou=users,dc=example,dc=org
    objectClass: inetOrgPerson
    sn: Monaghan
    cn: Eugene
    mail: gcp@example.com
    userpassword: gcp

    # Group definitions.

    dn: ou=Groups,dc=example,dc=org
    objectClass: organizationalUnit
    ou: Groups

    dn: cn=TERRAKUBE_ADMIN,ou=Groups,dc=example,dc=org
    objectClass: groupOfNames
    cn: TERRAKUBE_ADMIN
    member: cn=lester,ou=users,dc=example,dc=org

    dn: cn=TERRAKUBE_DEVELOPERS,ou=Groups,dc=example,dc=org
    objectClass: groupOfNames
    cn: TERRAKUBE_DEVELOPERS
    member: cn=lester,ou=users,dc=example,dc=org

    dn: cn=AZURE_DEVELOPERS,ou=Groups,dc=example,dc=org
    objectClass: groupOfNames
    cn: AZURE_DEVELOPERS
    member: cn=saarah,ou=users,dc=example,dc=org

    dn: cn=AWS_DEVELOPERS,ou=Groups,dc=example,dc=org
    objectClass: groupOfNames
    cn: AWS_DEVELOPERS
    member: cn=grady,ou=users,dc=example,dc=org

    dn: cn=GCP_DEVELOPERS,ou=Groups,dc=example,dc=org
    objectClass: groupOfNames
    cn: GCP_DEVELOPERS
    member: cn=eugene,ou=users,dc=example,dc=org
---
# Source: terrakube/templates/secrets-api.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-api-secrets
type: Opaque
stringData:
  GroupValidationType: 'DEX'
  UserValidationType: 'DEX'
  AuthenticationValidationType: 'DEX'
  PatSecret: 'YkFVYUFvalpQM1hoa3VFMnJXQnRSM2dSQUhQelFLa3g='
  InternalSecret: 'QXh4UGRncENpNzJmOFdoTVhDVEdodGZNUnA2QXVCZmo='
  DexIssuerUri: 'http://terrakube-api.minikube.net/dex'
  DexClientId: 'example-app'
  TerrakubeHostname: 'terrakube-api.minikube.net'
  AzBuilderExecutorUrl: 'http://terrakube-executor-service:8090/api/v1/terraform-rs'
  TerrakubeUiURL: 'http://terrakube-ui.minikube.net'
  TERRAKUBE_ADMIN_GROUP: 'TERRAKUBE_ADMIN'
  TerrakubeRedisPort: '6379'#Default Redis
  TerrakubeRedisHostname: 'terrakube-redis-master'
  TerrakubeRedisPassword: 7p9iWVeRV4S944
  #AWS S3 Storage
  StorageType: 'AWS'
  AwsStorageAccessKey: 'admin'
  AwsStorageSecretKey: 'superadmin'
  AwsStorageBucketName: 'terrakube'
  AwsStorageRegion: 'us-east-1'
  AwsEndpoint: 'http://terrakube-minio:9000'

  #Checking default database options
  DatasourceHostname: 'release-name-postgresql'
  DatasourceDatabase: 'terrakube'
  DatasourceUser: 'terrakube'
  DatasourcePassword: 'terrakubepassword'
  DatasourcePort: '5432'
  ApiDataSourceType: 'POSTGRESQL'
  DatasourceSchema: 'public' 
  DatasourceSslMode: 'disable' 
  #Checking if we need to load the default data for testing
  spring_profiles_active: 'demo'  

  #Custom terraform releases url
  CustomTerraformReleasesUrl : 'https://releases.hashicorp.com/terraform/index.json' 
  ModuleCacheMaxTotal: '128' 
  ModuleCacheMaxIdle: '128' 
  ModuleCacheMinIdle: '64' 
  ModuleCacheTimeout: '600000' 
  ModuleCacheSchedule: '0 */3 * ? * *'
---
# Source: terrakube/templates/secrets-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-ca-secrets
type: Opaque
stringData: 
  type: |
    ca-certificates
---
# Source: terrakube/templates/secrets-executor.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-executor-secrets
type: Opaque
stringData:
  # General Settings
  AzBuilderApiUrl: 'http://terrakube-api-service:8080'
  InternalSecret: 'QXh4UGRncENpNzJmOFdoTVhDVEdodGZNUnA2QXVCZmo='

  ExecutorFlagBatch: 'false'
  ExecutorFlagDisableAcknowledge: 'false'
  TerrakubeToolsRepository: 'https://github.com/AzBuilder/terrakube-extensions'
  TerrakubeToolsBranch: 'main'
  TerrakubeEnableSecurity: 'true'
  TerrakubeRegistryDomain: 'terrakube-reg.minikube.net'
  TerrakubeApiUrl: 'http://terrakube-api.minikube.net'
  TerrakubeRedisPort: '6379'#Default Redis
  TerrakubeRedisHostname: 'terrakube-redis-master'
  TerrakubeRedisPassword: '7p9iWVeRV4S944'
  #AWS S3 Storage using MINIO
  TerraformStateType: 'AwsTerraformStateImpl'
  AwsTerraformStateAccessKey: 'admin'
  AwsTerraformStateSecretKey: 'superadmin'
  AwsTerraformStateBucketName: 'terrakube'
  AwsTerraformStateRegion: 'us-east-1'
  TerraformOutputType: 'AwsTerraformOutputImpl'
  AwsTerraformOutputAccessKey: 'admin'
  AwsTerraformOutputSecretKey: 'superadmin'
  AwsTerraformOutputBucketName: 'terrakube'
  AwsTerraformOutputRegion: 'us-east-1'
  AwsEndpoint: 'http://terrakube-minio:9000'

   

  #Custom terraform releases url
  CustomTerraformReleasesUrl : 'https://releases.hashicorp.com/terraform/index.json'
---
# Source: terrakube/templates/secrets-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-registry-secrets
type: Opaque
stringData:
  AzBuilderRegistry: 'http://terrakube-reg.minikube.net'
  AzBuilderApiUrl: 'http://terrakube-api-service:8080'
  AuthenticationValidationTypeRegistry: 'DEX'
  PatSecret: 'YkFVYUFvalpQM1hoa3VFMnJXQnRSM2dSQUhQelFLa3g='
  InternalSecret: 'QXh4UGRncENpNzJmOFdoTVhDVEdodGZNUnA2QXVCZmo='
  DexIssuerUri: 'http://terrakube-api.minikube.net/dex'
  TerrakubeEnableSecurity: 'true'
  TerrakubeUiURL: 'http://terrakube-ui.minikube.net'
  AppClientId: 'example-app'
  AppIssuerUri: 'http://terrakube-api.minikube.net/dex'#AWS S3 Storage using MINIO
  RegistryStorageType: 'AwsStorageImpl'
  AwsStorageAccessKey: 'admin'
  AwsStorageSecretKey: 'superadmin'
  AwsStorageBucketName: 'terrakube'
  AwsStorageRegion: 'us-east-1'
  AwsEndpoint: 'http://terrakube-minio:9000'
---
# Source: terrakube/templates/secrets-ui.yaml
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-ui-secrets
type: Opaque
stringData:
  # This UI configuration file is loaded in /app/env-config.js
  env-config.js: |
    window._env_ = {
      REACT_APP_TERRAKUBE_API_URL: "http://terrakube-api.minikube.net/api/v1/",
      REACT_APP_CLIENT_ID: "example-app",
      REACT_APP_AUTHORITY: "http://terrakube-api.minikube.net/dex",
      REACT_APP_REDIRECT_URI: "http://terrakube-ui.minikube.net",
      REACT_APP_REGISTRY_URI: "http://terrakube-reg.minikube.net",
      REACT_APP_SCOPE: "email openid profile offline_access groups",
      REACT_APP_TERRAKUBE_VERSION: "2.20.0",
    }
---
# Source: terrakube/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: terrakube/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: terrakube/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: terrakube/templates/configMap-files.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: terrakube-other-files
data:
  README.md: |-
    ## Secret Files
  
    All files included in this directory will be inside the kubernetes ConfigMap ***terrakube-other-files***. Kubernetes has a ConfigMap size limit of 1MB.
  
    > This is useful when we need to upload some extra files to the helm chart.
---
# Source: terrakube/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: terrakube/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list", "create"]
---
# Source: terrakube/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-dex-cluster
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: release-name-dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: release-name-dex
---
# Source: terrakube/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["dex.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: terrakube/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: release-name-dex  
subjects:
- kind: ServiceAccount
  namespace: default
  name: release-name-dex
---
# Source: terrakube/charts/dex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 5556
      targetPort: http
      protocol: TCP
      appProtocol: http
    - name: telemetry
      port: 5558
      targetPort: telemetry
      protocol: TCP
      appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
---
# Source: terrakube/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: release-name
---
# Source: terrakube/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: terrakube/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: terrakube/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
# Source: terrakube/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
# Source: terrakube/templates/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: terrakube-api-service
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: terrakube-api
---
# Source: terrakube/templates/service-executor.yaml
apiVersion: v1
kind: Service
metadata:
  name: terrakube-executor-service 
spec:
  type: ClusterIP
  ports:
  - port: 8090
    targetPort: 8090
  selector:
    app: terrakube-executor
---
# Source: terrakube/templates/service-openldap.yaml
apiVersion: v1
kind: Service
metadata:
  name: terrakube-openldap-service 
spec:
  type: "ClusterIP"
  ports:
  - port: 1389
    targetPort: 1389
  selector:
    app: terrakube-openldap
---
# Source: terrakube/templates/service-registry.yaml
apiVersion: v1
kind: Service
metadata:
  name: terrakube-registry-service 
spec:
  type: ClusterIP
  ports:
  - port: 8075
    targetPort: 8075
  selector:
    app: terrakube-registry
---
# Source: terrakube/templates/service-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: terrakube-ui-service
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: terrakube-ui
---
# Source: terrakube/charts/dex/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-dex
  labels:
    helm.sh/chart: dex-0.16.0
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.38.0"
    app.kubernetes.io/managed-by: Helm
    
  
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
      
        checksum/config: c24d5e9a556fd1f8a7c6b1f9ae311d3317d9ab4963e2f8316fa65437540b03a7
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-dex
      securityContext:
        {}
      containers:
        - name: dex
          securityContext:
            {}
          image: "ghcr.io/dexidp/dex:v2.38.0"
          imagePullPolicy: IfNotPresent
          args:
            - dex
            - serve
            - --web-http-addr
            - 0.0.0.0:5556
            - --telemetry-addr
            - 0.0.0.0:5558
            - /etc/dex/config.yaml
          env:
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: telemetry
              containerPort: 5558
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: telemetry
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: telemetry
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/dex
              readOnly: true
      volumes:
        - name: config
          secret:
            secretName: release-name-dex
        - name: gcp-credentials
          secret:
            items:
            - key: gcp-credentials
              path: gcp-credentials
            secretName: terrakube-dex-secrets
---
# Source: terrakube/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-12.1.8
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 6b7518dc198e8f45c9b37177a53be120f77610b668602cd5ba373ff4e5e80adf
    spec:
      
      serviceAccountName: release-name-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.2.22-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: root-password
            - name: MINIO_DEFAULT_BUCKETS
              value: terrakube
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-minio
---
# Source: terrakube/templates/deployment-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terrakube-api
  labels:
    app: terrakube-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terrakube-api
  template:
    metadata:
      labels:
        app: terrakube-api
      annotations:
        checksum/config: 80611f5f84e305753cb17d6034d850650f60a43ed63517cddc0f76d0602e48cd
    spec:
      containers:
      - name: terrakube-api
        image: azbuilder/api-server:2.20.0
        ports:
        - containerPort: 8080
        volumeMounts:
        envFrom:
        - secretRef:
            name: terrakube-api-secrets
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
---
# Source: terrakube/templates/deployment-executor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terrakube-executor
  labels:
    app: terrakube-executor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terrakube-executor
  template:
    metadata:
      labels:
        app: terrakube-executor
      annotations:
        checksum/config: 5aa87e32c4fb02793805d8132b53b1fdf5452f65a2861d8c3d9b1c80d98e444b
    spec:
      containers:
      - name: terrakube-executor
        image: azbuilder/executor:2.20.0
        ports:
        - containerPort: 8090
        volumeMounts:
        envFrom:
        - secretRef:
            name: terrakube-executor-secrets
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8090
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8090
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8090
          initialDelaySeconds: 120
          periodSeconds: 10
---
# Source: terrakube/templates/deployment-openldap.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terrakube-openldap
  labels:
    app: terrakube-openldap
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terrakube-openldap
  template:
    metadata:
      labels:
        app: terrakube-openldap
      annotations:
        checksum/config: fc96d78f80abeea146ae67bf4bd2559ca58242a876b148d3e4a489777b825ad8
    spec:
      containers:
      - name: terrakube-openldap
        image: bitnami/openldap:2.6.4-debian-11-r4
        env:
        - name: LDAP_ADMIN_USERNAME
          value: "admin"
        - name: LDAP_ADMIN_PASSWORD
          value: "admin"
        - name: LDAP_ROOT
          value: "dc=example,dc=org"
        - name: LDAP_CUSTOM_LDIF_DIR
          value: "/ldifs"
        ports:
        - containerPort: 1389
        volumeMounts:
        - name: openldap-config
          mountPath: "/ldifs/config-ldap.ldif"
          subPath: "config-ldap.ldif"
          readOnly: true
      volumes:
        - name: openldap-config
          secret:
            secretName: terrakube-openldap-secrets
            items:
            - key: "config-ldap.ldif"
              path: "config-ldap.ldif"
---
# Source: terrakube/templates/deployment-registry.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terrakube-registry
  labels:
    app: terrakube-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terrakube-registry
  template:
    metadata:
      labels:
        app: terrakube-registry
      annotations:
        checksum/config: 91672ed08bb3f5ec8c359e0f3ee8be3bd12e7124915dccab5682f54efb0969a9
    spec:
      containers:
      - name: terrakube-registry
        image: azbuilder/open-registry:2.20.0
        ports:
        - containerPort: 8075
        volumeMounts:
        envFrom:
        - secretRef:
            name: terrakube-registry-secrets
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8075
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8075
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8075
          initialDelaySeconds: 120
          periodSeconds: 10
---
# Source: terrakube/templates/deployment-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terrakube-ui
  labels:
    app: terrakube-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terrakube-ui
  template:
    metadata:
      labels:
        app: terrakube-ui
      annotations:
        checksum/config: db29138f083e8a4f93e89528035968be8dc5953878a7ac2d6f00cee44ab70047
    spec:
      containers:
      - name: terrakube-ui
        image: azbuilder/terrakube-ui:2.20.0
        volumeMounts:
        - name: ui-config
          mountPath: "/app/env-config.js"
          subPath: "env-config.js"
          readOnly: true
        ports:
        - containerPort: 8080
        envFrom:
        - secretRef:
            name: terrakube-ui-secrets
      volumes:
      - name: ui-config
        secret:
          secretName: terrakube-ui-secrets
          items:
          - key: env-config.js
            path: env-config.js
---
# Source: terrakube/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.2.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "terrakube"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "terrakube"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "terrakube" -d "dbname=terrakube" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "terrakube" -d "dbname=terrakube" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: terrakube/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: a01267c4afa35b00f5bf5e951e73446b3e468962b5ee878cb200520428dee0d4
        checksum/health: d0d7ec582fd41334ccf34aef92a3a47bf0dac08b72342f61034f508ed58bebec
        checksum/scripts: 84d9c8715f313df7d1c5eb7967c01484b08f185752214fb0a6f8e18986e2326a
        checksum/secret: 61d258bdaf9a840f784da17f31e44093d15475e0fab5bf88a9e9c46a38229100
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: terrakube/templates/ingress-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terrakube-api-ingress
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header Authorization
      $http_authorization;
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  
  rules:
  - host: "terrakube-api.minikube.net"
    http:
      paths:
      - path: "/"
        pathType: "Prefix"
        backend:
          service:
            name: terrakube-api-service
            port:
              number: 8080
      - path: "/dex/"
        pathType: "Prefix"
        backend:
          service:
            name: release-name-dex
            port:
              number: 5556
---
# Source: terrakube/templates/ingress-registry.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terrakube-registry-ingress
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header Authorization
      $http_authorization;
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  
  rules:
  - host:  "terrakube-reg.minikube.net"
    http:
      paths:
      - path: "/"
        pathType: "Prefix"
        backend:
          service:
            name: terrakube-registry-service
            port:
              number: 8075
---
# Source: terrakube/templates/ingress-ui.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terrakube-ui-ingress
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  
  rules:
  - host:  "terrakube-ui.minikube.net"
    http:
      paths:
      - path: "/"
        pathType: "Prefix"
        backend:
          service:
            name: terrakube-ui-service
            port:
              number: 8080
