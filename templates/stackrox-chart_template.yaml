---
# Source: stackrox-chart/templates/namespace.yaml
kind: Namespace
apiVersion: v1
metadata:
  name: "stackrox"
---
# Source: stackrox-chart/templates/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: "rhacs-operator"
  namespace: "openshift-operators"
spec:
  channel: "latest"
  installPlanApproval: "Automatic"
  name: "rhacs-operator"
  source: "redhat-operators"
  sourceNamespace: "openshift-marketplace"
---
# Source: stackrox-chart/templates/configure-stackrox-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: configure-stackrox
  namespace: "stackrox"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
# Source: stackrox-chart/templates/configure-stackrox-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: configure-stackrox
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - "customresourcedefinitions"
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - "pods"
    verbs:
      - get
      - list
      - watch
---
# Source: stackrox-chart/templates/configure-stackrox-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: configure-stackrox
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: configure-stackrox
subjects:
  - kind: ServiceAccount
    name: configure-stackrox
    namespace: "stackrox"
---
# Source: stackrox-chart/templates/configure-stackrox-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configure-stackrox-local
  namespace: "stackrox"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups:
      - ""
    resources:
      - "secrets"
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - "pods"
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "platform.stackrox.io"
    resources:
      - "securedclusters"
      - "centrals"
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - patch
      - update
---
# Source: stackrox-chart/templates/configure-stackrox-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: configure-stackrox-local
  namespace: "stackrox"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: configure-stackrox-local
subjects:
  - kind: ServiceAccount
    name: configure-stackrox
    namespace: "stackrox"
---
# Source: stackrox-chart/templates/configure-stackrox-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: configure-stackrox
  namespace: "stackrox"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
        - image: quay.io/rht-labs/stack-do500:3.0.8
          command:
            - /bin/bash
            - -c
            - |
              test false == true && set -x

              # wait for CRD
              while [ true ]; do oc get crd centrals.platform.stackrox.io; if [ $? -eq 0 ]; then break; fi ; sleep 5s; done

              # wait for operator to spin-up
              oc -n openshift-operators wait pod -l app=rhacs-operator --for=condition=Ready --timeout=180s
              if [ $? != 0 ]; then
                echo "ðŸ›‘ timed out waiting for operator pod, exiting ðŸ›‘";
                exit 1;
              fi

              # install central first
              install_central() {
                cat <<EOF | oc apply -f-
                apiVersion: platform.stackrox.io/v1alpha1
                kind: Central
                metadata:
                    namespace: "stackrox"
                    name: stackrox-central-services
                spec:
                    central:
                      exposure:
                        loadBalancer:
                          enabled: false
                          port: 443
                        nodePort:
                          enabled: false
                        route:
                          enabled: true
                      persistence:
                        persistentVolumeClaim:
                          claimName: stackrox-db
                    egress:
                      connectivityPolicy: Online
                    scanner:
                      analyzer:
                        resources:
                        limits:
                          cpu: 500m
                        requests:
                          cpu: 100m
                        scaling:
                          autoScaling: Enabled
                          maxReplicas: 5
                          minReplicas: 2
                          replicas: 3
                      scannerComponent: Enabled
              EOF
              }

              install_central
              until [ "$?" == 0 ]
              do
                  echo -e "Waiting for 0 rc from oc commands - central install"
                  ((i=i+1))
                  if [ $i -gt 5 ]; then
                      echo -e "Failed - oc central install never ready?"
                      exit 1
                  fi
                  sleep 5
                  install_central
              done

              # wait for central
              echo "waiting for stackrox-central ..."
              while test 0 == $(oc -n stackrox get pod -l app.kubernetes.io/component=central -o name 2>/dev/null | wc -l); do sleep 5; done
              oc -n stackrox wait pod -l app.kubernetes.io/component=central --for=condition=Ready --timeout=200s
              if [ $? != 0 ]; then
                echo "ðŸ›‘ timed out waiting for central, exiting ðŸ›‘";
                exit 1;
              fi
              sleep 15;

              # generate an api token
              ROX_ENDPOINT=central."stackrox"
              ROX_ADMIN_PASSWD=$(oc -n stackrox get secret central-htpasswd -o go-template='{{index .data "password" | base64decode}}')

              while test -z ${ROX_API_TOKEN}; do
                export ROX_API_TOKEN=$(curl -sk -u "admin:${ROX_ADMIN_PASSWD}" "https://$ROX_ENDPOINT/v1/apitokens/generate" -d '{"name": "tl500", "role": "Admin"}' | jq -r '.token')
                sleep 5;
              done

              # store token in a secret
              cat <<EOF | oc apply -n "stackrox" -f -
              apiVersion: v1
              data:
                token: "$(printf ${ROX_API_TOKEN} | base64 -w0)"
              kind: Secret
              metadata:
                name: rox-api-token-tl500
              EOF

              # generate init bundle
              while test ! -f /tmp/cluster_init_bundle.yaml; do
                roxctl -e "${ROX_ENDPOINT}:443" central init-bundles generate "tl500" --output-secrets /tmp/cluster_init_bundle.yaml --insecure-skip-tls-verify
                sleep 5;
              done
              oc -n stackrox apply -f /tmp/cluster_init_bundle.yaml

              # create secured cluster
              cat <<EOF | oc apply -f-
              apiVersion: platform.stackrox.io/v1alpha1
              kind: SecuredCluster
              metadata:
                name: tl500-secured-cluster
                namespace: "stackrox"
              spec:
                admissionControl:
                  listenOnCreates: false
                  listenOnEvents: true
                  listenOnUpdates: false
                auditLogs:
                  collection: Auto
                centralEndpoint: 'central.stackrox:443'
                clusterName: "tl500"
                perNode:
                  collector:
                    collection: KernelModule
                    imageFlavor: Regular
                  taintToleration: TolerateTaints
              EOF
              exit 0;
          imagePullPolicy: Always
          name: configure-stackrox
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: configure-stackrox
      serviceAccountName: configure-stackrox
      terminationGracePeriodSeconds: 10
