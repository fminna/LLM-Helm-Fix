---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### jaeger RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
  namespace: default
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: default
  labels:
    linkerd.io/extension: jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQVENDQWlXZ0F3SUJBZ0lRV2tCNFVBaE9nOWVhbVlGUGZyU1I2VEFOQmdrcWhraUc5dzBCQVFzRkFEQW0KTVNRd0lnWURWUVFERXh0cVlXVm5aWEl0YVc1cVpXTjBiM0l1WkdWbVlYVnNkQzV6ZG1Nd0hoY05NalF3TlRFMQpNRGsxTWpReFdoY05NalV3TlRFMU1EazFNalF4V2pBbU1TUXdJZ1lEVlFRREV4dHFZV1ZuWlhJdGFXNXFaV04wCmIzSXVaR1ZtWVhWc2RDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2wKSjdFa1pIaFZsZ0oyNEsvVm05MHlubHVST0x4WkJUdVQrL2lvSnY1b0ZTOUNOdVo0aVpIR2VUZytIR2o2NE5wNQpYbVk1YlV4QTQ3UGdTUU9oa2R2SlVxRjdqK1FxUlF1ZlFZTE84MGR4K0V1S285eHovK0F2bi9HV0RSSnYrMFpiCjRoOC92cFN0c0pIdFpuZW04djJ2dEloc2F5Q1FnZU9BY0pYeEVSaGhmNko0bFVsQTdRN0RRa2JtUk1OV01RLysKS0wrYzRiVHNjMnZwbXVVbU85cmI2ZEZpb296NURTQWgwTkd1NFJMTFloUU1hcExvYkFZeEdPd2VZYzdaMEY3UwpoV0R5M24vRUphUllUelhBYVdJR0xER0NUMkpidHRwRzdnamd0NFBpcU80R1BwK0J0T3p3dm84WDlYTDVYckVwClBXQjhsZGpWN21HNnNzNHBwM0pIQWdNQkFBR2paekJsTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUUKRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBbUJnTlZIUkVFSHpBZApnaHRxWVdWblpYSXRhVzVxWldOMGIzSXVaR1ZtWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCCkFLQlZ3emlDMk9zMzJsc0hUMUVES3hmazRFSkxvMkNqOWNzUGQxUUoxMytFT2NabkxDaXlwM1ltVFFBeHNDOTIKMUdYVUV3NmdjU014ZzRFT2htVWZpM0g5S0kzSWVxYXB1MnFOSkc3TUVKRkNCTW5oYWZpUnVIUjhVUUhXNUtDMgpNLzVocFViU01Id0ZXMWRCVHNjY0VUMHRubjZKY2VvOGt0R212aSs0U1UyZ21MNWRLTkdrQzJrV1RqM25yT3Z6CjAzR2lTeGpiSTBWUkhqbTk4Y3Z3dERvL0lTOTI1Ujcvd1NOaDRXR2Q4cjV4TFJIeGJHRXdRUFluWUFaMDhyREsKMVdra3dkSEp5MENBOUc1RGJML29rK3VMaE9FSS9aRW1FMTVhWk9VZ05GbVZlRXk1aEhRS3ppSlA4LzRTaTR2awo5U3lEdGlJL29xV2lwbUlVY0hxbURlQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcFNleEpHUjRWWllDZHVDdjFadmRNcDVia1RpOFdRVTdrL3Y0cUNiK2FCVXZRamJtCmVJbVJ4bms0UGh4byt1RGFlVjVtT1cxTVFPT3o0RWtEb1pIYnlWS2hlNC9rS2tVTG4wR0N6dk5IY2ZoTGlxUGMKYy8vZ0w1L3hsZzBTYi90R1crSWZQNzZVcmJDUjdXWjNwdkw5cjdTSWJHc2drSUhqZ0hDVjhSRVlZWCtpZUpWSgpRTzBPdzBKRzVrVERWakVQL2lpL25PRzA3SE5yNlpybEpqdmEyK25SWXFLTStRMGdJZERScnVFU3kySVVER3FTCjZHd0dNUmpzSG1ITzJkQmUwb1ZnOHQ1L3hDV2tXRTgxd0dsaUJpd3hnazlpVzdiYVJ1NEk0TGVENHFqdUJqNmYKZ2JUczhMNlBGL1Z5K1Y2eEtUMWdmSlhZMWU1aHVyTE9LYWR5UndJREFRQUJBb0lCQURjNm1zWnN3c0Q4TlQ3RAp6SWxHWWlZM1JxKzlwVjZ2blVqVGprZk5JbTUwQnlYQmJqa0k2RExTL3JmbWtFUzFSTm9wYzAzbyt3TUlJbkx5CmQ4QmtJbmVrcGxQSHZxbFVCWnJ3TVdvN2VMem9KM3JwYVNOeGdlcnJOY0xVQkVKbWFSVDQvVEkzN1VoWUw3U1AKKzV0Y3p2RWZFakFQY3doZ0oxQWdWa1FUVDIvcTBVZ3FITUhNS3NMR3B3SW5ub29jMEZiRlJ5Y1Bid3VwcUdURQphR3M3R01tdHdNVU44dWV2aFJUNncxMUdkbWtZQW94eVhXb3E1eFhZalNKVk4wUGtTYjdXSW9aNGtTVllQbXNSCjQ1OVNSOXNLVCttNGhEbW1sQzE4Y2d5TjcrZlBnamV6cFNWQUYvM08zbkFZR1kyOXU0SS9kUnZGczVwUGZHN1MKTW93ZUJXRUNnWUVBemRLR3AyZzNPWXV3djh0T1A3cncwdVBwU1JYR3JmeWY5QXNnem9EaWNKaFp4RVpYdUx5cgpkSlZxbzJ2YURTSWZyQUNCYWlEaStaTHVGS2MyNGlCaW14dVNvM0VKM0w1aVlqTW01bTdsZG1nb0J3dC9OS2pFClhWbHdPVzZaSTVCUjROVHNhaU5UUER0UXF5T25nZlkzQ01YblEvOXcvd0dyYW5SaytWVm5yMFVDZ1lFQXpXc1oKUmtUUmlKb3ZudFRrcUUrb3h5MG05UTFRSUtVL0hvMHJCSkZuWXFPTThGZXhlMWtXbjJUM1RRMXA4Sy8xbUxvNgpFREpMcjZ6anZXZ1lXMDZIb1dJQmNUOHFrUUx4YktBSm9LYUh6dDNjeWpac05xVUptRTZmZ1BBaUQrTzBiY2UwCkZjWGNSM2JoRzgwcXZUaUZtdGFkdnhqTGhhM3BkU3NnY2s3a2Zoc0NnWUVBd3Nic2J4aU15b1NMcTdWMlE1RmgKdmZHNUgxVGdSRjdCOEcxbmlvVWx4WEFuNHpxK1lURUxBTFUxeVptVExNS1NQbS9zQ01jK2hQaXJIaGh3TStaNQo2bGRabWhxclBwOWM4NWw4d3ExSHNabzM1eExXT3J0THVSdWV2SHNScVRvMmdoSjkrS09kYlc2a2xKQ1ZRTVFFCnFPVEFTdlU5dGRXYXBvK256dDBuMWhFQ2dZRUFuM2lya0cvUXMxbnY2a0NnbTBIc1oyUllRQm5yd014SXFqRXgKMmtQL25RWVhYbWJWOUVwL1U1TVFvaEx0MGRyb3NYNnhvTzFLOE1FcHRGdGh2VkREM3JlMUl2UEUyZnNNN2lWNApFKzMwdE5ac2w5ZVVQdi8wNlBid3dTcXJadWFCcGxCSk1EWUJBc0g1bEptOHVsVnM4MzMxek9zMDVUelVady9xCkNwUFFzMDBDZ1lCNmsxcUZQc1BuK0xrV001YTRpenpGczBpQXZXcGV1N05Xc1dReEZjV211QjRqWCt1M1RBQzgKTnVkMFJVcFpUaTROMmxucDNtS2JhcURsVXdHNVFyRVJsSnQ0REIrc3Ewc0pZSC9hekZHUWZBVXNxQU8xOFpTagpaRThCbWRCNHVyZE02bkRpKytiWUUvZGFTeDhUdUo0YktUTTE3ckZjQUVQdVgrdjJGa2lncmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        tls:
          insecure: true
    extensions:
      health_check: null
    processors:
      batch: null
      k8sattributes:
        auth_type: serviceAccount
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: kube_app_name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: kube_app_instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: kube_app_version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: kube_app_component
          - from: pod
            key: app.kubernetes.io/part-of
            tag_name: kube_app_part_of
          - from: pod
            key: app.kubernetes.io/managed-by
            tag_name: kube_app_managed_by
          metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
          - container.id
          - k8s.container.name
          - container.image.name
          - container.image.tag
          - container.id
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
      resource:
        attributes:
        - action: insert
          from_attribute: host.name
          key: k8s.pod.name
        - action: insert
          from_attribute: linkerd.io/workload-ns
          key: k8s.namespace.name
    receivers:
      opencensus: null
    service:
      extensions:
      - health_check
      pipelines:
        traces:
          exporters:
          - jaeger
          processors:
          - resource
          - k8sattributes
          - batch
          receivers:
          - opencensus
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: collector
  namespace: default
roleRef:
  kind: ClusterRole
  name: collector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Jaeger Service
###
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: default
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
    component: jaeger-injector
  name: jaeger-injector
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: 4bbe024558bacbb3b4334b97d4414161f338e821dcac4c297fa104c0b3bb01ee
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -collector-svc-addr=collector.linkerd-jaeger:55678
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:edge-24.5.1
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        checksum/config: 319d95c61f89ff68538c097cca12358ac58383e2c1d93fe3d92e35c501b0541a
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        config.linkerd.io/proxy-await: "enabled"
        linkerd.io/inject: enabled
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - command:
        - /otelcol-contrib
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector-contrib:0.83.0
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - --query.base-path=/jaeger
        image: jaegertracing/all-in-one:1.31
        name: jaeger
        ports:
        - containerPort: 14269
          name: admin
        - containerPort: 14268
          name: collection
        - containerPort: 14250
          name: grpc
        - containerPort: 16686
          name: ui
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      dnsPolicy: ClusterFirst
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp-http
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-opencensus
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-zipkin
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-thrift
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-grpc
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-grpc
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: collector
      namespace: default
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-admin
  requiredAuthenticationRefs:
    # if not using linkerd-viz' prometheus, replace its SA here
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-ui
  requiredAuthenticationRefs:
    # for the optional dashboard integration
    - kind: ServiceAccount
      name: web
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
  clientConfig:
    service:
      name: jaeger-injector
      namespace: default
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQVENDQWlXZ0F3SUJBZ0lRV2tCNFVBaE9nOWVhbVlGUGZyU1I2VEFOQmdrcWhraUc5dzBCQVFzRkFEQW0KTVNRd0lnWURWUVFERXh0cVlXVm5aWEl0YVc1cVpXTjBiM0l1WkdWbVlYVnNkQzV6ZG1Nd0hoY05NalF3TlRFMQpNRGsxTWpReFdoY05NalV3TlRFMU1EazFNalF4V2pBbU1TUXdJZ1lEVlFRREV4dHFZV1ZuWlhJdGFXNXFaV04wCmIzSXVaR1ZtWVhWc2RDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2wKSjdFa1pIaFZsZ0oyNEsvVm05MHlubHVST0x4WkJUdVQrL2lvSnY1b0ZTOUNOdVo0aVpIR2VUZytIR2o2NE5wNQpYbVk1YlV4QTQ3UGdTUU9oa2R2SlVxRjdqK1FxUlF1ZlFZTE84MGR4K0V1S285eHovK0F2bi9HV0RSSnYrMFpiCjRoOC92cFN0c0pIdFpuZW04djJ2dEloc2F5Q1FnZU9BY0pYeEVSaGhmNko0bFVsQTdRN0RRa2JtUk1OV01RLysKS0wrYzRiVHNjMnZwbXVVbU85cmI2ZEZpb296NURTQWgwTkd1NFJMTFloUU1hcExvYkFZeEdPd2VZYzdaMEY3UwpoV0R5M24vRUphUllUelhBYVdJR0xER0NUMkpidHRwRzdnamd0NFBpcU80R1BwK0J0T3p3dm84WDlYTDVYckVwClBXQjhsZGpWN21HNnNzNHBwM0pIQWdNQkFBR2paekJsTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUUKRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBbUJnTlZIUkVFSHpBZApnaHRxWVdWblpYSXRhVzVxWldOMGIzSXVaR1ZtWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCCkFLQlZ3emlDMk9zMzJsc0hUMUVES3hmazRFSkxvMkNqOWNzUGQxUUoxMytFT2NabkxDaXlwM1ltVFFBeHNDOTIKMUdYVUV3NmdjU014ZzRFT2htVWZpM0g5S0kzSWVxYXB1MnFOSkc3TUVKRkNCTW5oYWZpUnVIUjhVUUhXNUtDMgpNLzVocFViU01Id0ZXMWRCVHNjY0VUMHRubjZKY2VvOGt0R212aSs0U1UyZ21MNWRLTkdrQzJrV1RqM25yT3Z6CjAzR2lTeGpiSTBWUkhqbTk4Y3Z3dERvL0lTOTI1Ujcvd1NOaDRXR2Q4cjV4TFJIeGJHRXdRUFluWUFaMDhyREsKMVdra3dkSEp5MENBOUc1RGJML29rK3VMaE9FSS9aRW1FMTVhWk9VZ05GbVZlRXk1aEhRS3ppSlA4LzRTaTR2awo5U3lEdGlJL29xV2lwbUlVY0hxbURlQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    scope: "Namespaced"
  sideEffects: None
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  # Ideally, this should be restricted to the actual set of IPs the kube-api
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4318
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["default"]
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: jaeger-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-jaeger/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
  name: namespace-metadata
  namespace: default
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: jaeger
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: edge-24.5.1
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --extension
        - jaeger
        - --namespace
        - default
        - --linkerd-namespace
        - linkerd
