---
# Source: mariadb/templates/actionset.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  name: mariadb-physical-backup
  labels:
    clusterdefinition.kubeblocks.io/name: mariadb
    dataprotection.kubeblocks.io/is-default-policy-template: "true"
    helm.sh/chart: mariadb-0.9.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.6.15"
    app.kubernetes.io/managed-by: Helm
spec:
  env:
    - name: DATA_DIR
      value: /var/lib/mysql
  backupType: Full
  backup:
    backupData:
      image: docker.io/mariadb:10.6.15
      runOnTargetPodNode: true
      command:
        - sh
        - -c
        - |
          set -e;
          echo "DB_HOST=${DP_DB_HOST} DB_USER=${DP_DB_USER} DB_PASSWORD=${DP_DB_PASSWORD} DATA_DIR=${DATA_DIR} BACKUP_DIR=${DP_BACKUP_DIR} BACKUP_NAME=${DP_BACKUP_NAME}";
          mariadb-backup --backup  --safe-slave-backup --slave-info --stream=mbstream --host=${DP_DB_HOST} \
          --user=${DP_DB_USER} --password=${DP_DB_PASSWORD} --datadir=${DATA_DIR} > ${DATASAFED_LOCAL_BACKEND_PATH}/${DP_BACKUP_NAME}.mbstream
  restore:
    prepareData:
      image: docker.io/mariadb:10.6.15
      command:
        - sh
        - -c
        - |
          echo "BACKUP_DIR=${DP_BACKUP_BASE_PATH} BACKUP_NAME=${DP_BACKUP_NAME} DATA_DIR=${DATA_DIR}" && \
          mkdir -p /tmp/data/ && cd /tmp/data \
          && mbstream -x < /backupdata/${DP_BACKUP_NAME}.mbstream \
          && mariadb-backup --prepare --target-dir=/tmp/data/ \
          && mariadb-backup --copy-back --target-dir=/tmp/data/ \
          && find . -name "*.qp"|xargs rm -f \
          && rm -rf ${DATA_DIR}/* \
          && rsync -avrP /tmp/data/ ${DATA_DIR}/ \
          && rm -rf /tmp/data/ \
          && chmod -R 0777 ${DATA_DIR}
---
# Source: mariadb/templates/backuppolicytemplate.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: BackupPolicyTemplate
metadata:
  name: mariadb-backup-policy-template
  labels:
    clusterdefinition.kubeblocks.io/name: mariadb
    helm.sh/chart: mariadb-0.9.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.6.15"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: mariadb
  backupPolicies:
  - componentDefRef: mariadb-compdef
    backupMethods: &backupMethods
      - name: mariadb-backup
        snapshotVolumes: false
        actionSetName: mariadb-physical-backup
        targetVolumes:
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
    schedules: &backupschedules
      - backupMethod: mariadb-backup
        enabled: false
        cronExpression: "0 18 * * *"
---
# Source: mariadb/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: mariadb
spec:
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_mariadb)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_mariadb)"
  componentDefs:
    - name: mariadb-compdef
      characterType: mariadb
      workloadType: Stateful
      service:
        ports:
          - name: mariadb
            port: 3306
            targetPort: mariadb
      monitor:
        exporterConfig:
          scrapePort: 9104
          scrapePath: "/metrics"
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: mariadb-container
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /var/lib/mysql
                name: data
            ports:
              - containerPort: 3306
                name: mariadb
            env:
              - name: MARIADB_ROOT_HOST
                value: "%"
              - name: MARIADB_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MARIADB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
          - name: mysql-exporter
            ports:
              - name: metrics
                containerPort: 9104
                protocol: TCP
            env:
              - name: "MARIADB_MONITOR_USER"
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: "MARIADB_MONITOR_PASSWORD"
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: "DATA_SOURCE_NAME"
                value: "$(MARIADB_MONITOR_USER):$(MARIADB_MONITOR_PASSWORD)@(localhost:3306)/"
---
# Source: mariadb/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: mariadb-10.6.15
spec:
  clusterDefinitionRef: mariadb
  componentVersions:
  - componentDefRef: mariadb-compdef
    versionsContext:
      containers:
      - name: mariadb-container
        image: docker.io/mariadb:10.6.15
        imagePullPolicy: IfNotPresent
      - name: mysql-exporter
        image: prom/mysqld-exporter:v0.14.0
        imagePullPolicy: IfNotPresent
---
# Source: mariadb/templates/grafana/configmap-dashboards.yaml
apiVersion: v1
kind: ConfigMapList
items:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: mariadb-grafana-mariadb
      labels:
        grafana_dashboard: "1"
        app: mariadb-grafana
        helm.sh/chart: mariadb-0.9.0
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "10.6.15"
        app.kubernetes.io/managed-by: Helm
    data:
      mariadb.json: ""
