---
# Source: hono/charts/kafka/templates/provisioning/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kafka-provisioning
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
automountServiceAccountToken: false
---
# Source: hono/charts/kafka/templates/rbac/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: kafka
automountServiceAccountToken: false
---
# Source: hono/templates/hono-adapter-base/hono-adapter-sa.yaml
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "release-name-hono-adapter"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "release-name-hono-service-command-router"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
---
# Source: hono/charts/kafka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-kafka-user-passwords
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
type: Opaque
data:
  client-passwords: "aG9uby1zZWNyZXQ="
  system-user-password: "aG9uby1zZWNyZXQ="
  inter-broker-password: "UlBWSU1IS0VONQ=="
  controller-password: "MG1QcmRwMVJiZg=="
---
# Source: hono/charts/kafka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-kafka-kraft-cluster-id
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
type: Opaque
data:
  kraft-cluster-id: "TllRYlhpZGN1YUVMZm9SQ3lFWVFtZg=="
---
# Source: hono/charts/kafka/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-kafka-tls-passwords
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
type: Opaque
data:
  keystore-password: "TklSdVUwU2Yzcg=="
  truststore-password: "S3NjeDFEQ1RMSw=="
---
# Source: hono/templates/hono-adapter-amqp/hono-adapter-amqp-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-amqp-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-amqp"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ2JTcWJTekhiNUYzZ3ZHVW4KM1lvUnZydjdkbHRhR3JKa1hzQmc3dFJSMkxLaFJBTkNBQVRuZ0JpbW1KeFVmWU16VHFBREUwRnFiL1ZKaGs1NQo5b0F3ME5UZEFkMUFJR1MxTERkcnl6TXZWTXoyZDI3ZFk0WDEzNDlUVUxZK1dBQ1E2YnFZekJDUgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQVENDQWVLZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFRNd0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1dqRUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEZUQVRCZ05WQkFNTQpER0Z0Y1hBdFlXUmhjSFJsY2pCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQk9lQUdLYVluRlI5Cmd6Tk9vQU1UUVdwdjlVbUdUbm4yZ0REUTFOMEIzVUFnWkxVc04ydkxNeTlVelBaM2J0MWpoZlhmajFOUXRqNVkKQUpEcHVwak1FSkdqZ1k4d2dZd3dIUVlEVlIwT0JCWUVGS1ZpZGc5aUhVTjR5RUJ1YjBMTjMrRHhkNjduTUFzRwpBMVVkRHdRRUF3SURxREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1B3WURWUjBSCkJEZ3dOb0lSYUc5dWJ5MWhaR0Z3ZEdWeUxXRnRjWENDRm1odmJtOHRZV1JoY0hSbGNpMWhiWEZ3TG1odmJtK0MKQ1d4dlkyRnNhRzl6ZERBS0JnZ3Foa2pPUFFRREFnTkpBREJHQWlFQTBIZWRPaDcvNEZLazk0Y091TVBKNVpwcApHa2dxQWMvOWVaYWg3YkhpWjBFQ0lRRGd2SU9WSkdyaWF1SzVRMlk1elcrNlU5YTFvWExCTnIrRklQcGlvRGFxCkxnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjR6Q0NBWW1nQXdJQkFnSVVEdmZzZXZIcEY3T2JSZUFBbUdYWEhIc0FYRDB3Q2dZSUtvWkl6ajBFQXdJdwpVakVMTUFrR0ExVUVCaE1DUTBFeER6QU5CZ05WQkFjTUJrOTBkR0YzWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6ClpTQkpiMVF4RFRBTEJnTlZCQXNNQkVodmJtOHhEVEFMQmdOVkJBTU1CSEp2YjNRd0hoY05Nak13TmpJME1Ea3cKTmpBd1doY05NalF3TmpJek1Ea3dOakF3V2pCUU1Rc3dDUVlEVlFRR0V3SkRRVEVQTUEwR0ExVUVCd3dHVDNSMApZWGRoTVJRd0VnWURWUVFLREF0RlkyeHBjSE5sSUVsdlZERU5NQXNHQTFVRUN3d0VTRzl1YnpFTE1Ba0dBMVVFCkF3d0NZMkV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFwaG9WN1pKWmc3MVZSbGQ2NlBLaVcKTUhZYXRmTDcxL3h1Z2hoU3NIZmU0R1lOQTZoOXB6NlFiMGU5aDhLajZ0TFRGTlRodlowRTUwMm95NmUvQTV0cQpvejh3UFRBZEJnTlZIUTRFRmdRVWJBeVJSQ1UzWUNwN1pxMVRiR2VXL2ZhZ3FIRXdEd1lEVlIwVEFRSC9CQVV3CkF3RUIvekFMQmdOVkhROEVCQU1DQVFZd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFKYXFVdTRRU0xLM3B3Q2QKTkxtcktIb2w2ZFhxYUtTb0ZVS1lWZEFTc0ZzUkFpQnZYOFhISWRSay9BZWtjRFg0QWVqRGcxVzVFYnZQNXIxdApLaUVzVjFsMVR3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: hono/templates/hono-adapter-amqp/hono-adapter-amqp-secret.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-amqp-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-amqp"
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      amqp:
        bindAddress: "0.0.0.0"
        keyPath: "/opt/hono/tls/tls.key"
        certPath: "/opt/hono/tls/tls.crt"
        insecurePortEnabled: true
        insecurePortBindAddress: "0.0.0.0"
        tenantIdleTimeout: "1h"
      
      kafka:
        commonClientConfig:
          bootstrap.servers: "release-name-kafka-controller-headless:9092"
          security.protocol: "SASL_SSL"
          sasl.mechanism: "SCRAM-SHA-512"
          sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"hono\" password=\"hono-secret\";"
          ssl.truststore.type: "PEM"
          ssl.truststore.location: "/opt/hono/tls/ca.crt"
          ssl.endpoint.identification.algorithm: "" # Disables hostname verification. Don't do this in productive setups!
      tenant:
        name: "Hono adapter-amqp"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      registration:
        name: "Hono adapter-amqp"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      credentials:
        name: "Hono adapter-amqp"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      commandRouter:
        name: "Hono adapter-amqp"
        host: "release-name-hono-service-command-router"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
data:
  adapter.credentials: dXNlcm5hbWU9YW1xcC1hZGFwdGVyQEhPTk8KcGFzc3dvcmQ9YW1xcC1zZWNyZXQK
---
# Source: hono/templates/hono-adapter-http/hono-adapter-http-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-http-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-http"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZzhZbXI5dkFDMUEzTnVZQloKT2ZyWWpUNzlLYWhSUWo3MVFsOE44Uk1IMHVDaFJBTkNBQVFtd0x1VDR1L0grc2pWUjVpM0NSWEpycnV6bHhhdApUdjBBRkp3U2dUQXNvbG9FalhYRitzdktEZ0puYjE4MHJzWFRndUFMY0h2MVc0RzlYS1ZDVzRGKwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQRENDQWVLZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFM0d0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1dqRUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEZUQVRCZ05WQkFNTQpER2gwZEhBdFlXUmhjSFJsY2pCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkNiQXU1UGk3OGY2CnlOVkhtTGNKRmNtdXU3T1hGcTFPL1FBVW5CS0JNQ3lpV2dTTmRjWDZ5OG9PQW1kdlh6U3V4ZE9DNEF0d2UvVmIKZ2IxY3BVSmJnWDZqZ1k4d2dZd3dIUVlEVlIwT0JCWUVGRDJwQ211Z2lrMmlIZElOeWZYUVVHTDRQZStBTUFzRwpBMVVkRHdRRUF3SURxREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1B3WURWUjBSCkJEZ3dOb0lSYUc5dWJ5MWhaR0Z3ZEdWeUxXaDBkSENDRm1odmJtOHRZV1JoY0hSbGNpMW9kSFJ3TG1odmJtK0MKQ1d4dlkyRnNhRzl6ZERBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlCWEJkQU1ibXZUY1FUL2dQRHBmRWZnaFYxOQpWK0J6Uzh1YTFGTzExUWY1a1FJaEFKMFlKVm4vREZTN2ZhMlFLS1JGbTNDcDMwQkdQeGhCRWFVZkJZN1NGZW1YCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVltZ0F3SUJBZ0lVRHZmc2V2SHBGN09iUmVBQW1HWFhISHNBWEQwd0NnWUlLb1pJemowRUF3SXcKVWpFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4RFRBTEJnTlZCQU1NQkhKdmIzUXdIaGNOTWpNd05qSTBNRGt3Ck5qQXdXaGNOTWpRd05qSXpNRGt3TmpBd1dqQlFNUXN3Q1FZRFZRUUdFd0pEUVRFUE1BMEdBMVVFQnd3R1QzUjAKWVhkaE1SUXdFZ1lEVlFRS0RBdEZZMnhwY0hObElFbHZWREVOTUFzR0ExVUVDd3dFU0c5dWJ6RUxNQWtHQTFVRQpBd3dDWTJFd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRcGhvVjdaSlpnNzFWUmxkNjZQS2lXCk1IWWF0Zkw3MS94dWdoaFNzSGZlNEdZTkE2aDlwejZRYjBlOWg4S2o2dExURk5UaHZaMEU1MDJveTZlL0E1dHEKb3o4d1BUQWRCZ05WSFE0RUZnUVViQXlSUkNVM1lDcDdacTFUYkdlVy9mYWdxSEV3RHdZRFZSMFRBUUgvQkFVdwpBd0VCL3pBTEJnTlZIUThFQkFNQ0FRWXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmFxVXU0UVNMSzNwd0NkCk5MbXJLSG9sNmRYcWFLU29GVUtZVmRBU3NGc1JBaUJ2WDhYSElkUmsvQWVrY0RYNEFlakRnMVc1RWJ2UDVyMXQKS2lFc1YxbDFUdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: hono/templates/hono-adapter-http/hono-adapter-http-secret.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-http-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-http"
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      http:
        bindAddress: "0.0.0.0"
        insecurePortBindAddress: "0.0.0.0"
        insecurePortEnabled: true
        keyPath: "/opt/hono/tls/tls.key"
        certPath: "/opt/hono/tls/tls.crt"
        tenantIdleTimeout: "1h"
      
      kafka:
        commonClientConfig:
          bootstrap.servers: "release-name-kafka-controller-headless:9092"
          security.protocol: "SASL_SSL"
          sasl.mechanism: "SCRAM-SHA-512"
          sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"hono\" password=\"hono-secret\";"
          ssl.truststore.type: "PEM"
          ssl.truststore.location: "/opt/hono/tls/ca.crt"
          ssl.endpoint.identification.algorithm: "" # Disables hostname verification. Don't do this in productive setups!
      tenant:
        name: "Hono adapter-http"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      registration:
        name: "Hono adapter-http"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      credentials:
        name: "Hono adapter-http"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      commandRouter:
        name: "Hono adapter-http"
        host: "release-name-hono-service-command-router"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
data:
  adapter.credentials: dXNlcm5hbWU9aHR0cC1hZGFwdGVyQEhPTk8KcGFzc3dvcmQ9aHR0cC1zZWNyZXQK
---
# Source: hono/templates/hono-adapter-mqtt/hono-adapter-mqtt-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-mqtt-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-mqtt"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZzZZQUs5OVFIRERkMnlWSEgKWUdVNzlTaFNLaEViN0tuejkyc3VPb3QvZDIyaFJBTkNBQVJ5NE1PR3hoVFVJWEdNWXB0VHQ4Tjc0c3dLZG1UOAo1YjRlUmFlK2p4S0t5WEVha0x4N0tuLzVLckpBdzdhTTZaRTd6bjgwT3pQV05hd1NXTnBpK2pUYwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQRENDQWVLZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFRBd0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1dqRUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEZUQVRCZ05WQkFNTQpERzF4ZEhRdFlXUmhjSFJsY2pCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkhMZ3c0YkdGTlFoCmNZeGltMU8zdzN2aXpBcDJaUHpsdmg1RnA3NlBFb3JKY1JxUXZIc3FmL2txc2tERHRvenBrVHZPZnpRN005WTEKckJKWTJtTDZOTnlqZ1k4d2dZd3dIUVlEVlIwT0JCWUVGSVZZeER2VW45MmxIcldJVWFYVkFtZGl5a1MxTUFzRwpBMVVkRHdRRUF3SURxREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd1B3WURWUjBSCkJEZ3dOb0lSYUc5dWJ5MWhaR0Z3ZEdWeUxXMXhkSFNDRm1odmJtOHRZV1JoY0hSbGNpMXRjWFIwTG1odmJtK0MKQ1d4dlkyRnNhRzl6ZERBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlBQWp4N0Z0SnV0YlpqWWszczZTVzVlZGQrSwo5NWU5UWl0ekFhSGxhVHc4N2dJaEFQbS80dGJaV2pKaXVDWm1NWUNxREFCY2ovWHVncndZbmN3Y0I2eTk4S3hqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVltZ0F3SUJBZ0lVRHZmc2V2SHBGN09iUmVBQW1HWFhISHNBWEQwd0NnWUlLb1pJemowRUF3SXcKVWpFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4RFRBTEJnTlZCQU1NQkhKdmIzUXdIaGNOTWpNd05qSTBNRGt3Ck5qQXdXaGNOTWpRd05qSXpNRGt3TmpBd1dqQlFNUXN3Q1FZRFZRUUdFd0pEUVRFUE1BMEdBMVVFQnd3R1QzUjAKWVhkaE1SUXdFZ1lEVlFRS0RBdEZZMnhwY0hObElFbHZWREVOTUFzR0ExVUVDd3dFU0c5dWJ6RUxNQWtHQTFVRQpBd3dDWTJFd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRcGhvVjdaSlpnNzFWUmxkNjZQS2lXCk1IWWF0Zkw3MS94dWdoaFNzSGZlNEdZTkE2aDlwejZRYjBlOWg4S2o2dExURk5UaHZaMEU1MDJveTZlL0E1dHEKb3o4d1BUQWRCZ05WSFE0RUZnUVViQXlSUkNVM1lDcDdacTFUYkdlVy9mYWdxSEV3RHdZRFZSMFRBUUgvQkFVdwpBd0VCL3pBTEJnTlZIUThFQkFNQ0FRWXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmFxVXU0UVNMSzNwd0NkCk5MbXJLSG9sNmRYcWFLU29GVUtZVmRBU3NGc1JBaUJ2WDhYSElkUmsvQWVrY0RYNEFlakRnMVc1RWJ2UDVyMXQKS2lFc1YxbDFUdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: hono/templates/hono-adapter-mqtt/hono-adapter-mqtt-secret.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-adapter-mqtt-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-mqtt"
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      mqtt:
        bindAddress: "0.0.0.0"
        insecurePortBindAddress: "0.0.0.0"
        insecurePortEnabled: true
        keyPath: "/opt/hono/tls/tls.key"
        certPath: "/opt/hono/tls/tls.crt"
        tenantIdleTimeout: "1h"
      
      kafka:
        commonClientConfig:
          bootstrap.servers: "release-name-kafka-controller-headless:9092"
          security.protocol: "SASL_SSL"
          sasl.mechanism: "SCRAM-SHA-512"
          sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"hono\" password=\"hono-secret\";"
          ssl.truststore.type: "PEM"
          ssl.truststore.location: "/opt/hono/tls/ca.crt"
          ssl.endpoint.identification.algorithm: "" # Disables hostname verification. Don't do this in productive setups!
      tenant:
        name: "Hono adapter-mqtt"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      registration:
        name: "Hono adapter-mqtt"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      credentials:
        name: "Hono adapter-mqtt"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      commandRouter:
        name: "Hono adapter-mqtt"
        host: "release-name-hono-service-command-router"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
data:
  adapter.credentials: dXNlcm5hbWU9bXF0dC1hZGFwdGVyQEhPTk8KcGFzc3dvcmQ9bXF0dC1zZWNyZXQK
---
# Source: hono/templates/hono-service-auth/hono-service-auth-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-auth-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-auth"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ3Zxa2cveDYxOFZLZHdmWVoKNUhkYm1KNk5rdDlRREkvY0lxT3V2OWtIQm5TaFJBTkNBQVNOYmNKYmVEM04zR1Jhem93MVBWYm1lcFAycEJESgpwQTdweUhIbk9lTkxVZjh3QThTcHZIWC9RbDFwQVp4YjBEaGw1ZXIwZnJWcmhuNDJJZmQ1cmp1WgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNPakNDQWVHZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFNzd0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1dURUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEZEQVNCZ05WQkFNTQpDMkYxZEdndGMyVnlkbVZ5TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFalczQ1czZzl6ZHhrCldzNk1OVDFXNW5xVDlxUVF5YVFPNmNoeDV6bmpTMUgvTUFQRXFieDEvMEpkYVFHY1c5QTRaZVhxOUg2MWE0WisKTmlIM2VhNDdtYU9CanpDQmpEQWRCZ05WSFE0RUZnUVVtZkJ0Y293czZrekNCaVBORDZjbmxVN1F5QkV3Q3dZRApWUjBQQkFRREFnT29NQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBL0JnTlZIUkVFCk9EQTJnaEZvYjI1dkxYTmxjblpwWTJVdFlYVjBhSUlXYUc5dWJ5MXpaWEoyYVdObExXRjFkR2d1YUc5dWI0SUoKYkc5allXeG9iM04wTUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUN1RG9oaHdFRG1nc3J6Vld2T2JVNElaTjEwZApMYU4wTmI1QzI1RVo2TmNXQWlCeFJzbTRTQ0YyK3F2OHBSRGZCZkhQZCtPMGxRWm8xMWhuRng0SWxaYUZ0QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVltZ0F3SUJBZ0lVRHZmc2V2SHBGN09iUmVBQW1HWFhISHNBWEQwd0NnWUlLb1pJemowRUF3SXcKVWpFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4RFRBTEJnTlZCQU1NQkhKdmIzUXdIaGNOTWpNd05qSTBNRGt3Ck5qQXdXaGNOTWpRd05qSXpNRGt3TmpBd1dqQlFNUXN3Q1FZRFZRUUdFd0pEUVRFUE1BMEdBMVVFQnd3R1QzUjAKWVhkaE1SUXdFZ1lEVlFRS0RBdEZZMnhwY0hObElFbHZWREVOTUFzR0ExVUVDd3dFU0c5dWJ6RUxNQWtHQTFVRQpBd3dDWTJFd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRcGhvVjdaSlpnNzFWUmxkNjZQS2lXCk1IWWF0Zkw3MS94dWdoaFNzSGZlNEdZTkE2aDlwejZRYjBlOWg4S2o2dExURk5UaHZaMEU1MDJveTZlL0E1dHEKb3o4d1BUQWRCZ05WSFE0RUZnUVViQXlSUkNVM1lDcDdacTFUYkdlVy9mYWdxSEV3RHdZRFZSMFRBUUgvQkFVdwpBd0VCL3pBTEJnTlZIUThFQkFNQ0FRWXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmFxVXU0UVNMSzNwd0NkCk5MbXJLSG9sNmRYcWFLU29GVUtZVmRBU3NGc1JBaUJ2WDhYSElkUmsvQWVrY0RYNEFlakRnMVc1RWJ2UDVyMXQKS2lFc1YxbDFUdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: hono/templates/hono-service-auth/hono-service-auth-secret.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-auth-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-auth"
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      auth:
        amqp:
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
        svc:
          permissionsPath: file:///opt/hono/config/permissions.json
          signing:
            tokenExpiration: 3600
          supportedSaslMechanisms: PLAIN    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
data:
  permissions.json: ewogICJyb2xlcyI6IHsKICAgICJwcm90b2NvbC1hZGFwdGVyIjogWwogICAgICB7CiAgICAgICAgInJlc291cmNlIjogInRlbGVtZXRyeS8qIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIldSSVRFIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAicmVzb3VyY2UiOiAiZXZlbnQvKiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJXUklURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInJlc291cmNlIjogInJlZ2lzdHJhdGlvbi8qIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIlJFQUQiLCAiV1JJVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJvcGVyYXRpb24iOiAicmVnaXN0cmF0aW9uLyo6YXNzZXJ0IiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIkVYRUNVVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJvcGVyYXRpb24iOiAicmVnaXN0cmF0aW9uLyo6Z2V0IiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIkVYRUNVVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJyZXNvdXJjZSI6ICJjcmVkZW50aWFscy8qIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIlJFQUQiLCAiV1JJVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJvcGVyYXRpb24iOiAiY3JlZGVudGlhbHMvKjpnZXQiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiRVhFQ1VURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInJlc291cmNlIjogInRlbmFudCIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJSRUFEIiwgIldSSVRFIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAib3BlcmF0aW9uIjogInRlbmFudC8qOioiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiRVhFQ1VURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInJlc291cmNlIjogImNtZF9yb3V0ZXIvKiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJSRUFEIiwgIldSSVRFIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAib3BlcmF0aW9uIjogImNtZF9yb3V0ZXIvKjoqIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIkVYRUNVVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJyZXNvdXJjZSI6ICJkZXZpY2VfY29uLyoiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiUkVBRCIsICJXUklURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgIm9wZXJhdGlvbiI6ICJkZXZpY2VfY29uLyo6KiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJFWEVDVVRFIiBdCiAgICAgIH0KICAgIF0sCiAgICAiY29tbWFuZC1yb3V0ZXIiOiBbCiAgICAgIHsKICAgICAgICAicmVzb3VyY2UiOiAidGVuYW50IiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIlJFQUQiLCAiV1JJVEUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJvcGVyYXRpb24iOiAidGVuYW50Lyo6KiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJFWEVDVVRFIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAicmVzb3VyY2UiOiAicmVnaXN0cmF0aW9uLyoiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiUkVBRCIsICJXUklURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgIm9wZXJhdGlvbiI6ICJyZWdpc3RyYXRpb24vKjoqIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIkVYRUNVVEUiIF0KICAgICAgfQogICAgXSwKICAgICJkZXZpY2UtbWFuYWdlciI6IFsKICAgICAgewogICAgICAgICJyZXNvdXJjZSI6ICJyZWdpc3RyYXRpb24vKiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJSRUFEIiwgIldSSVRFIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAib3BlcmF0aW9uIjogInJlZ2lzdHJhdGlvbi8qOioiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiRVhFQ1VURSIgXQogICAgICB9CiAgICBdLAogICAgImFwcGxpY2F0aW9uIjogWwogICAgICB7CiAgICAgICAgInJlc291cmNlIjogInRlbGVtZXRyeS8qIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIlJFQUQiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJyZXNvdXJjZSI6ICJldmVudC8qIiwKICAgICAgICAiYWN0aXZpdGllcyI6IFsgIlJFQUQiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJyZXNvdXJjZSI6ICJjb250cm9sLyoiLAogICAgICAgICJhY3Rpdml0aWVzIjogWyAiUkVBRCIsICJXUklURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInJlc291cmNlIjogImNvbW1hbmQvKiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJXUklURSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInJlc291cmNlIjogImNvbW1hbmRfcmVzcG9uc2UvKiIsCiAgICAgICAgImFjdGl2aXRpZXMiOiBbICJSRUFEIiBdCiAgICAgIH0KICAgIF0KICB9LAogICJ1c2VycyI6IHsKICAgICJjb2FwLWFkYXB0ZXJASE9OTyI6IHsKICAgICAgIm1lY2hhbmlzbSI6ICJQTEFJTiIsCiAgICAgICJwYXNzd29yZCI6ICJjb2FwLXNlY3JldCIsCiAgICAgICJhdXRob3JpdGllcyI6IFsgImhvbm8tY29tcG9uZW50IiwgInByb3RvY29sLWFkYXB0ZXIiIF0KICAgIH0sCiAgICAiaHR0cC1hZGFwdGVyQEhPTk8iOiB7CiAgICAgICJtZWNoYW5pc20iOiAiUExBSU4iLAogICAgICAicGFzc3dvcmQiOiAiaHR0cC1zZWNyZXQiLAogICAgICAiYXV0aG9yaXRpZXMiOiBbICJob25vLWNvbXBvbmVudCIsICJwcm90b2NvbC1hZGFwdGVyIiBdCiAgICB9LAogICAgImxvcmEtYWRhcHRlckBIT05PIjogewogICAgICAibWVjaGFuaXNtIjogIlBMQUlOIiwKICAgICAgInBhc3N3b3JkIjogImxvcmEtc2VjcmV0IiwKICAgICAgImF1dGhvcml0aWVzIjogWyAiaG9uby1jb21wb25lbnQiLCAicHJvdG9jb2wtYWRhcHRlciIgXQogICAgfSwKICAgICJtcXR0LWFkYXB0ZXJASE9OTyI6IHsKICAgICAgIm1lY2hhbmlzbSI6ICJQTEFJTiIsCiAgICAgICJwYXNzd29yZCI6ICJtcXR0LXNlY3JldCIsCiAgICAgICJhdXRob3JpdGllcyI6IFsgImhvbm8tY29tcG9uZW50IiwgInByb3RvY29sLWFkYXB0ZXIiIF0KICAgIH0sCiAgICAiYW1xcC1hZGFwdGVyQEhPTk8iOiB7CiAgICAgICJtZWNoYW5pc20iOiAiUExBSU4iLAogICAgICAicGFzc3dvcmQiOiAiYW1xcC1zZWNyZXQiLAogICAgICAiYXV0aG9yaXRpZXMiOiBbICJob25vLWNvbXBvbmVudCIsICJwcm90b2NvbC1hZGFwdGVyIiBdCiAgICB9LAogICAgImNvbW1hbmQtcm91dGVyQEhPTk8iOiB7CiAgICAgICJtZWNoYW5pc20iOiAiUExBSU4iLAogICAgICAicGFzc3dvcmQiOiAiY21kLXJvdXRlci1zZWNyZXQiLAogICAgICAiYXV0aG9yaXRpZXMiOiBbICJob25vLWNvbXBvbmVudCIsICJjb21tYW5kLXJvdXRlciIgXQogICAgfSwKICAgICJob25vLWNsaWVudEBIT05PIjogewogICAgICAibWVjaGFuaXNtIjogIlBMQUlOIiwKICAgICAgInBhc3N3b3JkIjogInNlY3JldCIsCiAgICAgICJhdXRob3JpdGllcyI6IFsgInByb3RvY29sLWFkYXB0ZXIiLCAiZGV2aWNlLW1hbmFnZXIiIF0KICAgIH0sCiAgICAiZGV2aWNlLXJlZ2lzdHJ5IjogewogICAgICAibWVjaGFuaXNtIjogIkVYVEVSTkFMIiwKICAgICAgImF1dGhvcml0aWVzIjogW10KICAgIH0sCiAgICAiY29uc3VtZXJASE9OTyI6IHsKICAgICAgIm1lY2hhbmlzbSI6ICJQTEFJTiIsCiAgICAgICJwYXNzd29yZCI6ICJ2ZXJ5c2VjcmV0IiwKICAgICAgImF1dGhvcml0aWVzIjogWyAiYXBwbGljYXRpb24iIF0KICAgIH0KICB9Cn0K
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-command-router-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-command-router"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ2ZMQ3RKNTJiZGM3WE5sTEMKVkVhamFPM3lmOW91c1hnQy96VTJneUNpd2dtaFJBTkNBQVRham9lem1Bc2R4M09BWDN1c2gxWktNcVEyZUw1Rwpkcm5EZnpnT2NxTnBUMHJvRTFsNXAxQmdmU3oxZkNzRzhnUG0wSStkM2dWa040aFpSYS83R1FXTgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVakNDQWZpZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFMwd0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1hERUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEZ6QVZCZ05WQkFNTQpEbU52YlcxaGJtUXRjbTkxZEdWeU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTJvNkhzNWdMCkhjZHpnRjk3cklkV1NqS2tObmkrUm5hNXczODREbktqYVU5SzZCTlplYWRRWUgwczlYd3JCdklENXRDUG5kNEYKWkRlSVdVV3YreGtGamFPQm96Q0JvREFkQmdOVkhRNEVGZ1FVVDV5QXZoQTlUVWZORUZSZUJnNWhBTCtPeGk4dwpDd1lEVlIwUEJBUURBZ09vTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQlRCZ05WCkhSRUVUREJLZ2h0b2IyNXZMWE5sY25acFkyVXRZMjl0YldGdVpDMXliM1YwWlhLQ0lHaHZibTh0YzJWeWRtbGoKWlMxamIyMXRZVzVrTFhKdmRYUmxjaTVvYjI1dmdnbHNiMk5oYkdodmMzUXdDZ1lJS29aSXpqMEVBd0lEU0FBdwpSUUloQUtNc08yVHB5Qnl2V0JuWTVXTTNrdStuNGFESEM2MXNpSGhObVR2VURodXJBaUJpb3lDUGx3SThveFRzCmZRcDAyelRSa3dCbWIxMHJMRUhaTm1jRkVWcGNWQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVltZ0F3SUJBZ0lVRHZmc2V2SHBGN09iUmVBQW1HWFhISHNBWEQwd0NnWUlLb1pJemowRUF3SXcKVWpFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4RFRBTEJnTlZCQU1NQkhKdmIzUXdIaGNOTWpNd05qSTBNRGt3Ck5qQXdXaGNOTWpRd05qSXpNRGt3TmpBd1dqQlFNUXN3Q1FZRFZRUUdFd0pEUVRFUE1BMEdBMVVFQnd3R1QzUjAKWVhkaE1SUXdFZ1lEVlFRS0RBdEZZMnhwY0hObElFbHZWREVOTUFzR0ExVUVDd3dFU0c5dWJ6RUxNQWtHQTFVRQpBd3dDWTJFd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRcGhvVjdaSlpnNzFWUmxkNjZQS2lXCk1IWWF0Zkw3MS94dWdoaFNzSGZlNEdZTkE2aDlwejZRYjBlOWg4S2o2dExURk5UaHZaMEU1MDJveTZlL0E1dHEKb3o4d1BUQWRCZ05WSFE0RUZnUVViQXlSUkNVM1lDcDdacTFUYkdlVy9mYWdxSEV3RHdZRFZSMFRBUUgvQkFVdwpBd0VCL3pBTEJnTlZIUThFQkFNQ0FRWXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmFxVXU0UVNMSzNwd0NkCk5MbXJLSG9sNmRYcWFLU29GVUtZVmRBU3NGc1JBaUJ2WDhYSElkUmsvQWVrY0RYNEFlakRnMVc1RWJ2UDVyMXQKS2lFc1YxbDFUdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-secret.yaml
#
# Copyright (c) 2021 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-command-router-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-command-router"
type: Opaque
stringData:
  dns-cache-config.properties: |
    networkaddress.cache.negative.ttl=0
  application.yml: |
    hono:
      app:
        # The embedded cache is created for each service instance being deployed, so
        # we need to limit the number to one instance in order to ensure consistent cache content
        maxInstances: 1
      auth:
        host: "release-name-hono-service-auth"
        port: 5671
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
        name: "Hono service-command-router"
      commandRouter:
        amqp:
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
        cache:
      registration:
        name: "Hono service-command-router"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      tenant:
        name: "Hono service-command-router"
        host: "release-name-hono-service-device-registry"
        port: 5671
        credentialsPath: "/opt/hono/config/adapter.credentials"
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
      
      kafka:
        commonClientConfig:
          bootstrap.servers: "release-name-kafka-controller-headless:9092"
          security.protocol: "SASL_SSL"
          sasl.mechanism: "SCRAM-SHA-512"
          sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"hono\" password=\"hono-secret\";"
          ssl.truststore.type: "PEM"
          ssl.truststore.location: "/opt/hono/tls/ca.crt"
          ssl.endpoint.identification.algorithm: "" # Disables hostname verification. Don't do this in productive setups!    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
  cache-config.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!-- 
        Copyright (c) 2021, 2022 Contributors to the Eclipse Foundation
       
        See the NOTICE file(s) distributed with this work for additional
        information regarding copyright ownership.
       
        This program and the accompanying materials are made available under the
        terms of the Eclipse Public License 2.0 which is available at
        http://www.eclipse.org/legal/epl-2.0
       
        SPDX-License-Identifier: EPL-2.0
     -->
    <infinispan
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:infinispan:config:13.0 https://infinispan.org/schemas/infinispan-config-13.0.xsd"
            xmlns="urn:infinispan:config:13.0">
    
      <cache-container default-cache="command-router">
        <local-cache name="command-router" simple-cache="true">
          <encoding media-type="application/x-protostream" />
          <memory max-count="200" storage="OFF_HEAP" when-full="REMOVE"></memory>
        </local-cache>
      </cache-container>
    </infinispan>
    
data:
  adapter.credentials: dXNlcm5hbWU9Y29tbWFuZC1yb3V0ZXJASE9OTwpwYXNzd29yZD1jbWQtcm91dGVyLXNlY3JldAo=
---
# Source: hono/templates/hono-service-device-registry-base/hono-service-device-registry-example-keys.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-device-registry-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
type: Opaque
data:
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ2hoenZNRUROWjIyanpxcTAKLyt1Ym9nbHNmUTVvZXpYMlQxdGRiNWxocUNxaFJBTkNBQVFQMWwxdXU1c0c3VGNuT3NKVnJPREVIcVBLbFVoNgpBcFFQMEh3aERFTmhvbVhnK1NLTFV4aVZiQmtsM2dTb3FhQUxLbDQyWTRUMTNvRmN0ay9CeURNagotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWZ1Z0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFN3d0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1hURUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eEdEQVdCZ05WQkFNTQpEMlJsZG1salpTMXlaV2RwYzNSeWVUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJBL1dYVzY3Cm13YnROeWM2d2xXczRNUWVvOHFWU0hvQ2xBL1FmQ0VNUTJHaVplRDVJb3RUR0pWc0dTWGVCS2lwb0FzcVhqWmoKaFBYZWdWeTJUOEhJTXlPamdhVXdnYUl3SFFZRFZSME9CQllFRkdxRzJUTDZBOGhjdlhLNitERG5EVUdNUi9xdgpNQXNHQTFVZER3UUVBd0lEcURBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdWUVlEClZSMFJCRTR3VElJY2FHOXVieTF6WlhKMmFXTmxMV1JsZG1salpTMXlaV2RwYzNSeWVZSWhhRzl1YnkxelpYSjIKYVdObExXUmxkbWxqWlMxeVpXZHBjM1J5ZVM1b2IyNXZnZ2xzYjJOaGJHaHZjM1F3Q2dZSUtvWkl6ajBFQXdJRApTUUF3UmdJaEFPeXRtL2JFY2FrbmZ0citQTkJrU1BZeXZZaHo3elgzZ1A1ZENGeFo2TjJ5QWlFQXVaMUY1TndSCjI4aDdpRnhtQThxV0hsbStVeWs1VkhvajFtcTFEZTcrZU5nPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCNHpDQ0FZbWdBd0lCQWdJVUR2ZnNldkhwRjdPYlJlQUFtR1hYSEhzQVhEMHdDZ1lJS29aSXpqMEVBd0l3ClVqRUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjNZVEVVTUJJR0ExVUVDZ3dMUldOc2FYQnoKWlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eERUQUxCZ05WQkFNTUJISnZiM1F3SGhjTk1qTXdOakkwTURrdwpOakF3V2hjTk1qUXdOakl6TURrd05qQXdXakJRTVFzd0NRWURWUVFHRXdKRFFURVBNQTBHQTFVRUJ3d0dUM1IwCllYZGhNUlF3RWdZRFZRUUtEQXRGWTJ4cGNITmxJRWx2VkRFTk1Bc0dBMVVFQ3d3RVNHOXViekVMTUFrR0ExVUUKQXd3Q1kyRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUXBob1Y3WkpaZzcxVlJsZDY2UEtpVwpNSFlhdGZMNzEveHVnaGhTc0hmZTRHWU5BNmg5cHo2UWIwZTloOEtqNnRMVEZOVGh2WjBFNTAyb3k2ZS9BNXRxCm96OHdQVEFkQmdOVkhRNEVGZ1FVYkF5UlJDVTNZQ3A3WnExVGJHZVcvZmFncUhFd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QUxCZ05WSFE4RUJBTUNBUVl3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQUphcVV1NFFTTEszcHdDZApOTG1yS0hvbDZkWHFhS1NvRlVLWVZkQVNzRnNSQWlCdlg4WEhJZFJrL0Fla2NEWDRBZWpEZzFXNUVidlA1cjF0CktpRXNWMWwxVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: hono/templates/hono-service-device-registry-embedded/hono-service-device-registry-secret.yaml
#
# Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-hono-service-device-registry-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      auth:
        host: "release-name-hono-service-auth"
        port: 5671
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
        name: "Hono service-device-registry"
        supportedSaslMechanisms: "PLAIN"
        connectTimeout: 2000
      registry:
        amqp:
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
        http:
          authenticationRequired: false
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
          insecurePortEnabled: true
          insecurePortBindAddress: "0.0.0.0"
          deviceIdPattern: "^[a-zA-Z0-9-_\\.\\:]+$"
        jdbc:
          adapter:
            url: "jdbc:h2:/var/lib/hono/device-registry/registry"
            driverClass: "org.h2.Driver"
          management:
            url: "jdbc:h2:/var/lib/hono/device-registry/registry"
            driverClass: "org.h2.Driver"
      tenant:
        jdbc:
          adapter:
            url: "jdbc:h2:/var/lib/hono/device-registry/registry"
            driverClass: "org.h2.Driver"
          management:
            url: "jdbc:h2:/var/lib/hono/device-registry/registry"
            driverClass: "org.h2.Driver"
      
      kafka:
        commonClientConfig:
          bootstrap.servers: "release-name-kafka-controller-headless:9092"
          security.protocol: "SASL_SSL"
          sasl.mechanism: "SCRAM-SHA-512"
          sasl.jaas.config: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"hono\" password=\"hono-secret\";"
          ssl.truststore.type: "PEM"
          ssl.truststore.location: "/opt/hono/tls/ca.crt"
          ssl.endpoint.identification.algorithm: "" # Disables hostname verification. Don't do this in productive setups!    
    quarkus:
      console:
        color: false
      log:
        min-level: TRACE
        level: INFO
        category:
          "io.quarkus.vertx.core.runtime":
            level: DEBUG
      vertx:
        prefer-native-transport: true
        resolver:
          cache-max-time-to-live: 0
---
# Source: hono/templates/kafka/kafka-example-keys.yaml
#
# Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Secret
metadata:
  
  name: "release-name-kafka-example-keys"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "kafka"
    helm.sh/chart: "kafka-26.8.4"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "3.6.1"
    app.kubernetes.io/component: "kafka"
type: Opaque
data:
  "ca.crt": LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVltZ0F3SUJBZ0lVRHZmc2V2SHBGN09iUmVBQW1HWFhISHNBWEQwd0NnWUlLb1pJemowRUF3SXcKVWpFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4RFRBTEJnTlZCQU1NQkhKdmIzUXdIaGNOTWpNd05qSTBNRGt3Ck5qQXdXaGNOTWpRd05qSXpNRGt3TmpBd1dqQlFNUXN3Q1FZRFZRUUdFd0pEUVRFUE1BMEdBMVVFQnd3R1QzUjAKWVhkaE1SUXdFZ1lEVlFRS0RBdEZZMnhwY0hObElFbHZWREVOTUFzR0ExVUVDd3dFU0c5dWJ6RUxNQWtHQTFVRQpBd3dDWTJFd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRcGhvVjdaSlpnNzFWUmxkNjZQS2lXCk1IWWF0Zkw3MS94dWdoaFNzSGZlNEdZTkE2aDlwejZRYjBlOWg4S2o2dExURk5UaHZaMEU1MDJveTZlL0E1dHEKb3o4d1BUQWRCZ05WSFE0RUZnUVViQXlSUkNVM1lDcDdacTFUYkdlVy9mYWdxSEV3RHdZRFZSMFRBUUgvQkFVdwpBd0VCL3pBTEJnTlZIUThFQkFNQ0FRWXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmFxVXU0UVNMSzNwd0NkCk5MbXJLSG9sNmRYcWFLU29GVUtZVmRBU3NGc1JBaUJ2WDhYSElkUmsvQWVrY0RYNEFlakRnMVc1RWJ2UDVyMXQKS2lFc1YxbDFUdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  "tls.crt": LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQakNDQWVPZ0F3SUJBZ0lVQjJ2eFdJOXdqMzJPSExhQUJWVitpdVZrZFRVd0NnWUlLb1pJemowRUF3SXcKVURFTE1Ba0dBMVVFQmhNQ1EwRXhEekFOQmdOVkJBY01CazkwZEdGM1lURVVNQklHQTFVRUNnd0xSV05zYVhCegpaU0JKYjFReERUQUxCZ05WQkFzTUJFaHZibTh4Q3pBSkJnTlZCQU1NQW1OaE1CNFhEVEl6TURZeU5EQTVNRFl3Ck1Gb1hEVEkwTURZeU16QTVNRFl3TUZvd1V6RUxNQWtHQTFVRUJoTUNRMEV4RHpBTkJnTlZCQWNNQms5MGRHRjMKWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6WlNCSmIxUXhEVEFMQmdOVkJBc01CRWh2Ym04eERqQU1CZ05WQkFNTQpCV3RoWm10aE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU0yTitMS0kyYWEwNS83cVI0cDNMCnRMM3hwdGlQRXJDSU0rb0NIdGY2NTZaMDVMRWZsOTRlVzI4VWpOSVppTGVkMmpPdWptaWQyNEpyRE9laFVnS3YKaXFPQmx6Q0JsREFkQmdOVkhRNEVGZ1FVaXUzSytxVEpQZ29GNXYxTGFUb1FDREdXYlNvd0N3WURWUjBQQkFRRApBZ09vTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQkhCZ05WSFJFRVFEQStnaFVxCkxtaHZibTh0YTJGbWEyRXRhR1ZoWkd4bGMzT0NHaW91YUc5dWJ5MXJZV1pyWVMxb1pXRmtiR1Z6Y3k1b2IyNXYKZ2dsc2IyTmhiR2h2YzNRd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFPZHhGTjlhMHNKc29WWGdJbFo3VUZUWQpDMnpmVXNvVld4WlBZdkJVenhnbUFpRUE5OHhFd3lYUFlPME5leGR2bFNNTzNScW5lNEVHMU81cjRTQmIxRWFnCkJzaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjR6Q0NBWW1nQXdJQkFnSVVEdmZzZXZIcEY3T2JSZUFBbUdYWEhIc0FYRDB3Q2dZSUtvWkl6ajBFQXdJdwpVakVMTUFrR0ExVUVCaE1DUTBFeER6QU5CZ05WQkFjTUJrOTBkR0YzWVRFVU1CSUdBMVVFQ2d3TFJXTnNhWEJ6ClpTQkpiMVF4RFRBTEJnTlZCQXNNQkVodmJtOHhEVEFMQmdOVkJBTU1CSEp2YjNRd0hoY05Nak13TmpJME1Ea3cKTmpBd1doY05NalF3TmpJek1Ea3dOakF3V2pCUU1Rc3dDUVlEVlFRR0V3SkRRVEVQTUEwR0ExVUVCd3dHVDNSMApZWGRoTVJRd0VnWURWUVFLREF0RlkyeHBjSE5sSUVsdlZERU5NQXNHQTFVRUN3d0VTRzl1YnpFTE1Ba0dBMVVFCkF3d0NZMkV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFwaG9WN1pKWmc3MVZSbGQ2NlBLaVcKTUhZYXRmTDcxL3h1Z2hoU3NIZmU0R1lOQTZoOXB6NlFiMGU5aDhLajZ0TFRGTlRodlowRTUwMm95NmUvQTV0cQpvejh3UFRBZEJnTlZIUTRFRmdRVWJBeVJSQ1UzWUNwN1pxMVRiR2VXL2ZhZ3FIRXdEd1lEVlIwVEFRSC9CQVV3CkF3RUIvekFMQmdOVkhROEVCQU1DQVFZd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFKYXFVdTRRU0xLM3B3Q2QKTkxtcktIb2w2ZFhxYUtTb0ZVS1lWZEFTc0ZzUkFpQnZYOFhISWRSay9BZWtjRFg0QWVqRGcxVzVFYnZQNXIxdApLaUVzVjFsMVR3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  "tls.key": LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ3BQemdHRXdldkZCNWcxbG8KWTYrUGNnWHZrK2VqVDZPR05veGJ3VEVjTUJXaFJBTkNBQVF6WTM0c29qWnByVG4vdXBIaW5jdTB2ZkdtMkk4UwpzSWd6NmdJZTEvcm5wblRrc1IrWDNoNWJieFNNMGhtSXQ1M2FNNjZPYUozYmdtc001NkZTQXErSwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: hono/charts/kafka/templates/controller-eligible/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kafka-controller-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
data:
  server.properties: |-
    # Listeners configuration
    listeners=CLIENT://:9092,INTERNAL://:9094,EXTERNAL://:9095,CONTROLLER://:9093
    advertised.listeners=CLIENT://advertised-address-placeholder:9092,INTERNAL://advertised-address-placeholder:9094
    listener.security.protocol.map=CLIENT:SASL_SSL,INTERNAL:SASL_PLAINTEXT,CONTROLLER:SASL_PLAINTEXT,EXTERNAL:SASL_SSL
    # KRaft process roles
    process.roles=controller,broker
    #node.id=
    controller.listener.names=CONTROLLER
    controller.quorum.voters=0@release-name-kafka-controller-0.release-name-kafka-controller-headless.default.svc.cluster.local:9093
    # Kraft Controller listener SASL settings
    sasl.mechanism.controller.protocol=PLAIN
    listener.name.controller.sasl.enabled.mechanisms=PLAIN
    listener.name.controller.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="controller_user" password="controller-password-placeholder" user_controller_user="controller-password-placeholder";
    # Kafka data logs directory
    log.dir=/bitnami/kafka/data
    # Kafka application logs directory
    logs.dir=/opt/bitnami/kafka/logs
    
    sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
    # Interbroker configuration
    inter.broker.listener.name=INTERNAL
    sasl.mechanism.inter.broker.protocol=PLAIN
    # TLS configuration
    ssl.keystore.type=JKS
    ssl.truststore.type=JKS
    ssl.keystore.location=/opt/bitnami/kafka/config/certs/kafka.keystore.jks
    ssl.truststore.location=/opt/bitnami/kafka/config/certs/kafka.truststore.jks
    #ssl.keystore.password=
    #ssl.truststore.password=
    #ssl.key.password=
    ssl.client.auth=required
    ssl.endpoint.identification.algorithm=https
    # Listeners SASL JAAS configuration
    listener.name.client.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required user_hono="password-placeholder-0";
    listener.name.client.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    listener.name.client.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    listener.name.internal.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="inter_broker_user" password="interbroker-password-placeholder" user_inter_broker_user="interbroker-password-placeholder" user_hono="password-placeholder-0";
    listener.name.internal.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.name.internal.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.name.external.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required user_hono="password-placeholder-0";
    listener.name.external.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    listener.name.external.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    # End of SASL JAAS configuration
    
    group.initial.rebalance.delay.ms=0
    offsets.topic.replication.factor=1
    transaction.state.log.min.isr=1
    transaction.state.log.replication.factor=1
---
# Source: hono/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kafka-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
data:
  auto-discovery.sh: |-
    #!/bin/bash
    SVC_NAME="${MY_POD_NAME}-external"
    AUTODISCOVERY_SERVICE_TYPE="${AUTODISCOVERY_SERVICE_TYPE:-}"
    # Auxiliary functions
    retry_while() {
        local -r cmd="${1:?cmd is missing}"
        local -r retries="${2:-12}"
        local -r sleep_time="${3:-5}"
        local return_value=1

        read -r -a command <<< "$cmd"
        for ((i = 1 ; i <= retries ; i+=1 )); do
            "${command[@]}" && return_value=0 && break
            sleep "$sleep_time"
        done
        return $return_value
    }
    k8s_svc_lb_ip() {
        local namespace=${1:?namespace is missing}
        local service=${2:?service is missing}
        local service_ip=$(kubectl get svc "$service" -n "$namespace" -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        local service_hostname=$(kubectl get svc "$service" -n "$namespace" -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")

        if [[ -n ${service_ip} ]]; then
            echo "${service_ip}"
        else
            echo "${service_hostname}"
        fi
    }
    k8s_svc_lb_ip_ready() {
        local namespace=${1:?namespace is missing}
        local service=${2:?service is missing}
        [[ -n "$(k8s_svc_lb_ip "$namespace" "$service")" ]]
    }
    k8s_svc_node_port() {
        local namespace=${1:?namespace is missing}
        local service=${2:?service is missing}
        local index=${3:-0}
        local node_port="$(kubectl get svc "$service" -n "$namespace" -o jsonpath="{.spec.ports[$index].nodePort}")"
        echo "$node_port"
    }

    if [[ "$AUTODISCOVERY_SERVICE_TYPE" = "LoadBalancer" ]]; then
      # Wait until LoadBalancer IP is ready
      retry_while "k8s_svc_lb_ip_ready default $SVC_NAME" || exit 1
      # Obtain LoadBalancer external IP
      k8s_svc_lb_ip "default" "$SVC_NAME" | tee "/shared/external-host.txt"
    elif [[ "$AUTODISCOVERY_SERVICE_TYPE" = "NodePort" ]]; then
      k8s_svc_node_port "default" "$SVC_NAME" | tee "/shared/external-port.txt"
    else
      echo "Unsupported autodiscovery service type: '$AUTODISCOVERY_SERVICE_TYPE'"
      exit 1
    fi
  kafka-init.sh: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    error(){
      local message="${1:?missing message}"
      echo "ERROR: ${message}"
      exit 1
    }

    retry_while() {
        local -r cmd="${1:?cmd is missing}"
        local -r retries="${2:-12}"
        local -r sleep_time="${3:-5}"
        local return_value=1

        read -r -a command <<< "$cmd"
        for ((i = 1 ; i <= retries ; i+=1 )); do
            "${command[@]}" && return_value=0 && break
            sleep "$sleep_time"
        done
        return $return_value
    }

    replace_in_file() {
        local filename="${1:?filename is required}"
        local match_regex="${2:?match regex is required}"
        local substitute_regex="${3:?substitute regex is required}"
        local posix_regex=${4:-true}

        local result

        # We should avoid using 'sed in-place' substitutions
        # 1) They are not compatible with files mounted from ConfigMap(s)
        # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
        local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
        if [[ $posix_regex = true ]]; then
            result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        else
            result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        fi
        echo "$result" > "$filename"
    }

    kafka_conf_set() {
        local file="${1:?missing file}"
        local key="${2:?missing key}"
        local value="${3:?missing value}"

        # Check if the value was set before
        if grep -q "^[#\\s]*$key\s*=.*" "$file"; then
            # Update the existing key
            replace_in_file "$file" "^[#\\s]*${key}\s*=.*" "${key}=${value}" false
        else
            # Add a new key
            printf '\n%s=%s' "$key" "$value" >>"$file"
        fi
    }

    replace_placeholder() {
      local placeholder="${1:?missing placeholder value}"
      local password="${2:?missing password value}"
      sed -i "s/$placeholder/$password/g" "$KAFKA_CONFIG_FILE"
    }

    append_file_to_kafka_conf() {
        local file="${1:?missing source file}"
        local conf="${2:?missing kafka conf file}"

        cat "$1" >> "$2"
    }

    configure_external_access() {
      # Configure external hostname
      if [[ -f "/shared/external-host.txt" ]]; then
        host=$(cat "/shared/external-host.txt")
      elif [[ -n "${EXTERNAL_ACCESS_HOST:-}" ]]; then
        host="$EXTERNAL_ACCESS_HOST"
      elif [[ -n "${EXTERNAL_ACCESS_HOSTS_LIST:-}" ]]; then
        read -r -a hosts <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_HOSTS_LIST}")"
        host="${hosts[$POD_ID]}"
      elif [[ "$EXTERNAL_ACCESS_HOST_USE_PUBLIC_IP" =~ ^(yes|true)$ ]]; then
        host=$(curl -s https://ipinfo.io/ip)
      else
        error "External access hostname not provided"
      fi

      # Configure external port
      if [[ -f "/shared/external-port.txt" ]]; then
        port=$(cat "/shared/external-port.txt")
      elif [[ -n "${EXTERNAL_ACCESS_PORT:-}" ]]; then
        if [[ "${EXTERNAL_ACCESS_PORT_AUTOINCREMENT:-}" =~ ^(yes|true)$ ]]; then
          port="$((EXTERNAL_ACCESS_PORT + POD_ID))"
        else
          port="$EXTERNAL_ACCESS_PORT"
        fi
      elif [[ -n "${EXTERNAL_ACCESS_PORTS_LIST:-}" ]]; then
        read -r -a ports <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_PORTS_LIST}")"
        port="${ports[$POD_ID]}"
      else
        error "External access port not provided"
      fi
      # Configure Kafka advertised listeners
      sed -i -E "s|^(advertised\.listeners=\S+)$|\1,EXTERNAL://${host}:${port}|" "$KAFKA_CONFIG_FILE"
    }
    configure_kafka_tls() {
      # Remove previously existing keystores and certificates, if any
      rm -f /certs/kafka.keystore.jks /certs/kafka.truststore.jks
      rm -f /certs/tls.crt /certs/tls.key /certs/ca.crt
      find /certs -name "xx*" -exec rm {} \;
      if [[ "${KAFKA_TLS_TYPE}" = "PEM" ]]; then
        # Copy PEM certificate and key
        if [[ -f "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.crt" && "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.key" ]]; then
          cp "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.crt" /certs/tls.crt
          # Copy the PEM key ensuring the key used PEM format with PKCS#8
          openssl pkcs8 -topk8 -nocrypt -in "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.key" > /certs/tls.key
        elif [[ -f /mounted-certs/kafka.crt && -f /mounted-certs/kafka.key ]]; then
          cp "/mounted-certs/kafka.crt" /certs/tls.crt
          # Copy the PEM key ensuring the key used PEM format with PKCS#8
          openssl pkcs8 -topk8 -nocrypt -in "/mounted-certs/kafka.key" > /certs/tls.key
        elif [[ -f /mounted-certs/tls.crt && -f /mounted-certs/tls.key ]]; then
          cp "/mounted-certs/tls.crt" /certs/tls.crt
          # Copy the PEM key ensuring the key used PEM format with PKCS#8
          openssl pkcs8 -topk8 -nocrypt -in "/mounted-certs/tls.key" > /certs/tls.key
        else
          error "PEM key and cert files not found"
        fi
        # Copy CA certificate
        if [[ -f /mounted-certs/kafka-ca.crt ]]; then
          cp /mounted-certs/kafka-ca.crt /certs/ca.crt
        elif [[ -f /mounted-certs/ca.crt ]]; then
          cp /mounted-certs/ca.crt /certs/ca.crt
        else
          error "CA certificate file not found"
        fi

        # Create JKS keystore from PEM cert and key
        openssl pkcs12 -export -in "/certs/tls.crt" \
          -passout pass:"${KAFKA_TLS_KEYSTORE_PASSWORD}" \
          -inkey "/certs/tls.key" \
          -out "/certs/kafka.keystore.p12"
        keytool -importkeystore -srckeystore "/certs/kafka.keystore.p12" \
          -srcstoretype PKCS12 \
          -srcstorepass "${KAFKA_TLS_KEYSTORE_PASSWORD}" \
          -deststorepass "${KAFKA_TLS_KEYSTORE_PASSWORD}" \
          -destkeystore "/certs/kafka.keystore.jks" \
          -noprompt
        # Create JKS truststore from CA cert
        keytool -keystore /certs/kafka.truststore.jks -alias CARoot -import -file /certs/ca.crt -storepass "${KAFKA_TLS_TRUSTSTORE_PASSWORD}" -noprompt
        # Remove extra files
        rm -f "/certs/kafka.keystore.p12" "/certs/tls.crt" "/certs/tls.key" "/certs/ca.crt"
      elif [[ "${KAFKA_TLS_TYPE}" = "JKS" ]]; then
        if [[ -f "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.keystore.jks" ]]; then
          cp "/mounted-certs/kafka-${POD_ROLE}-${POD_ID}.keystore.jks" /certs/kafka.keystore.jks
        elif [[ -f "/mounted-certs/kafka.keystore.jks" ]]; then
          cp "/mounted-certs/kafka.keystore.jks" /certs/kafka.keystore.jks
        else
          error "Keystore file not found"
        fi

        if [[ -f "/mounted-certs/kafka.truststore.jks" ]]; then
          cp "/mounted-certs/kafka.truststore.jks" /certs/kafka.truststore.jks
        else
          error "Truststore file not found"
        fi
      else
        error "Invalid type ${KAFKA_TLS_TYPE}"
      fi

      # Configure TLS password settings in Kafka configuration
      [[ -n "${KAFKA_TLS_KEYSTORE_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.keystore.password" "$KAFKA_TLS_KEYSTORE_PASSWORD"
      [[ -n "${KAFKA_TLS_TRUSTSTORE_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.truststore.password" "$KAFKA_TLS_TRUSTSTORE_PASSWORD"
      [[ -n "${KAFKA_TLS_PEM_KEY_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.key.password" "$KAFKA_TLS_PEM_KEY_PASSWORD"
      # Avoid errors caused by previous checks
      true
    }
    configure_kafka_sasl() {

      # Replace placeholders with passwords
      replace_placeholder "interbroker-password-placeholder" "$KAFKA_INTER_BROKER_PASSWORD"
      replace_placeholder "controller-password-placeholder" "$KAFKA_CONTROLLER_PASSWORD"
      read -r -a passwords <<<"$(tr ',;' ' ' <<<"${KAFKA_CLIENT_PASSWORDS:-}")"
      for ((i = 0; i < ${#passwords[@]}; i++)); do
          replace_placeholder "password-placeholder-${i}" "${passwords[i]}"
      done
    }
    # Wait for autodiscovery to finish
    if [[ "${EXTERNAL_ACCESS_ENABLED:-false}" =~ ^(yes|true)$ ]]; then
      retry_while "test -f /shared/external-host.txt -o -f /shared/external-port.txt" || error "Timed out waiting for autodiscovery init-container"
    fi

    export KAFKA_CONFIG_FILE=/config/server.properties
    cp /configmaps/server.properties $KAFKA_CONFIG_FILE

    # Get pod ID and role, last and second last fields in the pod name respectively
    POD_ID=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 1 | rev)
    POD_ROLE=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 2 | rev)

    # Configure node.id and/or broker.id
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        if grep -q "broker.id" /bitnami/kafka/data/meta.properties; then
          ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        else
          ID="$(grep "node.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        fi
    else
        ID=$((POD_ID + KAFKA_MIN_ID))
        kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
    fi
    replace_placeholder "advertised-address-placeholder" "${MY_POD_NAME}.release-name-kafka-${POD_ROLE}-headless.default.svc.cluster.local"
    if [[ "${EXTERNAL_ACCESS_ENABLED:-false}" =~ ^(yes|true)$ ]]; then
      configure_external_access
    fi
    configure_kafka_tls
    configure_kafka_sasl
    if [ -f /secret-config/server-secret.properties ]; then
      append_file_to_kafka_conf /secret-config/server-secret.properties $KAFKA_CONFIG_FILE
    fi
---
# Source: hono/templates/defaults/default-logging-config.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-hono-default-logging-config"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "logging"
data:
  logging-quarkus-prod.yml: |
    quarkus:
      log:
        category:
          "org.apache.kafka":
            level: ERROR
          "org.eclipse.hono":
            level: INFO
          "org.eclipse.hono.client.impl.HonoConnectionImpl":
            level: ERROR
  logging-quarkus-dev.yml: |
    quarkus:
      log:
        category:
          "io.netty.handler.logging.LoggingHandler":
            level: DEBUG
          "org.apache.kafka":
            level: INFO
          "org.eclipse.hono":
            level: DEBUG
          "org.infinispan":
            level: DEBUG
  logging-quarkus-trace.yml: |
    quarkus:
      log:
        category:
          "io.netty.handler.logging.LoggingHandler":
            level: DEBUG
          "org.apache.kafka":
            level: INFO
          "org.eclipse.hono":
            level: TRACE
          "org.infinispan":
            level: DEBUG
---
# Source: hono/templates/defaults/example-trust-store.yaml
#
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-hono-example-trust-store"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "security"
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIB4zCCAYmgAwIBAgIUDvfsevHpF7ObReAAmGXXHHsAXD0wCgYIKoZIzj0EAwIw
    UjELMAkGA1UEBhMCQ0ExDzANBgNVBAcMBk90dGF3YTEUMBIGA1UECgwLRWNsaXBz
    ZSBJb1QxDTALBgNVBAsMBEhvbm8xDTALBgNVBAMMBHJvb3QwHhcNMjMwNjI0MDkw
    NjAwWhcNMjQwNjIzMDkwNjAwWjBQMQswCQYDVQQGEwJDQTEPMA0GA1UEBwwGT3R0
    YXdhMRQwEgYDVQQKDAtFY2xpcHNlIElvVDENMAsGA1UECwwESG9ubzELMAkGA1UE
    AwwCY2EwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQphoV7ZJZg71VRld66PKiW
    MHYatfL71/xughhSsHfe4GYNA6h9pz6Qb0e9h8Kj6tLTFNThvZ0E502oy6e/A5tq
    oz8wPTAdBgNVHQ4EFgQUbAyRRCU3YCp7Zq1TbGeW/fagqHEwDwYDVR0TAQH/BAUw
    AwEB/zALBgNVHQ8EBAMCAQYwCgYIKoZIzj0EAwIDSAAwRQIhAJaqUu4QSLK3pwCd
    NLmrKHol6dXqaKSoFUKYVdASsFsRAiBvX8XHIdRk/AekcDX4AejDg1W5EbvP5r1t
    KiEsV1l1Tw==
    -----END CERTIFICATE-----
    -----BEGIN CERTIFICATE-----
    MIICeTCCAh+gAwIBAgIUfwZ93GxLHl4pKx+jUiyh/bXYkSkwCgYIKoZIzj0EAwIw
    UjELMAkGA1UEBhMCQ0ExDzANBgNVBAcMBk90dGF3YTEUMBIGA1UECgwLRWNsaXBz
    ZSBJb1QxDTALBgNVBAsMBEhvbm8xDTALBgNVBAMMBHJvb3QwHhcNMjMwNjI0MDkw
    NjAwWhcNMjQwNjIzMDkwNjAwWjBSMQswCQYDVQQGEwJDQTEPMA0GA1UEBwwGT3R0
    YXdhMRQwEgYDVQQKDAtFY2xpcHNlIElvVDENMAsGA1UECwwESG9ubzENMAsGA1UE
    AwwEcm9vdDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAgp8l1Ao38qj7kizHpb
    5hBdid6mLc3JY67K11hocPN5z/V2SZ01Az+wo2HYtRem58KbAQNOBTvI2vDx0EUu
    d22jgdIwgc8wHQYDVR0OBBYEFD7oR5QKFx4rb18HZ+62kQ1x66cUMIGPBgNVHSME
    gYcwgYSAFD7oR5QKFx4rb18HZ+62kQ1x66cUoVakVDBSMQswCQYDVQQGEwJDQTEP
    MA0GA1UEBwwGT3R0YXdhMRQwEgYDVQQKDAtFY2xpcHNlIElvVDENMAsGA1UECwwE
    SG9ubzENMAsGA1UEAwwEcm9vdIIUfwZ93GxLHl4pKx+jUiyh/bXYkSkwDwYDVR0T
    AQH/BAUwAwEB/zALBgNVHQ8EBAMCAQYwCgYIKoZIzj0EAwIDSAAwRQIgEXB+MLWl
    LiuwXQ7w6PmcDhf646XAl3Nfo8YMSziVPIUCIQDDUfiiAnrniyFjlMKHDKk1GI/J
    UT6Pq7oL2KbKP37rNA==
    -----END CERTIFICATE-----
    -----BEGIN CERTIFICATE-----
    MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw
    TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
    cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw
    WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg
    RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
    AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP
    R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx
    sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm
    NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg
    Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG
    /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC
    AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB
    Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA
    FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw
    AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw
    Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB
    gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W
    PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl
    ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz
    CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm
    lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4
    avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2
    yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O
    yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids
    hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+
    HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv
    MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX
    nLRbwHOoq7hHwg==
    -----END CERTIFICATE-----
    -----BEGIN CERTIFICATE-----
    MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw
    TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
    cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
    WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu
    ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY
    MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc
    h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+
    0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U
    A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW
    T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH
    B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC
    B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv
    KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn
    OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn
    jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw
    qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI
    rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
    HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq
    hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL
    ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ
    3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK
    NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5
    ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur
    TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC
    jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc
    oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq
    4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA
    mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d
    emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
    -----END CERTIFICATE-----
---
# Source: hono/templates/hono-service-device-registry-base/hono-service-device-registry-post-install-configmap.yaml
#
# Copyright (c) 2020 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-hono-post-install-device-registry-conf"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
data:
  add_example_data_device_registry.sh: |
    #!/bin/sh
    #*******************************************************************************
    # Copyright (c) 2020, 2023 Contributors to the Eclipse Foundation
    #
    # See the NOTICE file(s) distributed with this work for additional
    # information regarding copyright ownership.
    #
    # This program and the accompanying materials are made available under the
    # terms of the Eclipse Public License 2.0 which is available at
    # http://www.eclipse.org/legal/epl-2.0
    #
    # SPDX-License-Identifier: EPL-2.0
    #*******************************************************************************
    URL_SCHEME="https"
    URL_PORT=$([ "${URL_SCHEME}" = "http" ] && echo "8080" || echo "8443")
    HTTP_BASE_URL="${URL_SCHEME}://release-name-hono-service-device-registry:${URL_PORT}/v1"
    
    check_status() {
      EXIT_STATUS=$1
      HTTP_RESPONSE=$2
    
      if [ $EXIT_STATUS -ne 0 ]
      then
        echo "Curl command failed [exit-code: $EXIT_STATUS]"
        exit 1
      elif [ $HTTP_RESPONSE -ne "201" ] && [ $HTTP_RESPONSE -ne "204" ] && [ $HTTP_RESPONSE -ne "409" ]
      then
        echo "Http request failed [http-response: $HTTP_RESPONSE]"
        exit 1
      fi
    }
    
    echo "Device Registry Http endpoint base url: [$HTTP_BASE_URL]"
    
    add_tenant(){
      TENANT_ID=$1
      HTTP_REQUEST_BODY=$2
    
      echo "Adding tenant [$TENANT_ID]"
      HTTP_RESPONSE=$(curl -o /dev/null -sw "%{http_code}" -k \
                        -X POST "$HTTP_BASE_URL/tenants/$TENANT_ID" \
                        --header 'Content-Type: application/json' \
                        --data-raw "$HTTP_REQUEST_BODY")
    
      check_status $? $HTTP_RESPONSE
    }
    
    register_device(){
      TENANT_ID=$1
      DEVICE_ID=$2
      HTTP_REQUEST_BODY=$3
    
      echo "Registering device [$TENANT_ID:$DEVICE_ID]"
      HTTP_RESPONSE=$(curl -o /dev/null -sw "%{http_code}" -k \
                      -X POST "$HTTP_BASE_URL/devices/$TENANT_ID/$DEVICE_ID" \
                      --header 'Content-Type: application/json' \
                      --data-raw "$HTTP_REQUEST_BODY")
    
      check_status $? $HTTP_RESPONSE
    }
    
    
    add_credentials(){
      TENANT_ID=$1
      DEVICE_ID=$2
      HTTP_REQUEST_BODY=$3
    
      echo "Adding credentials [$TENANT_ID:$DEVICE_ID]"
      HTTP_RESPONSE=$(curl -o /dev/null -sw "%{http_code}" -k \
                    -X PUT "$HTTP_BASE_URL/credentials/$TENANT_ID/$DEVICE_ID" \
                    --header 'Content-Type: application/json' \
                    --data-raw "$HTTP_REQUEST_BODY")
    
      check_status $? $HTTP_RESPONSE
    }
    
    . ./example-tenants.sh
    . ./example-devices.sh
    . ./example-credentials.sh
    
  example-tenants.sh: |
    
    #!/bin/sh
    #*******************************************************************************
    # Copyright (c) 2020, 2022 Contributors to the Eclipse Foundation
    #
    # See the NOTICE file(s) distributed with this work for additional
    # information regarding copyright ownership.
    #
    # This program and the accompanying materials are made available under the
    # terms of the Eclipse Public License 2.0 which is available at
    # http://www.eclipse.org/legal/epl-2.0
    #
    # SPDX-License-Identifier: EPL-2.0
    #*******************************************************************************
    
    DEFAULT_TENANT_TRUSTED_CA=`cat default_tenant-trusted-ca.json`
    
    add_tenant 'DEFAULT_TENANT' \
              "{
                  \"enabled\": true,
                  \"trusted-ca\": [
    $DEFAULT_TENANT_TRUSTED_CA
                  ]
                }"
    
    add_tenant 'HTTP_TENANT' \
              '{
                  "enabled": true,
                  "adapters": [
                    {
                      "type": "hono-amqp",
                      "enabled": false,
                      "device-authentication-required": true
                    },
                    {
                      "type": "hono-coap",
                      "enabled": false,
                      "device-authentication-required": true
                    },
                    {
                      "type": "hono-http",
                      "enabled": true,
                      "device-authentication-required": true
                    },
                    {
                      "type": "hono-lora",
                      "enabled": false,
                      "device-authentication-required": true
                    },
                    {
                      "type": "hono-mqtt",
                      "enabled": false,
                      "device-authentication-required": true
                    }
                  ]
                }'
    
  example-devices.sh: |
    
    #!/bin/sh
    #*******************************************************************************
    # Copyright (c) 2020 Contributors to the Eclipse Foundation
    #
    # See the NOTICE file(s) distributed with this work for additional
    # information regarding copyright ownership.
    #
    # This program and the accompanying materials are made available under the
    # terms of the Eclipse Public License 2.0 which is available at
    # http://www.eclipse.org/legal/epl-2.0
    #
    # SPDX-License-Identifier: EPL-2.0
    #*******************************************************************************
    
    register_device 'DEFAULT_TENANT' '4711' \
                    '{
                        "enabled": true,
                        "defaults": {
                            "content-type": "application/vnd.bumlux",
                            "importance": "high"
                        }
                    }'
    
    register_device 'DEFAULT_TENANT' '4712' \
                    '{
                        "enabled": true,
                        "via": [
                            "gw-1"
                        ]
                    }'
    
    register_device 'DEFAULT_TENANT' 'gw-1' \
                    '{
                        "enabled": true
                    }'
    
  example-credentials.sh: |
    
    #!/bin/sh
    #*******************************************************************************
    # Copyright (c) 2020 Contributors to the Eclipse Foundation
    #
    # See the NOTICE file(s) distributed with this work for additional
    # information regarding copyright ownership.
    #
    # This program and the accompanying materials are made available under the
    # terms of the Eclipse Public License 2.0 which is available at
    # http://www.eclipse.org/legal/epl-2.0
    #
    # SPDX-License-Identifier: EPL-2.0
    #*******************************************************************************
    
    add_credentials 'DEFAULT_TENANT' '4711' \
                    '[
                      {
                          "type": "hashed-password",
                          "auth-id": "sensor1",
                          "enabled": true,
                          "secrets": [
                              {
                                  "not-before": "2017-05-01T14:00:00+01:00",
                                  "not-after": "2037-06-01T14:00:00+01:00",
                                  "hash-function": "bcrypt",
                                  "comment": "pwd: hono-secret",
                                  "pwd-hash": "$2a$10$N7UMjhZ2hYx.yuvW9WVXZ.4y33mr6MvnpAsZ8wgLHnkamH2tZ1jD."
                              }
                          ]
                      },
                      {
                          "type": "psk",
                          "auth-id": "sensor1",
                          "enabled": true,
                          "secrets": [
                              {
                                  "not-before": "2018-01-01T00:00:00+01:00",
                                  "not-after": "2037-06-01T14:00:00+01:00",
                                  "comment": "key: hono-secret",
                                  "key": "aG9uby1zZWNyZXQ="
                              }
                          ]
                      },
                      {
                          "type": "x509-cert",
                          "auth-id": "CN=Device 4711,OU=Hono,O=Eclipse IoT,L=Ottawa,C=CA",
                          "enabled": true,
                          "secrets": [
                              {
                                  "comment": "The secrets array must contain an object, which can be empty."
                              }
                          ]
                      }]'
    
    add_credentials 'DEFAULT_TENANT' 'gw-1' \
                    '[
                          {
                              "type": "hashed-password",
                              "auth-id": "gw",
                              "enabled": true,
                              "secrets": [
                                  {
                                      "not-before": "2018-01-01T00:00:00+01:00",
                                      "not-after": "2037-06-01T14:00:00+01:00",
                                      "hash-function": "bcrypt",
                                      "comment": "pwd: gw-secret",
                                      "pwd-hash": "$2a$10$GMcN0iV9gJV7L1sH6J82Xebc1C7CGJ..Rbs./vcTuTuxPEgS9DOa6"
                                  }
                              ]
                          },
                          {
                              "type": "psk",
                              "auth-id": "gw",
                              "enabled": true,
                              "secrets": [
                                  {
                                      "not-before": "2018-01-01T00:00:00+01:00",
                                      "not-after": "2037-06-01T14:00:00+01:00",
                                      "comment": "key: gw-secret",
                                      "key": "Z3ctc2VjcmV0"
                                  }
                              ]
                          }
                  ]'
    
  default_tenant-trusted-ca.json: |
    
    {
      "subject-dn": "CN=DEFAULT_TENANT_CA,OU=Hono,O=Eclipse IoT,L=Ottawa,C=CA",
      "public-key": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuL3/RNv+etr5zVv1NqoMIIypP9ysh0cVzsf4dKIuo/iNVxhVBMfnqW77DHNK3dhvdmlvRr3ewflSlrJ2ECBjCg==",
      "algorithm": "EC",
      "not-before": "2023-06-24T11:06:00+02:00",
      "not-after": "2024-06-23T11:06:00+02:00"
    }
---
# Source: hono/templates/hono-service-device-registry-embedded/hono-service-device-registry-pvc.yaml
#
# Copyright (c) 2021 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "release-name-hono-service-device-registry"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "1Mi"
---
# Source: hono/charts/kafka/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: kafka
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
---
# Source: hono/templates/hono-adapter-base/hono-adapter-role.yaml
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "release-name-hono-adapter"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get"]
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "release-name-hono-service-command-router"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "watch"]
---
# Source: hono/charts/kafka/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: kafka
roleRef:
  kind: Role
  name: release-name-kafka
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-name-kafka
    namespace: default
---
# Source: hono/templates/hono-adapter-base/hono-adapter-rolebinding.yaml
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "release-name-hono-adapter"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
roleRef:
  kind: Role
  name: "release-name-hono-adapter"
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: "release-name-hono-adapter"
    namespace: default
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "release-name-hono-service-command-router"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
roleRef:
  kind: Role
  name: "release-name-hono-service-command-router"
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: "release-name-hono-service-command-router"
    namespace: default
---
# Source: hono/charts/kafka/templates/controller-eligible/svc-external-access.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kafka-controller-0-external
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: kafka
    pod: release-name-kafka-controller-0
spec:
  type: LoadBalancer
  allocateLoadBalancerNodePorts: true
  publishNotReadyAddresses: false
  ports:
    - name: tcp-kafka
      port: 9094
      nodePort: null
      targetPort: external
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka
    app.kubernetes.io/component: controller-eligible
    statefulset.kubernetes.io/pod-name: release-name-kafka-controller-0
---
# Source: hono/charts/kafka/templates/controller-eligible/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kafka-controller-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-interbroker
      port: 9094
      protocol: TCP
      targetPort: interbroker
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
    - name: tcp-controller
      protocol: TCP
      port: 9093
      targetPort: controller
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
---
# Source: hono/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
      nodePort: null
    - name: tcp-external
      port: 9095
      protocol: TCP
      targetPort: external
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka
---
# Source: hono/templates/hono-adapter-amqp/hono-adapter-amqp-svc.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-adapter-amqp"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-amqp"
spec:
  ports:
  - name: amqps
    port: 5671
    protocol: TCP
    targetPort: amqps
    
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "adapter-amqp"
  type: "LoadBalancer"
---
# Source: hono/templates/hono-adapter-http/hono-adapter-http-svc.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-adapter-http"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-http"
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
    
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "adapter-http"
  type: "LoadBalancer"
---
# Source: hono/templates/hono-adapter-mqtt/hono-adapter-mqtt-svc.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-adapter-mqtt"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-mqtt"
spec:
  ports:
  - name: secure-mqtt
    port: 8883
    protocol: TCP
    targetPort: secure-mqtt
    
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "adapter-mqtt"
  type: "LoadBalancer"
---
# Source: hono/templates/hono-service-auth/hono-service-auth-svc.yaml
#
# Copyright (c) 2019, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-service-auth"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-auth"
spec:
  ports:
  - name: amqps
    port: 5671
    protocol: TCP
    targetPort: amqps
  - name: validation-keys
    port: 8088
    protocol: TCP
    targetPort: health
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "service-auth"
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-svc.yaml
#
# Copyright (c) 2021, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-service-command-router"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-command-router"
spec:
  ports:
  - name: amqps
    port: 5671
    protocol: TCP
    targetPort: amqps
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "service-command-router"
---
# Source: hono/templates/hono-service-device-registry-base/hono-service-device-registry-ext-svc.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-service-device-registry-ext"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
spec:
  ports:
  - name: https
    port: 28443
    protocol: TCP
    targetPort: https
    
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "service-device-registry"
  type: "LoadBalancer"
---
# Source: hono/templates/hono-service-device-registry-base/hono-service-device-registry-svc.yaml
#
# Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-service-device-registry"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
spec:
  ports:
  - name: amqps
    port: 5671
    protocol: TCP
    targetPort: amqps
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "service-device-registry"
---
# Source: hono/templates/hono-service-device-registry-embedded/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hono-service-device-registry-headless"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
spec:
  clusterIP: "None"
  selector:
    app.kubernetes.io/name: "hono"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/component: "service-device-registry"
---
# Source: hono/templates/hono-adapter-amqp/hono-adapter-amqp-deployment.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hono-adapter-amqp"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-amqp"  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "adapter-amqp"
  template:
    metadata:
      name: "release-name-hono-adapter-amqp"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "adapter-amqp"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "adapter-amqp"
        
    spec:
      
      
      serviceAccountName: "release-name-hono-adapter"
      containers:            
      - name: "adapter-amqp"
        image: "index.docker.io/eclipse/hono-adapter-amqp:2.5.0"
        ports:
        - name: health
          containerPort: 8088
          protocol: TCP
        - name: amqps
          containerPort: 5671
          protocol: TCP
        - name: amqp
          containerPort: 5672
          protocol: TCP
        securityContext:
          privileged: false
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "tls-trust-store"
          mountPath: "/opt/hono/tls/ca.crt"
          subPath: "ca.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "adapter-amqp-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 150m
            memory: 300Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-adapter-amqp-example-keys"
      - name: "tls-trust-store"
        configMap:
          name: "release-name-hono-example-trust-store"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "adapter-amqp-conf"
        secret:
          secretName: "release-name-hono-adapter-amqp-conf"
---
# Source: hono/templates/hono-adapter-http/hono-adapter-http-deployment.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hono-adapter-http"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-http"  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "adapter-http"
  template:
    metadata:
      name: "release-name-hono-adapter-http"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "adapter-http"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "adapter-http"
        
    spec:
      
      
      serviceAccountName: "release-name-hono-adapter"
      containers:            
      - name: "adapter-http"
        image: "index.docker.io/eclipse/hono-adapter-http:2.5.0"
        ports:
        - name: health
          containerPort: 8088
          protocol: TCP
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        securityContext:
          privileged: false
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "tls-trust-store"
          mountPath: "/opt/hono/tls/ca.crt"
          subPath: "ca.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "adapter-http-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 150m
            memory: 300Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-adapter-http-example-keys"
      - name: "tls-trust-store"
        configMap:
          name: "release-name-hono-example-trust-store"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "adapter-http-conf"
        secret:
          secretName: "release-name-hono-adapter-http-conf"
---
# Source: hono/templates/hono-adapter-mqtt/hono-adapter-mqtt-deployment.yaml
#
# Copyright (c) 2019, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hono-adapter-mqtt"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "adapter-mqtt"  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "adapter-mqtt"
  template:
    metadata:
      name: "release-name-hono-adapter-mqtt"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "adapter-mqtt"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "adapter-mqtt"
        
    spec:
      
      
      serviceAccountName: "release-name-hono-adapter"
      containers:            
      - name: "adapter-mqtt"
        image: "index.docker.io/eclipse/hono-adapter-mqtt:2.5.0"
        ports:
        - name: health
          containerPort: 8088
          protocol: TCP
        - name: mqtt
          containerPort: 1883
          protocol: TCP
        - name: secure-mqtt
          containerPort: 8883
          protocol: TCP
        securityContext:
          privileged: false
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "tls-trust-store"
          mountPath: "/opt/hono/tls/ca.crt"
          subPath: "ca.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "adapter-mqtt-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 150m
            memory: 300Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-adapter-mqtt-example-keys"
      - name: "tls-trust-store"
        configMap:
          name: "release-name-hono-example-trust-store"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "adapter-mqtt-conf"
        secret:
          secretName: "release-name-hono-adapter-mqtt-conf"
---
# Source: hono/templates/hono-service-auth/hono-service-auth-deployment.yaml
#
# Copyright (c) 2019, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hono-service-auth"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-auth"  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "service-auth"
  template:
    metadata:
      name: "release-name-hono-service-auth"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "service-auth"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "service-auth"
        
    spec:
      
      
      containers:      
      - name: "service-auth"
        image: "index.docker.io/eclipse/hono-service-auth:2.5.0"
        ports:
        - name: health
          containerPort: 8088
          protocol: TCP
        - name: amqps
          containerPort: 5671
          protocol: TCP
        - name: amqp
          containerPort: 5672
          protocol: TCP
        securityContext:
          privileged: false
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "service-auth-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        resources:
          limits:
            cpu: "1"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 196Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-service-auth-example-keys"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "service-auth-conf"
        secret:
          secretName: "release-name-hono-service-auth-conf"
---
# Source: hono/templates/hono-service-command-router/hono-service-command-router-deployment.yaml
#
# Copyright (c) 2021, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hono-service-command-router"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-command-router"  
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "service-command-router"
  template:
    metadata:
      name: "release-name-hono-service-command-router"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "service-command-router"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "service-command-router"
        
    spec:
      
      
      containers:            
      - name: "service-command-router"
        image: "index.docker.io/eclipse/hono-service-command-router:2.5.0"
        ports:
        - name: health
          containerPort: 8088
          protocol: TCP
        - name: amqps
          containerPort: 5671
          protocol: TCP
        - name: amqp
          containerPort: 5672
          protocol: TCP
        securityContext:
          privileged: false
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80 -Djava.security.properties=/opt/hono/config/dns-cache-config.properties"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "tls-trust-store"
          mountPath: "/opt/hono/tls/ca.crt"
          subPath: "ca.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "service-command-router-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 150m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-service-command-router-example-keys"
      - name: "tls-trust-store"
        configMap:
          name: "release-name-hono-example-trust-store"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "service-command-router-conf"
        secret:
          secretName: "release-name-hono-service-command-router-conf"
      serviceAccountName: "release-name-hono-service-command-router"
---
# Source: hono/charts/kafka/templates/controller-eligible/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-kafka-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.4
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: release-name-kafka-controller-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 3.6.1
        helm.sh/chart: kafka-26.8.4
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: c87fbe7b5274919221c78acddebff7b135f359d3398732260e435f87e1671c12
        checksum/passwords-secret: 609063d724c99f0b821f79e37a4d2d5f5b0193940752865fc61583aa21dd8388
    spec:
      
      automountServiceAccountToken: true
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: controller-eligible
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: release-name-kafka
      enableServiceLinks: true
      initContainers:
        
        - name: auto-discovery
          image: docker.io/bitnami/kubectl:1.29.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          command:
            - /scripts/auto-discovery.sh
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: AUTODISCOVERY_SERVICE_TYPE
              value: "LoadBalancer"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          resources:
                    limits: {}
                    requests: {}
          volumeMounts:
            - name: scripts
              mountPath: /scripts/auto-discovery.sh
              subPath: auto-discovery.sh
            - name: kafka-autodiscovery-shared
              mountPath: /shared
        - name: kafka-init
          image: docker.io/bitnami/kafka:3.6.1-debian-11-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          resources:
            limits: {}
            requests: {} 
          command:
            - /bin/bash
          args:
            - -ec
            - |
              /scripts/kafka-init.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_MIN_ID
              value: "0"
            - name: EXTERNAL_ACCESS_ENABLED
              value: "true"
            - name: EXTERNAL_ACCESS_PORT
              value: "9094"
            - name: KAFKA_CLIENT_USERS
              value: "hono"
            - name: KAFKA_CLIENT_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: client-passwords
            - name: KAFKA_INTER_BROKER_USER
              value: "inter_broker_user"
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: "controller_user"
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: controller-password
            - name: KAFKA_TLS_TYPE
              value: PEM
            - name: KAFKA_TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-tls-passwords
                  key: "keystore-password"
            - name: KAFKA_TLS_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-tls-passwords
                  key: "truststore-password"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /config
            - name: kafka-configmaps
              mountPath: /configmaps
            - name: kafka-secret-config
              mountPath: /secret-config
            - name: scripts
              mountPath: /scripts
            - name: tmp
              mountPath: /tmp
            - name: kafka-autodiscovery-shared
              mountPath: /shared
            - name: kafka-shared-certs
              mountPath: /certs
            - name: kafka-certs
              mountPath: /mounted-certs
              readOnly: true
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.6.1-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-kraft-cluster-id
                  key: kraft-cluster-id
            - name: KAFKA_KRAFT_BOOTSTRAP_SCRAM_USERS
              value: "true"
            - name: KAFKA_CLIENT_USERS
              value: "hono"
            - name: KAFKA_CLIENT_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: client-passwords
            - name: KAFKA_INTER_BROKER_USER
              value: "inter_broker_user"
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: "controller_user"
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-kafka-user-passwords
                  key: controller-password
          ports:
            - name: controller
              containerPort: 9093
            - name: client
              containerPort: 9092
            - name: interbroker
              containerPort: 9094
            - name: external
              containerPort: 9095
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "controller"
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "controller"
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
            - name: tmp
              mountPath: /tmp
            - name: kafka-shared-certs
              mountPath: /opt/bitnami/kafka/config/certs
              readOnly: true
      volumes:
        - name: kafka-configmaps
          configMap:
            name: release-name-kafka-controller-configuration
        - name: kafka-secret-config
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: scripts
          configMap:
            name: release-name-kafka-scripts
            defaultMode: 493
        - name: kafka-autodiscovery-shared
          emptyDir: {}
        - name: kafka-shared-certs
          emptyDir: {}
        - name: kafka-certs
          projected:
            defaultMode: 256
            sources:
              - secret:
                  name: release-name-kafka-example-keys
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hono/templates/hono-service-device-registry-embedded/hono-service-device-registry-statefulset.yaml
#
# Copyright (c) 2021, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-hono-service-device-registry"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
spec:
  serviceName: service-device-registry-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hono"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/component: "service-device-registry"
  template:
    metadata:
      name: "release-name-hono-service-device-registry"
      namespace: "default"
      labels:
        app.kubernetes.io/name: "hono"
        helm.sh/chart: "hono-2.6.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/version: "2.5.0"
        app.kubernetes.io/component: "service-device-registry"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8088"
        prometheus.io/scheme: "http"
        kubectl.kubernetes.io/default-container: "service-device-registry"
        
    spec:
      
      
      containers:            
      - name: "service-device-registry"
        image: "index.docker.io/eclipse/hono-service-device-registry-jdbc:2.5.0"
        ports:
          - name: health
            containerPort: 8088
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          - name: amqps
            containerPort: 5671
            protocol: TCP
          - name: amqp
            containerPort: 5672
            protocol: TCP
        env:
        - name: JDK_JAVA_OPTIONS
          value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: "QUARKUS_CONFIG_LOCATIONS"
          value: "/opt/hono/default-logging-config/logging-quarkus-dev.yml"        
        securityContext:
          privileged: false
        volumeMounts:        
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.key"
          subPath: "tls.key"
          readOnly: true
        - name: "tls-keys"
          mountPath: "/opt/hono/tls/tls.crt"
          subPath: "tls.crt"
          readOnly: true
        - name: "tls-trust-store"
          mountPath: "/opt/hono/tls/ca.crt"
          subPath: "ca.crt"
          readOnly: true
        - name: "default-logging-config"
          mountPath: "/opt/hono/default-logging-config"
          readOnly: true
        - name: "service-device-registry-conf"
          mountPath: "/opt/hono/config"
          readOnly: true
        - name: "registry"
          mountPath: "/var/lib/hono/device-registry"
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 400Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 300
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
      volumes:      
      - name: "tls-keys"
        secret:
          secretName: "release-name-hono-service-device-registry-example-keys"
      - name: "tls-trust-store"
        configMap:
          name: "release-name-hono-example-trust-store"
      - name: "default-logging-config"
        configMap:
          name: "release-name-hono-default-logging-config"
          optional: true
      - name: "service-device-registry-conf"
        secret:
          secretName: "release-name-hono-service-device-registry-conf"
      - name: "registry"
        persistentVolumeClaim:
          claimName: "release-name-hono-service-device-registry"
---
# Source: hono/templates/hono-service-device-registry-embedded/headless-svc.yaml
#
# Copyright (c) 2021 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
---
# Source: hono/templates/hono-service-device-registry-base/hono-service-device-registry-post-install-job.yaml
#
# Copyright (c) 2020, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name-hono-post-install-device-registry-job"
  namespace: "default"
  labels:
    app.kubernetes.io/name: "hono"
    helm.sh/chart: "hono-2.6.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: "2.5.0"
    app.kubernetes.io/component: "service-device-registry"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    helm.sh/hook: post-install
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "release-name-hono-post-install"
    spec:
      restartPolicy: Never
      containers:
        - name: "post-install"
          image: "curlimages/curl:8.2.1"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              cd /var/run/hono/post-install-data/
              ./add_example_data_device_registry.sh
          volumeMounts:
          - name: post-install-data
            mountPath: "/var/run/hono/post-install-data"
      volumes:
      - name: post-install-data
        configMap:
          name: release-name-hono-post-install-device-registry-conf
          defaultMode: 0555
