---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-capabilities.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-capabilities
  annotations:
    policies.kyverno.io/title: Disallow Capabilities
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities beyond those listed in the policy must be disallowed.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: adding-capabilities
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN, DAC_OVERRIDE, FOWNER,
          FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT)
          are disallowed.
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.[ephemeralContainers, initContainers, containers][].securityContext.capabilities.add[] }}"
              operator: AnyNotIn
              value:
              - AUDIT_WRITE
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - MKNOD
              - NET_BIND_SERVICE
              - SETFCAP
              - SETGID
              - SETPCAP
              - SETUID
              - SYS_CHROOT
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-host-namespaces.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-host-namespaces
  annotations:
    policies.kyverno.io/title: Disallow Host Namespaces
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Host namespaces (Process ID namespace, Inter-Process Communication namespace, and
      network namespace) allow access to shared information and can be used to elevate
      privileges. Pods should not be allowed access to host namespaces. This policy ensures
      fields which make use of these host namespaces are unset or set to `false`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: host-namespaces
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
          spec.hostIPC, and spec.hostPID must be unset or set to `false`.
        pattern:
          spec:
            =(hostPID): "false"
            =(hostIPC): "false"
            =(hostNetwork): "false"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-host-path.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-host-path
  annotations:
    policies.kyverno.io/title: Disallow hostPath
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod,Volume
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      HostPath volumes let Pods use host directories and volumes in containers.
      Using host resources can be used to access shared data or escalate privileges
      and should not be allowed. This policy ensures no hostPath volumes are in use.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: host-path
      match:
        any:
        - resources:
            kinds:
              - Pod
      exclude:
        any:
        - resources:
            namespaces:
            - user-?*
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
                - paas
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          HostPath volumes are forbidden. The field spec.volumes[*].hostPath must be unset.
        pattern:
          spec:
            =(volumes):
              - X(hostPath): "null"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-host-ports.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-host-ports
  annotations:
    policies.kyverno.io/title: Disallow hostPorts
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Access to host ports allows potential snooping of network traffic and should not be
      allowed, or at minimum restricted to a known list. This policy ensures the `hostPort`
      field is unset or set to `0`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: host-ports-none
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
          , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
          must either be unset or set to `0`.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(ports):
                  - =(hostPort): 0
            =(initContainers):
              - =(ports):
                  - =(hostPort): 0
            containers:
              - =(ports):
                  - =(hostPort): 0
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-host-process.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-host-process
  annotations:
    policies.kyverno.io/title: Disallow hostProcess
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Windows pods offer the ability to run HostProcess containers which enables privileged
      access to the Windows node. Privileged access to the host is disallowed in the baseline
      policy. HostProcess pods are an alpha feature as of Kubernetes v1.22. This policy ensures
      the `hostProcess` field, if present, is set to `false`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: host-process-containers
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          HostProcess containers are disallowed. The fields spec.securityContext.windowsOptions.hostProcess,
          spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
          and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess must either be undefined
          or set to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(windowsOptions):
                    =(hostProcess): "false"
            =(initContainers):
              - =(securityContext):
                  =(windowsOptions):
                    =(hostProcess): "false"
            containers:
              - =(securityContext):
                  =(windowsOptions):
                    =(hostProcess): "false"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-privileged-containers.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privileged-containers
  annotations:
    policies.kyverno.io/title: Disallow Privileged Containers
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Privileged mode disables most security mechanisms and must not be allowed. This policy
      ensures Pods do not call for privileged mode.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: privileged-containers
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
          and spec.initContainers[*].securityContext.privileged must be unset or set to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(privileged): "false"
            =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
            containers:
              - =(securityContext):
                  =(privileged): "false"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-proc-mount.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-proc-mount
  annotations:
    policies.kyverno.io/title: Disallow procMount
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      The default /proc masks are set up to reduce attack surface and should be required. This policy
      ensures nothing but the default procMount can be specified. Note that in order for users
      to deviate from the `Default` procMount requires setting a feature gate at the API
      server.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: check-proc-mount
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Changing the proc mount from the default is not allowed. The fields
          spec.containers[*].securityContext.procMount, spec.initContainers[*].securityContext.procMount,
          and spec.ephemeralContainers[*].securityContext.procMount must be unset or
          set to `Default`.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(procMount): "Default"
            =(initContainers):
              - =(securityContext):
                  =(procMount): "Default"
            containers:
              - =(securityContext):
                  =(procMount): "Default"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/disallow-selinux.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-selinux
  annotations:
    policies.kyverno.io/title: Disallow SELinux
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      SELinux options can be used to escalate privileges and should not be allowed. This policy
      ensures that the `seLinuxOptions` field is undefined.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: selinux-type
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Setting the SELinux type is restricted. The fields
          spec.securityContext.seLinuxOptions.type, spec.containers[*].securityContext.seLinuxOptions.type,
          , spec.initContainers[*].securityContext.seLinuxOptions, and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type
          must either be unset or set to one of the allowed values (container_t, container_init_t, or container_kvm_t).
        pattern:
          spec:
            =(securityContext):
              =(seLinuxOptions):
                =(type): "container_t | container_init_t | container_kvm_t"
            =(ephemeralContainers):
              - =(securityContext):
                  =(seLinuxOptions):
                    =(type): "container_t | container_init_t | container_kvm_t"
            =(initContainers):
              - =(securityContext):
                  =(seLinuxOptions):
                    =(type): "container_t | container_init_t | container_kvm_t"
            containers:
              - =(securityContext):
                  =(seLinuxOptions):
                    =(type): "container_t | container_init_t | container_kvm_t"
    - name: selinux-user-role
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Setting the SELinux user or role is forbidden. The fields
          spec.securityContext.seLinuxOptions.user, spec.securityContext.seLinuxOptions.role,
          spec.containers[*].securityContext.seLinuxOptions.user, spec.containers[*].securityContext.seLinuxOptions.role,
          spec.initContainers[*].securityContext.seLinuxOptions.user, spec.initContainers[*].securityContext.seLinuxOptions.role,
          spec.ephemeralContainers[*].securityContext.seLinuxOptions.user, and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role
          must be unset.
        pattern:
          spec:
            =(securityContext):
              =(seLinuxOptions):
                X(user): "null"
                X(role): "null"
            =(ephemeralContainers):
              - =(securityContext):
                  =(seLinuxOptions):
                    X(user): "null"
                    X(role): "null"
            =(initContainers):
              - =(securityContext):
                  =(seLinuxOptions):
                    X(user): "null"
                    X(role): "null"
            containers:
              - =(securityContext):
                  =(seLinuxOptions):
                    X(user): "null"
                    X(role): "null"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/restrict-apparmor-profiles.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-apparmor-profiles
  annotations:
    policies.kyverno.io/title: Restrict AppArmor
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod, Annotation
    policies.kyverno.io/minversion: 1.3.0
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      On supported hosts, the 'runtime/default' AppArmor profile is applied by default.
      The default policy should prevent overriding or disabling the policy, or restrict
      overrides to an allowed set of profiles. This policy ensures Pods do not
      specify any other AppArmor profiles than `runtime/default` or `localhost/*`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: app-armor
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Specifying other AppArmor profiles is disallowed. The annotation
          `container.apparmor.security.beta.kubernetes.io` if defined
          must not be set to anything other than `runtime/default` or `localhost/*`.
        pattern:
          =(metadata):
            =(annotations):
              =(container.apparmor.security.beta.kubernetes.io/*): "runtime/default | localhost/*"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/restrict-seccomp.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-seccomp
  annotations:
    policies.kyverno.io/title: Restrict Seccomp
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      The seccomp profile must not be explicitly set to Unconfined. This policy,
      requiring Kubernetes v1.19 or later, ensures that seccomp is unset or
      set to `RuntimeDefault` or `Localhost`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  background: true
  validationFailureAction: Enforce
  failurePolicy: Fail
  rules:
    - name: check-seccomp
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Use of custom Seccomp profiles is disallowed. The fields
          spec.securityContext.seccompProfile.type,
          spec.containers[*].securityContext.seccompProfile.type,
          spec.initContainers[*].securityContext.seccompProfile.type, and
          spec.ephemeralContainers[*].securityContext.seccompProfile.type
          must be unset or set to `RuntimeDefault` or `Localhost`.
        pattern:
          spec:
            =(securityContext):
              =(seccompProfile):
                =(type): "RuntimeDefault | Localhost"
            =(ephemeralContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
            =(initContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
            containers:
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/baseline/restrict-sysctls.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-sysctls
  annotations:
    policies.kyverno.io/title: Restrict sysctls
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Sysctls can disable security mechanisms or affect all containers on a
      host, and should be disallowed except for an allowed "safe" subset. A
      sysctl is considered safe if it is namespaced in the container or the
      Pod, and it is isolated from other Pods or processes on the same Node.
      This policy ensures that only those "safe" subsets can be specified in
      a Pod.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: check-sysctls
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Setting additional sysctls above the allowed type is disallowed.
          The field spec.securityContext.sysctls must be unset or not use any other names
          than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range,
          net.ipv4.ip_unprivileged_port_start, net.ipv4.tcp_syncookies and
          net.ipv4.ping_group_range.
        pattern:
          spec:
            =(securityContext):
              =(sysctls):
                - =(name): "kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.ip_unprivileged_port_start | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/other/require-non-root-groups.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-non-root-groups
  annotations:
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/minversion: 1.3.6
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Containers should be forbidden from running with a root primary or supplementary GID.
      This policy ensures the `runAsGroup`, `supplementalGroups`, and `fsGroup` fields are set to a number
      greater than zero (i.e., non root). A known issue prevents a policy such as this
      using `anyPattern` from being persisted properly in Kubernetes 1.23.0-1.23.2.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: check-runasgroup
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Running with root group IDs is disallowed. The fields
          spec.securityContext.runAsGroup, spec.containers[*].securityContext.runAsGroup,
          spec.initContainers[*].securityContext.runAsGroup, and
          spec.ephemeralContainers[*].securityContext.runAsGroup must be
          set to a value greater than zero.
        anyPattern:
        - spec:
            securityContext:
              runAsGroup: ">0"
            =(ephemeralContainers):
              - =(securityContext):
                  =(runAsGroup): ">0"
            =(initContainers):
              - =(securityContext):
                  =(runAsGroup): ">0"
            containers:
              - =(securityContext):
                  =(runAsGroup): ">0"
        - spec:
            =(ephemeralContainers):
              - securityContext:
                  runAsGroup: ">0"
            =(initContainers):
              - securityContext:
                  runAsGroup: ">0"
            containers:
              - securityContext:
                  runAsGroup: ">0"
    - name: check-supplementalgroups
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Containers cannot run with a root primary or supplementary GID. The field
          spec.securityContext.supplementalGroups must be unset or
          set to a value greater than zero.
        pattern:
          spec:
            =(securityContext):
              =(supplementalGroups): ">0"
    - name: check-fsgroup
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Containers cannot run with a root primary or supplementary GID. The field
          spec.securityContext.fsGroup must be unset or set to a value greater than zero.
        pattern:
          spec:
            =(securityContext):
              =(fsGroup): ">0"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/disallow-capabilities-strict.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-capabilities-strict
  annotations:
    policies.kyverno.io/title: Disallow Capabilities (Strict)
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities other than `NET_BIND_SERVICE` is disallowed. In addition,
      all containers must explicitly drop `ALL` capabilities.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: require-drop-all
      match:
        any:
        - resources:
            kinds:
              - Pod
      exclude:
        any:
        - resources:
            namespaces:
            - user-?*
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Containers must drop `ALL` capabilities.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: ALL
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[] || `[]` }}"
    - name: adding-capabilities-strict
      match:
        any:
        - resources:
            kinds:
              - Pod
      exclude:
        any:
        - resources:
            namespaces:
            - user-?*
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Any capabilities added other than NET_BIND_SERVICE are disallowed.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: "{{ element.securityContext.capabilities.add[] || `[]` }}"
                  operator: AnyNotIn
                  value:
                  - NET_BIND_SERVICE
                  - ''
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/disallow-privilege-escalation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privilege-escalation
  annotations:
    policies.kyverno.io/title: Disallow Privilege Escalation
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Privilege escalation, such as via set-user-ID or set-group-ID file mode, should not be allowed.
      This policy ensures the `allowPrivilegeEscalation` field is set to `false`.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: privilege-escalation
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Privilege escalation is disallowed. The fields
          spec.containers[*].securityContext.allowPrivilegeEscalation,
          spec.initContainers[*].securityContext.allowPrivilegeEscalation,
          and spec.ephemeralContainers[*].securityContext.allowPrivilegeEscalation
          must be set to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
            - securityContext:
                allowPrivilegeEscalation: "false"
            =(initContainers):
            - securityContext:
                allowPrivilegeEscalation: "false"
            containers:
            - securityContext:
                allowPrivilegeEscalation: "false"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/require-run-as-non-root-user.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-run-as-non-root-user
  annotations:
    policies.kyverno.io/title: Require Run As Non-Root User
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Containers must be required to run as non-root users. This policy ensures
      `runAsUser` is either unset or set to a number greater than zero.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: run-as-non-root-user
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Running as root is not allowed. The fields spec.securityContext.runAsUser,
          spec.containers[*].securityContext.runAsUser, spec.initContainers[*].securityContext.runAsUser,
          and spec.ephemeralContainers[*].securityContext.runAsUser must be unset or
          set to a number greater than zero.
        pattern:
          spec:
            =(securityContext):
              =(runAsUser): ">0"
            =(ephemeralContainers):
            - =(securityContext):
                =(runAsUser): ">0"
            =(initContainers):
            - =(securityContext):
                =(runAsUser): ">0"
            containers:
            - =(securityContext):
                =(runAsUser): ">0"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/require-run-as-nonroot.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-run-as-nonroot
  annotations:
    policies.kyverno.io/title: Require runAsNonRoot
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Containers must be required to run as non-root users. This policy ensures
      `runAsNonRoot` is set to `true`. A known issue prevents a policy such as this
      using `anyPattern` from being persisted properly in Kubernetes 1.23.0-1.23.2.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: run-as-non-root
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Running as root is not allowed. Either the field spec.securityContext.runAsNonRoot
          must be set to `true`, or the fields spec.containers[*].securityContext.runAsNonRoot,
          spec.initContainers[*].securityContext.runAsNonRoot, and spec.ephemeralContainers[*].securityContext.runAsNonRoot
          must be set to `true`.
        anyPattern:
        - spec:
            securityContext:
              runAsNonRoot: true
            =(ephemeralContainers):
            - =(securityContext):
                =(runAsNonRoot): true
            =(initContainers):
            - =(securityContext):
                =(runAsNonRoot): true
            containers:
            - =(securityContext):
                =(runAsNonRoot): true
        - spec:
            =(ephemeralContainers):
            - securityContext:
                runAsNonRoot: true
            =(initContainers):
            - securityContext:
                runAsNonRoot: true
            containers:
            - securityContext:
                runAsNonRoot: true
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/restrict-seccomp-strict.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-seccomp-strict
  annotations:
    policies.kyverno.io/title: Restrict Seccomp (Strict)
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      The seccomp profile in the Restricted group must not be explicitly set to Unconfined
      but additionally must also not allow an unset value. This policy,
      requiring Kubernetes v1.19 or later, ensures that seccomp is
      set to `RuntimeDefault` or `Localhost`. A known issue prevents a policy such as this
      using `anyPattern` from being persisted properly in Kubernetes 1.23.0-1.23.2.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: check-seccomp-strict
      match:
        any:
        - resources:
            kinds:
              - Pod
      exclude:
        any:
        - resources:
            namespaces:
            - user-?*
      preconditions:
        all:
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Use of custom Seccomp profiles is disallowed. The fields
          spec.securityContext.seccompProfile.type,
          spec.containers[*].securityContext.seccompProfile.type,
          spec.initContainers[*].securityContext.seccompProfile.type, and
          spec.ephemeralContainers[*].securityContext.seccompProfile.type
          must be set to `RuntimeDefault` or `Localhost`.
        anyPattern:
        - spec:
            securityContext:
              seccompProfile:
                type: "RuntimeDefault | Localhost"
            =(ephemeralContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
            =(initContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
            containers:
            - =(securityContext):
                =(seccompProfile):
                  =(type): "RuntimeDefault | Localhost"
        - spec:
            =(ephemeralContainers):
            - securityContext:
                seccompProfile:
                  type: "RuntimeDefault | Localhost"
            =(initContainers):
            - securityContext:
                seccompProfile:
                  type: "RuntimeDefault | Localhost"
            containers:
            - securityContext:
                seccompProfile:
                  type: "RuntimeDefault | Localhost"
---
# Source: kyverno-policies/charts/kyverno-policies/templates/restricted/restrict-volume-types.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-volume-types
  annotations:
    policies.kyverno.io/title: Restrict Volume Types
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: "medium"
    policies.kyverno.io/subject: Pod,Volume
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/description: >-
      In addition to restricting HostPath volumes, the restricted pod security profile
      limits usage of non-core volume types to those defined through PersistentVolumes.
      This policy blocks any other type of volume other than those in the allow list.
  labels: 
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: "3.1.4"
    helm.sh/chart: kyverno-policies-3.1.4
spec:
  validationFailureAction: Enforce
  background: true
  failurePolicy: Fail
  rules:
    - name: restricted-volumes
      match:
        any:
        - resources:
            kinds:
              - Pod
      exclude:
        any:
        - resources:
            namespaces:
            - user-?*
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
                - paas
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
        - key: '{{ request.object.metadata.labels."app.kubernetes.io/name" || '''' }}'
          operator: NotEquals
          value: dcgm-exporter
      validate:
        message: >-
          Only the following types of volumes may be used: configMap, csi, downwardAPI,
          emptyDir, ephemeral, persistentVolumeClaim, projected, and secret.
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - csi
              - downwardAPI
              - emptyDir
              - ephemeral
              - persistentVolumeClaim
              - projected
              - secret
              - ''
---
# Source: kyverno-policies/templates/add-account.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-account
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: paas-add-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    preconditions:
    - key: "{{ account }}"
      operator: NotEquals
      value: ""
    context:
    - name: account
      apiCall:
        urlPath: "/api/v1/namespaces/{{ request.namespace }}"
        jmesPath: "metadata.labels.account || ''"
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            account: "{{ account }}"
---
# Source: kyverno-policies/templates/add-annotations.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-annotations
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: paas-disable-scrape
    match:
      any:
        - resources:
            kinds:
            - Pod
            - Service
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            prometheus.io/scrape: 'false'
---
# Source: kyverno-policies/templates/add-nodeselector.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-nodeselector
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: ondemand-nodeselector
      match:
        any:
          - resources:
              kinds:
              - Pod
              namespaces:
              - "user-?*"
      mutate:
        patchStrategicMerge:
          spec:
            nodeSelector:
              node-role.kubernetes.io/ondemand: ''
    - name: paas-nodeselector
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
      mutate:
        patchStrategicMerge:
          spec:
            nodeSelector:
              node-role.kubernetes.io/paas: ''
---
# Source: kyverno-policies/templates/add-role.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-role
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: paas-add-role
    match:
      any:
        - resources:
            kinds:
            - Pod
            - Service
            - Ingress
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            osc.edu/role: paas
---
# Source: kyverno-policies/templates/add-service-account.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-service-account
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: webservice-service-account-run-as
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{ request.object.metadata.labels.\"osc.edu/service-account\" || '' }}"
      operator: NotEquals
      value: ""
    context:
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    - name: gidsMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    mutate:
      patchStrategicMerge:
        spec:
          securityContext:
            runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
            runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
            fsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
            supplementalGroups: "{{ gidsMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" | parse_json(@)[*].to_number(@) }}"
  - name: webservice-service-account-run-as-containers
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{ request.object.metadata.labels.\"osc.edu/service-account\" || '' }}"
      operator: NotEquals
      value: ""
    context:
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    mutate:
      foreach:
      - list: "request.object.spec.[containers, initContainers][]"
        patchStrategicMerge:
          spec:
            containers:
            - (name): "*"
              securityContext:
                (runAsUser): "?*"
                runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
            initContainers:
            - (name): "*"
              securityContext:
                (runAsUser): "?*"
                runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
      - list: "request.object.spec.[containers, initContainers][]"
        patchStrategicMerge:
          spec:
            containers:
            - (name): "*"
              securityContext:
                (runAsGroup): "?*"
                runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
            initContainers:
            - (name): "*"
              securityContext:
                (runAsGroup): "?*"
                runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\".to_number(@) }}"
  - name: paas-service-account-run-as
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    preconditions:
    - key: "{{ serviceAccount }}"
      operator: NotEquals
      value: ""
    context:
    - name: serviceAccount
      apiCall:
        urlPath: "/api/v1/namespaces/{{ request.namespace }}"
        jmesPath: "metadata.labels.\"osc.edu/service-account\" || ''"
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    - name: gidsMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    mutate:
      foreach:
      - list: "request.object.spec"
        patchStrategicMerge:
          spec:
            securityContext:
              runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
              runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
              fsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
              supplementalGroups: "{{ gidsMap.data.\"user-{{ serviceAccount }}\" | parse_json(@)[*].to_number(@) }}"
      - list: "request.object.spec.[containers, initContainers][]"
        patchStrategicMerge:
          spec:
            containers:
            - (name): "*"
              securityContext:
                (runAsUser): "?*"
                runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
            initContainers:
            - (name): "*"
              securityContext:
                (runAsUser): "?*"
                runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
      - list: "request.object.spec.[containers, initContainers][]"
        patchStrategicMerge:
          spec:
            containers:
            - (name): "*"
              securityContext:
                (runAsGroup): "?*"
                runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
            initContainers:
            - (name): "*"
              securityContext:
                (runAsGroup): "?*"
                runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\".to_number(@) }}"
---
# Source: kyverno-policies/templates/authorized-registries.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: authorized-registries
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: authorized-registries-users
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    validate:
      message: >-
        Images must come from docker-registry.osc.edu or docker-registry-test.osc.edu
      anyPattern:
      - spec:
          containers:
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
          =(initContainers):
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
      - spec:
          containers:
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
          =(initContainers):
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
  - name: authorized-registries-webservices
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    exclude:
      any:
        - resources:
            name: "cm-acme-http-solver-*"
    validate:
      message: >-
        Images must come from docker-registry.osc.edu or docker-registry-test.osc.edu or quay.io/oauth2-proxy/oauth2-proxy
      anyPattern:
      - spec:
          containers:
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
          =(initContainers):
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
      - spec:
          containers:
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
          =(initContainers):
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
      - spec:
          containers:
            - image: "quay.io/oauth2-proxy/oauth2-proxy/* | quay.io/oauth2-proxy/oauth2-proxy:*"
          =(initContainers):
            - image: "quay.io/oauth2-proxy/oauth2-proxy/* | quay.io/oauth2-proxy/oauth2-proxy:*"
  - name: authorized-registries-paas
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    exclude:
      any:
        - resources:
            name: "cm-acme-http-solver-*"
    validate:
      message: >-
        Images must come from docker-registry.osc.edu or docker-registry-test.osc.edu or quay.io/oauth2-proxy/oauth2-proxy
      anyPattern:
      - spec:
          containers:
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
          =(initContainers):
            - image: "docker-registry.osc.edu/* | docker-registry.osc.edu:*"
      - spec:
          containers:
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
          =(initContainers):
            - image: "docker-registry-test.osc.edu/* | docker-registry-test.osc.edu:*"
      - spec:
          containers:
            - image: "quay.io/oauth2-proxy/oauth2-proxy/* | quay.io/oauth2-proxy/oauth2-proxy:*"
          =(initContainers):
            - image: "quay.io/oauth2-proxy/oauth2-proxy/* | quay.io/oauth2-proxy/oauth2-proxy:*"
---
# Source: kyverno-policies/templates/block-images-with-volumes.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: block-images-with-volumes
  annotations:
    policies.kyverno.io/title: Block Images with Volumes
    policies.kyverno.io/category: Other
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      OCI images may optionally be built with VOLUME statements which, if run
      in read-only mode, would still result in write access to the specified location.
      This may be unexpected and undesirable. This policy checks the contents of every
      container image and inspects them for such VOLUME statements, then blocks if found.      
spec:
  validationFailureAction: Enforce
  failurePolicy: Ignore
  # TODO: Re-enable once on Kyverno 1.9+ and can ensure background scan interval is longer
  # This background scan was spamming Harbor at OSC
  background: false
  rules:
  - name: block-images-with-vols
    match:
      any:
      - resources:
          kinds:
          - Pod
    preconditions:
      all:
        - key: "{{ request.operation }}"
          operator: NotEquals
          value: DELETE
        - key: "{{ request.object.metadata.labels.\"app.kubernetes.io/name\" || '' }}"
          operator: AllNotIn
          value:
            - prometheus
            - postgresql
        - key: "docker.io"
          operator: AnyNotIn
          value: "{{ images.containers.*.registry }}"
        - key: "docker.io"
          operator: AnyNotIn
          value: "{{ images.initContainers.*.registry || '' }}"
    validate:
      message: "Images containing built-in volumes are prohibited."
      foreach:
      - list: "request.object.spec.[containers, initContainers][]"
        context: 
        - name: imageData
          imageRegistry: 
            reference: "{{ element.image }}"
        deny:
          conditions:
            all:
              - key: "{{ imageData.configData.config.Volumes || '' | length(@) }}"
                operator: GreaterThan
                value: 0
---
# Source: kyverno-policies/templates/disallow-container-sock-mounts.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-container-sock-mounts
  annotations:
    policies.kyverno.io/title: Disallow CRI socket mounts
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: >-
      Container daemon socket bind mounts allows access to the container engine on the 
      node. This access can be used for privilege escalation and to manage containers 
      outside of Kubernetes, and hence should not be allowed.  
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: validate-docker-sock-mount
    match:
      any:
        - resources:
            kinds:
            - Pod
    validate:
      message: "Use of the Docker Unix socket is not allowed."
      pattern:
        spec:
          =(volumes):
            - =(hostPath):
                path: "!/var/run/docker.sock"
  - name: validate-containerd-sock-mount
    match:
      any:
        - resources:
            kinds:
            - Pod
    validate:
      message: "Use of the Containerd Unix socket is not allowed."
      pattern:
        spec:
          =(volumes):
            - =(hostPath):
                path: "!/var/run/containerd.sock"
  - name: validate-crio-sock-mount
    match:
      any:
        - resources:
            kinds:
            - Pod
    validate:
      message: "Use of the CRI-O Unix socket is not allowed."
      pattern:
        spec:
          =(volumes):
            - =(hostPath):
                path: "!/var/run/crio.sock"
---
# Source: kyverno-policies/templates/disallow-nfs.yaml
# Source: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/policies/default/disallow-host-path.yaml
# Exclude OnDemand pods from enforcement
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-nfs
  annotations:
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: >-
      Restrict NFS volume usage
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: nfs-volume
    match:
      any:
        - resources:
            kinds:
            - Pod
    validate:
      message: >-
        NFS volumes are forbidden. The fields spec.volumes[*].nfs must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
---
# Source: kyverno-policies/templates/imagepullpolicy-always.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: imagepullpolicy-always
  annotations:
    policies.kyverno.io/title: Set imagePullPolicy
    policies.kyverno.io/category: Sample
    policies.kyverno.io/description: >-
      Sample policy that sets imagePullPolicy to "Always" when the "latest" tag is used.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: imagepullpolicy-always
    match:
      any:
        - resources:
            kinds:
            - Pod
    validate:
      message: >-
        The imagePullPolicy must be set to `Always` when the tag `latest` is used.
      pattern:
        spec:
          containers:
            - (image): "*:latest | !*:*"
              imagePullPolicy: "Always"
          =(initContainers):
            - (image): "*:latest | !*:*"
              imagePullPolicy: "Always"
---
# Source: kyverno-policies/templates/ingress-require-tls.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: ingress-require-tls
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: require-tls
    match:
      any:
        - resources:
            kinds:
            - Ingress
    exclude:
      any:
        - resources:
            name: "cm-acme-http-solver-*"
        - resources:
            annotations:
              nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
              nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
    validate:
      message: "Ingress is required to have TLS."
      pattern:
        spec:
          tls:
            - hosts:
              - "?*"
              secretName: "?*"
---
# Source: kyverno-policies/templates/mutate-calico-registry.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: mutate-calico-registry
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: calico-container-registry
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - kube-system
      preconditions:
        all:
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
        - key: "docker.io"
          operator: AnyIn
          value: "{{ images.containers.*.registry }}"
        - key: "{{request.object.metadata.labels.\"k8s-app\" || ''}}"
          operator: Equals
          value: "calico-*"
      mutate:
        foreach:
        - list: "request.object.spec.containers"
          patchStrategicMerge:
            spec:
              containers:
              - name: "{{ element.name }}"
                image: docker-registry.osc.edu/kubernetes/{{ images.containers."{{element.name}}".path }}:{{images.containers."{{element.name}}".tag }}
    - name: calico-initcontainer-registry
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - kube-system
      preconditions:
        all:
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
        - key: "{{ request.object.spec.initContainers[] || '' | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
        - key: "docker.io"
          operator: AnyIn
          value: "{{ images.initContainers.*.registry }}"
        - key: "{{request.object.metadata.labels.\"k8s-app\" || ''}}"
          operator: Equals
          value: "calico-*"
      mutate:
        foreach:
        - list: "request.object.spec.initContainers"
          patchStrategicMerge:
            spec:
              initContainers:
              - name: "{{ element.name }}"
                image: docker-registry.osc.edu/kubernetes/{{ images.initContainers."{{element.name}}".path}}:{{images.initContainers."{{element.name}}".tag}}
    - name: calico-imagepullsecret
      match:
        any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - kube-system
      preconditions:
        all:
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
        - key: "{{request.object.metadata.labels.\"k8s-app\" || ''}}"
          operator: Equals
          value: "calico-*"
      mutate:
        patchStrategicMerge:
          spec:
            containers:
            - <(image): "docker-registry.osc.edu/*"
            imagePullSecrets:
            - name: calico-osc-read
---
# Source: kyverno-policies/templates/namespace-account.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: namespace-account
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: require-account
    match:
      any:
      - resources:
          kinds:
          - Namespace
          selector:
            matchLabels:
              osc.edu/role: paas
    validate:
      message: "Namespaces requires account label be set."
      pattern:
        metadata:
          labels:
            account: "?*"
---
# Source: kyverno-policies/templates/namespace-role.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: namespace-role
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: require-role
    match:
      any:
      - resources:
          kinds:
          - Namespace
    exclude:
      any:
      - resources:
          kinds:
          - Namespace
          names:
          - default
          - user-*
          - kube-*
    validate:
      message: "Namespaces requires osc.edu/role label be set."
      pattern:
        metadata:
          labels:
            osc.edu/role: "ondemand | infrastructure | webservice | paas"
---
# Source: kyverno-policies/templates/namespace-service-account.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: namespace-service-account
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: require-service-account
    match:
      any:
      - resources:
          kinds:
          - Namespace
          selector:
            matchLabels:
              osc.edu/role: paas
    validate:
      message: "Namespaces requires osc.edu/service-account label be set."
      pattern:
        metadata:
          labels:
            osc.edu/service-account: "?*"
---
# Source: kyverno-policies/templates/no-ingress.yaml
# https://github.com/kyverno/policies/blob/main/other/restrict_loadbalancer.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: no-ingress
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: user-no-ingress
    match:
      any:
      - resources:
          kinds:
            - Ingress
          namespaces:
            - "user-?*"
    validate:
      message: "Ingress is not allowed."
      deny: {}
---
# Source: kyverno-policies/templates/no-loadbalancers.yaml
# https://github.com/kyverno/policies/blob/main/other/restrict_loadbalancer.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: no-loadbalancers
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: no-loadbalancers
    match:
      any:
        - resources:
            kinds:
            - Service
    exclude:
      any:
        - resources:
            namespaces:
              - ingress-nginx
    validate:
      message: "Service of type LoadBalancer is not allowed."
      pattern:
        spec:
          type: "!LoadBalancer"
---
# Source: kyverno-policies/templates/no-localhost-service.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: no-localhost-service
  annotations:
    policies.kyverno.io/title: Disallow Localhost ExternalName Services
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/description: >-
      A Service of type ExternalName which points back to localhost can potentially be used to exploit
      vulnerabilities in some Ingress controllers. This sample policy blocks Services of type ExternalName
      if the externalName field refers to localhost.      
spec:
  validationFailureAction: Enforce
  rules:
  - name: no-localhost-service
    match:
      any:
        - resources:
            kinds:
            - Service
    validate:
      message: "Service of type ExternalName cannot point to localhost."
      pattern:
        spec:
          (type): ExternalName
          externalName: "!localhost"
---
# Source: kyverno-policies/templates/pod-account-validation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-account-validation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
  - name: pods-user-account-prefix
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    validate:
      message: "{{ request.object.metadata.namespace }} account {{ request.object.metadata.labels.account }} is not a valid project"
      pattern:
        metadata:
          labels:
            account: "P?*"
  - name: pods-user-authorized-for-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ request.object.metadata.labels.account || '' }}"
      operator: NotEquals
      value: ""
    context:
    - name: userGroupMap
      configMap:
        name: user-groups-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{ request.object.metadata.namespace }} not authorized to charge against account {{ request.object.metadata.labels.account }}"
      deny:
        conditions:
        - key: "{{ request.object.metadata.labels.account }}"
          operator: NotIn
          value: "{{ userGroupMap.data.\"{{ request.object.metadata.namespace }}\" }}"
  - name: paas-user-authorized-for-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ request.object.metadata.labels.account || '' }}"
      operator: NotEquals
      value: ""
    - key: "{{ serviceAccount }}"
      operator: NotEquals
      value: ""
    context:
    - name: serviceAccount
      apiCall:
        urlPath: "/api/v1/namespaces/{{ request.namespace }}"
        jmesPath: "metadata.labels.\"osc.edu/service-account\" || ''"
    - name: userGroupMap
      configMap:
        name: user-groups-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{ serviceAccount }} not authorized to charge against account {{ request.object.metadata.labels.account }}"
      deny:
        conditions:
        - key: "{{ request.object.metadata.labels.account }}"
          operator: NotIn
          value: "{{ userGroupMap.data.\"user-{{ serviceAccount }}\" }}"
---
# Source: kyverno-policies/templates/pod-groups-validation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-groups-validation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
  - name: pods-user-authorized-for-groups
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ request.object.spec.securityContext.supplementalGroups.length(@) }}"
      operator: GreaterThan
      value: 0
    context:
    - name: userGIDMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{ request.object.metadata.namespace }} not authorized to use those supplemental groups"
      deny:
        conditions:
        - key: "{{ request.object.spec.securityContext.supplementalGroups[*].to_string(@) }}"
          operator: NotIn
          value: "{{ userGIDMap.data.\"{{ request.object.metadata.namespace }}\" }}"
---
# Source: kyverno-policies/templates/pod-lifetime.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-lifetime
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: pods-require-lifetime
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    validate:
      message: "User pods must include an lifetime"
      pattern:
        metadata:
          annotations:
            pod.kubernetes.io/lifetime: "*?"
  - name: pods-max-lifetime
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.object.metadata.annotations.\"pod.kubernetes.io/lifetime\" }}"
      operator: NotEquals
      value: ""
    validate:
      message: "Pod lifetime exceeds limit of 24h"
      deny:
        conditions:
        - key: "{{ request.object.metadata.annotations.\"pod.kubernetes.io/lifetime\" }}"
          operator: GreaterThan
          value: "24h"
---
# Source: kyverno-policies/templates/pod-nodeselector.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-nodeselector
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: pod-nodeselector-user
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    validate:
      message: "Node selector must be set to ondemand"
      anyPattern:
        - spec:
            nodeSelector:
              osc.edu/role: "ondemand"
        - spec:
            nodeSelector:
              node-role.kubernetes.io/ondemand: ''
  - name: pod-nodeselector-webservice
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    exclude:
      any:
        - resources:
            name: "cm-acme-http-solver-*"
    validate:
      message: "Node selector must be set"
      anyPattern:
        - spec:
            nodeSelector:
              osc.edu/role: "infrastructure | webservices"
        - spec:
            nodeSelector:
              node-role.kubernetes.io/infrastructure: ''
        - spec:
            nodeSelector:
              node-role.kubernetes.io/webservices: ''
  - name: pod-nodeselector-paas
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    exclude:
      any:
        - resources:
            name: "cm-acme-http-solver-*"
    validate:
      message: "Node selector must be set"
      anyPattern:
        - spec:
            nodeSelector:
              osc.edu/role: "paas"
        - spec:
            nodeSelector:
              node-role.kubernetes.io/paas: ''
---
# Source: kyverno-policies/templates/pod-resources.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-resources
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: pods-require-resources
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    validate:
      message: "CPU and memory resource requests and limits are required for pods"
      pattern:
        spec:
          containers:
          - resources:
              requests:
                memory: "?*"
                cpu: "?*"
              limits:
                memory: "?*"
                cpu: "?*"
          =(initContainers):
          - resources:
              requests:
                memory: "?*"
                cpu: "?*"
              limits:
                memory: "?*"
                cpu: "?*"
  - name: pods-max-user-resources
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    validate:
      message: "CPU and memory limits exceed max 8 CPUs and 32GB of memory"
      pattern:
        spec:
          containers:
          - name: '*'
            resources:
              requests:
                cpu: '<=8000m'
                memory: '<=32Gi'
              limits:
                cpu: '<=8000m'
                memory: '<=32Gi'
          =(initContainers):
          - name: '*'
            resources:
              requests:
                cpu: '<=8000m'
                memory: '<=32Gi'
              limits:
                cpu: '<=8000m'
                memory: '<=32Gi'
---
# Source: kyverno-policies/templates/pod-service-account-validation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-service-account-validation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
  - name: webservice-require-service-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    validate:
      message: "Webservice pods must include a service account for access"
      pattern:
        metadata:
          labels:
            osc.edu/service-account: "*?"
  - name: webservice-require-valid-service-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ request.object.metadata.labels.\"osc.edu/service-account\" || '' }}"
      operator: NotEquals
      value: ""
    context:
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid service account UID or GID specified
      anyPattern:
      - spec:
          securityContext:
            runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
            runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
            fsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
          =(initContainers):
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
                =(runAsGroup): "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
          containers:
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
                =(runAsGroup): "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
                runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
          containers:
            - securityContext:
                runAsUser: "{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
                runAsGroup: "{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
  - name: webservice-service-account-authorized-for-groups
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ request.object.metadata.labels.\"osc.edu/service-account\" || '' }}"
      operator: NotEquals
      value: ""
    - key: "{{ (request.object.spec.securityContext.supplementalGroups || '').length(@) }}"
      operator: GreaterThan
      value: 0
    context:
    - name: userGIDMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{ request.object.metadata.namespace }} not authorized to use those supplemental groups"
      deny:
        conditions:
        - key: "{{ request.object.spec.securityContext.supplementalGroups[*].to_string(@) }}"
          operator: NotIn
          value: "{{ userGIDMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}"
  - name: paas-require-valid-service-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    preconditions:
    - key: "{{ serviceAccount }}"
      operator: NotEquals
      value: ""
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    context:
    - name: serviceAccount
      apiCall:
        urlPath: "/api/v1/namespaces/{{ request.namespace }}"
        jmesPath: "metadata.labels.\"osc.edu/service-account\" || ''"
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid service account UID or GID specified
      anyPattern:
      - spec:
          securityContext:
            runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\" }}"
            runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
            fsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
          =(initContainers):
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"user-{{ serviceAccount }}\" }}"
                =(runAsGroup): "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
          containers:
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"user-{{ serviceAccount }}\" }}"
                =(runAsGroup): "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\" }}"
                runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
          containers:
            - securityContext:
                runAsUser: "{{ uidMap.data.\"user-{{ serviceAccount }}\" }}"
                runAsGroup: "{{ gidMap.data.\"user-{{ serviceAccount }}\" }}"
  - name: paas-service-account-authorized-for-groups
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{ serviceAccount }}"
      operator: NotEquals
      value: ""
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{ (request.object.spec.securityContext.supplementalGroups || '').length(@) }}"
      operator: GreaterThan
      value: 0
    context:
    - name: serviceAccount
      apiCall:
        urlPath: "/api/v1/namespaces/{{ request.namespace }}"
        jmesPath: "metadata.labels.\"osc.edu/service-account\" || ''"
    - name: userGIDMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{ request.object.metadata.namespace }} not authorized to use those supplemental groups"
      deny:
        conditions:
        - key: "{{ request.object.spec.securityContext.supplementalGroups[*].to_string(@) }}"
          operator: NotIn
          value: "{{ userGIDMap.data.\"user-{{ serviceAccount }}\" }}"
---
# Source: kyverno-policies/templates/pod-user-validation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-user-validation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
  - name: pods-require-valid-uid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    context:
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid user UID specified in fields
        spec.securityContext.runAsUser or spec.containers[*].securityContext.runAsUser or
        spec.initContainers[*].securityContext.runAsUser
      anyPattern:
      - spec:
          securityContext:
            runAsUser: "{{ uidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          =(initContainers):
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          containers:
            - =(securityContext):
                =(runAsUser): "{{ uidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsUser: "{{ uidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          containers:
            - securityContext:
                runAsUser: "{{ uidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
  - name: pods-require-valid-gid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    context:
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid user GID specified in fields
        spec.securityContext.runAsGroup or spec.containers[*].securityContext.runAsGroup or
        spec.initContainers[*].securityContext.runAsGroup
      anyPattern:
      - spec:
          securityContext:
            runAsGroup: "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          =(initContainers):
            - =(securityContext):
                =(runAsGroup): "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          containers:
            - =(securityContext):
                =(runAsGroup): "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsGroup: "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
          containers:
            - securityContext:
                runAsGroup: "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
  - name: fsgroup-require-valid-gid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    preconditions:
    - key: "{{ request.operation }}"
      operator: In
      value: ["CREATE","UPDATE"]
    context:
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid user GID specified in fields spec.securityContext.fsGroup
      pattern:
        spec:
          securityContext:
            fsGroup: "{{ gidMap.data.\"{{ request.object.metadata.namespace }}\" }}"
---
# Source: kyverno-policies/templates/restrict-external-ips.yaml
# https://github.com/kyverno/policies/blob/main/best-practices/restrict-service-external-ips.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-external-ips
spec:
  background: true
  validationFailureAction: Enforce
  rules:
  - name: check-ips
    match:
      any:
        - resources:
            kinds:
            - Service
    validate:
      message: "externalIPs are not allowed"
      pattern:
        spec:
          # this prevents any external IP address (see https://github.com/kubernetes/kubernetes/issues/97076#)
          # you can alternatively restrict to a known set of addresses using:
          #     =(externalIPs): ["37.10.11.53", "153.10.20.1"]
          # Note: this currently needs to be an exact ordered set (see https://github.com/kyverno/kyverno/issues/1367).
          X(externalIPs): nil
---
# Source: kyverno-policies/templates/restrict-host-path.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-host-path
  annotations:
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: >-
      HostPath volumes let pods use host directories and volumes in containers.
      Using host resources can be used to access shared data or escalate privileges
      and should be restricted.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: users-host-path
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaces:
            - "user-?*"
    validate:
      message: >-
        That HostPath volume is forbidden. The fields spec.volumes[*].hostPath must not be set to allowed paths.
      pattern:
        spec:
          =(volumes):
          - =(hostPath):
              path: "/var/lib/sss/pipes | /etc/sssd | /etc/nsswitch.conf | /etc/pam.d | /etc/slurm | /var/run/munge/munge.socket.2 | /users/?* | /fs/?* | /apps/?* | /nfsroot/?*"
  - name: webservices-host-path
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    validate:
      message: >-
        That HostPath volume is forbidden. The fields spec.volumes[*].hostPath must not be set to allowed paths.
      pattern:
        spec:
          =(volumes):
          - =(hostPath):
              path: "/var/lib/sss/pipes | /etc/sssd | /etc/nsswitch.conf | /etc/slurm | /var/run/munge/munge.socket.2 | /users/?* | /fs/?*"
  - name: paas-host-path
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    validate:
      message: >-
        That HostPath volume is forbidden. The fields spec.volumes[*].hostPath must not be set to allowed paths.
      pattern:
        spec:
          =(volumes):
          - =(hostPath):
              path: "/var/lib/sss/pipes | /etc/sssd | /etc/nsswitch.conf | /etc/slurm | /var/run/munge/munge.socket.2 | /users/?* | /fs/?*"
---
# Source: kyverno-policies/templates/restrict-registries.yaml
# Source: https://kyverno.io/policies/other/restrict-deprecated-registry/restrict-deprecated-registry/
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-registries
  annotations:
    policies.kyverno.io/title: Restrict Registies
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/severity: high
    policies.kyverno.io/minversion: 1.8.0
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Disallow docker.io registry   
spec:
  # validationFailureAction: Enforce
  validationFailureAction: Audit
  background: true
  rules:
  - name: restrict-registry-docker.io
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
        message: "The \"docker.io\" image registry is not allowed."
        foreach:
          - list: "request.object.spec.[initContainers, ephemeralContainers, containers][]"
            deny:
              conditions:
                all:
                  - key: "{{ element.image }}"
                    operator: Equals
                    value: "docker.io/*"
---
# Source: kyverno-policies/templates/role-validation.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: role-validation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
  - name: paas-require-role
    match:
      any:
        - resources:
            kinds:
            - Pod
            - Service
            - Ingress
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - paas
    validate:
      message: "role label must be set to 'paas'"
      pattern:
        metadata:
          labels:
            osc.edu/role: "paas"
