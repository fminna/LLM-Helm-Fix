---
# Source: sumo/templates/engine/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sumo-engine
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
---
# Source: sumo/templates/manager/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sumo-manager
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
---
# Source: sumo/templates/prover/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sumo-prover
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
---
# Source: sumo/templates/manager/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sumo-manager-config
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
  config.toml: |-
    [database]
    port = "5432"

    host = "postgres-postgresql"
    schema = "operator1_manager"
    password = "password"
    username = "postgres"

    read_pool_size = 950
    read_pipelining_limit = 256
    transactional_pool_size = 5

    [kafka]
    # https://jaceklaskowski.gitbooks.io/apache-kafka/content/kafka-properties-bootstrap-servers.html
    brokers = "kafka:9092"
    # Matches message.timeout.ms from https://docs.confluent.io/5.5.1/clients/librdkafka/md_CONFIGURATION.html
    # Topic name used for sending batch updates
    batch_updates_topic = "operator1-batch-updates"
    invalid_operations_topic = "operator1-invalid-operations"
    invalid_operations_consumer_group_id = "operator1-invalid-operations-manager-consumer"

    [api]
    enabled_apis = ["pazkp"]
    http_port = 6000
    websocket_port = 6001
    monitoring_port = 6002
    version = "0"
    blocked_methods = ["eth_sendTransaction"]

    [api.auth]
    # duration mus follow syntax https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/time/Duration.html#parse(java.lang.CharSequence)
    # max JWT allowed duration
    rollup_account_max_token_duration = "PT3H"
    api_account_token_duration = "P1D"
    clock_leniency = "PT20S"
    
    [vertx_config]
    max_event_loop_execution_time_millis = 200
    max_worker_thread_execution_time_millis = 200
    log_stacktrace_threshold_millis = 500
    http_verticles = 1
    websocket_verticles = 1

    [http_client]
    http2_pool_size = 3000
    connections_pool_size = 200

    [engine]
    # Address of ENGINE HTTP API
    uri = "http://sumo-engine:5000"
  log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="INFO" packages="net.consensys.sumo.logging">
        <Appenders>
            <Console name="console" target="SYSTEM_OUT">
                <PatternLayout pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %hex%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Logger name="net.consensys.sumo.api.jsonrpc.JsonRpcMessageProcessor" level="INFO"/>
            <Logger name="net.consensys.sumo" level="INFO"/>
            <Root level="INFO" additivity="false">
                <appender-ref ref="console"/>
            </Root>
        </Loggers>
    </Configuration>
  credentials.toml: |-
    [Users.user1]
    password = "pass1"
    permissions=["*:*"]
---
# Source: sumo/templates/manager/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sumo-manager-envmap
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
---
# Source: sumo/templates/engine/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sumo-engine
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: engine
---
# Source: sumo/templates/manager/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sumo-manager
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
spec:
  type: ClusterIP
  ports:
    - port: 6000
      targetPort: http
      protocol: TCP
      name: http
    - port: 6001
      targetPort: ws
      protocol: TCP
      name: ws
    - port: 6002
      targetPort: monitoring
      protocol: TCP
      name: monitoring
    - port: 8849
      targetPort: profiling
      protocol: TCP
      name: profiling
  selector:
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: manager
---
# Source: sumo/templates/prover/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sumo-prover
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
spec:
  type: ClusterIP
  ports:
    - port: 9002
      protocol: TCP
      name: grpc
    - port: 9001
      protocol: TCP
      name: witness
    - port: 8090
      protocol: TCP
      name: status
  selector:
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: prover
---
# Source: sumo/templates/engine/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sumo-engine
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sumo
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: engine
  template:
    metadata:
      annotations:
        checksum/config: 1c6b0071182329d5a772684ee569604dabb26d1b8a442266afd55c8884cae802
      labels:
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: engine
    spec:
      imagePullSecrets:
        - name: release-name-sumo-registry
      serviceAccountName: release-name-sumo-engine
      securityContext:
        {}
      containers:
        - name: engine
          securityContext:
            {}
          image: "consensys/rollups-engine:develop-optimized"
          imagePullPolicy: Always
          command:
            - "operator"
            - "--config"
            - "/conf/config.toml"
            - "--dev-acc-create-amount"
            - "0"
            - "--dev-acc-create-n-tokens"
            - "0"
          envFrom:
            - configMapRef:
                name: release-name-sumo-engine-envmap
          volumeMounts:
            - name: config
              mountPath: /conf
              readOnly: true
            - name: persistent-storage
              mountPath: /smc-data
              readOnly: true
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /check/live
              port: http
          readinessProbe:
            httpGet:
              path: /check/ready
              port: http
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: release-name-sumo-engine-config
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: efs-claim
---
# Source: sumo/templates/manager/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sumo-manager
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sumo
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: manager
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/config: 06028272c8d0138d73949ee859e1351435b4b02627406a1ea20e8f210e008751
      labels:
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: manager
    spec:
      
      imagePullSecrets:
        - name: release-name-sumo-registry
      serviceAccountName: release-name-sumo-manager
      securityContext:
        {}
      containers:
        - name: manager
          securityContext:
            {}
          image: "consensys/rollups-manager:develop"
          imagePullPolicy: Always
          command:
            - "java"
            - "-jar"
            - "lib/app.jar"
            - "/opt/consensys/rollup/manager/config/config.toml"
            - "--rpc-http-authentication-credentials-file"
            - "/opt/consensys/rollup/manager/config/credentials.toml"
            
          envFrom:
            - configMapRef:
                name: release-name-sumo-manager-envmap
          volumeMounts:
            - name: config
              mountPath: /opt/consensys/rollup/manager/config
              readOnly: true
            
          ports:
            - name: http
              containerPort: 6000
              protocol: TCP
            - name: ws
              containerPort: 6001
              protocol: TCP
            - name: monitoring
              containerPort: 6002
              protocol: TCP
            - name: profiling
              containerPort: 8849
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: monitoring
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: monitoring
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: release-name-sumo-manager-config
---
# Source: sumo/templates/prover/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-sumo-prover
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
spec:
  podManagementPolicy: Parallel
  serviceName: release-name-sumo-prover
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sumo
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: prover
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: prover
    spec:
      imagePullSecrets:
        - name: release-name-sumo-registry
      serviceAccountName: release-name-sumo-prover
      securityContext:
        {}
      initContainers:
        - name: release-name-sumo-prover-prepare-circuits
          image: "consensys/rollups-prover:develop"
          imagePullPolicy: Always
          command:
            - "/opt/circuit_manager"
            - "-deployment=dev"
            - "-download-all-circuits"
            - "-aws-region=us-east-2"
            - "-aws-bucket=sumo-circuits-ohio"
          volumeMounts:
            - name: circuits-storage
              mountPath: /opt/circuits
            - name: addchain
              mountPath: /opt/addchain
          envFrom:
            - configMapRef:
                name: release-name-sumo-prover-envmap
      containers:
        - name: prover
          securityContext:
            {}
          image: "consensys/rollups-prover:develop"
          imagePullPolicy: Always
          command:
            - "/opt/gnarkd"
            - "-grpc-port=9002"
            - "-witness-port=9001"
            - "-status-port=8090"
            - "-queue-size=1"
            - "-deployment=dev"
            - "-read-circuits-unsafe"
          env:
            - name: SUMO_PROVER_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: release-name-sumo-prover-envmap
          volumeMounts:
            - name: circuits-storage
              mountPath: /opt/circuits
              readOnly: true
            - name: addchain
              mountPath: /opt/addchain
          ports:
            - name: grpc
              containerPort: 9002
              protocol: TCP
            - name: witness
              containerPort: 9001
              protocol: TCP
            - name: status
              containerPort: 8090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status/liveness
              port: status
            initialDelaySeconds: 120
            periodSeconds: 60
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /status/readiness
              port: status
            initialDelaySeconds: 120
            periodSeconds: 1
            failureThreshold: 1
          resources:
            {}
      volumes:
        - name: addchain
          emptyDir: {}
        - name: config
          configMap:
            name: release-name-sumo-prover-config
  volumeClaimTemplates:
    - metadata:
        name: circuits-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 60Gi
---
# Source: sumo/templates/secret-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sumo-registry
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
    replicator.v1.mittwald.de/replicate-from: infra/docker-pull-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K
---
# Source: sumo/templates/engine/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sumo-engine-config
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
data:
  config.toml: |
    listen_address = "0.0.0.0:5000"
    rollup_type = "ConsensusGeneralProgrammability"
    crypto_suite = "Native"
    smart_contract_max_offset = 32
    max_pending_proven_batches = 24
    trust_origin = false
    http_server_thread_count = 2
    
    min_cumulative_l2_tx_size_in_bytes = 1
    max_cumulative_l2_tx_size_in_bytes = 4.153344e+06

    [l2]
    kind = "eth"
    eth_rpc_url = 
    engine_rpc_url = 
    suggested_fee_recipient_address = 
    

    [transaction_manager]
    incoming_capacity = 1_000_000
    pending_capacity = 1_000_000
    processing_capacity = 500_000
    completed_length = 200
    insert_poller_epoch_ms = 50

    [database]
    database_type = "Postgres"
    port = 5432
    # Kubernetes Native
    host = "postgres-postgresql"
    username = "postgres"
    password = "password"
    accept_invalid_tls_cert = false
    database = "operator1_engine"

    [key_management.account_key]
    manager_type = "Filesystem"
    operator_key_path = "/keys/operator-1.acc"

    [key_management.encryption_key]
    manager_type = "Filesystem"
    encryption_key_path = "/keys/operator-1.acc"

    [blockchain_connector]
    connector_type = "Web3"
    blocks_to_finalization = 0
    confirmations = 1
    url = ""
    smart_contract_abi_path = "/smc-data/rollup.json"
    lookahead_blocks = 50
    gas_limit_batch = %!f(<nil>)
    gas_limit_vote = 1_000_000
    forced_transaction_timeout_blocks = 86400
    # Interval for pulling Ethereum blocks from blockchain
    l1_block_fetch_interval_in_ms = 50

    [kafka]
    kafka_type = "Real"
    brokers = "kafka:9092"
    timeout_ms = 60000
    batch_updates_topic = "operator1-batch-updates"
    invalid_operations_topic = "operator1-invalid-operations"

    [prover]
    prover_type = "Real"

    job_address = "https://release-name-sumo-prover:9002"
    max_concurrent_proof_attempts = 1
---
# Source: sumo/templates/engine/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sumo-engine-envmap
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
data:
---
# Source: sumo/templates/prover/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sumo-prover-envmap
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
data:
---
# Source: sumo/templates/engine/storageclass.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
provisioner: efs.csi.aws.com
mountOptions:
  - tls
reclaimPolicy: Delete
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-0645e172368e1af8a
  directoryPerms: "700"
  gidRangeStart: "1000"
  gidRangeEnd: "2000"
  basePath: "/dynamic_provisioning"
---
# Source: sumo/templates/engine/init-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-9"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-failed
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 1Gi
---
# Source: sumo/templates/prover/init-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: circuits-pvc-claim
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-9"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 60Gi
---
# Source: sumo/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-sumo-manager-test-connection"
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-sumo-manager:6000']
  restartPolicy: Never
---
# Source: sumo/templates/engine/compute-root-hash.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-sumo-engine-compute-root-hash-job
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      name: compute-root-hash
      labels:
        helm.sh/chart: sumo-0.4.145
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: engine
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: release-name-sumo-registry
      containers:
        - name: release-name-sumo-engine-compute-root-hash
          image: "consensys/rollups-engine:develop-optimized"
          imagePullPolicy: Always
          command:
            - "compute_hash"
            - "--config"
            - "/conf/config.toml"
            - "--output-file=/data/smc_config.json"
          volumeMounts:
            - name: persistent-storage
              mountPath: /data
            - name: config
              mountPath: /conf
              readOnly: true
          envFrom:
            - configMapRef:
                name: release-name-sumo-engine-envmap
      volumes:
        - name: config
          configMap:
            name: release-name-sumo-engine-config
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: efs-claim
---
# Source: sumo/templates/engine/init-db.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-sumo-engine-init-job
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: engine
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 5
  template:
    metadata:
      name: init
      labels:
        helm.sh/chart: sumo-0.4.145
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: engine
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: release-name-sumo-registry
      containers:
        - name: release-name-sumo-engine-initdb
          image: "consensys/rollups-engine:develop-optimized"
          imagePullPolicy: Always
          command:
            - "db_setup"
            - "--config"
            - "/conf/config.toml"
            - "--recreate-tables"
          volumeMounts:
            - name: config
              mountPath: /conf
              readOnly: true
          envFrom:
          env:
            - name: RUST_LOG
              value: "debug"
      volumes:
        - name: config
          configMap:
            name: release-name-sumo-engine-config
---
# Source: sumo/templates/manager/create-kafka-topics.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-sumo-manager-create-kafka-topics
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: manager
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
spec:
  backoffLimit: 1
  template:
    metadata:
      name: create-kafka-topics
      labels:
        helm.sh/chart: sumo-0.4.145
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: manager
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: release-name-sumo-registry
      containers:
        - name: kafka-topics-setup
          image: confluentinc/cp-kafka:7.1.2.amd64
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -x && \
              while ! nc -z kafka 9092; do sleep 1; done  && \
              /bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 3 --topic operator1-i0-pending-operations  ; \
              /bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic operator1-batch-updates ; \
              /bin/kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic operator1-invalid-operations ; \
              /bin/kafka-topics --describe --bootstrap-server kafka:9092
          envFrom:
          resources:
            {}
---
# Source: sumo/templates/prover/prepare-circuits.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-sumo-prover-init-job
  labels:
    helm.sh/chart: sumo-0.4.145
    app.kubernetes.io/name: sumo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: prover
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: prepare-circuits-job
      labels:
        helm.sh/chart: sumo-0.4.145
        app.kubernetes.io/name: sumo
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: prover
    spec:
      securityContext:
        fsGroup: 2000
        runAsUser: 1000
        runAsNonRoot: true
      restartPolicy: Never
      imagePullSecrets:
        - name: release-name-sumo-registry
      containers:
        - name: release-name-sumo-prover-prepare-circuits
          image: "consensys/rollups-prover:develop"
          imagePullPolicy: Always
          command:
            - "/opt/circuit_manager"
            - "-deployment=dev"
            - "-download-all-circuits"
            - "-aws-region=us-east-2"
            - "-aws-bucket=sumo-circuits-ohio"
            - "-generate-smart-contracts"
            - "-smc-output-dir"
            - "/opt/data/"
          volumeMounts:
            - name: circuits-storage
              mountPath: /opt/circuits
            - name: addchain
              mountPath: /opt/addchain
            - name: persistent-storage
              mountPath: /opt/data
          envFrom:
            - configMapRef:
                name: release-name-sumo-prover-envmap
      volumes:
        - name: config
          configMap:
            name: release-name-sumo-prover-config
        - name: circuits-storage
          persistentVolumeClaim:
            claimName: circuits-pvc-claim
        - name: addchain
          emptyDir: {}
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: efs-claim
