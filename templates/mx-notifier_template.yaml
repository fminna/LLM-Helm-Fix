---
# Source: mx-notifier/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mx-notifier
  labels:
    helm.sh/chart: mx-notifier-1.1.9
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.8"
    app.kubernetes.io/managed-by: Helm
---
# Source: mx-notifier/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-mx-notifier
  labels:
    helm.sh/chart: mx-notifier-1.1.9
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.8"
    app.kubernetes.io/managed-by: Helm
data:
  config.toml: |
    [ConnectorApi]
        # The port on which the Hub listens for subscriptions
        Port = "5000"

        # Username is the username needed to authorize an observer to push data
        Username = ""

        # Password is the password needed to authorize an observer to push event data
        Password = ""

        # CheckDuplicates signals if the events received from observers have been already pushed to clients
        # Requires a redis instance/cluster and should be used when multiple observers push from the same shard
        CheckDuplicates = true

    [Redis]
        # The url used to connect to a pubsub server
        # Note: not required for running in the notifier mode
        Url = "redis://127.0.0.1:6379/1"

        # The pubsub channel used for publishing/subscribing
        # Note: not required for running in the notifier mode
        Channel = "pub-sub"

        # The master name for failover client
        MasterName = "mymaster"

        # The sentinel url for failover client
        SentinelUrl = "localhost:26379"

        # The redis connection type. Options: | instance | sentinel |
        # instance - it will try to connect to a single redis instance
        # sentinel - it will try to connect to redis setup with master, slave and sentinel instances
        ConnectionType = "instance"

        # Time to live (in minutes) for redis lock entry
        TTL = 30

    [RabbitMQ]
        # The url used to connect to a rabbitMQ server
        # Note: not required for running in the notifier mode
        Url = "amqp://guest:guest@127.0.0.1:5672"

        # The exchange which holds all logs and events
        [RabbitMQ.EventsExchange]
            Name = "all_events"
            Type = "fanout"

        # The exchange which holds revert events
        [RabbitMQ.RevertEventsExchange]
            Name = "revert_events"
            Type = "fanout"

        # The exchange which holds finalized block events
        [RabbitMQ.FinalizedEventsExchange]
            Name = "finalized_events"
            Type = "fanout"

        # The exchange which holds block txs events
        [RabbitMQ.BlockTxsExchange]
            Name = "block_txs"
            Type = "fanout"

        # The exchange which holds block scrs events
        [RabbitMQ.BlockScrsExchange]
            Name = "block_scrs"
            Type = "fanout"
---
# Source: mx-notifier/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mx-notifier
  labels:
    helm.sh/chart: mx-notifier-1.1.9
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.8"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
---
# Source: mx-notifier/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mx-notifier
  labels:
    helm.sh/chart: mx-notifier-1.1.9
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.8"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mx-notifier
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mx-notifier
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-mx-notifier
      securityContext:
        {}
      containers:
        - name: mx-notifier
          securityContext:
            {}
          image: "bicarus/mx-notifier:1.1.8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /multiversx/config
      volumes:
      - name: config
        configMap:
          name: release-name-mx-notifier
---
# Source: mx-notifier/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-mx-notifier-test-connection"
  labels:
    helm.sh/chart: mx-notifier-1.1.9
    app.kubernetes.io/name: mx-notifier
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-mx-notifier:80']
  restartPolicy: Never
