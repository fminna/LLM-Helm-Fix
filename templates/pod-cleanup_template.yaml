---
# Source: pod-cleanup/templates/secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-pod-cleanup-secret-env
  labels:
    app: pod-cleanup-0.0.4
    helm.sh/chart: pod-cleanup-0.0.4
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
stringData:
  {}
---
# Source: pod-cleanup/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pod-cleanup-env
  labels:
    app: pod-cleanup-0.0.4
    helm.sh/chart: pod-cleanup-0.0.4
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  POD_CLEANUP_INTERVAL: 5m
  POD_CLEANUP_KUBERNETES_NAMESPACES: gitlab-runner,fluentd,garage,tracing
  POD_CLEANUP_LIMIT: "1"
---
# Source: pod-cleanup/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-release-name-pod-cleanup
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
---
# Source: pod-cleanup/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-release-name-pod-cleanup
roleRef:
  name: default-release-name-pod-cleanup
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: default
  namespace: default
  kind: ServiceAccount
---
# Source: pod-cleanup/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-pod-cleanup
rules:
- resources:
  - '*'
  apiGroups:
  - '*'
  verbs:
  - '*'
---
# Source: pod-cleanup/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-pod-cleanup
roleRef:
  name: release-name-pod-cleanup
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: default
  namespace: default
  kind: ServiceAccount
---
# Source: pod-cleanup/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pod-cleanup
  labels:
    app: pod-cleanup-0.0.4
    helm.sh/chart: pod-cleanup-0.0.4
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8000
      protocol: TCP
      name: http
      appProtocol: http
  selector:
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
---
# Source: pod-cleanup/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pod-cleanup
  labels:
    app: pod-cleanup-0.0.4
    helm.sh/chart: pod-cleanup-0.0.4
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: pod-cleanup
      app.kubernetes.io/instance: release-name
      namespace: "default"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pod-cleanup
        app.kubernetes.io/instance: release-name
        namespace: "default"
        version: "latest"
    spec:
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 10
      serviceAccountName: default
      securityContext:
        fsGroup: 2000
      containers:
        - name: pod-cleanup
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-pod-cleanup:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          envFrom:
            - configMapRef:
                name: release-name-pod-cleanup-env
            - secretRef:
                name: release-name-pod-cleanup-secret-env
          env:
            - name: APPLICATION_NAME
              value: "release-name-pod-cleanup"
            - name: NAMESPACE_NAME
              value: "default"
          volumeMounts:
          resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 10m
              memory: 25Mi
      dnsPolicy: ClusterFirst
      initContainers:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: pod-cleanup
                    namespace: default
---
# Source: pod-cleanup/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-pod-cleanup-test-connection"
  labels:
    app: pod-cleanup-0.0.4
    helm.sh/chart: pod-cleanup-0.0.4
    app.kubernetes.io/name: pod-cleanup
    app.kubernetes.io/instance: release-name
    namespace: "default"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: "docker.io/busybox:1-musl"
      imagePullPolicy: IfNotPresent
      command: ['wget']
      args: ['release-name-pod-cleanup:8080']
  restartPolicy: Never
