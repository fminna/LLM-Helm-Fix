---
# Source: galaxy-stable/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.10.0"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  postgres-password:  "Y2hhbmdlLW1l"
---
# Source: galaxy-stable/templates/galaxy_admin_user_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-galaxy-stable-admin-secret
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
type: Opaque
data:
  password: Y2hhbmdlLW1l
  api-key: Y2hhbmdlbWV0b28=
  database_password: Y2hhbmdlLW1l
---
# Source: galaxy-stable/templates/galaxy_conf_cfgmap.yaml
# This configmap corresponds.to settings in the galaxy.yml file. They are sent in
# to the container as env vars. The setting is converted to uppercase and prefixed
# with GALAXY_CONFIG_ to override the default galaxy.yml config value.
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-galaxy-stable-galaxy-conf
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
data:
  GALAXY_CONFIG_ADMIN_USERS: "admin@galaxyproject.org"
  GALAXY_CONFIG_BRAND: "k8s"
  GALAXY_CONFIG_CONTAINERS_RESOLVERS_CONFIG_FILE: "/export/config/container_resolvers_conf.xml"
---
# Source: galaxy-stable/templates/galaxy_container_cfgmap.yaml
# This config map contains miscellaneous container env vars.
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-galaxy-stable-container-cfgmap
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
data:
  "NONUSE": "sleeplock,condor"
  "GALAXY_TOOLS_PULL_POLICY": IfNotPresent
  "GALAXY_SEC_DB_ENGINE": "postgresql"
  "GALAXY_SEC_DB_USER": galaxy
  "GALAXY_SEC_DB_HOST": release-name-postgresql
  "GALAXY_SEC_DB_NAME": galaxydb
# "GALAXY_CONFIG_DATABASE_CONNECTION": ${GALAXY_SEC_DB_ENGINE}://${GALAXY_SEC_DB_USER}:${GALAXY_SEC_DB_PASS}@${GALAXY_SEC_DB_HOST}/${GALAXY_SEC_DB_NAME}?client_encoding=utf8
  "TOOLS_DEST_PVC": "/export/tools"
  "GALAXY_CONFIG_TOOL_PATH": "/export/tools"
  "GALAXY_DEFAULT_ADMIN_USER": "admin"
  "GALAXY_DEFAULT_ADMIN_EMAIL": "admin@galaxyproject.org"
  "GALAXY_ADMIN_EMAIL": "admin@galaxyproject.org"
  "PYKUBE_KUBERNETES_SERVICE_HOST": "kubernetes"
  "PROXY_PREFIX": "/galaxy"
  GALAXY_RUNNERS_ENABLE_CONDOR: "false"
  GALAXY_RUNNERS_ENABLE_K8: "true"
  GALAXY_RUNNERS_ENABLE_LOCAL: "true"
  GALAXY_RUNNERS_ENABLE_SLURM: "false"
  GALAXY_RUNNERS_K8S_PERSISTENT_VOLUME_CLAIM_MOUNT_PATH: "/export"
  GALAXY_DESTINATIONS_DEFAULT: "docker_dispatch"
  GALAXY_DESTINATIONS_DOCKER_DEFAULT: "k8s_default"
  GALAXY_DESTINATIONS_NO_DOCKER_DEFAULT: "local_no_container"
---
# Source: galaxy-stable/templates/pv_hostpath_minikube_internal.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: galaxy-pv
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/data/galaxy-stable-18.01"
    type: DirectoryOrCreate
---
# Source: galaxy-stable/templates/galaxy_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: galaxy-pvc
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "15Gi"
---
# Source: galaxy-stable/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.10.0"
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: release-name-postgresql
---
# Source: galaxy-stable/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-galaxy-stable
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: galaxy-stable
    release: release-name
---
# Source: galaxy-stable/templates/service_proftpd.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-galaxy-stable-proftpd-svc
  labels:
    app: galaxy-stable-proftpd
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 22
      targetPort: 22
      protocol: TCP
      name: sftp
  selector:
    app: galaxy-stable-proftpd
    release: release-name
---
# Source: galaxy-stable/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.10.0"
    release: "release-name"
    heritage: "Helm"
spec:
  template:
    metadata:
      labels:
        app: release-name-postgresql
    spec:
      containers:
      - name: release-name-postgresql
        image: "pcm32/galaxy-postgres:9.6.5_for_18.01"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "galaxy"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "galaxy"
        - name: POSTGRES_DB
          value: "galaxydb"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgres
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: galaxy-pvc
---
# Source: galaxy-stable/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-galaxy-stable
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
        app: galaxy-stable
        release: release-name
  template:
    metadata:
      labels:
        app: galaxy-stable
        release: release-name
      annotations:
        checksum/galaxy_conf: 99bf74483c9ebaafa36a3ad122e266265acb3cee5a067fc4d39dd2a016d77ed5
        checksum/container_conf: 2e32f04fefd14d7230289396034a783917cc42ebb24dfe91400157ee62a04e42
    spec:
      initContainers:
        - name: galaxy-init
          image: "galaxy/galaxy-init:v18.01"
          imagePullPolicy: IfNotPresent
          env:
            - name: "DISABLE_SLEEPLOCK"
              value: "yes"
          volumeMounts:
            - mountPath: /export
              name: galaxy-pvc
          resources:
            {}
        - name: postgres-listener
          image: alpine
          imagePullPolicy: IfNotPresent
          command: [ "sh", "-c", "for i in $(seq 1 200); do nc -z -w3 release-name-postgresql 5432 && exit 0 || sleep 3; done; exit 1"]
      containers:
        - name: galaxy-stable
          image: "galaxy/galaxy-stable:v18.01"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: release-name-galaxy-stable-galaxy-conf
          - configMapRef:
              name: release-name-galaxy-stable-container-cfgmap
          env:
              - name: "GALAXY_SEC_DB_PASS"
                valueFrom:
                  secretKeyRef:
                      name: release-name-galaxy-stable-admin-secret
                      key: database_password
              - name: "GALAXY_ADMIN_PASSWORD"
                valueFrom:
                  secretKeyRef:
                        name: release-name-galaxy-stable-admin-secret
                        key: password
              - name: "GALAXY_DEFAULT_ADMIN_PASSWORD"
                valueFrom:
                  secretKeyRef:
                        name: release-name-galaxy-stable-admin-secret
                        key: password
              - name: "GALAXY_DEFAULT_ADMIN_KEY"
                valueFrom:
                  secretKeyRef:
                        name: release-name-galaxy-stable-admin-secret
                        key: api-key
          command: ["/bin/bash","-c","export GALAXY_CONFIG_DATABASE_CONNECTION=${GALAXY_SEC_DB_ENGINE}://${GALAXY_SEC_DB_USER}:${GALAXY_SEC_DB_PASS}@${GALAXY_SEC_DB_HOST}/${GALAXY_SEC_DB_NAME}?client_encoding=utf8 && /usr/bin/startup"]
          workingDir: /export
          lifecycle: 
            preStop:
              exec:
                 command:
                     - "./run.sh"
                     - "--stop" 
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /galaxy/
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 6
          livenessProbe:
            httpGet:
              path: /galaxy/
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 60
            failureThreshold: 10
          volumeMounts:
            - mountPath: /export
              name: galaxy-pvc
          resources:
            {}
      volumes:
        - name: galaxy-pvc
          persistentVolumeClaim:
              claimName: galaxy-pvc
---
# Source: galaxy-stable/templates/galaxy_proftpd.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-galaxy-stable-proftpd
  labels:
    app: galaxy-stable-proftpd
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
        app: galaxy-stable-proftpd
        release: release-name
  template:
    metadata:
      labels:
        app: galaxy-stable-proftpd
        release: release-name
    spec:
      containers:
      - name: galaxy-proftpd 
        image: "container-registry.phenomenal-h2020.eu/phnmnl/galaxy-proftpd:for_galaxy_v17.09"
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c", 'export proftpd_db_connection=${galaxy_db_name}@release-name-postgresql && /usr/bin/run.sh']
        volumeMounts:
        - name: galaxy-pvc
          mountPath: /export
          
        ports:
        - containerPort: 30000
        - containerPort: 30001
        - containerPort: 30002
        - containerPort: 30003
        - containerPort: 30004
        - containerPort: 30005
        - containerPort: 30006
        - containerPort: 30007
        - containerPort: 30008
        - containerPort: 30009
        - containerPort: 30010
        - containerPort: 21
        - containerPort: 22 
        env:
        - name: galaxy_db_name
          value: galaxydb
        - name: proftpd_db_username
          value: galaxy
        - name: proftpd_db_password
          valueFrom:
            secretKeyRef:
              name: release-name-galaxy-stable-admin-secret
              key: database_password
        - name: proftpd_files_dir
          value: "/export/ftp/"
        - name: proftpd_use_sftp
          value: "true"
        - name: proftpd_generate_ssh_key
          value: "false"
        - name: proftpd_passive_port_low
          value: "30000"
        - name: proftpd_passive_port_high
          value: "30010"
        resources:
            {}
      volumes:
         - name: galaxy-pvc
           persistentVolumeClaim:
              claimName: galaxy-pvc
---
# Source: galaxy-stable/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: release-name-galaxy-stable
  labels:
    app: galaxy-stable
    chart: galaxy-stable-2.0.0
    release: release-name
    heritage: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: 
      http:
        paths:
          - path: /galaxy
            backend:
              serviceName: release-name-galaxy-stable
              servicePort: http
