---
# Source: deepfence-console/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-deepfence-console
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: false
---
# Source: deepfence-console/templates/database/fileserver/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-file-server-secret
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-file-server-secret
stringData:
---
# Source: deepfence-console/templates/database/neo4j/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-neo4j-secret
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-neo4j-secret
stringData:
---
# Source: deepfence-console/templates/database/postgres/secret.yaml
kind: Secret
apiVersion: v1
type: Opaque
metadata:
  name: release-name-deepfence-console-postgres-secret
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-postgres-secret
stringData:
---
# Source: deepfence-console/templates/deepfence-console-secrets/fileserver.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-secrets-fileserver
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    component: file-server
stringData:
  DEEPFENCE_FILE_SERVER_HOST: release-name-deepfence-console-file-server.default.svc.cluster.local
  DEEPFENCE_FILE_SERVER_PORT: "9000"
  DEEPFENCE_FILE_SERVER_SECURE: "false"
  DEEPFENCE_FILE_SERVER_BUCKET: default
  DEEPFENCE_FILE_SERVER_DB_BUCKET: database
---
# Source: deepfence-console/templates/deepfence-console-secrets/kafka.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-secrets-kafka
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    component: kafka
stringData:
  DEEPFENCE_KAFKA_BROKERS: "release-name-deepfence-console-kafka-broker.default.svc.cluster.local:9092"
---
# Source: deepfence-console/templates/deepfence-console-secrets/neo4j.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-secrets-neo4j
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    component: neo4j
stringData:
  DEEPFENCE_NEO4J_BOLT_PORT: "7687"
  DEEPFENCE_NEO4J_HOST: release-name-deepfence-console-neo4j.default.svc.cluster.local
---
# Source: deepfence-console/templates/deepfence-console-secrets/postgres.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-secrets-postgres
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-secrets-postgres
stringData:
  DEEPFENCE_POSTGRES_USER_DB_PORT: "5432"
  DEEPFENCE_POSTGRES_USER_DB_HOST: release-name-deepfence-console-postgres.default.svc.cluster.local
  DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable
  DEEPFENCE_POSTGRES_USER_DB_NAME: "users"
---
# Source: deepfence-console/templates/deepfence-console-secrets/redis.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-deepfence-console-secrets-redis
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    component: redis
stringData:
  DEEPFENCE_REDIS_DB_NUMBER: "0"
  DEEPFENCE_REDIS_PORT: "6379"
  DEEPFENCE_REDIS_HOST: release-name-deepfence-console-redis.default.svc.cluster.local
---
# Source: deepfence-console/templates/database/kafka/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-deepfence-console-kafka-broker-config
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-kafka-broker-config
data:
  STORAGE_UUID: "hNQ55qppT5GGybF52ZGlOQ"
---
# Source: deepfence-console/templates/database/neo4j/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-deepfence-console-neo4j-config
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-neo4j-config
data:
  NEO4J_PLUGINS: "[\"apoc\"]"
  NEO4J_db_tx__log_rotation_retention__policy: "3 files"
  NEO4J_server_memory_pagecache_size: "2600m"
---
# Source: deepfence-console/templates/deepfence-console-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-deepfence-console-config"
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: "release-name-deepfence-console-config"
data:
  DEEPFENCE_DEBUG: "false"
  DEEPFENCE_SAAS_DEPLOYMENT: "false"
  DEEPFENCE_TELEMETRY_ENABLED: "false"
  DEEPFENCE_FILE_SERVER_HOST: release-name-deepfence-console-file-server.default.svc.cluster.local
  DEEPFENCE_FILE_SERVER_PORT: "9000"
  DEEPFENCE_FILE_SERVER_EXTERNAL: "false"
---
# Source: deepfence-console/templates/deepfence-agent-serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-deepfence-console-agent
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ''
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
      - delete
  - apiGroups:
      - ''
    resources:
      - pods/log
      - services
      - nodes
      - namespaces
      - persistentvolumes
      - persistentvolumeclaims
      - configmaps
      - endpoints
      - replicationcontrollers
      - serviceaccounts
      - secrets
      - limitranges
      - resourcequotas
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - statefulsets
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - deployments
      - daemonsets
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments/scale
    verbs:
      - get
  - apiGroups:
      - extensions
    resources:
      - deployments/scale
    verbs:
      - get
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - volumesnapshot.external-storage.k8s.io
    resources:
      - volumesnapshots
      - volumesnapshotdatas
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterroles
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
---
# Source: deepfence-console/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-deepfence-console-role
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ''
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
---
# Source: deepfence-console/templates/deepfence-agent-serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-deepfence-console-agent
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: release-name-deepfence-console-agent
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-name-deepfence-console
    namespace: default
---
# Source: deepfence-console/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-deepfence-console
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: release-name-deepfence-console-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-name-deepfence-console
    namespace: default
---
# Source: deepfence-console/templates/database/fileserver/fileserver.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-file-server
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-file-server
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      targetPort: http
      protocol: TCP
    - name: ui
      port: 9090
      targetPort: ui
      protocol: TCP
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-file-server
---
# Source: deepfence-console/templates/database/kafka/kafka.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-kafka-broker
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-kafka-broker
spec:
  type: ClusterIP
  clusterIP: None
  selector:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-kafka-broker
  ports:
    - name: '9092'
      port: 9092
      protocol: TCP
      targetPort: 9092
    - name: '9093'
      port: 9093
      protocol: TCP
      targetPort: 9093
---
# Source: deepfence-console/templates/database/neo4j/neo4j.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-neo4j
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-neo4j
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 7687
      targetPort: 7687
      protocol: TCP
    - name: ui
      port: 7474
      targetPort: 7474
      protocol: TCP
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-neo4j
---
# Source: deepfence-console/templates/database/postgres/postgres.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-postgres
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-postgres
spec:
  type: ClusterIP
  ports:
    - name: tcp
      port: 5432
      targetPort: tcp
      protocol: TCP
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-postgres
---
# Source: deepfence-console/templates/database/redis/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-redis
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-redis
---
# Source: deepfence-console/templates/deepfence-ingester.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-ingester
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-ingester
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-ingester
---
# Source: deepfence-console/templates/deepfence-scheduler.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-scheduler
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-scheduler
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-scheduler
---
# Source: deepfence-console/templates/deepfence-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-server
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-server
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 8081
      targetPort: internal
      protocol: TCP
      name: internal
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-server
---
# Source: deepfence-console/templates/deepfence-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-ui
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-ui
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-ui
---
# Source: deepfence-console/templates/deepfence-worker.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-deepfence-console-worker
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-worker
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    name: release-name-deepfence-console-worker
---
# Source: deepfence-console/templates/deepfence-agent.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-deepfence-console-agent
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-agent
spec:
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-agent
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-agent
    spec:
      hostPID: true
      hostNetwork: true
      serviceAccountName: release-name-deepfence-console
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: containerd-sock
          hostPath:
            path: /run/containerd/containerd.sock
            type: Socket
        - name: kernel-sys
          hostPath:
            path: /sys/kernel/debug
            type: Directory
        - name: host-fs
          hostPath:
            path: /
            type: Directory
        - name: fenced-path
          emptyDir: {}
        - name: fenced-path-compliance
          emptyDir: {}
        - name: fenced-path-compliance-scan-logs
          emptyDir: {}
      containers:
        - name: deepfence-agent
          image: "quay.io/deepfenceio/deepfence_agent_ce:2.2.1"
          imagePullPolicy: Always
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1500m
              memory: 2048Mi
          env:
            - name: MGMT_CONSOLE_URL_INTERNAL
              value: release-name-deepfence-console-server.default.svc.cluster.local
            - name: MGMT_CONSOLE_PORT_INTERNAL
              value: "8081"
            - name: MGMT_CONSOLE_URL
              value: release-name-deepfence-console-router.default.svc.cluster.local
            - name: MGMT_CONSOLE_PORT
              value: "443"
            - name: "DEEPFENCE_KEY"
              value: "\"\""
            - name: "DEEPFENCE_CONSOLE_AGENT"
              value: "true"
            - name: USER_DEFINED_TAGS
              value: 
            - name: DF_ENABLE_PROCESS_REPORT
              value: "true"
            - name: DF_ENABLE_CONNECTIONS_REPORT
              value: "true"
            - name: DF_KUBERNETES_ON
              value: "Y"
            - name: INSTANCE_ID_SUFFIX
              value: "N"
            - name: DF_CLUSTER_NAME
              value: "tm-console"
            - name: AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SCOPE_HOSTNAME
              value: "tm-console-$(AGENT_HOSTNAME)"
            - name: AGENT_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: AGENT_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONTAINERD_SOCKET_PATH
              value: "/run/containerd/containerd.sock"
            
          volumeMounts:
            - mountPath: /run/containerd/containerd.sock
              name: containerd-sock
            
            - mountPath: /sys/kernel/debug
              name: kernel-sys
            - mountPath: /fenced/mnt/host
              name: host-fs
              readOnly: true
            - mountPath: /var/log/fenced
              name: fenced-path
            - mountPath: /var/log/fenced/compliance
              name: fenced-path-compliance
            - mountPath: /var/log/fenced/compliance-scan-logs
              name: fenced-path-compliance-scan-logs
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: deepfence-console/templates/deepfence-cluster-agent.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-cluster-agent
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-cluster-agent
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-cluster-agent
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-cluster-agent
    spec:
      serviceAccountName: release-name-deepfence-console
      automountServiceAccountToken: true
      containers:
        - name: deepfence-cluster-agent
          image: "quay.io/deepfenceio/deepfence_cluster_agent_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: MGMT_CONSOLE_URL_INTERNAL
              value: release-name-deepfence-console-server.default.svc.cluster.local
            - name: MGMT_CONSOLE_PORT_INTERNAL
              value: "8081"
            - name: MGMT_CONSOLE_URL
              value: release-name-deepfence-console-router.default.svc.cluster.local
            - name: MGMT_CONSOLE_PORT
              value: "443"
            - name: "DEEPFENCE_KEY"
              value: "\"\""
            - name: "DEEPFENCE_CONSOLE_AGENT"
              value: "true"
            - name: DF_CLUSTER_NAME
              value: "tm-console"
            - name: AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SCOPE_HOSTNAME
              value: "tm-console-$(AGENT_HOSTNAME)"
            - name: AGENT_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: AGENT_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 25m
              memory: 80Mi
            limits:
              cpu: 1500m
              memory: 1536Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: deepfence-console/templates/deepfence-ingester.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-ingester
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-ingester
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-ingester
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-ingester
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: ingester
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_worker_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: DEEPFENCE_MODE
              value: ingester
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
            - secretRef:
                name: "release-name-deepfence-console-secrets-redis"
            - secretRef:
                name: "release-name-deepfence-console-secrets-fileserver"
            - secretRef:
                name: "release-name-deepfence-console-secrets-kafka"
            - secretRef:
                name: "release-name-deepfence-console-secrets-postgres"
            - secretRef:
                name: "release-name-deepfence-console-secrets-neo4j"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: deepfence-console/templates/deepfence-router.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-router
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-router
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-router
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: router
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_router_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: FORCE_HTTPS_REDIRECT
              value: "true"
            - name: UI_SERVICE_NAME
              value: release-name-deepfence-console-ui.default.svc.cluster.local
            - name: UI_SERVICE_PORT
              value: "8081"
            - name: API_SERVICE_HOST
              value: release-name-deepfence-console-server.default.svc.cluster.local
            - name: API_SERVICE_PORT
              value: "8080"
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
            successThreshold: 1
          volumeMounts:
          resources:
            limits:
              cpu: 3000m
              memory: 4096Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
---
# Source: deepfence-console/templates/deepfence-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-scheduler
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-scheduler
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-scheduler
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: scheduler
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_worker_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: DEEPFENCE_MODE
              value: scheduler
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
            - secretRef:
                name: "release-name-deepfence-console-secrets-redis"
            - secretRef:
                name: "release-name-deepfence-console-secrets-fileserver"
            - secretRef:
                name: "release-name-deepfence-console-secrets-kafka"
            - secretRef:
                name: "release-name-deepfence-console-secrets-postgres"
            - secretRef:
                name: "release-name-deepfence-console-secrets-neo4j"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: deepfence-console/templates/deepfence-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-server
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-server
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-server
    spec:
      serviceAccountName: release-name-deepfence-console
      automountServiceAccountToken: true
      securityContext:
        {}
      containers:
        - name: server
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_server_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: CONSOLE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEEPFENCE_ACCESS_TOKEN_EXPIRY_MINUTES
              value: "5"
            - name: DEEPFENCE_CONSOLE_ORCHESTRATOR
              value: "kubernetes"
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
            - secretRef:
                name: "release-name-deepfence-console-secrets-redis"
            - secretRef:
                name: "release-name-deepfence-console-secrets-fileserver"
            - secretRef:
                name: "release-name-deepfence-console-secrets-kafka"
            - secretRef:
                name: "release-name-deepfence-console-secrets-postgres"
            - secretRef:
                name: "release-name-deepfence-console-secrets-neo4j"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: internal
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /deepfence/ping
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /deepfence/ping
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 3000m
              memory: 4096Mi
            requests:
              cpu: 250m
              memory: 256Mi
---
# Source: deepfence-console/templates/deepfence-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-ui
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-ui
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-ui
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: ui
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_ui_ce:2.2.1"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
            - secretRef:
                name: "release-name-deepfence-console-secrets-redis"
            - secretRef:
                name: "release-name-deepfence-console-secrets-fileserver"
            - secretRef:
                name: "release-name-deepfence-console-secrets-kafka"
            - secretRef:
                name: "release-name-deepfence-console-secrets-postgres"
            - secretRef:
                name: "release-name-deepfence-console-secrets-neo4j"
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: deepfence-console/templates/deepfence-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-deepfence-console-worker
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-worker
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-worker
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: worker
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_worker_ce:2.2.1"
          imagePullPolicy: Always
          env:
            - name: DEEPFENCE_MODE
              value: worker
          envFrom:
            - configMapRef:
                name: "release-name-deepfence-console-config"
            - secretRef:
                name: "release-name-deepfence-console-secrets-redis"
            - secretRef:
                name: "release-name-deepfence-console-secrets-fileserver"
            - secretRef:
                name: "release-name-deepfence-console-secrets-kafka"
            - secretRef:
                name: "release-name-deepfence-console-secrets-postgres"
            - secretRef:
                name: "release-name-deepfence-console-secrets-neo4j"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            limits:
              cpu: 2000m
              memory: 8000Mi
            requests:
              cpu: 250m
              memory: 256Mi
---
# Source: deepfence-console/templates/database/fileserver/fileserver.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-deepfence-console-file-server
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-file-server
spec:
  serviceName: release-name-deepfence-console-file-server
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-file-server
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-file-server
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: fileserver
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_file_server_ce:2.2.1"
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: release-name-deepfence-console-file-server-secret
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: ui
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /data
              name: "file-server"
  volumeClaimTemplates:
    - metadata:
        name: "file-server"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100G"
        storageClassName: standard
---
# Source: deepfence-console/templates/database/kafka/kafka.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-deepfence-console-kafka-broker
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-kafka-broker
spec:
  serviceName: release-name-deepfence-console-kafka-broker
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-kafka-broker
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-kafka-broker
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: name
                      operator: In
                      values:
                        - kafka-broker
                topologyKey: kubernetes.io/hostname
      initContainers:
        - name: init
          image: busybox
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command:  ["/bin/chmod","-R","777", "/data"]
          volumeMounts:
            - name: "kafka-broker"
              mountPath: /data
      containers:
        - name: kafka
          image: "quay.io/deepfenceio/deepfence_kafka_broker_ce:2.2.1"
          imagePullPolicy: Always
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REPLICAS
              value: "1"
            - name: SERVICE
              value: release-name-deepfence-console-kafka-broker
            - name: CLUSTER_DOMAIN
              value: cluster.local
            - name: KAFKA_LOG_DIRS
              value: /data/kafka
          envFrom:
            - configMapRef:
                name: release-name-deepfence-console-kafka-broker-config
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 120
            periodSeconds: 30
          # readinessProbe:
          #   tcpSocket:
          #     port: 9092
          #   initialDelaySeconds: 120
          #   periodSeconds: 30
          resources:
            limits:
              cpu: 4000m
              memory: 8192Mi
            requests:
              cpu: 500m
              memory: 1024Mi
          volumeMounts:
          - name: "kafka-broker"
            mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: "kafka-broker"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50G"
        storageClassName: standard
---
# Source: deepfence-console/templates/database/neo4j/neo4j.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-deepfence-console-neo4j
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-neo4j
spec:
  serviceName: release-name-deepfence-console-neo4j
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-neo4j
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-neo4j
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: neo4j
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_neo4j_ce:2.2.1"
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: release-name-deepfence-console-neo4j-secret
            - configMapRef:
                name: release-name-deepfence-console-neo4j-config
          env:
            - name: OFFLINE_MAINTENANCE_MODE_ENABLED
              value: "false"
          ports:
            - name: ui
              containerPort: 7474
              protocol: TCP
            - name: http
              containerPort: 7687
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /startup/health-check.sh
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - /startup/health-check.sh
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            limits:
              cpu: 4000m
              memory: 16Gi
            requests:
              cpu: 1000m
              memory: 2048Mi
          volumeMounts:
            - name: "neo4j"
              mountPath: /data
              subPath: "data"
            - name: "neo4j"
              mountPath: /logs
              subPath: "logs"
            - name: "neo4j"
              mountPath: /backups
              subPath: "backups"
  volumeClaimTemplates:
    - metadata:
        name: "neo4j"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100G"
        storageClassName: standard
---
# Source: deepfence-console/templates/database/postgres/postgres.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-deepfence-console-postgres
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-postgres
spec:
  serviceName: release-name-deepfence-console-postgres
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-postgres
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-postgres
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: postgres
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_postgres_ce:2.2.1"
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: release-name-deepfence-console-postgres-secret
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 2000m
              memory: 2048Mi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - mountPath: /data
              name: "postgres"
  volumeClaimTemplates:
    - metadata:
        name: "postgres"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50G"
        storageClassName: standard
---
# Source: deepfence-console/templates/database/redis/redis.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-deepfence-console-redis
  labels:
    helm.sh/chart: deepfence-console-2.2.1
    app: deepfence-console
    app.kubernetes.io/name: deepfence-console
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.1"
    app.kubernetes.io/managed-by: Helm
    name: release-name-deepfence-console-redis
spec:
  serviceName: release-name-deepfence-console-redis
  replicas: 1
  selector:
    matchLabels:
      app: deepfence-console
      app.kubernetes.io/name: deepfence-console
      app.kubernetes.io/instance: release-name
      name: release-name-deepfence-console-redis
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: deepfence-console
        app.kubernetes.io/instance: release-name
        name: release-name-deepfence-console-redis
    spec:
      serviceAccountName: release-name-deepfence-console
      securityContext:
        {}
      containers:
        - name: redis
          securityContext:
            {}
          image: "quay.io/deepfenceio/deepfence_redis_ce:2.2.1"
          imagePullPolicy: Always
          ports:
            - name: tcp
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec redis-cli ping
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec redis-cli ping
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 3000m
              memory: 6144Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /data
              name: "redis"
  volumeClaimTemplates:
    - metadata:
        name: "redis"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "30G"
        storageClassName: standard
---
# Source: deepfence-console/templates/deepfence-router.yaml
---
