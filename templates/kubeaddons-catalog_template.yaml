---
# Source: kubeaddons-catalog/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-kubeaddons-catalog
  namespace: default
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["kubeaddons.mesosphere.io"]
    resources: ["addonrepositories"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["kubeaddons.mesosphere.io"]
    resources: ["addonrepositories/status"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: kubeaddons-catalog/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-kubeaddons-catalog
  namespace: default
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-kubeaddons-catalog
subjects:
  - kind: ServiceAccount
    name: release-name-kubeaddons-catalog
    namespace: default
---
# Source: kubeaddons-catalog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kubeaddons-catalog
  namespace: default
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/name: kubeaddons-catalog
    app.kubernetes.io/instance: release-name
  sessionAffinity: None
  type: ClusterIP
---
# Source: kubeaddons-catalog/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kubeaddons-catalog
  namespace: default
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeaddons-catalog
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubeaddons-catalog
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-kubeaddons-catalog
      containers:
        - name: kubeaddons-catalog
          image: "mesosphere/kubeaddons-catalog:v0.11.4"
          imagePullPolicy: IfNotPresent
          env:
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9094
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1beta1/health
              port: http
          readinessProbe:
            httpGet:
              path: /v1beta1/healthz
              port: http
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 20Mi
---
# Source: kubeaddons-catalog/templates/crds.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalog-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: kubeaddons-catalog/templates/hook-roles.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kubeaddons-catalog
  namespace: default
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: "before-hook-creation"
---
# Source: kubeaddons-catalog/templates/crds.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  labels:
    app.kubernetes.io/name: kubeaddons-catalog
    helm.sh/chart: kubeaddons-catalog-0.1.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.11.4"
    app.kubernetes.io/managed-by: Helm
data:
  crd_addonsrepository.yaml: |
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        annotations:
          controller-gen.kubebuilder.io/version: v0.2.5
          "helm.sh/hook": crd-install
        creationTimestamp: null
        name: addonrepositories.kubeaddons.mesosphere.io
      spec:
        additionalPrinterColumns:
          - JSONPath: .status.ready
            name: ready
            type: string
        group: kubeaddons.mesosphere.io
        names:
          kind: AddonRepository
          listKind: AddonRepositoryList
          plural: addonrepositories
          singular: addonrepository
        preserveUnknownFields: false
        scope: Namespaced
        subresources:
          status: {}
        validation:
          openAPIV3Schema:
            description: AddonRepository is the Schema for the addonrepositories API
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: AddonRepositorySpec defines the desired state of AddonRepository
                properties:
                  options:
                    description: AddonRepositoryOptions defines the credentials reference
                      for the repository
                    properties:
                      credentialsRef:
                        description: LocalObjectReference contains enough information to
                          let you locate the referenced object inside the same namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                    required:
                      - credentialsRef
                    type: object
                  priority:
                    anyOf:
                      - type: integer
                      - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  ref:
                    type: string
                  type:
                    type: string
                  url:
                    type: string
                required:
                  - ref
                  - url
                type: object
              status:
                description: AddonRepositoryStatus defines the observed state of AddonRepository
                properties:
                  ready:
                    type: boolean
                required:
                  - ready
                type: object
            type: object
        version: v1beta1
        versions:
          - name: v1beta1
            served: true
            storage: false
          - name: v1beta2
            served: true
            storage: true
      status:
        acceptedNames:
          kind: ''
          plural: ''
        conditions: []
        storedVersions: []
---
# Source: kubeaddons-catalog/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: catalog-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "get", "list", "watch", "patch"]
---
# Source: kubeaddons-catalog/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: catalog-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: catalog-crds
subjects:
  - kind: ServiceAccount
    name: catalog-crds
    namespace: default
---
# Source: kubeaddons-catalog/templates/crds.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: catalog-crds
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: catalog-crds
      containers:
        - name: catalog-crds
          image: "bitnami/kubectl:1.19.7"
          volumeMounts:
            - name: catalog-crds
              mountPath: /etc/catalog-crds
              readOnly: true
          command: ["kubectl", "apply", "-f", "/etc/catalog-crds"]
      volumes:
        - name: catalog-crds
          configMap:
            name: catalog-crds
      restartPolicy: OnFailure
