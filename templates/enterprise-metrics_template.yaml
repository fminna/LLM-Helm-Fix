---
# Source: enterprise-metrics/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-enterprise-metrics
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    heritage: Helm
    release: release-name
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: enterprise-metrics/charts/minio/templates/post-install-prometheus-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
---
# Source: enterprise-metrics/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "release-name-minio"
  namespace: "default"
  labels:
    app: minio
    chart: minio-8.0.9
    release: "release-name"
---
# Source: enterprise-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    heritage: Helm
    release: release-name
  annotations:
    {}
  name: release-name-enterprise-metrics
---
# Source: enterprise-metrics/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-minio
  labels:
    app: minio
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
type: Opaque
data:
  accesskey: "ZW50ZXJwcmlzZS1tZXRyaWNz"
  secretkey: "c3VwZXJzZWNyZXQ="
---
# Source: enterprise-metrics/templates/license-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: enterprise-metrics-license
  labels:
    app: enterprise-metrics-license
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
data:
  license.jwt: Tk9UQVZBTElETElDRU5TRQ==
---
# Source: enterprise-metrics/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-enterprise-metrics
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
data:
  enterprise-metrics.yaml: YWRtaW5fYXBpOgogIGxlYWRlcl9lbGVjdGlvbjoKICAgIGVuYWJsZWQ6IHRydWUKICAgIHJpbmc6CiAgICAgIGt2c3RvcmU6CiAgICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKYWRtaW5fY2xpZW50OgogIHN0b3JhZ2U6CiAgICB0eXBlOiBzMwphbGVydG1hbmFnZXI6CiAgZGF0YV9kaXI6IC9kYXRhCiAgZW5hYmxlX2FwaTogdHJ1ZQogIGV4dGVybmFsX3VybDogL2FsZXJ0bWFuYWdlcgogIHNoYXJkaW5nX2VuYWJsZWQ6IHRydWUKICBzaGFyZGluZ19yaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKYXBpOgogIHJlc3BvbnNlX2NvbXByZXNzaW9uX2VuYWJsZWQ6IHRydWUKYXV0aDoKICB0eXBlOiBlbnRlcnByaXNlCmF1dGhfZW5hYmxlZDogdHJ1ZQpibG9ja3Nfc3RvcmFnZToKICBiYWNrZW5kOiBzMwogIGJ1Y2tldF9zdG9yZToKICAgIHN5bmNfZGlyOiAvZGF0YS90c2RiLXN5bmMKICB0c2RiOgogICAgZGlyOiAvZGF0YS90c2RiCmNsdXN0ZXJfbmFtZTogJ3JlbGVhc2UtbmFtZScKY29tcGFjdG9yOgogIGRhdGFfZGlyOiAvZGF0YQogIHNoYXJkaW5nX2VuYWJsZWQ6IHRydWUKICBzaGFyZGluZ19yaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKZGlzdHJpYnV0b3I6CiAgcG9vbDoKICAgIGhlYWx0aF9jaGVja19pbmdlc3RlcnM6IHRydWUKICByaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKICBzaGFyZF9ieV9hbGxfbGFiZWxzOiB0cnVlCmZyb250ZW5kOgogIGxvZ19xdWVyaWVzX2xvbmdlcl90aGFuOiAxMHMKaW5nZXN0ZXI6CiAgbGlmZWN5Y2xlcjoKICAgIGZpbmFsX3NsZWVwOiAwcwogICAgam9pbl9hZnRlcjogMHMKICAgIG51bV90b2tlbnM6IDUxMgogICAgcmluZzoKICAgICAga3ZzdG9yZToKICAgICAgICBzdG9yZTogbWVtYmVybGlzdAogICAgICByZXBsaWNhdGlvbl9mYWN0b3I6IDEKICBtYXhfdHJhbnNmZXJfcmV0cmllczogMAppbmdlc3Rlcl9jbGllbnQ6CiAgZ3JwY19jbGllbnRfY29uZmlnOgogICAgbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1NzYwMAogICAgbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAppbnN0cnVtZW50YXRpb246CiAgZGlzdHJpYnV0b3JfY2xpZW50OgogICAgYWRkcmVzczogZG5zOi8vL3JlbGVhc2UtbmFtZS1lbnRlcnByaXNlLW1ldHJpY3MtZGlzdHJpYnV0b3IuZGVmYXVsdC5zdmM6OTA5NQogIGVuYWJsZWQ6IHRydWUKbGljZW5zZToKICBwYXRoOiAvbGljZW5zZS9saWNlbnNlLmp3dApsaW1pdHM6IHt9Cm1lbWJlcmxpc3Q6CiAgYmluZF9wb3J0OiA3OTQ2CnF1ZXJpZXI6CiAgYWN0aXZlX3F1ZXJ5X3RyYWNrZXJfZGlyOiAvZGF0YS9lbnRlcnByaXNlLW1ldHJpY3MvcXVlcmllcgogIHF1ZXJ5X2luZ2VzdGVyc193aXRoaW46IDEyaApxdWVyeV9yYW5nZToKICBhbGlnbl9xdWVyaWVzX3dpdGhfc3RlcDogdHJ1ZQogIGNhY2hlX3Jlc3VsdHM6IHRydWUKICByZXN1bHRzX2NhY2hlOgogICAgY2FjaGU6CiAgICAgIG1lbWNhY2hlZDoKICAgICAgICBleHBpcmF0aW9uOiAxaAogICAgICBtZW1jYWNoZWRfY2xpZW50OgogICAgICAgIHRpbWVvdXQ6IDFzCiAgc3BsaXRfcXVlcmllc19ieV9pbnRlcnZhbDogMjRoCnJ1bGVyOgogIGVuYWJsZV9hbGVydG1hbmFnZXJfZGlzY292ZXJ5OiBmYWxzZQogIGVuYWJsZV9hcGk6IHRydWUKICBlbmFibGVfc2hhcmRpbmc6IHRydWUKICByaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3QKICBydWxlX3BhdGg6IC9kYXRhCnJ1bnRpbWVfY29uZmlnOgogIGZpbGU6IC92YXIvZW50ZXJwcmlzZS1tZXRyaWNzL3J1bnRpbWUueWFtbApzZXJ2ZXI6CiAgZ3JwY19saXN0ZW5fcG9ydDogOTA5NQogIGdycGNfc2VydmVyX21heF9jb25jdXJyZW50X3N0cmVhbXM6IDEwMDAKICBncnBjX3NlcnZlcl9tYXhfcmVjdl9tc2dfc2l6ZTogMTA0ODU3NjAwCiAgZ3JwY19zZXJ2ZXJfbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAogIGh0dHBfbGlzdGVuX3BvcnQ6IDgwODAKc3RvcmFnZToKICBlbmdpbmU6IGJsb2NrcwpzdG9yZV9nYXRld2F5OgogIHNoYXJkaW5nX2VuYWJsZWQ6IHRydWUKICBzaGFyZGluZ19yaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG1lbWJlcmxpc3Q=
---
# Source: enterprise-metrics/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-minio
  labels:
    app: minio
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
    
      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the buckets
    createBucket enterprise-metrics-tsdb none false 
    createBucket enterprise-metrics-admin none false 
    createBucket enterprise-metrics-ruler none false
---
# Source: enterprise-metrics/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-enterprise-metrics-runtime
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
data:
  runtime.yaml: |
    
    {}
---
# Source: enterprise-metrics/charts/minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-minio
  labels:
    app: minio
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: enterprise-metrics/charts/minio/templates/post-install-prometheus-metrics-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
    resourceNames:
      - release-name-minio-prometheus
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
    resourceNames:
      - release-name-minio
---
# Source: enterprise-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-enterprise-metrics
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    heritage: Helm
    release: release-name
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [release-name-enterprise-metrics]
---
# Source: enterprise-metrics/charts/minio/templates/post-install-prometheus-metrics-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-minio-update-prometheus-secret
subjects:
  - kind: ServiceAccount
    name: release-name-minio-update-prometheus-secret
    namespace: "default"
---
# Source: enterprise-metrics/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-enterprise-metrics
  labels:
    app: enterprise-metrics
    chart: enterprise-metrics-1.10.0
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-enterprise-metrics
subjects:
- kind: ServiceAccount
  name: release-name-enterprise-metrics
---
# Source: enterprise-metrics/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-minio
  labels:
    app: minio
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: release-name
---
# Source: enterprise-metrics/templates/admin-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-admin-api
  labels:
    app: enterprise-metrics-admin-api
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-admin-api
    release: release-name
---
# Source: enterprise-metrics/templates/alertmanager-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-alertmanager-headless
  labels:
    app: enterprise-metrics-alertmanager
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
    - port: 9094
      protocol: TCP
      name: cluster
  selector:
    app: enterprise-metrics-alertmanager
    release: release-name
---
# Source: enterprise-metrics/templates/alertmanager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-alertmanager
  labels:
    app: enterprise-metrics-alertmanager
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-alertmanager
    release: release-name
---
# Source: enterprise-metrics/templates/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-compactor
  labels:
    app: enterprise-metrics-compactor
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-compactor
    release: release-name
---
# Source: enterprise-metrics/templates/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-distributor
  labels:
    app: enterprise-metrics-distributor
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-distributor
    release: release-name
---
# Source: enterprise-metrics/templates/gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-gateway
  labels:
    app: enterprise-metrics-gateway
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: enterprise-metrics-gateway
    release: release-name
---
# Source: enterprise-metrics/templates/gossip-ring-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-gossip-ring
  labels:
    app: enterprise-metrics-gossip-ring
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: gossip-ring
      port: 7946
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    gossip_ring_member: "true"
---
# Source: enterprise-metrics/templates/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-ingester
  labels:
    app: enterprise-metrics-ingester
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-ingester
    release: release-name
---
# Source: enterprise-metrics/templates/overrides-exporter-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-overrides-exporter
  labels:
    app: enterprise-metrics-overrides-exporter
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-overrides-exporter
    release: release-name
---
# Source: enterprise-metrics/templates/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-querier
  labels:
    app: enterprise-metrics-querier
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-querier
    release: release-name
---
# Source: enterprise-metrics/templates/query-frontend-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-query-frontend-headless
  labels:
    app: enterprise-metrics-query-frontend
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-query-frontend
    release: release-name
---
# Source: enterprise-metrics/templates/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-query-frontend
  labels:
    app: enterprise-metrics-query-frontend
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app: enterprise-metrics-query-frontend
    release: release-name
---
# Source: enterprise-metrics/templates/ruler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-ruler
  labels:
    app: enterprise-metrics-ruler
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: enterprise-metrics-ruler
    release: release-name
---
# Source: enterprise-metrics/templates/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-enterprise-metrics-store-gateway
  labels:
    app: enterprise-metrics-store-gateway
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc      
  selector:
    app: enterprise-metrics-store-gateway
    release: release-name
---
# Source: enterprise-metrics/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-minio
  labels:
    app: minio
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: release-name
  template:
    metadata:
      name: release-name-minio
      labels:
        app: minio
        release: release-name
      annotations:
        checksum/secrets: bf9d7b16b39a180b569395389c90c9bf8ae2417c76145f2a798c78f56bbd3d62
        checksum/config: ecf45c91bb11d6ef7660271222988ec8b6759e8e8411dcc3f69bf195740df412
    spec:
      serviceAccountName: "release-name-minio"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2020-12-03T05-49-24Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:
            - name: export
              mountPath: /export            
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: secretkey
          resources:
            requests:
              cpu: 100m
              memory: 128Mi      
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: release-name-minio
        - name: minio-user
          secret:
            secretName: release-name-minio
---
# Source: enterprise-metrics/templates/admin-api-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    app: enterprise-metrics-admin-api
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  name: release-name-enterprise-metrics-admin-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-admin-api
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-admin-api
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: admin-api
        gossip_ring_member: "true"
        target: admin-api
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        - name: minio-mc
          image: "minio/mc:RELEASE.2020-11-25T23-04-07Z"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "/config/initialize"]
          env:
            - name: MINIO_ENDPOINT
              value: release-name-minio
            - name: MINIO_PORT
              value: "9000"
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
      containers:
        - name: admin-api
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=admin-api"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: release-name-minio
            - secret:
                name: release-name-minio
---
# Source: enterprise-metrics/templates/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-enterprise-metrics-distributor
  labels:
    app: enterprise-metrics-distributor
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-distributor
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-distributor
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: distributor
        gossip_ring_member: "true"
        target: distributor
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: distributor
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - distributor
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
---
# Source: enterprise-metrics/templates/gateway-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    app: enterprise-metrics-gateway
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  name: release-name-enterprise-metrics-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-gateway
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-gateway
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: gateway
        target: gateway
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: gateway
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=gateway"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -gateway.proxy.default.url=http://release-name-enterprise-metrics-admin-api.default.svc:8080
            - -gateway.proxy.admin-api.url=http://release-name-enterprise-metrics-admin-api.default.svc:8080
            - -gateway.proxy.alertmanager.url=http://release-name-enterprise-metrics-alertmanager.default.svc:8080
            - -gateway.proxy.distributor.url=http://release-name-enterprise-metrics-distributor.default.svc:8080
            - -gateway.proxy.graphite.url=http://release-name-enterprise-metrics-graphite.default.svc:8080
            - -gateway.proxy.ingester.url=http://release-name-enterprise-metrics-ingester.default.svc:8080
            - -gateway.proxy.query-frontend.url=http://release-name-enterprise-metrics-query-frontend.default.svc:8080
            - -gateway.proxy.ruler.url=http://release-name-enterprise-metrics-ruler.default.svc:8080
            - -gateway.proxy.store-gateway.url=http://release-name-enterprise-metrics-store-gateway.default.svc:8080
            - -gateway.proxy.compactor.url=http://release-name-enterprise-metrics-compactor.default.svc:8080
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
---
# Source: enterprise-metrics/templates/overrides-exporter-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    app: enterprise-metrics-overrides-exporter
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  name: release-name-enterprise-metrics-overrides-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-overrides-exporter
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-overrides-exporter
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: overrides-exporter
        gossip_ring_member: "true"
        target: overrides-exporter
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: overrides-exporter
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=overrides-exporter"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: release-name-minio
            - secret:
                name: release-name-minio
---
# Source: enterprise-metrics/templates/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-enterprise-metrics-querier
  labels:
    app: enterprise-metrics-querier
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: enterprise-metrics-querier
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-querier
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: querier
        gossip_ring_member: "true"
        target: querier
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: querier
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-querier.frontend-address=release-name-enterprise-metrics-query-frontend-headless.default.svc:9095"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -blocks-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -blocks-storage.s3.bucket-name=enterprise-metrics-tsdb
            - -blocks-storage.s3.access-key-id=enterprise-metrics
            - -blocks-storage.s3.secret-access-key=supersecret
            - -blocks-storage.s3.insecure=true
            - -querier.store-gateway-addresses=dns+release-name-enterprise-metrics-store-gateway.default.svc:9095
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - querier
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
---
# Source: enterprise-metrics/templates/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-enterprise-metrics-query-frontend
  labels:
    app: enterprise-metrics-query-frontend
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-query-frontend
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-query-frontend
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: query-frontend
        target: query-frontend
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: query-frontend
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
          volumeMounts:
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - query-frontend
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
---
# Source: enterprise-metrics/templates/ruler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-enterprise-metrics-ruler
  labels:
    app: enterprise-metrics-ruler
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-ruler
      release: release-name
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: enterprise-metrics-ruler
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: ruler
        gossip_ring_member: "true"
        target: ruler
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: ruler
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ruler"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -blocks-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -blocks-storage.s3.bucket-name=enterprise-metrics-tsdb
            - -blocks-storage.s3.access-key-id=enterprise-metrics
            - -blocks-storage.s3.secret-access-key=supersecret
            - -blocks-storage.s3.insecure=true
            - -ruler.storage.type=s3
            - -ruler.storage.s3.endpoint=release-name-minio.default.svc:9000
            - -ruler.storage.s3.buckets=enterprise-metrics-ruler
            - -ruler.storage.s3.access-key-id=enterprise-metrics
            - -ruler.storage.s3.secret-access-key=supersecret
            - -ruler.storage.s3.insecure=true
            - -ruler.storage.s3.force-path-style=true
            - "-ruler.alertmanager-url=http://release-name-enterprise-metrics-alertmanager.default.svc:8080/api/prom/alertmanager/"
            - -querier.store-gateway-addresses=dns+release-name-enterprise-metrics-store-gateway.default.svc:9095
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
---
# Source: enterprise-metrics/templates/alertmanager-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-enterprise-metrics-alertmanager
  labels:
    app: enterprise-metrics-alertmanager
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-alertmanager
      release: release-name
  updateStrategy:
    type: RollingUpdate          
  serviceName: release-name-enterprise-metrics-alertmanager
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
  template:
    metadata:
      labels:
        app: enterprise-metrics-alertmanager
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: alertmanager
        gossip_ring_member: "true"
        target: alertmanager
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: tmp
          emptyDir: {}
      containers:
        - name: alertmanager
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=alertmanager"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -alertmanager-storage.backend=s3
            - -alertmanager-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -alertmanager-storage.s3.bucket-name=enterprise-metrics-ruler
            - -alertmanager-storage.s3.access-key-id=enterprise-metrics
            - -alertmanager-storage.s3.secret-access-key=supersecret
            - -alertmanager-storage.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
            - name: tmp
              mountPath: /tmp
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: enterprise-metrics/templates/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-enterprise-metrics-compactor
  labels:
    app: enterprise-metrics-compactor
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-compactor
      release: release-name
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-enterprise-metrics-compactor
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        app: enterprise-metrics-compactor
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: compactor
        gossip_ring_member: "true"
        target: compactor
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - compactor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
      containers:
        - name: compactor
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -blocks-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -blocks-storage.s3.bucket-name=enterprise-metrics-tsdb
            - -blocks-storage.s3.access-key-id=enterprise-metrics
            - -blocks-storage.s3.secret-access-key=supersecret
            - -blocks-storage.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: enterprise-metrics/templates/ingester-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-enterprise-metrics-ingester
  labels:
    app: enterprise-metrics-ingester
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-ingester
      release: release-name
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-enterprise-metrics-ingester
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        app: enterprise-metrics-ingester
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: ingester
        gossip_ring_member: "true"
        target: ingester
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - ingester
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
      containers:
        - name: ingester
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -blocks-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -blocks-storage.s3.bucket-name=enterprise-metrics-tsdb
            - -blocks-storage.s3.access-key-id=enterprise-metrics
            - -blocks-storage.s3.secret-access-key=supersecret
            - -blocks-storage.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: enterprise-metrics/templates/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-enterprise-metrics-store-gateway
  labels:
    app: enterprise-metrics-store-gateway
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-metrics-store-gateway
      release: release-name
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-enterprise-metrics-store-gateway
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        app: enterprise-metrics-store-gateway
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: store-gateway
        gossip_ring_member: "true"
        target: store-gateway
        release: release-name
      annotations:
        checksum/config: 5552bcccde4bda138702bfb3f74b236f93068fa934cf0a99db69074930bd5b49
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - store-gateway
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: runtime-config
          configMap:
            name: release-name-enterprise-metrics-runtime
        - name: license
          secret:
            secretName: enterprise-metrics-license
      containers:
        - name: store-gateway
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - "-memberlist.join=release-name-enterprise-metrics-gossip-ring"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -blocks-storage.s3.endpoint=release-name-minio.default.svc:9000
            - -blocks-storage.s3.bucket-name=enterprise-metrics-tsdb
            - -blocks-storage.s3.access-key-id=enterprise-metrics
            - -blocks-storage.s3.secret-access-key=supersecret
            - -blocks-storage.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: runtime-config
              mountPath: /var/enterprise-metrics
            - name: license
              mountPath: /license
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP            
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: enterprise-metrics/charts/minio/templates/post-install-create-bucket-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-minio-make-bucket-job
  labels:
    app: minio-make-bucket-job
    chart: minio-8.0.9
    release: release-name
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: release-name
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: release-name-minio
            - secret:
                name: release-name-minio
      serviceAccountName: "release-name-minio"
      containers:
      - name: minio-mc
        image: "minio/mc:RELEASE.2020-11-25T23-04-07Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: release-name-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
---
# Source: enterprise-metrics/templates/tokengen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-enterprise-metrics-tokengen
  labels:
    app: enterprise-metrics-tokengen
    chart: enterprise-metrics-1.10.0
    release: release-name
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  selector:
  template:
    metadata:
      labels:
        app: enterprise-metrics-tokengen
        # The name label is important for cortex-mixin compatibility which expects certain names for services.
        name: tokengen
        target: tokengen
        release: release-name
    spec:
      serviceAccountName: release-name-enterprise-metrics
      securityContext:
        null
      initContainers:
        []
      containers:
        - name: tokengen
          image: "grafana/metrics-enterprise:v1.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=tokengen"
            - "-config.file=/etc/enterprise-metrics/enterprise-metrics.yaml"
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-metrics-admin
            - -admin.client.s3.access-key-id=enterprise-metrics
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
          volumeMounts:
            - name: config
              mountPath: /etc/enterprise-metrics
            - name: license
              mountPath: /license
          env:
      restartPolicy: OnFailure
      volumes:
        - name: config
          secret:
            secretName: release-name-enterprise-metrics
        - name: license
          secret:
            secretName: enterprise-metrics-license
        - name: storage
          emptyDir: {}
