---
# Source: sqream-db-metadata/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sqream-ns-admin
  namespace: sqream
---
# Source: sqream-db-metadata/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sqream-admin
  namespace: sqream
---
# Source: sqream-db-metadata/templates/configmap.yaml
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-file
  namespace: sqream
data:
  LICENSE_VALID: "false"
  PROMETHEUS_DATA: "/mnt/nfsclient/sqream-hostpath/prometheus"
  SQREAM_CONFIG_DIR: "/mnt/nfsclient/sqream-hostpath/config"
  SQREAM_DASHBOARD_DATA_COLLECTOR_PORT: "8100"
  SQREAM_DATABASE_NAME: "master"
  SQREAM_DATA_INGEST: "/mnt/nfsclient/sqream-hostpath/data"
  SQREAM_K8S_ADMIN_UI: "sqream-adminui"
  SQREAM_K8S_METADATA: "sqream-metadata"
  SQREAM_K8S_NAMESPACE: "sqream"
  SQREAM_K8S_PICKER: ""
  BILLING_REPORT_URL: "https://lookerstudio.google.com/embed/reporting/52cde60d-54e9-4824-a525-2e21bf0b31ea/page/bNMJD?params={\"clusterid\":\"\"}"
  SQREAM_K8S_PROMETHEUS: "prometheus"
  SQREAM_K8S_REGISTRY_PORT: "6000"
  SQREAM_K8S_VIP: "sqream."
  SQREAM_LOG_DIR: "/mnt/nfsclient/sqream-hostpath/logs"
  SQREAM_METADATA_PORT: "3105"
  SQREAM_MOUNT_DIR: "/mnt/nfsclient/sqream-hostpath"
  SQREAM_PICKER_PORT: "443"
  SQREAM_PROMETHEUS_PORT: "9090"
  SQREAM_SPOOL_MEMORY_RATIO: "0.9"
  SQREAM_TEMP_DIR: "/mnt/nfsclient/sqream-hostpath/temp"
  SQREAM_VOLUME: "/mnt/nfsclient/sqream-hostpath/sqreamdb"
  SQREAM_WORKER_0_PORT: "30000"
  SQREAM_WORKER_DATA_COLLECTOR_WAIT: "30"
  license_worker_0: "b2:e9:ef:4b:8d:65"
  license_worker_1: "7a:e7:37:35:9f:7e"
  license_worker_2: "4e:91:b3:0c:af:c1"
  license_worker_3: "60:0b:f7:1b:8d:be"
  SQREAM_ADMIN_UI_PORT: "8085"
  SQREAM_ADMIN_UI_PASSWORD: "sqream"
  SQREAM_ADMIN_UI_USER: "sqream"
  MONITORING_BASE_URL: "http://monitor.sqream:8080"
  SQREAM_USER: "sqream"
  SQREAM_HOME: "/home/sqream"
  SQREAM_PACKAGE: "sqream-installer-k8s"
  SQREAM_PACKAGE_HOME: "/home/sqream/sqream-installer-k8s"
  NVIDIA_DRIVER: "418"
  CUDA_VERSION: "10.1"
  PROCESSOR: "x86_64"
  SQREAM_TAR: "sqream-db-2020.1.0.1.kepler.cuda-10.1.generic.x86_64.docker18.0.3.tar"
  SQREAM_TAG: "2020.1.0.1"
  SQREAM_UTILS_HOME: "/opt/sqream_utils"
  SQREAM_UTILS_TAR: "sqream-utils-0.4.8_2020_05_14_15_53.x86_64.docker18.0.3.tar"
  SQREAM_UTILS_TAG: "0.4.8_2020_05_14_15_53"
  SQREAM_EDITOR_TAR: "sqream-editor-4.0.0.x86_64.docker18.0.3.tar"
  SQREAM_EDITOR_TAG: "4.0.0"
  SQREAM_ADMIN_TAR: "sqream-admin-0.1.3_2020_05_13_14_35.docker18.0.3.tar"
  SQREAM_ADMIN_TAG: "0.1.3_2020_05_13_14_35"
  SQREAM_UI_DATA_COLLECTOR_TAR: "sqream-dashboard-data-collector-0.1.2.docker18.0.3.tar"
  SQREAM_UI_DATA_COLLECTOR_TAG: "0.1.2"
  PROMETHEUS_TAG: "v2.15.2"
  PROMETHEUS_TAR: "prometheus-v2.15.2.docker18.0.3.tar"
---
# Source: sqream-db-metadata/templates/leveldb-sc.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: retain-leveldb
provisioner: pd.csi.storage.gke.io
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain
parameters:
  type: pd-standard
---
# Source: sqream-db-metadata/templates/leveldb-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-leveldb-pd
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Ti
  storageClassName: 'retain-leveldb'
---
# Source: sqream-db-metadata/templates/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sqream-admin-crb
  namespace: sqream
subjects:
  - kind: ServiceAccount
    name: sqream-admin
    namespace: sqream
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: sqream-db-metadata/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: sqream
  name: sqream-ns-admin-r
rules:
  - apiGroups: ["", "extensions", "apps","batch"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: sqream-db-metadata/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sqream-ns-admin-rb
  namespace: sqream
subjects:
  - kind: ServiceAccount
    name: sqream-ns-admin
    namespace: sqream
roleRef:
  kind: Role
  name: sqream-ns-admin-r
  apiGroup: ""
---
# Source: sqream-db-metadata/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sqream-metadata
  labels:
    helm.sh/chart: sqream-db-metadata-0.1.0
    app.kubernetes.io/name: sqream-db-metadata
    app.kubernetes.io/instance: release-name
    app: sqream-db-metadata
    app.kubernetes.io/version: "1.16.0"
    app: sqream-db-metadata
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 3105
    targetPort:  3105
    protocol: TCP
    name: metadata
  selector:
    app.kubernetes.io/name: sqream-db-metadata
    app.kubernetes.io/instance: release-name
    app: sqream-db-metadata
---
# Source: sqream-db-metadata/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqream-metadata
  labels:
    helm.sh/chart: sqream-db-metadata-0.1.0
    app.kubernetes.io/name: sqream-db-metadata
    app.kubernetes.io/instance: release-name
    app: sqream-db-metadata
    app.kubernetes.io/version: "1.16.0"
    app: sqream-db-metadata
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: sqream-db-metadata
      app.kubernetes.io/instance: release-name
      app: sqream-db-metadata
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sqream-db-metadata
        app.kubernetes.io/instance: release-name
        app: sqream-db-metadata
    spec:
      nodeSelector:
        cpu: "true"
      
      serviceAccountName: sqream-ns-admin
      containers:
        - name: sqream-db-metadata
          image: ":1.16.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsGroup: 1000
            runAsUser: 1000
          volumeMounts:
            - name: leveldb
              mountPath: /mnt/sqream/sqreamdb
            - name: sqreamd-log-properties
              mountPath: /etc/sqream/sqreamd-log-properties
            - name: log
              mountPath: /mnt/sqream/logs
            - name: sqreamd-log-properties
              mountPath: /opt/sqream/etc/sqreamd-log-properties
          envFrom:
          - configMapRef:
              name: env-file
          env:
          - name: AWS_DEFAULT_REGION
            value: 
          command:
            - /bin/bash
            - -c
          args:
            - |
              set -xm
              mkdir -p /mnt/sqream/sqreamdb;
              cp -r -n /opt/sqream/sqream_cluster/sqreamdb/* /mnt/sqream/sqreamdb;
              if true; then
              metadata_server --config /opt/sqream/etc/metadataserver_config.json --log_path /var/log/sqream --port 3105 --log4_config /opt/sqream/etc/sqreamd-log-properties/sqreamd_log_properties &
              else
              metadata_server /var/log/sqream 3105 /etc/sqream/sqreamd-log-properties/sqreamd_log_properties &
              fi
              sleep 60;
              METADATA_PROCESS=$(echo $!)
              fg %1;
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - "/bin/bash <<'EOF'\nAPISERVER=https://kubernetes.default.svc; \nSERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\nNAMESPACE=$(cat
                  ${SERVICEACCOUNT}/namespace)\nTOKEN=$(cat ${SERVICEACCOUNT}/token)\nCACERT=${SERVICEACCOUNT}/ca.crt\n\n#
                  find all worker pods that are in terminationg state \ncurl --silent --cacert
                  ${CACERT} --header \"Authorization: Bearer ${TOKEN}\" -X GET ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/
                  | jq -r '.items[] |select(.metadata.labels.app==\"sqream-worker-0\")|select(.metadata.deletionTimestamp!=null)|.metadata.name'
                  \\\n  > terminating_workers.log\n\n# annotate them to close\nxargs -I{} -n 1
                  \\\n  curl --silent --cacert ${CACERT} --header \"Authorization: Bearer ${TOKEN}\"
                  \\\n    -H 'Content-Type: application/merge-patch+json' \\\n    -X PATCH \\\n
                  \   ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/{} \\\n    -d '{\"metadata\":{\"annotations\":{\"stop-worker\":\"1\"}}}'
                  < terminating_workers.log #for debug - remove silent and add: | jq '.metadata.name,.metadata.annotations'\n\nEOF\n"
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 3
            tcpSocket:
              port: 3105
          livenessProbe:
            initialDelaySeconds: 35
            periodSeconds: 5
            tcpSocket:
              port: 3105
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: metadata
      initContainers:
      - command:
        - sh
        - -c
        - set -x
        - chown 1000:1000 /mnt/sqream/sqreamdb /var
        image: alpine:3
        name: change-sqreamdb-ownership
        volumeMounts:
          - name: leveldb
            mountPath: /mnt/sqream/sqreamdb
          - name: sqreamd-log-properties
            mountPath: /etc/sqream/sqreamd-log-properties

      volumes:
      - name: sqreamd-log-properties
        configMap:
          name: sqreamd-log-properties
      - name: log
        hostPath:
          path: /var/log/sqream
          type: DirectoryOrCreate
      - name: leveldb
        persistentVolumeClaim:
          claimName: nfs-leveldb-pd
          readOnly: false
