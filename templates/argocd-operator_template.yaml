---
# Source: argocd-operator/templates/instance-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: job-release-name
  labels:
    helm.sh/chart: argocd-operator-0.6.1
    app.kubernetes.io/name: release-name
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: argocd-operator/templates/group.yaml
apiVersion: user.openshift.io/v1
kind: Group
metadata:
  name: argocd-admins
  labels:
    helm.sh/chart: argocd-operator-0.6.1
    app.kubernetes.io/name: release-name
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
users: []
---
# Source: argocd-operator/templates/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: argocd-operator
  namespace: default
  labels:
    helm.sh/chart: argocd-operator-0.6.1
    app.kubernetes.io/name: release-name
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  channel: alpha
  installPlanApproval: Automatic
  name: argocd-operator
  source: operatorhubio-catalog
  sourceNamespace: olm
---
# Source: argocd-operator/templates/instance-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-release-name
  namespace: default
  labels:
    helm.sh/chart: argocd-operator-0.6.1
    app.kubernetes.io/name: release-name
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
data:
  instance.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ArgoCD
    metadata:
      name: argocd-cluster
    spec:
      dex:
        image: quay.io/ablock/dex
        openShiftOAuth: true
        version: openshift-connector
      rbac:
        defaultPolicy: 'role:admin'
        policy: |
          g, argocd-admins, role:admin
        scopes: '[groups]'
      server:
        route:
          enabled: true
          tls:
            termination: passthrough
            insecureEdgeTerminationPolicy: Redirect
          wildcardPolicy: None
  patch.yaml: |
    spec:
      dex:
        image: quay.io/ablock/dex
        openShiftOAuth: true
        version: openshift-connector
      rbac:
        defaultPolicy: 'role:admin'
        policy: |
          g, argocd-admins, role:admin
        scopes: '[groups]'
      server:
        route:
          enabled: true
          tls:
            termination: passthrough
            insecureEdgeTerminationPolicy: Redirect
          wildcardPolicy: None
  apply.sh: |
    INSTANCE_NAME="$1"
    CONFIG_FILE="$2"
    PATCH_FILE="$3"

    if oc get argocd $INSTANCE_NAME 1> /dev/null 2> /dev/null; then
      kubectl patch argocd $INSTANCE_NAME --type merge -p "$(cat $PATCH_FILE)"
    else
      kubectl apply -f $CONFIG_FILE
    fi
---
# Source: argocd-operator/templates/instance-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: job-release-name
  namespace: default
  labels:
    helm.sh/chart: argocd-operator-0.6.1
    app.kubernetes.io/name: release-name
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: job-release-name
      labels:
        helm.sh/chart: argocd-operator-0.6.1
        app.kubernetes.io/name: release-name
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.4.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: job-release-name
      restartPolicy: Never
      volumes:
        - name: config-yaml
          configMap:
            name: config-release-name
      containers:
        - name: create-instance
          image: "docker.io/bitnami/kubectl:latest"
          volumeMounts:
            - mountPath: /tmp/config
              name: config-yaml
          env:
            - name: INSTANCE_NAME
              value: argocd-cluster
          command: ["/bin/sh", "-c"]
          args:
            - cp /tmp/config/apply.sh /tmp/apply.sh;
              chmod +x /tmp/apply.sh;
              /tmp/apply.sh $INSTANCE_NAME /tmp/config/instance.yaml /tmp/config/patch.yaml
