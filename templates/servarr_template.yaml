---
# Source: servarr/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-radarr
  labels:
    app.kubernetes.io/name: radarr
    helm.sh/chart: servarr-0.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: servarr/templates/init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-radarr-init
  labels:
    app.kubernetes.io/name: radarr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: scripts
data:
  init.sh: |
    cp /tmp/config.xml /config/config.xml
    chmod 666 /config/config.xml
---
# Source: servarr/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-radarr
  labels:
    app.kubernetes.io/name: radarr
    helm.sh/chart: servarr-0.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7878
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: radarr
    app.kubernetes.io/instance: release-name
---
# Source: servarr/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-radarr
  labels:
    app.kubernetes.io/name: radarr
    helm.sh/chart: servarr-0.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: radarr
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: radarr
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-radarr
      securityContext:
        {}
      initContainers:
        - name: init-config
          securityContext:
            {}
          image: "busybox:1.35.0"
          imagePullPolicy: IfNotPresent
          command: ["sh", "/scripts/init.sh"]
          resources:
            {}
          volumeMounts:
            - name: init
              mountPath: /scripts
            - name: config-file
              mountPath: /tmp/config.xml
              subPath: config.xml
            - name: config
              mountPath: /config
      containers:
        - name: radarr
          securityContext:
            {}
          image: "linuxserver/radarr:4.2.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              value: 'America/New_York'
            - name: PGID
              value: '1000'
            - name: PUID
              value: '1000'
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 20
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config-file
          secret:
            secretName: radarr-config
            optional: false
        - name: config
          emptyDir: {}
        - name: init
          configMap:
            name: release-name-radarr-init
            optional: false
