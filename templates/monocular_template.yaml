---
# Source: monocular/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.0.4
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  mongodb-root-password: "SE8xemtoalVQQw=="
---
# Source: monocular/templates/api-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-monocular-api-config
  labels:
    app: release-name-monocular
    chart: "monocular-0.6.4"
    release: "release-name"
    heritage: "Helm"
data:
  monocular.yaml: |-
    mongodb:
      url: release-name-mongodb:27017
      database: monocular
    cacheRefreshInterval: 3600
    cors:
      allowed_headers:
      - content-type
      - x-xsrf-token
      allowed_origins:
      - ""
    releasesEnabled: true
    repos:
    - name: stable
      source: https://github.com/kubernetes/charts/tree/master/stable
      url: https://kubernetes-charts.storage.googleapis.com
    - name: incubator
      source: https://github.com/kubernetes/charts/tree/master/incubator
      url: https://kubernetes-charts-incubator.storage.googleapis.com
    tillerNamespace: kube-system
---
# Source: monocular/templates/ui-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-monocular-ui-config
  labels:
    app: release-name-monocular
    chart: "monocular-0.6.4"
    release: "release-name"
    heritage: "Helm"
data:
  overrides.js: |-
    window.monocular = {
      overrides: {
        googleAnalyticsId: 'UA-XXXXXX-X',
        appName: 'Monocular',
        backendHostname: '/api',
        releasesEnabled: true
      }
    };
---
# Source: monocular/templates/ui-vhost.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-monocular-ui-vhost
  labels:
    app: release-name-monocular
    chart: "monocular-0.6.4"
    release: "release-name"
    heritage: "Helm"
data:
  vhost.conf: |+
    upstream target_service {
      server release-name-monocular-prerender;
    }

    server {
      listen 8080;

      gzip on;
      # Angular CLI already has gzipped the assets (ng build --prod --aot)
      gzip_static  on;

      location / {
        try_files $uri @prerender;
      }

      location @prerender {
        set $prerender 0;

        if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
          set $prerender 1;
        }

        if ($args ~ "_escaped_fragment_") {
          set $prerender 1;
        }

        if ($http_user_agent ~ "Prerender") {
          set $prerender 0;
        }

        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
          set $prerender 0;
        }

        if ($prerender = 1) {
          rewrite .* /https://$host$request_uri? break;
          proxy_pass http://target_service;
        }
        if ($prerender = 0) {
          rewrite .* /index.html break;
        }
      }
    }

    # Redirect www to non-www
    # Taken from https://easyengine.io/tutorials/nginx/www-non-www-redirection/
    server {
      server_name "~^www\.(.*)$" ;
      return 301 $scheme://$1$request_uri ;
    }
---
# Source: monocular/charts/mongodb/templates/pvc-standalone.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: mongodb
    chart: mongodb-4.0.4
    heritage: Helm
    release: release-name
  name: release-name-mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: monocular/charts/mongodb/templates/svc-standalone.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.0.4
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
    release: "release-name"
---
# Source: monocular/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-monocular-api
  labels:
    chart: "monocular-0.6.4"
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP
    name: monocular-api
  selector:
    app: release-name-monocular-api
---
# Source: monocular/templates/prerender-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-monocular-prerender
  labels:
    chart: "monocular-0.6.4"
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: prerender
  selector:
    app: release-name-monocular-prerender
---
# Source: monocular/templates/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-monocular-ui
  labels:
    chart: "monocular-0.6.4"
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: monocular-ui
  selector:
    app: release-name-monocular-ui
---
# Source: monocular/charts/mongodb/templates/deployment-standalone.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.0.4
    release: "release-name"
    heritage: "Helm"
spec:
  template:
    metadata:
      labels:
        app: mongodb
        release: "release-name"
        chart: mongodb-4.0.4
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: release-name-mongodb
        image: docker.io/bitnami/mongodb:3.6.6-debian-9
        imagePullPolicy: "Always"
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mongodb
              key: mongodb-root-password
        - name: MONGODB_USERNAME
          value: ""
        - name: MONGODB_DATABASE
          value: "monocular"
        - name: MONGODB_EXTRA_FLAGS
          value: 
        ports:
        - name: mongodb
          containerPort: 27017
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/mongodb
        resources:
          {}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: release-name-mongodb
---
# Source: monocular/templates/api-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-monocular-api
  labels:
    chart: "monocular-0.6.4"
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: release-name-monocular-api
      annotations:
        checksum/config: 7f50332190271176b6bc074546cec0d774f1773a222a361f6fad3b4a2eeb0d4b
    spec:
      containers:
      - name: monocular
        image: "bitnami/monocular-api:v0.7.3"
        imagePullPolicy: Always
        env:
        - name: MONOCULAR_HOME
          value: /monocular
        ports:
        - containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 180
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 30
          timeoutSeconds: 5
        volumeMounts:
          - name: cache
            mountPath: /monocular
          - name: config
            mountPath: /monocular/config
        resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: release-name-monocular-api-config
      - name: cache
        emptyDir: {}
---
# Source: monocular/templates/prerender-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-monocular-prerender
  labels:
    chart: "monocular-0.6.4"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-monocular-prerender
    spec:
      containers:
      - name: monocular
        image: "migmartri/prerender:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
          - name: IN_MEMORY_CACHE
            value: "true"
        resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: monocular/templates/ui-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-monocular-ui
  labels:
    chart: "monocular-0.6.4"
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: release-name-monocular-ui
      annotations:
        checksum/config: 7f50332190271176b6bc074546cec0d774f1773a222a361f6fad3b4a2eeb0d4b
    spec:
      containers:
      - name: monocular
        image: "bitnami/monocular-ui:v0.7.3"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
        volumeMounts:
          - name: vhost
            mountPath: /bitnami/nginx/conf/vhosts
          - name: config
            mountPath: /app/assets/js
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
      - name: vhost
        configMap:
          name: release-name-monocular-ui-vhost
      - name: config
        configMap:
          name: release-name-monocular-ui-config
---
# Source: monocular/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: release-name-monocular
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: "/"
  labels:
    app: release-name-monocular
    chart: "monocular-0.6.4"
    release: "release-name"
    heritage: "Helm"
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: release-name-monocular-ui
          servicePort: 80
        path: /
      - backend:
          serviceName: release-name-monocular-api
          servicePort: 80
        path: /api/
    host:
