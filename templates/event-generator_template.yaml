---
# Source: event-generator/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-event-generator
  labels:
    helm.sh/chart: event-generator-0.3.3
    app.kubernetes.io/name: "event-generator"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/part-of: "event-generator"
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: event-generator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-event-generator
  labels:
    helm.sh/chart: event-generator-0.3.3
    app.kubernetes.io/name: "event-generator"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/part-of: "event-generator"
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: "Helm"
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - services
  - serviceaccounts
  - pods
  verbs:
  - list
  - get
  - create
  - delete
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  verbs:
  - list
  - get
  - create
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - get
  - list
  - create
  - delete
# These are only so the event generator can create roles that have these properties.
# It will result in a falco alert for the rules "ClusterRole With Wildcard Created", "ClusterRole With Pod Exec Created"
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - '*'
  verbs:
  - get
---
# Source: event-generator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-event-generator
  labels:
    helm.sh/chart: event-generator-0.3.3
    app.kubernetes.io/name: "event-generator"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/part-of: "event-generator"
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: "Helm"
subjects:
  - kind: ServiceAccount
    name: release-name-event-generator
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-event-generator
  apiGroup: rbac.authorization.k8s.io
---
# Source: event-generator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-event-generator
  labels:
    helm.sh/chart: event-generator-0.3.3
    app.kubernetes.io/name: "event-generator"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/part-of: "event-generator"
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "event-generator"
      app.kubernetes.io/instance: "release-name"
      app.kubernetes.io/part-of: "event-generator"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "event-generator"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/part-of: "event-generator"
    spec:
      serviceAccountName: release-name-event-generator
      securityContext:
        {}
      containers:
        - name: event-generator
          securityContext:
            {}
          image: "falcosecurity/event-generator:latest"
          imagePullPolicy: IfNotPresent
          command: 
            - /bin/event-generator 
            - run
            - ^syscall
            - --loop
          env:
          - name: FALCO_EVENT_GENERATOR_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
