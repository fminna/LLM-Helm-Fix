---
# Source: gangway/templates/key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-gangway-key
  labels:
    app.kubernetes.io/name: gangway
    helm.sh/chart: gangway-0.0.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  sessionkey: "TTg5VzI5RzQzSUVCVDVTNGhlN0t0MFhNSTJjUjhsSTI="
---
# Source: gangway/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-gangway
  labels:
    app.kubernetes.io/name: gangway
    helm.sh/chart: gangway-0.0.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  gangway.yaml: |
    apiServerURL: https://${GANGWAY_APISERVER_URL}
    audience: https://${DNS_NAME}/userinfo
    authorizeURL: https://${DNS_NAME}/authorize
    clientID: ${GANGWAY_CLIENT_ID}
    clientSecret: ${GANGWAY_CLIENT_SECRET}
    clusterName: ${GANGWAY_CLUSTER_NAME}
    port: 8080
    redirectURL: https://${GANGWAY_REDIRECT_URL}/callback
    scopes:
    - openid
    - profile
    - email
    - offline_access
    tokenURL: https://${DNS_NAME}/oauth/token
    usernameClaim: sub
---
# Source: gangway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  # Need to append "svc" here because otherwise Kube will make an env var
  # called GANGWAY_PORT with something like "tcp://100.67.143.54:80" as a value.
  # The gangway binary then interprets this as a config variable and expects it
  # to hold the int for the port to listen on. Result = bang!
  name: release-name-gangwaysvc
  labels:
    app.kubernetes.io/name: gangway
    helm.sh/chart: gangway-0.0.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: gangway
    app.kubernetes.io/instance: release-name
---
# Source: gangway/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: release-name-gangway
  labels:
    app.kubernetes.io/name: gangway
    helm.sh/chart: gangway-0.0.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gangway
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gangway
        app.kubernetes.io/instance: release-name
      annotations:
        check/config: 55808102e64ac2d7920de95d57481ae4f3b25e5d12644af50b59eb64fbef19cb
        check/values: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      containers:
        - name: gangway
          image: "registry.cn-hangzhou.aliyuncs.com/kubeapps/gcr-gangway:v3.0.0"
          imagePullPolicy: IfNotPresent
          command:
          - gangway
          - -config
          - /gangway/gangway.yaml
          env:
            - name: GANGWAY_SESSION_SECURITY_KEY
              valueFrom:
                secretKeyRef:
                  key: sessionkey
                  name: release-name-gangway-key
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
          - name: gangway
            mountPath: /gangway/
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: 
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: 
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
      volumes:
        - name: gangway
          configMap:
            name: release-name-gangway
