---
# Source: airbyte-bootloader/templates/bootloader-secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte-bootloader/templates/pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-airbyte-bootloader
  labels:
    helm.sh/chart: airbyte-bootloader-0.67.17
    app.kubernetes.io/name: airbyte-bootloader
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.59.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "0"
spec:
  serviceAccountName: placeholderServiceAccount
  restartPolicy: Never
  containers:
    - name: airbyte-bootloader-container
      image: airbyte/bootloader:0.59.1
      imagePullPolicy: "IfNotPresent"
      env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_PORT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_USER
        - name: RUN_DATABASE_MIGRATION_ON_STARTUP
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: RUN_DATABASE_MIGRATION_ON_STARTUP
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
      resources:
        limits: {}
        requests: {}
  securityContext:
      null
