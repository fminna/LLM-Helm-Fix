---
# Source: scaffold/charts/ctlog/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ctlog-system
---
# Source: scaffold/charts/fulcio/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: fulcio-system
---
# Source: scaffold/charts/rekor/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: rekor-system
---
# Source: scaffold/charts/trillian/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: trillian-system
---
# Source: scaffold/charts/ctlog/templates/createctconfig-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-ctlog-createctconfig
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/ctlog/templates/createtree-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog-createtree
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/ctlog/templates/ctlog-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/fulcio/templates/createcerts-serviceacount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fulcio-createcerts
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/fulcio/templates/fulcio-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fulcio-server
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/rekor/templates/redis/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: "redis"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-redis
  namespace: rekor-system
  annotations:
    {}
---
# Source: scaffold/charts/rekor/templates/server/createtree-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rekor-createtree
  namespace: rekor-system
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: scaffold/charts/rekor/templates/server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-server
  namespace: rekor-system
  annotations:
    {}
---
# Source: scaffold/charts/trillian/templates/mysql/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-mysql
  namespace: trillian-system
  annotations:
    {}
---
# Source: scaffold/charts/trillian/templates/trillian-log-server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logserver
  namespace: trillian-system
  annotations:
    {}
---
# Source: scaffold/charts/trillian/templates/trillian-log-signer/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: "trillian-logsigner"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logsigner
  namespace: trillian-system
  annotations:
    {}
---
# Source: scaffold/charts/trillian/templates/mysql/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-mysql
  namespace: trillian-system
type: Opaque
data:
  mysql-root-password: "ZWs4YjhWZVdXVg=="
  mysql-password: "dWNBUVd5bFZsag=="
  mysql-user: "bXlzcWw="
  mysql-database:  "dHJpbGxpYW4="
---
# Source: scaffold/charts/ctlog/templates/ctlog-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################
---
# Source: scaffold/charts/fulcio/templates/fulcio-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fulcio-server-config
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
data:
  config.json: |-
    {
      "OIDCIssuers": {
        "https://kubernetes.default.svc": {
          "IssuerURL": "https://kubernetes.default.svc",
          "ClientID": "sigstore",
          "Type": "kubernetes"
        }
      },
      "MetaIssuers": {
        "https://kubernetes.*.svc": {
          "ClientID": "sigstore",
          "Type": "kubernetes"
        }
      }
    }
---
# Source: scaffold/charts/rekor/templates/server/configmap-sharding.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rekor-sharding-config
  namespace: rekor-system
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
data:
  sharding-config.yaml: |
---
# Source: scaffold/charts/rekor/templates/server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rekor-config
  namespace: rekor-system
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################
---
# Source: scaffold/charts/rekor/templates/server/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-server
  namespace: rekor-system
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: scaffold/charts/trillian/templates/mysql/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-mysql
  namespace: trillian-system
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: scaffold/charts/ctlog/templates/cm-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ctlog-cm-operator
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
---
# Source: scaffold/charts/ctlog/templates/secret-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ctlog-secret-operator
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
# Source: scaffold/charts/fulcio/templates/secret-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: fulcio-server-secret-operator
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
# Source: scaffold/charts/rekor/templates/server/cm-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rekor-cm-operator
  namespace: rekor-system
  labels:
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.6"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["rekor-config"]
    verbs: ["get", "update"]
---
# Source: scaffold/charts/ctlog/templates/cm-operator-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ctlog-cm-operator
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ctlog-cm-operator
subjects:
  - kind: ServiceAccount
    name: ctlog-createtree
    namespace: ctlog-system
---
# Source: scaffold/charts/ctlog/templates/secret-operator-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ctlog-secret-operator
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ctlog-secret-operator
subjects:
  - kind: ServiceAccount
    name: release-name-ctlog-createctconfig
    namespace: ctlog-system
---
# Source: scaffold/charts/fulcio/templates/secret-operator-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fulcio-server-secret-operator
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: fulcio-server-secret-operator
subjects:
  - kind: ServiceAccount
    name: fulcio-createcerts
    namespace: fulcio-system
---
# Source: scaffold/charts/rekor/templates/server/cm-operator-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rekor-cm-operator
  namespace: rekor-system
  labels:
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.6"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rekor-cm-operator
subjects:
  - kind: ServiceAccount
    name: release-name-rekor-createtree
    namespace: rekor-system
---
# Source: scaffold/charts/ctlog/templates/ctlog-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
  name: ctlog
  namespace: ctlog-system
spec:
  ports:
    - name: 6962-tcp
      port: 80
      protocol: TCP
      targetPort: 6962
    - name: 6963-tcp
      port: 6963
      protocol: TCP
      targetPort: 6963
  selector:
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/fulcio/templates/fulcio-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
  name: fulcio-server
  namespace: fulcio-system
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 5555
    - name: grpc
      port: 5554
      protocol: TCP
      targetPort: 5554
    - name: 2112-tcp
      port: 2112
      protocol: TCP
      targetPort: 2112
  selector:
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/rekor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: "redis"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-redis
  namespace: rekor-system
spec:
  ports:
    - name: 6379-tcp
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app.kubernetes.io/component: "redis"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/rekor/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-server
  namespace: rekor-system
spec:
  ports:
    - name: 3000-tcp
      port: 80
      protocol: TCP
      targetPort: 3000
    - name: 2112-tcp
      port: 2112
      protocol: TCP
      targetPort: 2112
  selector:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/trillian/templates/mysql/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-mysql
  namespace: trillian-system
spec:
  ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
  selector:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/trillian/templates/trillian-log-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: "trillian-logserver"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logserver
  namespace: trillian-system
spec:
  ports:
    - name: 8091-tcp
      port: 8091
      protocol: TCP
      targetPort: 8091
    - name: 8090-tcp
      port: 8090
      protocol: TCP
      targetPort: 8090
  selector:
    app.kubernetes.io/component: "trillian-logserver"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/trillian/templates/trillian-log-signer/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: "trillian-logsigner"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logsigner
  namespace: trillian-system
spec:
  ports:
    - name: 8091-tcp
      port: 8091
      protocol: TCP
      targetPort: 8091
  selector:
    app.kubernetes.io/component: "trillian-logsigner"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
  type: "ClusterIP"
---
# Source: scaffold/charts/ctlog/templates/ctlog-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ctlog
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ctlog
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 7a2b6caae1adc21cb4b55ed5c65db52ffaffb455f0fbdbff9a436f539c09a77c
        prometheus.io/path: /metrics
        prometheus.io/port: "6963"
        prometheus.io/scrape: "true"
      labels:
        helm.sh/chart: ctlog-0.2.52
        app.kubernetes.io/name: ctlog
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.6.17"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: ctlog
      containers:
        - name: ctlog
          image: "ghcr.io/sigstore/scaffolding/ct_server@sha256:e16f0a2be43a317a4c392cca24eec8c8fef06b0e836bc3545979ac0335fcf6f5"
          imagePullPolicy: "IfNotPresent"
          args:
            - "--http_endpoint=0.0.0.0:6962"
            - "--metrics_endpoint=0.0.0.0:6963"
            - "--log_config=/ctfe-keys/config"
            - "--alsologtostderr"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 6962
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6962
            initialDelaySeconds: 10
          volumeMounts:
            - name: keys
              mountPath: "/ctfe-keys"
              readOnly: true
          ports:            
            - containerPort: 6962
              protocol: TCP
            - containerPort: 6963
              protocol: TCP
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
      volumes:
        - name: keys
          secret:
            secretName: ctlog-secret
---
# Source: scaffold/charts/fulcio/templates/fulcio-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fulcio-server
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fulcio
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: c74074bdf7ef784ef7cc7477696cb58fb6d2ba41dc938b5325bb94e93e2c78c4
      labels:
        app.kubernetes.io/name: fulcio
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: fulcio-server
      # This doesn't actually use Kubernetes credentials, so don't mount them in.
      automountServiceAccountToken: true
      containers:
        - name: fulcio-server
          image: "gcr.io/projectsigstore/fulcio@sha256:003d38b43442d436fe645feaebf8784975c138e411cf232276bea9de2a9f7b58"
          imagePullPolicy: "IfNotPresent"
          ports:            
            - containerPort: 5555
              protocol: TCP
            - containerPort: 5554
              protocol: TCP
            - containerPort: 2112
              protocol: TCP
          args:
            - "serve"
            - "--port=5555"
            - "--grpc-port=5554"
            - "--ca=fileca"
            - "--fileca-key"
            - "/var/run/fulcio-secrets/key.pem"
            - "--fileca-cert"
            - "/var/run/fulcio-secrets/cert.pem"
            - "--fileca-key-passwd"
            - "$(PASSWORD)"
            - "--ct-log-url=http://ctlog.ctlog-system.svc/sigstorescaffolding"
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fulcio-server-secret
                  key: password
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5555
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5555
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - name: fulcio-config
              mountPath: /etc/fulcio-config
            - name: oidc-info
              mountPath: /var/run/fulcio
            - name: fulcio-cert
              mountPath: "/var/run/fulcio-secrets"
              readOnly: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
      volumes:
        - name: fulcio-config
          configMap:
            name: fulcio-server-config
        - name: oidc-info
          projected:
            sources:
              - configMap:
                  name: kube-root-ca.crt
                  items:
                    - key: ca.crt
                      path: ca.crt
                      mode: 0666
        - name: fulcio-cert
          secret:
            secretName: fulcio-server-secret
            items:
              - key: private
                path: key.pem
              - key: cert
                path: cert.pem
---
# Source: scaffold/charts/rekor/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: "redis"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-redis
  namespace: rekor-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "redis"
      app.kubernetes.io/name: rekor
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "redis"
        app.kubernetes.io/name: rekor
        app.kubernetes.io/instance: release-name
        helm.sh/chart: rekor-1.3.21
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: rekor-redis
      containers:
        - name: rekor-redis
          image: "docker.io/redis@sha256:c5a607fb6e1bb15d32bbcf14db22787d19e428d59e31a5da67511b49bb0f1ccc"
          imagePullPolicy: "IfNotPresent"
          args:
            - --bind
            - 0.0.0.0
            - --appendonly
            - "yes"
          ports:            
            - containerPort: 6379
              protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 ping)" = "PONG"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
          volumeMounts:
            - name: storage
              mountPath: /data
      volumes:
        - name: storage
          emptyDir: {}
---
# Source: scaffold/charts/rekor/templates/server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-server
  namespace: rekor-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "server"
      app.kubernetes.io/name: rekor
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/config: 45f63ff500d0c48eca1d6e3ef03585f5830b78f3eb1942b20c229e52b2eb0951
        checksum/sharding_config: 1ff4b317113b0e3e5813d1baa1aa74d9ec9a860ef5ee1de5a8804c5b0be2af53
        prometheus.io/path: /metrics
        prometheus.io/port: "2112"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: "server"
        app.kubernetes.io/name: rekor
        app.kubernetes.io/instance: release-name
        helm.sh/chart: rekor-1.3.21
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: rekor-server
      initContainers:
        - name: "wait-for-trillian-log-server"
          image: "docker.io/curlimages/curl@sha256:4bfa3e2c0164fb103fb9bfd4dc956facce32b6c5d47cc09fcec883ce9535d5ac"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "until curl --max-time 10 http://trillian-logserver.trillian-system:8090; do echo waiting for trillian-logserver; sleep 5; done;"]
      containers:
        - name: rekor-server
          image: "gcr.io/projectsigstore/rekor-server@sha256:1237f29e2105d7f5451bbe15a3aca8677ddd1bb80620ca2fd06f74262437cf51"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: TREE_ID
              valueFrom:
                configMapKeyRef:
                  name: rekor-config
                  key: treeID
          args:
            - "serve"
            - "--trillian_log_server.address=trillian-logserver.trillian-system"
            - "--trillian_log_server.port=8091"
            - "--trillian_log_server.sharding_config=/sharding/sharding-config.yaml"
            - "--redis_server.address=rekor-redis"
            - "--redis_server.port=6379"
            - "--rekor_server.address=0.0.0.0"
            - "--rekor_server.signer=memory"
            - "--enable_retrieve_api=true"
            - "--trillian_log_server.tlog_id=$(TREE_ID)"
            - "--enable_attestation_storage"
            - "--attestation_storage_bucket=file:///var/run/attestations"
          ports:            
            - containerPort: 3000
              protocol: TCP
            - containerPort: 2112
              protocol: TCP
          volumeMounts:
            - name: rekor-sharding-config
              mountPath: /sharding
            - name: storage
              mountPath: /var/run/attestations
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
      volumes:
        - name: rekor-sharding-config
          configMap:
            name: rekor-sharding-config
        - name: storage
          persistentVolumeClaim:
            claimName: rekor-server
---
# Source: scaffold/charts/trillian/templates/mysql/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-mysql
  namespace: trillian-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "mysql"
      app.kubernetes.io/name: trillian
      app.kubernetes.io/instance: release-name
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "mysql"
        app.kubernetes.io/name: trillian
        app.kubernetes.io/instance: release-name
        helm.sh/chart: trillian-0.2.22
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: trillian-mysql
      containers:
        - name: trillian-mysql
          image: "gcr.io/trillian-opensource-ci/db_server@sha256:2a685a38dd0129cceb646c232d285383f614c7e6fa51ff8f512aef78e4298461"
          imagePullPolicy: "IfNotPresent"
          args:
            - --ignore-db-dir=lost+found
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "mysql"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: trillian
          ports:            
            - containerPort: 3306
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /etc/init.d/mysql
              - status
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /etc/init.d/mysql
              - status
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/mysql
              subPath: 
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: trillian-mysql
---
# Source: scaffold/charts/trillian/templates/trillian-log-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: "trillian-logserver"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logserver
  namespace: trillian-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "trillian-logserver"
      app.kubernetes.io/name: trillian
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "trillian-logserver"
        app.kubernetes.io/name: trillian
        app.kubernetes.io/instance: release-name
        helm.sh/chart: trillian-0.2.22
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: trillian-logserver
      initContainers:
        - name: "wait-for-trillian-db"
          image: "cgr.dev/chainguard/netcat@sha256:7243b469d34bd28969fa2c764a12d91084c427209540bb68645629d635b3f143"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "until nc -z -w 10 trillian-mysql 3306; do echo waiting for trillian-mysql; sleep 5; done;"]
      containers:
        - name: trillian-trillian-logserver
          image: "ghcr.io/sigstore/scaffolding/trillian_log_server@sha256:34a87140ff88da3f8b83ef8f12575a5dc684afc79af880f148f45ca27f16e60e"
          imagePullPolicy: "IfNotPresent"
          args:
            - "--storage_system=mysql"
            - "--quota_system=mysql"
            - "--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(MYSQL_HOSTNAME):$(MYSQL_PORT))/$(MYSQL_DATABASE)"
            - "--rpc_endpoint=0.0.0.0:8091"
            - "--http_endpoint=0.0.0.0:8090"
            - "--alsologtostderr"
          env:            
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-database
            - name: MYSQL_HOSTNAME
              value: trillian-mysql
            - name: MYSQL_PORT
              value: "3306"
          ports:            
            - containerPort: 8091
              protocol: TCP
            - containerPort: 8090
              protocol: TCP
          resources:
            {}
---
# Source: scaffold/charts/trillian/templates/trillian-log-signer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: "trillian-logsigner"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
  name: trillian-logsigner
  namespace: trillian-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: "trillian-logsigner"
      app.kubernetes.io/name: trillian
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "trillian-logsigner"
        app.kubernetes.io/name: trillian
        app.kubernetes.io/instance: release-name
        helm.sh/chart: trillian-0.2.22
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: trillian-logsigner
      initContainers:
        - name: "wait-for-trillian-db"
          image: "cgr.dev/chainguard/netcat@sha256:7243b469d34bd28969fa2c764a12d91084c427209540bb68645629d635b3f143"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "until nc -z -w 10 trillian-mysql 3306; do echo waiting for trillian-mysql; sleep 5; done;"]
      containers:
        - name: trillian-trillian-logsigner
          image: "ghcr.io/sigstore/scaffolding/trillian_log_signer@sha256:ab97f7591e96e7ae1dbfea3bcc4b5f4b8ad13857e04779d8c6c2309cc432e5ce"
          imagePullPolicy: "IfNotPresent"
          args:
            - "--storage_system=mysql"
            - "--quota_system=mysql"
            - "--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(MYSQL_HOSTNAME):$(MYSQL_PORT))/$(MYSQL_DATABASE)"
            - "--rpc_endpoint=0.0.0.0:8091"
            - "--http_endpoint=0.0.0.0:8090"
            - "--force_master=true"
            - "--alsologtostderr"
          env:            
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                    name: trillian-mysql
                    key: mysql-database
            - name: MYSQL_HOSTNAME
              value: trillian-mysql
            - name: MYSQL_PORT
              value: "3306"
          ports:            
            - containerPort: 8091
              protocol: TCP
          resources:
            {}
---
# Source: scaffold/charts/ctlog/templates/createctconfig-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-ctlog-createctconfig
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 6
  template:
    spec:
      serviceAccountName: release-name-ctlog-createctconfig
      restartPolicy: Never
      automountServiceAccountToken: true
      initContainers:
        - name: "wait-for-createtree-configmap"
          image: "docker.io/curlimages/curl@sha256:4bfa3e2c0164fb103fb9bfd4dc956facce32b6c5d47cc09fcec883ce9535d5ac"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "until curl --fail --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --max-time 10 https://kubernetes.default.svc/api/v1/namespaces/$(NAMESPACE)/configmaps/ctlog-config | grep '\"treeID\":'; do echo waiting for Configmap ctlog-config; sleep 5; done;"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
        - name: release-name-ctlog-createctconfig
          image: "ghcr.io/sigstore/scaffolding/createctconfig@sha256:a891233c7f54a11025a4cac6119ba4aeea4f643c2012ff30e921aeca8a32d6db"
          imagePullPolicy: "IfNotPresent"
          args: [
            "--configmap=ctlog-config",
            "--secret=ctlog-secret",
            "--pubkeysecret=ctlog-public-key",
            "--fulcio-url=http://fulcio-server.fulcio-system.svc",
            "--trillian-server=trillian-logserver.trillian-system:8091",
            "--log-prefix=sigstorescaffolding"
          ]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
---
# Source: scaffold/charts/ctlog/templates/createtree-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ctlog-createtree
  namespace: ctlog-system
  labels:
    helm.sh/chart: ctlog-0.2.52
    app.kubernetes.io/name: ctlog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.6.17"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      serviceAccountName: ctlog-createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: ctlog-createtree
          image: "ghcr.io/sigstore/scaffolding/createtree@sha256:eb1a94738f34964c7456d18d30b8a45a654af89bb5371f69b2403df373be0826"
          imagePullPolicy: "IfNotPresent"
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          args: [
            "--namespace=$(NAMESPACE)",
            "--configmap=ctlog-config",
            "--display_name=ctlog-tree",
            "--admin_server=trillian-logserver.trillian-system:8091"
          ]
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
---
# Source: scaffold/charts/fulcio/templates/createcerts-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: fulcio-createcerts
  namespace: fulcio-system
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      serviceAccountName: fulcio-createcerts
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: fulcio-createcerts
          image: "ghcr.io/sigstore/scaffolding/createcerts@sha256:2aaea38198d25ee53fb1f6da79eaa75c24bcc4ef81792a68687ba2ae0dc8ccf6"
          imagePullPolicy: "IfNotPresent"
          args: ["--secret=fulcio-server-secret"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
---
# Source: scaffold/charts/rekor/templates/server/createtree-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: release-name-rekor-createtree
  namespace: rekor-system
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      serviceAccountName: release-name-rekor-createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: release-name-rekor-createtree
          image: "ghcr.io/sigstore/scaffolding/createtree@sha256:eb1a94738f34964c7456d18d30b8a45a654af89bb5371f69b2403df373be0826"
          args: ["--namespace=$(NAMESPACE)",
            "--configmap=rekor-config",
            "--display_name=rekortree",
            "--admin_server=trillian-logserver.trillian-system:8091",
            "--force=false"
          ]
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65533
---
# Source: scaffold/charts/trillian/templates/createdb/createdb-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-trillian-createdb
  namespace: trillian-system
  labels:
    app.kubernetes.io/component: "mysql"
    app.kubernetes.io/name: trillian
    app.kubernetes.io/instance: release-name
    helm.sh/chart: trillian-0.2.22
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      serviceAccountName: trillian-logserver
      restartPolicy: Never
      automountServiceAccountToken: 
      containers:
        - name: release-name-trillian-createdb
          image: "ghcr.io/sigstore/scaffolding/createdb@sha256:ea809b5f603764df5fb7e1f46f7e7be24b6717890c560e7e67fdb0a640a8a755"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-mysql
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: trillian-mysql
                  key: mysql-database
            - name: MYSQL_HOSTNAME
              value: trillian-mysql
            - name: MYSQL_PORT
              value: "3306"
            - name: EXIT_DIR
              value: "/var/exitdir"
          args: [
            "--db_name=$(MYSQL_DATABASE)",
            "--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(MYSQL_HOSTNAME):$(MYSQL_PORT))/"
          ]
          volumeMounts:
            - name: exit-dir
              mountPath: "/var/exitdir"
      volumes:
        - name: exit-dir
          emptyDir: {}
---
# Source: scaffold/charts/fulcio/templates/fulcio-http-ingress.yaml
apiVersion: "networking.k8s.io/v1"
kind: Ingress
metadata:
  labels:
    helm.sh/chart: fulcio-2.3.19
    app.kubernetes.io/name: fulcio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.5"
    app.kubernetes.io/managed-by: Helm
  name: fulcio-server-http
  namespace: fulcio-system
  annotations:
    {}
spec:
  ingressClassName: nginx
  rules:
    - host: "fulcio.localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fulcio-server
                port:
                  number: 80
---
# Source: scaffold/charts/rekor/templates/server/ingress.yaml
apiVersion: "networking.k8s.io/v1"
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/component: "server"
    app.kubernetes.io/name: rekor
    app.kubernetes.io/instance: release-name
    helm.sh/chart: rekor-1.3.21
    app.kubernetes.io/managed-by: Helm
  name: rekor-server
  namespace: rekor-system
  annotations:
    {}
spec:
  ingressClassName: nginx
  rules:
    - host: "root"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rekor-server
                port:
                  number: 80
