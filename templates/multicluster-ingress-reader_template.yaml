---
# Source: multicluster-ingress-reader/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-multicluster-ingress-reader
  labels:
    helm.sh/chart: multicluster-ingress-reader-v2024.2.25
    app.kubernetes.io/name: multicluster-ingress-reader
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: multicluster-ingress-reader/templates/rbac-cm-creator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-multicluster-ingress-reader:cm-creator
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: multicluster-ingress-reader/templates/rbac-svc-reader.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-multicluster-ingress-reader:svc-reader
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - "get"
      - "list"
---
# Source: multicluster-ingress-reader/templates/rbac-cm-creator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-multicluster-ingress-reader:cm-creator
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-multicluster-ingress-reader:cm-creator
subjects:
  - kind: ServiceAccount
    name: release-name-multicluster-ingress-reader
    namespace: default
---
# Source: multicluster-ingress-reader/templates/rbac-svc-reader.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-multicluster-ingress-reader:svc-reader
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-multicluster-ingress-reader:svc-reader
subjects:
  - kind: ServiceAccount
    name: release-name-multicluster-ingress-reader
    namespace: default
---
# Source: multicluster-ingress-reader/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-multicluster-ingress-reader
  namespace: default
  labels:
    helm.sh/chart: multicluster-ingress-reader-v2024.2.25
    app.kubernetes.io/name: multicluster-ingress-reader
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade,post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
spec:
  ttlSecondsAfterFinished: 0
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: release-name-multicluster-ingress-reader
      securityContext:
        {}
      containers:
        - name: multicluster-ingress-reader
          securityContext:
            {}
          image: ghcr.io/appscode/kubectl-nonroot:1.25
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
                set -x; \
                sleep 2; \
                x=`kubectl get svc -n default ingress-nginx-mc-controller -o jsonpath='{.status.loadBalancer.ingress[*].ip}'`; \
                if [ -z "${x}" ]; then \
                  x=`kubectl get svc -n default ingress-nginx-mc-controller -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`; \
                fi; \
                kubectl apply -f - <<EOF
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: multicluster-ingress-config
                  namespace: default
                  labels:
                    helm.sh/chart: multicluster-ingress-reader-v2024.2.25
                    app.kubernetes.io/name: multicluster-ingress-reader
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/version: "v0.0.1"
                    app.kubernetes.io/managed-by: Helm
                data:
                  mc.yaml: |
                    apiserver:
                      externalHostname: $x
                      externalPort: 9443
                  proxy.yaml: |
                    proxyServer:
                      entrypointAddress: $x
                  gateway.yaml: |
                    clusterProxy:
                      proxyServerHost: $x
                EOF
          resources:
            {}
      restartPolicy: Never
