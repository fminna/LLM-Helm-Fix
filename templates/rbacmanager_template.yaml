---
# Source: rbacmanager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rbacmanager-controller-manager
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: rbacmanager/templates/manager-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rbacmanager-manager-config
  labels:
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  controller_manager_config.yaml:  |-
   apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
   kind: ControllerManagerConfig
   metadata:
     labels:
       app.kubernetes.io/name: controllermanagerconfig
       app.kubernetes.io/instance: controller-manager-configuration
       app.kubernetes.io/component: manager
       app.kubernetes.io/created-by: rbac-manager
       app.kubernetes.io/part-of: rbac-manager
       app.kubernetes.io/managed-by: kustomize
   health:
     healthProbeBindAddress: :8081
   metrics:
     bindAddress: 127.0.0.1:8080
   webhook:
     port: 9443
   leaderElection:
     leaderElect: true
     resourceName: d4926ddc.k8smgmt.io
   # leaderElectionReleaseOnCancel defines if the leader should step down volume
   # when the Manager ends. This requires the binary to immediately end when the
   # Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
   # speeds up voluntary leader transitions as the new leader don't have to wait
   # LeaseDuration time first.
   # In the default scaffold provided, the program ends immediately after
   # the manager stops, so would be fine to enable this option. However,
   # if you are doing or is intended to do any operation such as perform cleanups
   # after the manager stops then its usage might be unsafe.
   # leaderElectionReleaseOnCancel: true
---
# Source: rbacmanager/templates/rbacpolicy-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: rbacpolicies.rbac-manager.k8smgmt.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  labels:
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  group: rbac-manager.k8smgmt.io
  names:
    kind: RBACPolicy
    listKind: RBACPolicyList
    plural: rbacpolicies
    singular: rbacpolicy
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: RBACPolicy is the Schema for the rbacpolicies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RBACPolicySpec defines the desired state of RBACPolicy
            properties:
              clusterRoleBindings:
                description: The following are the RBAC resources that will be created
                  by the RBACPolicy controller These are the native K8S rbac objects.
                items:
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                      type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    metadata:
                      description: Standard object's metadata.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        creationTimestamp:
                          format: date-time
                          type: string
                        deletionGracePeriodSeconds:
                          format: int64
                          type: integer
                        deletionTimestamp:
                          format: date-time
                          type: string
                        finalizers:
                          items:
                            type: string
                          type: array
                        generateName:
                          type: string
                        generation:
                          format: int64
                          type: integer
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        managedFields:
                          items:
                            description: ManagedFieldsEntry is a workflow-id, a FieldSet
                              and the group version of the resource that the fieldset
                              applies to.
                            properties:
                              apiVersion:
                                description: APIVersion defines the version of this
                                  resource that this field set applies to. The format
                                  is "group/version" just like the top-level APIVersion
                                  field. It is necessary to track the version of a field
                                  set because it cannot be automatically converted.
                                type: string
                              fieldsType:
                                description: 'FieldsType is the discriminator for the
                                  different fields format and version. There is currently
                                  only one possible value: "FieldsV1"'
                                type: string
                              fieldsV1:
                                description: FieldsV1 holds the first JSON version format
                                  as described in the "FieldsV1" type.
                                type: object
                              manager:
                                description: Manager is an identifier of the workflow
                                  managing these fields.
                                type: string
                              operation:
                                description: Operation is the type of operation which
                                  lead to this ManagedFieldsEntry being created. The
                                  only valid values for this field are 'Apply' and 'Update'.
                                type: string
                              subresource:
                                description: Subresource is the name of the subresource
                                  used to update that object, or empty string if the
                                  object was updated through the main resource. The
                                  value of this field is used to distinguish between
                                  managers, even if they share the same name. For example,
                                  a status update will be distinct from a regular update
                                  using the same manager name. Note that the APIVersion
                                  field is not related to the Subresource field and
                                  it always corresponds to the version of the main resource.
                                type: string
                              time:
                                description: Time is the timestamp of when the ManagedFields
                                  entry was added. The timestamp will also be updated
                                  if a field is added, the manager changes any of the
                                  owned fields value or removes a field. The timestamp
                                  does not update when a field is removed from the entry
                                  because another manager took it over.
                                format: date-time
                                type: string
                            type: object
                          type: array
                        name:
                          type: string
                        namespace:
                          type: string
                        ownerReferences:
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from the
                                  key-value store until this reference is removed. See
                                  https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                  for how the garbage collector interacts with this
                                  field and enforces the foreground deletion. Defaults
                                  to false. To set this field, a user needs "delete"
                                  permission of the owner, otherwise 422 (Unprocessable
                                  Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the managing
                                  controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                        resourceVersion:
                          type: string
                        selfLink:
                          type: string
                        uid:
                          description: UID is a type that holds unique ID values, including
                            UUIDs.  Because we don't ONLY use UUIDs, this is an alias
                            to string.  Being a type captures intent and helps make
                            sure that UIDs and names do not get conflated.
                          type: string
                      type: object
                    roleRef:
                      description: RoleRef can only reference a ClusterRole in the global
                        namespace. If the RoleRef cannot be resolved, the Authorizer
                        must return an error.
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                      - apiGroup
                      - kind
                      - name
                      type: object
                      x-kubernetes-map-type: atomic
                    subjects:
                      description: Subjects holds references to the objects the role
                        applies to.
                      items:
                        description: Subject contains a reference to the object or user
                          identities a role binding applies to.  This can either hold
                          a direct API object reference, or a value for non-objects
                          such as user and group names.
                        properties:
                          apiGroup:
                            description: APIGroup holds the API group of the referenced
                              subject. Defaults to "" for ServiceAccount subjects. Defaults
                              to "rbac.authorization.k8s.io" for User and Group subjects.
                            type: string
                          kind:
                            description: Kind of object being referenced. Values defined
                              by this API group are "User", "Group", and "ServiceAccount".
                              If the Authorizer does not recognized the kind value,
                              the Authorizer should report an error.
                            type: string
                          name:
                            description: Name of the object being referenced.
                            type: string
                          namespace:
                            description: Namespace of the referenced object.  If the
                              object kind is non-namespace, such as "User" or "Group",
                              and this value is not empty the Authorizer should report
                              an error.
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                        x-kubernetes-map-type: atomic
                      type: array
                  required:
                  - roleRef
                  type: object
                type: array
              clusterRoles:
                items:
                  properties:
                    aggregationRule:
                      description: AggregationRule is an optional field that describes
                        how to build the Rules for this ClusterRole. If AggregationRule
                        is set, then the Rules are controller managed and direct changes
                        to Rules will be stomped by the controller.
                      properties:
                        clusterRoleSelectors:
                          description: ClusterRoleSelectors holds a list of selectors
                            which will be used to find ClusterRoles and create the rules.
                            If any of the selectors match, then the ClusterRole's permissions
                            will be added
                          items:
                            description: A label selector is a label query over a set
                              of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be empty.
                                        This array is replaced during a strategic merge
                                        patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                      type: object
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                      type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    metadata:
                      description: Standard object's metadata.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        creationTimestamp:
                          format: date-time
                          type: string
                        deletionGracePeriodSeconds:
                          format: int64
                          type: integer
                        deletionTimestamp:
                          format: date-time
                          type: string
                        finalizers:
                          items:
                            type: string
                          type: array
                        generateName:
                          type: string
                        generation:
                          format: int64
                          type: integer
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        managedFields:
                          items:
                            description: ManagedFieldsEntry is a workflow-id, a FieldSet
                              and the group version of the resource that the fieldset
                              applies to.
                            properties:
                              apiVersion:
                                description: APIVersion defines the version of this
                                  resource that this field set applies to. The format
                                  is "group/version" just like the top-level APIVersion
                                  field. It is necessary to track the version of a field
                                  set because it cannot be automatically converted.
                                type: string
                              fieldsType:
                                description: 'FieldsType is the discriminator for the
                                  different fields format and version. There is currently
                                  only one possible value: "FieldsV1"'
                                type: string
                              fieldsV1:
                                description: FieldsV1 holds the first JSON version format
                                  as described in the "FieldsV1" type.
                                type: object
                              manager:
                                description: Manager is an identifier of the workflow
                                  managing these fields.
                                type: string
                              operation:
                                description: Operation is the type of operation which
                                  lead to this ManagedFieldsEntry being created. The
                                  only valid values for this field are 'Apply' and 'Update'.
                                type: string
                              subresource:
                                description: Subresource is the name of the subresource
                                  used to update that object, or empty string if the
                                  object was updated through the main resource. The
                                  value of this field is used to distinguish between
                                  managers, even if they share the same name. For example,
                                  a status update will be distinct from a regular update
                                  using the same manager name. Note that the APIVersion
                                  field is not related to the Subresource field and
                                  it always corresponds to the version of the main resource.
                                type: string
                              time:
                                description: Time is the timestamp of when the ManagedFields
                                  entry was added. The timestamp will also be updated
                                  if a field is added, the manager changes any of the
                                  owned fields value or removes a field. The timestamp
                                  does not update when a field is removed from the entry
                                  because another manager took it over.
                                format: date-time
                                type: string
                            type: object
                          type: array
                        name:
                          type: string
                        namespace:
                          type: string
                        ownerReferences:
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from the
                                  key-value store until this reference is removed. See
                                  https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                  for how the garbage collector interacts with this
                                  field and enforces the foreground deletion. Defaults
                                  to false. To set this field, a user needs "delete"
                                  permission of the owner, otherwise 422 (Unprocessable
                                  Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the managing
                                  controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                        resourceVersion:
                          type: string
                        selfLink:
                          type: string
                        uid:
                          description: UID is a type that holds unique ID values, including
                            UUIDs.  Because we don't ONLY use UUIDs, this is an alias
                            to string.  Being a type captures intent and helps make
                            sure that UIDs and names do not get conflated.
                          type: string
                      type: object
                    rules:
                      description: Rules holds all the PolicyRules for this ClusterRole
                      items:
                        description: PolicyRule holds information that describes a policy
                          rule, but does not contain information about who the rule
                          applies to or which namespace the rule applies to.
                        properties:
                          apiGroups:
                            description: APIGroups is the name of the APIGroup that
                              contains the resources.  If multiple API groups are specified,
                              any action requested against one of the enumerated resources
                              in any API group will be allowed. "" represents the core
                              API group and "*" represents all API groups.
                            items:
                              type: string
                            type: array
                          nonResourceURLs:
                            description: NonResourceURLs is a set of partial urls that
                              a user should have access to.  *s are allowed, but only
                              as the full, final step in the path Since non-resource
                              URLs are not namespaced, this field is only applicable
                              for ClusterRoles referenced from a ClusterRoleBinding.
                              Rules can either apply to API resources (such as "pods"
                              or "secrets") or non-resource URL paths (such as "/api"),  but
                              not both.
                            items:
                              type: string
                            type: array
                          resourceNames:
                            description: ResourceNames is an optional white list of
                              names that the rule applies to.  An empty set means that
                              everything is allowed.
                            items:
                              type: string
                            type: array
                          resources:
                            description: Resources is a list of resources this rule
                              applies to. '*' represents all resources.
                            items:
                              type: string
                            type: array
                          verbs:
                            description: Verbs is a list of Verbs that apply to ALL
                              the ResourceKinds contained in this rule. '*' represents
                              all verbs.
                            items:
                              type: string
                            type: array
                        required:
                        - verbs
                        type: object
                      type: array
                  type: object
                type: array
              customClusterRoles:
                items:
                  description: ClusterRole is a specification for a ClusterRole resource
                  properties:
                    aggregationRule:
                      description: AggregationRule describes how to locate ClusterRoles
                        to aggregate into the ClusterRole
                      properties:
                        clusterRoleSelectors:
                          description: ClusterRoleSelectors holds a list of selectors
                            which will be used to find ClusterRoles and create the rules.
                            If any of the selectors match, then the ClusterRole's permissions
                            will be added
                          items:
                            description: A label selector is a label query over a set
                              of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be empty.
                                        This array is replaced during a strategic merge
                                        patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                      type: object
                    allowedGroups:
                      items:
                        type: string
                      type: array
                    allowedResources:
                      items:
                        type: string
                      type: array
                    allowedVerbs:
                      items:
                        type: string
                      type: array
                    denyGroups:
                      items:
                        type: string
                      type: array
                    denyResources:
                      items:
                        type: string
                      type: array
                    name:
                      type: string
                  required:
                  - allowedVerbs
                  - name
                  type: object
                type: array
              customRbacBindings:
                description: CustomRBACBindings are the RBACBindings that will be created
                  by the RBACPolicy controller These are the custom RBAC objects that
                  are defined by the RBACPolicy CRD
                items:
                  description: CustomRBACBinding is a specification for a RBACBinding
                    resource
                  properties:
                    clusterRoleBindings:
                      items:
                        description: CustomClusterRoleBinding is a specification for
                          a ClusterRoleBinding resource
                        properties:
                          clusterRole:
                            type: string
                        required:
                        - clusterRole
                        type: object
                      type: array
                    name:
                      type: string
                    presetBindings:
                      items:
                        properties:
                          namespace:
                            type: string
                          namespaceSelector:
                            description: A label selector is a label query over a set
                              of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be empty.
                                        This array is replaced during a strategic merge
                                        patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          roleName:
                            type: string
                        type: object
                      type: array
                    roleBindings:
                      items:
                        description: CustomRoleBinding is a specification for a RoleBinding
                          resource
                        properties:
                          clusterRole:
                            type: string
                          namespace:
                            type: string
                          namespaceSelector:
                            description: A label selector is a label query over a set
                              of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be empty.
                                        This array is replaced during a strategic merge
                                        patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          role:
                            type: string
                        type: object
                      type: array
                    subjects:
                      items:
                        description: Subject is an expansion on the rbacv1.Subject to
                          allow definition of ImagePullSecrets for a Service Account
                        properties:
                          apiGroup:
                            description: APIGroup holds the API group of the referenced
                              subject. Defaults to "" for ServiceAccount subjects. Defaults
                              to "rbac.authorization.k8s.io" for User and Group subjects.
                            type: string
                          automountServiceAccountToken:
                            type: boolean
                          imagePullSecrets:
                            items:
                              type: string
                            type: array
                          kind:
                            description: Kind of object being referenced. Values defined
                              by this API group are "User", "Group", and "ServiceAccount".
                              If the Authorizer does not recognized the kind value,
                              the Authorizer should report an error.
                            type: string
                          name:
                            description: Name of the object being referenced.
                            type: string
                          namespace:
                            description: Namespace of the referenced object.  If the
                              object kind is non-namespace, such as "User" or "Group",
                              and this value is not empty the Authorizer should report
                              an error.
                            type: string
                          serviceAccountSelector:
                            description: A label selector is a label query over a set
                              of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be empty.
                                        This array is replaced during a strategic merge
                                        patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - kind
                        - name
                        type: object
                        x-kubernetes-map-type: atomic
                      type: array
                  required:
                  - name
                  - subjects
                  type: object
                type: array
              customRoles:
                items:
                  description: Role is a specification for a Role resource
                  properties:
                    allowedGroups:
                      items:
                        type: string
                      type: array
                    allowedResources:
                      items:
                        type: string
                      type: array
                    allowedVerbs:
                      items:
                        type: string
                      type: array
                    denyGroups:
                      items:
                        type: string
                      type: array
                    denyResources:
                      items:
                        type: string
                      type: array
                    name:
                      type: string
                    namespace:
                      type: string
                    namespaceSelector:
                      description: A label selector is a label query over a set of resources.
                        The result of matchLabels and matchExpressions are ANDed. An
                        empty label selector matches all objects. A null label selector
                        matches no objects.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If
                                  the operator is In or NotIn, the values array must
                                  be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced
                                  during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A
                            single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is "key",
                            the operator is "In", and the values array contains only
                            "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                  - name
                  type: object
                type: array
              namespaceCreatePolicy:
                type: string
              roleBindings:
                items:
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                      type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    metadata:
                      description: Standard object's metadata.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        creationTimestamp:
                          format: date-time
                          type: string
                        deletionGracePeriodSeconds:
                          format: int64
                          type: integer
                        deletionTimestamp:
                          format: date-time
                          type: string
                        finalizers:
                          items:
                            type: string
                          type: array
                        generateName:
                          type: string
                        generation:
                          format: int64
                          type: integer
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        managedFields:
                          items:
                            description: ManagedFieldsEntry is a workflow-id, a FieldSet
                              and the group version of the resource that the fieldset
                              applies to.
                            properties:
                              apiVersion:
                                description: APIVersion defines the version of this
                                  resource that this field set applies to. The format
                                  is "group/version" just like the top-level APIVersion
                                  field. It is necessary to track the version of a field
                                  set because it cannot be automatically converted.
                                type: string
                              fieldsType:
                                description: 'FieldsType is the discriminator for the
                                  different fields format and version. There is currently
                                  only one possible value: "FieldsV1"'
                                type: string
                              fieldsV1:
                                description: FieldsV1 holds the first JSON version format
                                  as described in the "FieldsV1" type.
                                type: object
                              manager:
                                description: Manager is an identifier of the workflow
                                  managing these fields.
                                type: string
                              operation:
                                description: Operation is the type of operation which
                                  lead to this ManagedFieldsEntry being created. The
                                  only valid values for this field are 'Apply' and 'Update'.
                                type: string
                              subresource:
                                description: Subresource is the name of the subresource
                                  used to update that object, or empty string if the
                                  object was updated through the main resource. The
                                  value of this field is used to distinguish between
                                  managers, even if they share the same name. For example,
                                  a status update will be distinct from a regular update
                                  using the same manager name. Note that the APIVersion
                                  field is not related to the Subresource field and
                                  it always corresponds to the version of the main resource.
                                type: string
                              time:
                                description: Time is the timestamp of when the ManagedFields
                                  entry was added. The timestamp will also be updated
                                  if a field is added, the manager changes any of the
                                  owned fields value or removes a field. The timestamp
                                  does not update when a field is removed from the entry
                                  because another manager took it over.
                                format: date-time
                                type: string
                            type: object
                          type: array
                        name:
                          type: string
                        namespace:
                          type: string
                        ownerReferences:
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from the
                                  key-value store until this reference is removed. See
                                  https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                  for how the garbage collector interacts with this
                                  field and enforces the foreground deletion. Defaults
                                  to false. To set this field, a user needs "delete"
                                  permission of the owner, otherwise 422 (Unprocessable
                                  Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the managing
                                  controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                        resourceVersion:
                          type: string
                        selfLink:
                          type: string
                        uid:
                          description: UID is a type that holds unique ID values, including
                            UUIDs.  Because we don't ONLY use UUIDs, this is an alias
                            to string.  Being a type captures intent and helps make
                            sure that UIDs and names do not get conflated.
                          type: string
                      type: object
                    roleRef:
                      description: RoleRef can reference a Role in the current namespace
                        or a ClusterRole in the global namespace. If the RoleRef cannot
                        be resolved, the Authorizer must return an error.
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                      - apiGroup
                      - kind
                      - name
                      type: object
                      x-kubernetes-map-type: atomic
                    subjects:
                      description: Subjects holds references to the objects the role
                        applies to.
                      items:
                        description: Subject contains a reference to the object or user
                          identities a role binding applies to.  This can either hold
                          a direct API object reference, or a value for non-objects
                          such as user and group names.
                        properties:
                          apiGroup:
                            description: APIGroup holds the API group of the referenced
                              subject. Defaults to "" for ServiceAccount subjects. Defaults
                              to "rbac.authorization.k8s.io" for User and Group subjects.
                            type: string
                          kind:
                            description: Kind of object being referenced. Values defined
                              by this API group are "User", "Group", and "ServiceAccount".
                              If the Authorizer does not recognized the kind value,
                              the Authorizer should report an error.
                            type: string
                          name:
                            description: Name of the object being referenced.
                            type: string
                          namespace:
                            description: Namespace of the referenced object.  If the
                              object kind is non-namespace, such as "User" or "Group",
                              and this value is not empty the Authorizer should report
                              an error.
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                        x-kubernetes-map-type: atomic
                      type: array
                  required:
                  - roleRef
                  type: object
                type: array
              roles:
                items:
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                      type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    metadata:
                      description: Standard object's metadata.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          type: object
                        creationTimestamp:
                          format: date-time
                          type: string
                        deletionGracePeriodSeconds:
                          format: int64
                          type: integer
                        deletionTimestamp:
                          format: date-time
                          type: string
                        finalizers:
                          items:
                            type: string
                          type: array
                        generateName:
                          type: string
                        generation:
                          format: int64
                          type: integer
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        managedFields:
                          items:
                            description: ManagedFieldsEntry is a workflow-id, a FieldSet
                              and the group version of the resource that the fieldset
                              applies to.
                            properties:
                              apiVersion:
                                description: APIVersion defines the version of this
                                  resource that this field set applies to. The format
                                  is "group/version" just like the top-level APIVersion
                                  field. It is necessary to track the version of a field
                                  set because it cannot be automatically converted.
                                type: string
                              fieldsType:
                                description: 'FieldsType is the discriminator for the
                                  different fields format and version. There is currently
                                  only one possible value: "FieldsV1"'
                                type: string
                              fieldsV1:
                                description: FieldsV1 holds the first JSON version format
                                  as described in the "FieldsV1" type.
                                type: object
                              manager:
                                description: Manager is an identifier of the workflow
                                  managing these fields.
                                type: string
                              operation:
                                description: Operation is the type of operation which
                                  lead to this ManagedFieldsEntry being created. The
                                  only valid values for this field are 'Apply' and 'Update'.
                                type: string
                              subresource:
                                description: Subresource is the name of the subresource
                                  used to update that object, or empty string if the
                                  object was updated through the main resource. The
                                  value of this field is used to distinguish between
                                  managers, even if they share the same name. For example,
                                  a status update will be distinct from a regular update
                                  using the same manager name. Note that the APIVersion
                                  field is not related to the Subresource field and
                                  it always corresponds to the version of the main resource.
                                type: string
                              time:
                                description: Time is the timestamp of when the ManagedFields
                                  entry was added. The timestamp will also be updated
                                  if a field is added, the manager changes any of the
                                  owned fields value or removes a field. The timestamp
                                  does not update when a field is removed from the entry
                                  because another manager took it over.
                                format: date-time
                                type: string
                            type: object
                          type: array
                        name:
                          type: string
                        namespace:
                          type: string
                        ownerReferences:
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from the
                                  key-value store until this reference is removed. See
                                  https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                                  for how the garbage collector interacts with this
                                  field and enforces the foreground deletion. Defaults
                                  to false. To set this field, a user needs "delete"
                                  permission of the owner, otherwise 422 (Unprocessable
                                  Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the managing
                                  controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                            x-kubernetes-map-type: atomic
                          type: array
                        resourceVersion:
                          type: string
                        selfLink:
                          type: string
                        uid:
                          description: UID is a type that holds unique ID values, including
                            UUIDs.  Because we don't ONLY use UUIDs, this is an alias
                            to string.  Being a type captures intent and helps make
                            sure that UIDs and names do not get conflated.
                          type: string
                      type: object
                    rules:
                      description: Rules holds all the PolicyRules for this Role
                      items:
                        description: PolicyRule holds information that describes a policy
                          rule, but does not contain information about who the rule
                          applies to or which namespace the rule applies to.
                        properties:
                          apiGroups:
                            description: APIGroups is the name of the APIGroup that
                              contains the resources.  If multiple API groups are specified,
                              any action requested against one of the enumerated resources
                              in any API group will be allowed. "" represents the core
                              API group and "*" represents all API groups.
                            items:
                              type: string
                            type: array
                          nonResourceURLs:
                            description: NonResourceURLs is a set of partial urls that
                              a user should have access to.  *s are allowed, but only
                              as the full, final step in the path Since non-resource
                              URLs are not namespaced, this field is only applicable
                              for ClusterRoles referenced from a ClusterRoleBinding.
                              Rules can either apply to API resources (such as "pods"
                              or "secrets") or non-resource URL paths (such as "/api"),  but
                              not both.
                            items:
                              type: string
                            type: array
                          resourceNames:
                            description: ResourceNames is an optional white list of
                              names that the rule applies to.  An empty set means that
                              everything is allowed.
                            items:
                              type: string
                            type: array
                          resources:
                            description: Resources is a list of resources this rule
                              applies to. '*' represents all resources.
                            items:
                              type: string
                            type: array
                          verbs:
                            description: Verbs is a list of Verbs that apply to ALL
                              the ResourceKinds contained in this rule. '*' represents
                              all verbs.
                            items:
                              type: string
                            type: array
                        required:
                        - verbs
                        type: object
                      type: array
                  type: object
                type: array
              version:
                type: string
            required:
            - namespaceCreatePolicy
            - version
            type: object
          status:
            description: RBACPolicyStatus defines the observed state of RBACPolicy
            type: object
        required:
        - metadata
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: rbacmanager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-rbacmanager-manager-role
  labels:
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - rbac-manager.k8smgmt.io
  resources:
  - rbacpolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac-manager.k8smgmt.io
  resources:
  - rbacpolicies/finalizers
  verbs:
  - update
- apiGroups:
  - rbac-manager.k8smgmt.io
  resources:
  - rbacpolicies/status
  verbs:
  - get
  - patch
  - update
---
# Source: rbacmanager/templates/metrics-reader-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-rbacmanager-metrics-reader
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: rbacmanager/templates/monitor-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-rbacmanager-monitor-role
  labels:
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  - authorization.k8s.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
---
# Source: rbacmanager/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-rbacmanager-proxy-role
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: rbacmanager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-rbacmanager-manager-rolebinding
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'release-name-rbacmanager-manager-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-rbacmanager-controller-manager'
  namespace: 'default'
---
# Source: rbacmanager/templates/monitor-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-rbacmanager-monitor-rolebinding
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'release-name-rbacmanager-monitor-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-rbacmanager-controller-manager'
  namespace: 'default'
---
# Source: rbacmanager/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-rbacmanager-proxy-rolebinding
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'release-name-rbacmanager-proxy-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-rbacmanager-controller-manager'
  namespace: 'default'
---
# Source: rbacmanager/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-rbacmanager-leader-election-role
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: rbacmanager/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-rbacmanager-leader-election-rolebinding
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'release-name-rbacmanager-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-rbacmanager-controller-manager'
  namespace: 'default'
---
# Source: rbacmanager/templates/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rbacmanager-controller-manager-metrics-service
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    control-plane: controller-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    control-plane: controller-manager
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
---
# Source: rbacmanager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-rbacmanager-controller-manager
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: rbac-manager
    app.kubernetes.io/part-of: rbac-manager
    control-plane: controller-manager
    helm.sh/chart: rbacmanager-0.1.0
    app.kubernetes.io/name: rbacmanager
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: rbacmanager
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: rbacmanager
        app.kubernetes.io/instance: release-name
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --config=controller_manager_config.yaml
        command:
        - /manager
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: registry.dev.rafay-edge.net/dev/rbacmanager:20230914230224
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /controller_manager_config.yaml
          name: manager-config
          subPath: controller_manager_config.yaml
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: release-name-rbacmanager-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: release-name-rbacmanager-manager-config
        name: manager-config
