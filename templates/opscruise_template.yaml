---
# Source: opscruise/charts/awsgw/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: awsgw-service-account
  namespace: default
---
# Source: opscruise/charts/gcpgw/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gcpgw-service-account
  namespace: default
---
# Source: opscruise/charts/k8sgw/templates/clusterRole.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8sgw-service-account
  namespace: default
---
# Source: opscruise/charts/kube-state-metrics/templates/2-kube-state-metrics-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: default
---
# Source: opscruise/charts/loggw-loki/templates/loggw-loki.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loggw-service-account
  namespace: default
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: loki
    chart: loki-2.2.0
    heritage: Helm
    release: release-name
  annotations:
    {}
  name: release-name-loki
  namespace: default
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: promtail
    chart: promtail-2.1.0
    heritage: Helm
    release: release-name
  name: release-name-promtail
  namespace: default
---
# Source: opscruise/charts/opscruise-node-exporter-new/templates/node-exporter.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ne-service-account
  namespace: default
---
# Source: opscruise/charts/prometheus/templates/prometheus-deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: default
---
# Source: opscruise/charts/promgw/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promgw-service-account
  namespace: default
---
# Source: opscruise/charts/tracegw/templates/tracegw.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tracegw-service-account
  namespace: default
---
# Source: opscruise/charts/gcpgw/templates/gateway-creds.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gcp-creds
  namespace: default
type: Opaque
data:
  gcp-creds.json: bm8tY3JlZGVudGlhbC1naXZlbg==
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    release: release-name
    heritage: Helm
data:
  loki.yaml: YXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDBzCmNvbXBhY3RvcjoKICBzaGFyZWRfc3RvcmU6IGZpbGVzeXN0ZW0KICB3b3JraW5nX2RpcmVjdG9yeTogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1jb21wYWN0b3IKaW5nZXN0ZXI6CiAgY2h1bmtfYmxvY2tfc2l6ZTogMjYyMTQ0CiAgY2h1bmtfaWRsZV9wZXJpb2Q6IDNtCiAgY2h1bmtfcmV0YWluX3BlcmlvZDogMW0KICBsaWZlY3ljbGVyOgogICAgcmluZzoKICAgICAga3ZzdG9yZToKICAgICAgICBzdG9yZTogaW5tZW1vcnkKICAgICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgbWF4X3RyYW5zZmVyX3JldHJpZXM6IDAKbGltaXRzX2NvbmZpZzoKICBlbmZvcmNlX21ldHJpY19uYW1lOiBmYWxzZQogIHJlamVjdF9vbGRfc2FtcGxlczogdHJ1ZQogIHJlamVjdF9vbGRfc2FtcGxlc19tYXhfYWdlOiAyNGgKc2NoZW1hX2NvbmZpZzoKICBjb25maWdzOgogIC0gZnJvbTogIjIwMjAtMTAtMjQiCiAgICBpbmRleDoKICAgICAgcGVyaW9kOiAyNGgKICAgICAgcHJlZml4OiBpbmRleF8KICAgIG9iamVjdF9zdG9yZTogZmlsZXN5c3RlbQogICAgc2NoZW1hOiB2MTEKICAgIHN0b3JlOiBib2x0ZGItc2hpcHBlcgpzZXJ2ZXI6CiAgaHR0cF9saXN0ZW5fcG9ydDogMzEwMApzdG9yYWdlX2NvbmZpZzoKICBib2x0ZGJfc2hpcHBlcjoKICAgIGFjdGl2ZV9pbmRleF9kaXJlY3Rvcnk6IC9kYXRhL2xva2kvYm9sdGRiLXNoaXBwZXItYWN0aXZlCiAgICBjYWNoZV9sb2NhdGlvbjogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1jYWNoZQogICAgY2FjaGVfdHRsOiAyNGgKICAgIHNoYXJlZF9zdG9yZTogZmlsZXN5c3RlbQogIGZpbGVzeXN0ZW06CiAgICBkaXJlY3Rvcnk6IC9kYXRhL2xva2kvY2h1bmtzCnRhYmxlX21hbmFnZXI6CiAgcmV0ZW50aW9uX2RlbGV0ZXNfZW5hYmxlZDogdHJ1ZQogIHJldGVudGlvbl9wZXJpb2Q6IDI0aA==
---
# Source: opscruise/templates/aws-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: oc-aws-credential
  namespace: default
type: Opaque
data:
  AWS_ACCESS_KEY_ID:  "YXdzX2FjY2Vzc19rZXlfaWQ="
  AWS_SECRET_ACCESS_KEY: "YXdzX3NlY3JldF9hY2Nlc3Nfa2V5"
  # below secrets for prometheus-yace-exporter
  access_key:  "YXdzX2FjY2Vzc19rZXlfaWQ="
  secret_key: "YXdzX3NlY3JldF9hY2Nlc3Nfa2V5"
---
# Source: opscruise/templates/cert-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: oc-gw-certs
  namespace: default
type: Opaque
data:
  server.cer.pem:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: opscruise/templates/docker-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: oc-docker-creds
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson:  eyJhdXRocyI6IHsiaHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEvIjogeyJhdXRoIjogIlBFUlBRMHRGVWw5VlUwVlNUa0ZOUlQ0NlBFUlBRMHRGVWw5UVFWTlRWMDlTUkQ0PSJ9fX0=
---
# Source: opscruise/templates/gateway-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: oc-gw-creds
  namespace: default
type: Opaque
data:
  DOCKER_EMAIL: PERPQ0tFUl9FTUFJTD4=
  DOCKER_PASSWORD: PERPQ0tFUl9QQVNTV09SRD4=
  DOCKER_SERVER: aHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEv
  DOCKER_USERNAME: PERPQ0tFUl9VU0VSTkFNRT4=
  KEYCLOAK_CLIENT_ID: PEtBRktBX0NMSUVOVF9JRD4=
  KEYCLOAK_CLIENT_SECRET: PEtFWUNMT0FLX0NMSUVOVF9TRUNSRVQ+
  KEYCLOAK_ENABLED: dHJ1ZQ==
  KEYCLOAK_REALM: PEtFWUNMT0FLX1JFQUxNPg==
  KEYCLOAK_URL: aHR0cHM6Ly9hdXRoLm9wc2NydWlzZS5pbzo4NDQz
  OPSCRUISE_ACCOUNT_ID: PEtFWUNMT0FLX0NMVVNURVJJRD4=
  OPSCRUISE_ENDPOINT: PE9QU0NSVUlTRV9CQUNLRU5EX0tBRktBX0VORFBPSU5UPjo5MDkz
---
# Source: opscruise/templates/jgateway-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jgateway-secret
  namespace: default
type: Opaque
data:
  OAUTH_INTROSPECT_AUTHORIZATION: "QmFzaWMgUEV0QlJrdEJYME5NU1VWT1ZGOUpSRDQ2UEV0RldVTk1UMEZMWDBOTVNVVk9WRjlUUlVOU1JWUSs="
  OAUTH_AUTHORIZATION: "QmFzaWMgUEV0QlJrdEJYME5NU1VWT1ZGOUpSRDQ2UEV0RldVTk1UMEZMWDBOTVNVVk9WRjlUUlVOU1JWUSs="
  OAUTH_INTROSPECT_SERVER: "YXV0aC5vcHNjcnVpc2UuaW86ODQ0My9hdXRoL3JlYWxtcy88S0VZQ0xPQUtfUkVBTE0+"
  OAUTH_LOGIN_SERVER: "YXV0aC5vcHNjcnVpc2UuaW86ODQ0My9hdXRoL3JlYWxtcy88S0VZQ0xPQUtfUkVBTE0+"
  OPSCRUISE_ACCOUNT_ID: "PEtFWUNMT0FLX0NMVVNURVJJRD4="
  kafka.bootstrap.servers: "PE9QU0NSVUlTRV9CQUNLRU5EX0tBRktBX0VORFBPSU5UPjo5MDkz"
---
# Source: opscruise/templates/oc-test-secret.yml
apiVersion: v1
kind: Secret
metadata:
  name: 15962631-oc-test-pull-secret
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb25uZWN0LnJlZGhhdC5jb20iOnsiYXV0aCI6Ik1UVTVOakkyTXpGOGIyTXRkR1Z6ZERwbGVVcG9Za2RqYVU5cFNsTlZlbFY0VFdsS09TNWxlVXA2WkZkSmFVOXBTbXhaVjBsNlRXcFJOVnBIV1hwT1Ixa3dUMVJqTkU5WFRYZE9lbU40VDFkS2FVOUVRVEpOYlVrelQwTktPUzVXZHprdGRHZDNPRjgzTUZWVVJsSTBiM3BRVWtwaVgzUXplbGcwYjBab2VqQXRiSE16WVU1MFdqZGlaWEJuUlVoclFWRnVWVjlPUW1Kb1dtNVdURGRaVjBST2MzWm1kMHd5VTBZeGNWZGllbVZUY0hKQ1ZYZGhZVGhNUVd4MGVtVmFSMWRJTTNWWlpGQjNja1p6Y0ZBdFNYWjJhSFIxZFhkVU5rRkllVUpZVVd0T1dteElRVEJoWmpsRFJtRjJNa2xUZUZKTlZtTlZhR2xJWTBVMGFrdzJaM290TlMxSmJqTnpXVEkyUXpNdFFuZGFMV2hzUTFOSVNWcEJiV1JRWVhCdVZXZFJiV3BOTW05RVYyODNPWGh1Y0dOTFRUaDZiR3RSWDIxdlZrTlplWGh2WjJGSlZFcEdiMUZzYTIweU5XaEJVMUpoWkRodGJIWjJSVU5FVkhjdFJtTlRaMGhDUldOTFZtNXNTWEZRUVVGb1ZFaE9VelZaYTJORlZWZHRPVWR2VkhCUU5VOXZNM0pFVEVoWWJXVTNaMEpDZFdoa09YcFRUekprYXpSeVFrMTJXblZ0UkdwR2NETm5ZblZmVUZkTllXWjVSRXBJUm1kUE0xOWFNakprYjFOVFoxTXljR3BoWTFKNlNHMWZORlJYV1VsRFRsWlZNbk55Wm05elVtTmZPWFZ6Y1RkMkxXNXhkMFZLUW5ZNFFtWXRSV05XV0ZodU1HbDFZVTgwUlROTFlWZzBhVUZ6TVU1dldERjVaekpwTUdodlNHVjFiRUZpYW1Sek5VUTFNREE0ZEV0a1pYcFJRMEl6TlVaQ04xa3RPRzFpWm1KWFMxaFRTRFpwYVVobFZWRTJWR3R4V0hVeWFGOUlWRGczYlZFMWVEZzVUMVEyVlV4WFpHVmFWWEJsZWtSWU5VbG1kV1I1YUMxSlduWnNWakJsVlV3MGRFWXpRMFp4ZEdjeE5qbHVVVk5QYzNWUFUwWkdRUzFSUVdReFpEbHBjVTl1VkZsSlpIZFdOMjFVVVdjMmMzUktOVjlWVkdKellUUkpOM2R4TVdNNWExcGZaVUYzU1c5R05FWnhYelpmUVhKUFNERndSVmxFY1Vwb1FUSXhiR2QwYW05VE9YTkhWRWxDUlVOdFRHaFlXbFV5V1dkSWNEaFJUMGx4WjI1b2IyMVNVVk5qTTJKNFdFbE9ZV3RvVjFJdFlVNUpkdz09In19fQ==
type: kubernetes.io/dockerconfigjson
---
# Source: opscruise/charts/awsgw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: awsgw-configmap
  namespace: default
data:
  config.json: |-
    {"aws":{"config_update_interval_sec":300,"log_aws_service_filter_objects":true,"service_apigateway_enabled":true,"service_appsync_enabled":true,"service_dynamodb_enabled":false,"service_ebs_enabled":true,"service_ec2_enabled":true,"service_elb_enabled":true,"service_firehose_enabled":false,"service_kinesis_enabled":false,"service_lambda_enabled":true,"service_msk_enabled":true,"service_rds_enabled":true,"service_s3_enabled":true,"service_subnet_enabled":true,"service_vpc_enabled":true},"aws_config":{"aws_filters":{"entities":{"apigateway":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"appsync":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"ebs":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"ec2":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"elb":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"lambda":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"msk":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"rds":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"s3":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"subnet":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}},"vpc":{"enabled":false,"entity_filtering":{"entity_filter_condition":"OR","include_global_filter":true,"tag_filters":[{"key":"opscruise","value":["true"]}]}}},"global_tag_filtering":{"enabled":true,"global_filter_conditions":"OR","tag_filters":[{"key":"opscruise","value":["true"]}]},"match":[{"tag_name":"opscruise","tag_value":["true"]}],"tag_based_filter_enabled":false},"aws_metric_config":{"application_elb_detailed_metrics_enabled":false,"appsync_detailed_metrics_enabled":false,"default_range_seconds":300,"default_sampling_seconds":300,"ebs_detailed_metrics_enabled":false,"ec2_detailed_metrics_enabled":false,"elb_detailed_metrics_enabled":true,"lambda_detailed_metrics_enabled":false,"network_elb_detailed_metrics_enabled":false,"range_seconds":60,"rds_detailed_metrics_enabled":true,"s3_detailed_metrics_enabled":false,"s3_metric_delay_sec":240,"sampling_seconds":60}},"gateway_config":{"OC_DataCompression":false,"OC_Gateway_Id":"AW-01","OC_Heartbeat_Interval_sec":60},"messaging":{"kafka":{"consumer":{"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}}},"producer":{"flush":{"bytes":1572864,"frequency":1000},"max_message_bytes":20971520,"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}},"number_of_producers":1}}},"saf":{"file_compress":true,"max_file_size":50,"max_files":10,"store_path":"/var/opscruise/store"}}
---
# Source: opscruise/charts/gcpgw/templates/env-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "gcpgw-env-config"
  namespace: default
data:
  OAUTH_WITH_SSL: "true"
  OAUTH_LOGIN_ENDPOINT: "/protocol/openid-connect/token"
  OAUTH_LOGIN_GRANT_TYPE: "client_credentials"
  OAUTH_LOGIN_SCOPE: "openid"
  OAUTH_INTROSPECT_ENDPOINT: "/protocol/openid-connect/token/introspect"
  GOOGLE_APPLICATION_CREDENTIALS: "/opt/opscruise/configs/gcp-creds.json"
  OAUTH_ACCEPT_UNSECURE_SERVER: "false"
  kafka.bootstrap.servers: "<OPSCRUISE_BACKEND_KAFKA_ENDPOINT>:9093"
  kafka.sasl: "true"
  kafka.sasl.jaas.config: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
  kafka.security.protocol: "SASL_SSL"
  kafka.sasl.mechanism: "OAUTHBEARER"
  kafka.sasl.login.callback.handler.class: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
  kafka.ssl.verify: "false"
  gcp.gateway.json: "/opt/opscruise/configs/GcpGatewayConfig.json"
  quarkus.http.port: "8093"
  quarkus.log.level: "INFO"
  gatewayName: "GCPGW"
  gatewayKind: "gcp"
---
# Source: opscruise/charts/gcpgw/templates/gateway-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name:  gcpgw-config
  namespace: default
data:
  GcpGatewayConfig.json: |-
    {"configPollIntervalSeconds":600,"configsLabel":"opscruise-configs","enabledValue":"enabled","filteringEnabled":false,"metricPollIntervalSeconds":60,"metrics":["compute.googleapis.com/instance/cpu/utilization","compute.googleapis.com/instance/disk/max_read_bytes_count","compute.googleapis.com/instance/disk/max_write_bytes_count","compute.googleapis.com/instance/disk/read_bytes_count","compute.googleapis.com/instance/disk/write_bytes_count","compute.googleapis.com/instance/memory/balloon/ram_size","compute.googleapis.com/instance/memory/balloon/ram_used","compute.googleapis.com/instance/memory/balloon/swap_in_bytes_count","compute.googleapis.com/instance/memory/balloon/swap_out_bytes_count","compute.googleapis.com/instance/network/received_bytes_count","compute.googleapis.com/instance/network/received_packets_count","compute.googleapis.com/instance/network/sent_bytes_count","compute.googleapis.com/instance/network/sent_packets_count","loadbalancing.googleapis.com/https/backend_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/https/backend_request_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/backend_request_count|ALIGN_RATE","loadbalancing.googleapis.com/https/backend_response_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/frontend_tcp_rtt|ALIGN_DELTA","loadbalancing.googleapis.com/https/internal/backend_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/https/internal/request_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/internal/request_count|ALIGN_RATE","loadbalancing.googleapis.com/https/internal/response_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/internal/total_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/https/request_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/request_count|ALIGN_RATE","loadbalancing.googleapis.com/https/response_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/https/total_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/l3/external/egress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/external/ingress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/external/ingress_packets_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/external/rtt_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/l3/internal/egress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/internal/egress_packets_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/internal/ingress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/internal/ingress_packets_count|ALIGN_RATE","loadbalancing.googleapis.com/l3/internal/rtt_latencies|ALIGN_DELTA","loadbalancing.googleapis.com/tcp_ssl_proxy/closed_connections|ALIGN_RATE","loadbalancing.googleapis.com/tcp_ssl_proxy/egress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/tcp_ssl_proxy/frontend_tcp_rtt|ALIGN_DELTA","loadbalancing.googleapis.com/tcp_ssl_proxy/ingress_bytes_count|ALIGN_RATE","loadbalancing.googleapis.com/tcp_ssl_proxy/new_connections|ALIGN_RATE","loadbalancing.googleapis.com/tcp_ssl_proxy/open_connections|ALIGN_MEAN","cloudsql.googleapis.com/database/auto_failover_request_count|ALIGN_MEAN","cloudsql.googleapis.com/database/available_for_failover|ALIGN_MEAN","cloudsql.googleapis.com/database/cpu/reserved_cores|ALIGN_MEAN","cloudsql.googleapis.com/database/cpu/usage_time|ALIGN_RATE","cloudsql.googleapis.com/database/cpu/utilization|ALIGN_MEAN","cloudsql.googleapis.com/database/disk/bytes_used|ALIGN_MEAN","cloudsql.googleapis.com/database/disk/quota|ALIGN_MEAN","cloudsql.googleapis.com/database/disk/read_ops_count|ALIGN_RATE","cloudsql.googleapis.com/database/disk/utilization|ALIGN_MEAN","cloudsql.googleapis.com/database/disk/write_ops_count|ALIGN_RATE","cloudsql.googleapis.com/database/instance_state|ALIGN_COUNT_TRUE","cloudsql.googleapis.com/database/memory/quota|ALIGN_MEAN","cloudsql.googleapis.com/database/memory/total_usage|ALIGN_MEAN","cloudsql.googleapis.com/database/memory/usage|ALIGN_MEAN","cloudsql.googleapis.com/database/memory/utilization|ALIGN_MEAN","cloudsql.googleapis.com/database/network/connections|ALIGN_MEAN","cloudsql.googleapis.com/database/network/received_bytes_count|ALIGN_RATE","cloudsql.googleapis.com/database/network/sent_bytes_count|ALIGN_RATE","cloudsql.googleapis.com/database/postgresql/external_sync/initial_sync_complete|ALIGN_COUNT_TRUE","cloudsql.googleapis.com/database/postgresql/external_sync/max_replica_byte_lag|ALIGN_MEAN","cloudsql.googleapis.com/database/postgresql/insights/aggregate/execution_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/aggregate/io_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/aggregate/latencies|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/aggregate/lock_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/aggregate/row_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/aggregate/shared_blk_access_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/execution_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/io_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/latencies|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/lock_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/row_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/perquery/shared_blk_access_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/execution_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/io_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/latencies|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/lock_time|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/row_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/insights/pertag/shared_blk_access_count|ALIGN_NONE","cloudsql.googleapis.com/database/postgresql/num_backends|ALIGN_MEAN","cloudsql.googleapis.com/database/postgresql/replication/replica_byte_lag|ALIGN_MEAN","cloudsql.googleapis.com/database/postgresql/transaction_count|ALIGN_RATE","cloudsql.googleapis.com/database/replication/network_lag|ALIGN_MEAN","cloudsql.googleapis.com/database/replication/replica_lag|ALIGN_MEAN","cloudsql.googleapis.com/database/replication/state|ALIGN_COUNT_TRUE","cloudsql.googleapis.com/database/state|ALIGN_NONE","cloudsql.googleapis.com/database/up|ALIGN_MEAN","cloudsql.googleapis.com/database/uptime|ALIGN_RATE"],"metricsLabel":"opscruise-metrics","resourcePollIntervalSeconds":60,"serviceLabel":"opscruise"}
---
# Source: opscruise/charts/k8sgw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8sgw-configmap
  namespace: default
data:
  config.json: |-
    {"gateway_config":{"OC_DataCompression":true,"OC_Gateway_Id":"K8-01","OC_Heartbeat_Interval_sec":60},"kubernetes":{"all_config_interval_sec":900,"config_update_interval_sec":60,"event_update_interval_sec":90,"istio_enabled":false,"listen_ip":"0.0.0.0","listen_port":8080,"max_number_of_clients_active":100,"namespace_allow_list":[""]},"messaging":{"kafka":{"consumer":{"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}}},"producer":{"flush":{"bytes":1572864,"frequency":1000},"max_message_bytes":20971520,"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}},"number_of_producers":1}}},"saf":{"file_compress":true,"max_file_size":50,"max_files":10,"store_path":"/var/opscruise/store"}}
---
# Source: opscruise/charts/loggw-loki/templates/env-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "loggw-loki-env-config"
  namespace: default
data:
  OAUTH_WITH_SSL: "true"
  OAUTH_LOGIN_ENDPOINT: "/protocol/openid-connect/token"
  OAUTH_LOGIN_GRANT_TYPE: "client_credentials"
  OAUTH_LOGIN_SCOPE: "openid"
  OAUTH_INTROSPECT_ENDPOINT: "/protocol/openid-connect/token/introspect"
  OAUTH_ACCEPT_UNSECURE_SERVER: "false"
  opscruise.jgateway.loki.queries: "%7Bnamespace%3D~%22.%2B%22%7D"
  opscruise.jgateway.cache.dir: "/opt/opscruise/cache"
  opscruise.jgateway.loki.host: "opscruise-bundle-loki.opscruise.svc.cluster.local:3100"
  opscruise.jgateway.log.logParserConfigFilePath: "parser-config.json"
  kafka.bootstrap.servers: "<OPSCRUISE_BACKEND_KAFKA_ENDPOINT>:9093"
  kafka.sasl: "true"
  kafka.sasl.jaas.config: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
  kafka.security.protocol: "SASL_SSL"
  kafka.sasl.mechanism: "OAUTHBEARER"
  kafka.sasl.login.callback.handler.class: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
  kafka.ssl.verify: "false"
  quarkus.http.port: "8083"
  quarkus.log.level: "INFO"
  opscruise.loggw.loki.max_look_back_mins: "10"
  opscruise.loggw.loki.delay_for_secs: "3"
  gatewayName: "LOGGWLOKI"
  gatewayKind: "loggwloki"
---
# Source: opscruise/charts/loggw-loki/templates/parser-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: loggw-loki-parser-config
  namespace: default
data:
  parser-config.json: |-
    
    {
      "rules": [],
      "grokPatterns": [
        "USERNAME [a-zA-Z0-9._-]+",
        "USER %{USERNAME:UNWANTED}",
        "INT (?:[+-]?(?:[0-9]+))",
        "BASE10NUM (?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\\.[0-9]+)?)|(?:\\.[0-9]+)))",
        "NUMBER (?:%{BASE10NUM:UNWANTED})",
        "BASE16NUM (?<![0-9A-Fa-f])(?:[+-]?(?:0x)?(?:[0-9A-Fa-f]+))",
        "BASE16FLOAT \\b(?<![0-9A-Fa-f.])(?:[+-]?(?:0x)?(?:(?:[0-9A-Fa-f]+(?:\\.[0-9A-Fa-f]*)?)|(?:\\.[0-9A-Fa-f]+)))\\b",
        "POSINT \\b(?:[1-9][0-9]*)\\b",
        "NONNEGINT \\b(?:[0-9]+)\\b",
        "WORD \\b\\w+\\b",
        "NOTSPACE \\S+",
        "SPACE \\s*",
        "DATA .*?",
        "GREEDYDATA .*",
        "QUOTEDSTRING (?>(?<!\\\\)(?>\"(?>\\\\.|[^\\\\\"]+)+\"|\"\"|(?>'(?>\\\\.|[^\\\\']+)+')|''|(?>`(?>\\\\.|[^\\\\`]+)+`)|``))",
        "UUID [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}",
        "MAC (?:%{CISCOMAC:UNWANTED}|%{WINDOWSMAC:UNWANTED}|%{COMMONMAC:UNWANTED})",
        "CISCOMAC (?:(?:[A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4})",
        "WINDOWSMAC (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2})",
        "COMMONMAC (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})",
        "IPV6 ((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?",
        "IPV4 (?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])",
        "IP (?:%{IPV6:UNWANTED}|%{IPV4:UNWANTED})",
        "HOSTNAME \\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\\.?|\\b)",
        "HOST %{HOSTNAME:UNWANTED}",
        "IPORHOST (?:%{HOSTNAME:UNWANTED}|%{IP:UNWANTED})",
        "HOSTPORT (?:%{IPORHOST}:%{POSINT:PORT})",
        "PATH (?:%{UNIXPATH}|%{WINPATH})",
        "UNIXPATH (?>/(?>[\\w_%!$@:.,~-]+|\\\\.)*)+",
        "TTY (?:/dev/(pts|tty([pq])?)(\\w+)?/?(?:[0-9]+))",
        "WINPATH (?>[A-Za-z]+:|\\\\)(?:\\\\[^\\\\?*]*)+",
        "URIPROTO [A-Za-z]+(\\+[A-Za-z+]+)?",
        "URIHOST %{IPORHOST}(?::%{POSINT:port})?",
        "URIPATH (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\\-]*)+",
        "URIPARAM \\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]]*",
        "URIPATHPARAM %{URIPATH}(?:%{URIPARAM})?",
        "URI %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})?",
        "MONTH \\b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\\b",
        "MONTHNUM (?:0?[1-9]|1[0-2])",
        "MONTHNUM2 (?:0[1-9]|1[0-2])",
        "MONTHDAY (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])",
        "DAY (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)",
        "YEAR (?>\\d\\d){1,2}",
        "HOUR (?:2[0123]|[01]?[0-9])",
        "MINUTE (?:[0-5][0-9])",
        "SECOND (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)",
        "TIME (?!<[0-9])%{HOUR}:%{MINUTE}(?::%{SECOND})(?![0-9])",
        "DATE_US %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR}",
        "DATE_EU %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}",
        "ISO8601_TIMEZONE (?:Z|[+-]%{HOUR}(?::?%{MINUTE}))",
        "ISO8601_SECOND (?:%{SECOND}|60)",
        "TIMESTAMP_ISO8601 %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?",
        "DATE %{DATE_US}|%{DATE_EU}",
        "DATESTAMP %{DATE}[- ]%{TIME}",
        "TZ (?:[PMCE][SD]T|UTC)",
        "DATESTAMP_RFC822 %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ}",
        "DATESTAMP_RFC2822 %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE}",
        "DATESTAMP_OTHER %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR}",
        "DATESTAMP_EVENTLOG %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND}",
        "SYSLOGTIMESTAMP %{MONTH} +%{MONTHDAY} %{TIME}",
        "PROG (?:[\\w._/%-]+)",
        "SYSLOGPROG %{PROG:program}(?:\\[%{POSINT:pid}\\])?",
        "SYSLOGHOST %{IPORHOST}",
        "SYSLOGFACILITY <%{NONNEGINT:facility}.%{NONNEGINT:priority}>",
        "HTTPDATE %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT}",
        "QS %{QUOTEDSTRING:UNWANTED}",
        "SYSLOGBASE %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}:",
        "MESSAGESLOG %{SYSLOGBASE} %{DATA}",
        "GENERIC %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)",
        "COMMONAPACHELOG %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)",
        "COMBINEDAPACHELOG %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent}",
        "COMMONAPACHELOG_DATATYPED %{IPORHOST:clientip} %{USER:ident;boolean} %{USER:auth} \\[%{HTTPDATE:timestamp;date;dd/MMM/yyyy:HH:mm:ss Z}\\] \"(?:%{WORD:verb;string} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion;float})?|%{DATA:rawrequest})\" %{NUMBER:response;int} (?:%{NUMBER:bytes;long}|-)",
        "LOGLEVEL ([A|a]lert|ALERT|[T|t]race|TRACE|[D|d]ebug|DEBUG|[N|n]otice|NOTICE|[I|i]nfo|INFO|[W|w]arn?(?:ing)?|WARN?(?:ING)?|[E|e]rr?(?:or)?|ERR?(?:OR)?|[C|c]rit?(?:ical)?|CRIT?(?:ICAL)?|[F|f]atal|FATAL|[S|s]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)",
        "LEVEL %{LOGLEVEL:level}"
      ]
    }
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-promtail
  namespace: default
  labels:
    app: promtail
    chart: promtail-2.1.0
    release: release-name
    heritage: Helm
data:
  promtail.yaml: |
    client:
      backoff_config:
        max_period: 5m
        max_retries: 10
        min_period: 500ms
      batchsize: 1048576
      batchwait: 1s
      external_labels: {}
      timeout: 10s
    positions:
      filename: /run/promtail/positions.yaml
    server:
      http_listen_port: 3101
    target_config:
      sync_period: 10s
    scrape_configs:
    - job_name: kubernetes-pods-name
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-app
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        source_labels:
        - __meta_kubernetes_pod_label_name
      - source_labels:
        - __meta_kubernetes_pod_label_app
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-direct-controllers
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        separator: ''
        source_labels:
        - __meta_kubernetes_pod_label_name
        - __meta_kubernetes_pod_label_app
      - action: drop
        regex: '[0-9a-z-.]+-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
      - source_labels:
        - __meta_kubernetes_pod_controller_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-indirect-controller
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        separator: ''
        source_labels:
        - __meta_kubernetes_pod_label_name
        - __meta_kubernetes_pod_label_app
      - action: keep
        regex: '[0-9a-z-.]+-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
      - action: replace
        regex: '([0-9a-z-.]+)-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-static
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: ''
        source_labels:
        - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_component
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror
        - __meta_kubernetes_pod_container_name
        target_label: __path__
---
# Source: opscruise/charts/loki-stack/templates/datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-loki-stack
  namespace: default
  labels:
    app: loki-stack
    chart: loki-stack-2.3.0
    release: release-name
    heritage: Helm
    grafana_datasource: "1"
data:
  loki-stack-datasource.yaml: |-
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      url: http://release-name-loki:3100
      version: 1
---
# Source: opscruise/charts/loki-stack/templates/tests/loki-test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-loki-stack-test
  labels:
    app: loki-stack
    chart: loki-stack-2.3.0
    release: release-name
    heritage: Helm
data:
  test.sh: |
    #!/usr/bin/env bash

    LOKI_URI="http://${LOKI_SERVICE}:${LOKI_PORT}"

    function setup() {
      apk add -u curl jq
      until (curl -s ${LOKI_URI}/api/prom/label/app/values | jq -e '.values[] | select(. == "loki")'); do
        sleep 1
      done
    }

    @test "Has labels" {
      curl -s ${LOKI_URI}/api/prom/label | \
      jq -e '.values[] | select(. == "app")'
    }

    @test "Query log entry" {
      curl -sG ${LOKI_URI}/api/prom/query?limit=10 --data-urlencode 'query={app="loki"}' | \
      jq -e '.streams[].entries | length >= 1'
    }

    @test "Push log entry legacy" {
      local timestamp=$(date -Iseconds -u | sed 's/UTC/.000000000+00:00/')
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"labels": "{app=\"loki-test\"}", "entries": [{"ts": $timestamp, "line": "foobar"}]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/api/prom/push -d "${data}"

      curl -sG ${LOKI_URI}/api/prom/query?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.streams[].entries[].line == "foobar"'
    }

    @test "Push log entry" {
      local timestamp=$(date +%s000000000)
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"stream": {"app": "loki-test"}, "values": [[$timestamp, "foobar"]]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/loki/api/v1/push -d "${data}"

      curl -sG ${LOKI_URI}/api/prom/query?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.streams[].entries[].line == "foobar"'
    }
---
# Source: opscruise/charts/opscruise-node-exporter-new/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: opsc-ne-configmap
  namespace: default
data:
  config.json: |-
    {"custom_rules":[{"condition":"(.*=).*","enable":true,"exclude":false,"priority":0,"value":"$1"}],"default_rule":{"depth":3,"enable":true,"from_last":false},"enable_url_metrics":true,"full_uri":false,"url_segments":{"enable":false,"segments":""}}
---
# Source: opscruise/charts/prometheus/templates/prometheus-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-configmap
  namespace: "default"
data:
  prometheus.yml: |-
      global:
        evaluation_interval: 30s
        scrape_interval: 30s
      remote_write:
      - queue_config:
          capacity: 10000
          max_samples_per_send: 1000
          max_shards: 5
        url: http://promgw-service.opscruise.svc.cluster.local:8585/ingest
      rule_files:
      - /etc/prometheus/recording_rules.yml
      scrape_configs:
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: oc-kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
        metric_relabel_configs:
        - action: keep
          regex: container_.*|node_cpu_utilization|node_cpu_utilization|node_cpu_seconds_total|node_memory_MemFree_bytes|node_memory_Cached_bytes|node_memory_Buffers_bytes|node_memory_MemTotal_bytes|node_memory_Active_bytes|node_memory_Utilization|node_memory_MemTotal_bytes|node_disk_io_time_seconds_total|node_disk_read_bytes_total|node_disk_written_bytes_total|node_disk_io_time_weighted_seconds_total|node_filesystem_size_bytes|node_filesystem_free_bytes|node_disk_read_time_seconds_total|node_disk_write_time_seconds_total|node_disk_reads_completed_total|node_disk_writes_completed_total|node_network_receive_bytes_total|node_network_transmit_bytes_total|node_network_receive_drop_total|node_network_transmit_drop_total|node_network_receive_errs_total|node_network_transmit_errs_total|node_ipvs_incoming_bytes_total|node_ipvs_outgoing_bytes_total|node_load1|node_context_switches_total|node_num_core_count|namedprocess_.*|node_flowstats_.*|kube_.*|prometheus_.*|scrape_.*|redis_.*|nodejs_.*|nginx_.*|jvm_.*|pg_.*|mongo.*|mysql.*|kafka.*|x509.*|node_disk_utilization|node_filesystem_avail_bytes|node_disk_used_bytes|aws_.*
          source_labels:
          - __name__
        - action: replace
          regex: (127.0.0.1);(.*)
          replacement: $2
          source_labels:
          - forward_path_src
          - neinstip
          target_label: forward_path_src
        - action: replace
          regex: (127.0.0.1);(.*)
          replacement: $2
          source_labels:
          - forward_path_dst
          - neinstip
          target_label: forward_path_dst
        - action: replace
          regex: (127.0.0.1);(.*)
          replacement: $2
          source_labels:
          - reverse_path_src
          - neinstip
          target_label: reverse_path_src
        - action: replace
          regex: (127.0.0.1);(.*)
          replacement: $2
          source_labels:
          - reverse_path_dst
          - neinstip
          target_label: reverse_path_dst
        - action: drop
          regex: (container_.*);(^\s*$)
          replacement: $1
          separator: ;
          source_labels:
          - __name__
          - container_label_io_kubernetes_container_name
        - action: replace
          regex: container_network.*
          replacement: "true"
          separator: ;
          source_labels:
          - __name__
          target_label: container_label_io_kubernetes_container_name
        - action: drop
          regex: POD
          replacement: $1
          separator: ;
          source_labels:
          - container_label_io_kubernetes_container_name
        relabel_configs:
        - action: keep
          regex: opscruise
          source_labels:
          - __meta_kubernetes_pod_label_opscruisePerimeter
        - action: replace
          regex: (.*)(:.*)
          replacement: $1
          source_labels:
          - __address__
          target_label: neinstip
        scheme: http
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: oc-app-exporters
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - action: keep
          regex: opscruise
          source_labels:
          - __meta_kubernetes_service_label_opscruisePerimeter
        - replacement: container
          target_label: provider
        - regex: (\S.*)
          source_labels:
          - __meta_service_label_provider
          target_label: provider
        scheme: http
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes-cadvisor
        kubernetes_sd_configs:
        - role: node
        metric_relabel_configs:
        - action: replace
          regex: ^/machine.slice/machine-rkt\x2d([^\]+)\.+/([^/]+).service$
          replacement: ${2}-${1}
          source_labels:
          - id
          target_label: rkt_container_name
        - action: replace
          regex: ^/system.slice/(.+).service$
          replacement: ${1}
          source_labels:
          - id
          target_label: systemd_service_name
        - action: replace
          regex: (.*)
          replacement: ${1}
          source_labels:
          - container
          target_label: container_label_io_kubernetes_container_name
        - action: replace
          regex: (.*)
          replacement: ${1}
          source_labels:
          - pod
          target_label: container_label_io_kubernetes_pod_name
        - action: replace
          regex: (.*)
          replacement: ${1}
          source_labels:
          - namespace
          target_label: container_label_io_kubernetes_pod_namespace
        - action: replace
          regex: .+?pod([^\.g-z]+?)[\.\/\s](.*)
          replacement: ${1}
          source_labels:
          - id
          target_label: container_label_io_kubernetes_pod_uid
        - action: replace
          regex: (\w+)_(\w+)_(\w+)_(\w+)_(\w+)
          replacement: ${1}-${2}-${3}-${4}-${5}
          separator: ;
          source_labels:
          - container_label_io_kubernetes_pod_uid
          target_label: container_label_io_kubernetes_pod_uid
        - action: drop
          regex: (container_.*);(^\s*$)
          replacement: $1
          separator: ;
          source_labels:
          - __name__
          - container_label_io_kubernetes_container_name
        - action: replace
          regex: container_network.*
          replacement: "true"
          separator: ;
          source_labels:
          - __name__
          target_label: container_label_io_kubernetes_container_name
        - action: drop
          regex: POD
          replacement: $1
          separator: ;
          source_labels:
          - container_label_io_kubernetes_container_name
        - action: keep
          regex: .*
          source_labels:
          - container_label_io_kubernetes_pod_namespace
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - replacement: kubernetes.default.svc:443
          target_label: __address__
        - regex: (.+)
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          source_labels:
          - __meta_kubernetes_node_name
          target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  recording_rules.yml: |
      groups:
      - name: opscruise_rules
        rules:
        - expr: |
            (node_flowstats_bpf_l7_req_cnt / 30) > 0
          record: bpf_l7_req_cnt_per_seconds
        - expr: |
            (100 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[89s])) * 100))
          record: node_cpu_utilization
        - expr: |
            ((1 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[89s])))) * (count without(cpu, mode, neinstip) (node_cpu_seconds_total{mode="idle"})) * 30)
          record: node_cpu_aggregated_seconds_total
        - expr: |
            (rate(node_disk_read_time_seconds_total[89s]) > 0) / (rate(node_disk_reads_completed_total[89s]) > 0)
          record: node_disk_read_time_seconds
        - expr: |
            (rate(node_disk_write_time_seconds_total[89s]) > 0) / (rate(node_disk_writes_completed_total[89s]) > 0)
          record: node_disk_write_time_seconds
        - expr: |
            (100 * (1 - ((node_memory_MemFree_bytes + node_memory_Cached_bytes + node_memory_Buffers_bytes) / node_memory_MemTotal_bytes)))
          record: node_memory_Utilization
        - expr: |
            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[87s])))
          record: container_cpu_usage_core_total
        - expr: |
            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[89s])))
          record: container_spec_cpu_utilization
        - expr: |
            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_cpu_seconds_total) )
          record: namedprocess_namegroup_cpu_aggregated_seconds_total
        - expr: |
            (sum without(memtype) (namedprocess_namegroup_memory_bytes{memtype=~"proportionalResident|proportionalSwapped"}))
          record: namedprocess_namegroup_aggregated_memory_bytes
        - expr: |
            count by(instance, job, name, username, pgid, startTime) (node_cpu_seconds_total{mode=~"system"})
          record: node_num_core_count
        - expr: |
            (sum by (instance,job,groupname,threadname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_thread_cpu_seconds_total))
          record: namedprocess_namegroup_thread_cpu_aggregrated_seconds_total
        - expr: |
            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (rate(namedprocess_namegroup_cpu_seconds_total[89s])))
          record: namedprocess_namegroup_cpu_utilization
        - expr: |
            (node_flowstats_bpf_l7_req_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_cnt{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_req_cnt
        - expr: |
            (node_flowstats_bpf_l7_req_method_get_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_get_cnt{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_req_method_get_cnt
        - expr: |
            (node_flowstats_bpf_l7_req_method_put_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_put_cnt{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_req_method_put_cnt
        - expr: |
            (node_flowstats_bpf_l7_req_method_other_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_other_cnt{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_req_method_other_cnt
        - expr: |
            (node_flowstats_bpf_l7_rsperr_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsperr_cnt{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_rsperr_cnt
        - expr: |
            (node_flowstats_bpf_l7_rsptime_avg_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_avg_ms{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_rsptime_avg_ms
        - expr: |
            (node_flowstats_bpf_l7_rsptime_max_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_max_ms{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_rsptime_max_ms
        - expr: |
            (node_flowstats_src_merged_bpf_l7_rsptime_min_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_src_merged_bpf_l7_rsptime_min_ms{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_bpf_l7_rsptime_min_ms
        - expr: |
            (node_flowstats_conntrack_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_bytes_difference{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_conntrack_bytes_difference
        - expr: |
            (node_flowstats_conntrack_forward_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_forward_path_bytes_difference{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_conntrack_forward_path_bytes_difference
        - expr: |
            (node_flowstats_conntrack_reverse_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_reverse_path_bytes_difference{source_pid!="",target_pid=""}
          record: node_flowstats_src_merged_conntrack_reverse_path_bytes_difference
        - expr: |
            (100 - ((node_filesystem_avail_bytes{mountpoint="/"} * 100) / node_filesystem_size_bytes{mountpoint="/"}))
          record: node_disk_utilization
        - expr: |
            (node_filesystem_size_bytes{mountpoint="/"} - node_filesystem_free_bytes{mountpoint="/"})
          record: node_disk_used_bytes
        - expr: |
            (sum by (handler,instance,job,method,path,status,provider)(http_api_requests_total))
          record: http_api_requests_total_count
---
# Source: opscruise/charts/promgw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: promgw-configmap
  namespace: default
data:
  config.json: |-
    {"gateway_config":{"OC_Gateway_Id":"PR-01","OC_Heartbeat_Interval_sec":60},"messaging":{"kafka":{"consumer":{"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}}},"producer":{"flush":{"bytes":1572864,"frequency":1000},"max_message_bytes":20971520,"net":{"sasl":{"enable":true,"insecure_skip_verify":true},"tls":{"enable":true,"insecure_skip_verify":true}},"number_of_producers":5}}},"prometheus":{"data_rate_fall_in_Percent":90,"leader_idle_timeout":60,"listen_ip":"0.0.0.0","listen_port":8080,"max_number_of_clients_active":10,"non_leader_cache_timeout":65,"period_of_data_rate_sec":300},"saf":{"file_compress":true,"max_file_size":50,"max_files":10,"store_path":"/var/opscruise/store"}}
---
# Source: opscruise/charts/tracegw/templates/environment-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "tracegw-env-config"
  namespace: default
data:
  OAUTH_WITH_SSL: "true"
  OAUTH_LOGIN_ENDPOINT: "/protocol/openid-connect/token"
  OAUTH_LOGIN_GRANT_TYPE: "client_credentials"
  OAUTH_LOGIN_SCOPE: "openid"
  OAUTH_INTROSPECT_ENDPOINT: "/protocol/openid-connect/token/introspect"
  GOOGLE_APPLICATION_CREDENTIALS: "/opt/opscruise/configs/gcp-creds.json"
  OAUTH_ACCEPT_UNSECURE_SERVER: "false"
  kafka.bootstrap.servers: "<OPSCRUISE_BACKEND_KAFKA_ENDPOINT>:9093"
  tracegw.jaeger.endpoint: "jaeger-api.opscruise.svc.cluster.local:16685"
  tracegw.spans.max_per_batch: "50000"
  tracegw.service.refresh.interval: "180"
  tracegw.traces.polling.interval: "30"
  tracegw.lookback.duration_secs: "30"
  tracegw.meters.collapseConsecutiveRepeatingSpans: "true"
  tracegw.meters.maxNumberOfRepeatedSpans: "10"
  tracegw.enableTraceForwarding: "true"
  tracegw.max.traces: "300"
  tracegw.filter.tags.key: "notag"
  tracegw.filter.tags.value: "notag"
  tracegw.tempo.jaeger.grpc.ssl: "false"
  tracegw.tempo.jaeger.trace-dup.cache.duration.in-sec: "120"
  tracegw.tempo.jaeger.trace-dup.cache.record.limit: "150000"
  tracegw.trace.data.from.jaeger: "true"
  tracegw.tempo.http: "false"
  tracegw.meters.exclude-all-tags: "false"
  tracegw.tempo.http.api.concurrent.pool: "5"
  tracegw.trace.headers: "x-scope-orgid=orgid"
  tracegw.toperation.url.pattern: "[]"
  tracegw.mode: "poll"
  kafka.sasl: "true"
  quarkus.http.port: "8094"
  quarkus.log.level: "INFO"
  gatewayName: "TRACEGW"
  gatewayKind: "trace"
  kafka.sasl.jaas.config: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
  kafka.security.protocol: "SASL_SSL"
  kafka.sasl.mechanism: "OAUTHBEARER"
  kafka.sasl.login.callback.handler.class: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
  kafka.ssl.verify: "false"
---
# Source: opscruise/charts/k8sgw/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-k8sgw
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
---
# Source: opscruise/charts/kube-state-metrics/templates/1-kube-state-metrics-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
# kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: release-name-kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - ingresses
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["policy"]
  resources:
  - poddisruptionbudgets
  verbs: ["list", "watch"]
- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
  - storageclasses
  - volumeattachments
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling.k8s.io"]
  resources:
  - verticalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  - ingresses
  verbs:
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: promtail
    chart: promtail-2.1.0
    release: release-name
    heritage: Helm
  name: release-name-promtail-clusterrole
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "watch", "list"]
---
# Source: opscruise/charts/prometheus/templates/prometheus-deployment.yaml
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Source: opscruise/charts/k8sgw/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-k8sgw
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-k8sgw
subjects:
- kind: ServiceAccount
  name: k8sgw-service-account
  namespace: default
---
# Source: opscruise/charts/kube-state-metrics/templates/3-kube-state-metrics-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: default
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-promtail-clusterrolebinding
  labels:
    app: promtail
    chart: promtail-2.1.0
    release: release-name
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-promtail
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-promtail-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: opscruise/charts/prometheus/templates/prometheus-deployment.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: "default"
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    heritage: Helm
    release: release-name
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-promtail
  namespace: default
  labels:
    app: promtail
    chart: promtail-2.1.0
    heritage: Helm
    release: release-name
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-loki
subjects:
- kind: ServiceAccount
  name: release-name-loki
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-promtail
  namespace: default
  labels:
    app: promtail
    chart: promtail-2.1.0
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-promtail
subjects:
- kind: ServiceAccount
  name: release-name-promtail
---
# Source: opscruise/charts/k8sgw/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: k8sgw-service
  namespace: default
  labels:
    opscruisePerimeter: opscruise
    opscruiseGroup: gateways
    opscruiseProduct: k8sGW
    opscruiseStream: opscruise
spec:
  selector:
    app: k8sgw

  ports:
    - protocol: TCP
      port: 8586
      targetPort: 8080
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-loki-headless
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    release: release-name
    heritage: Helm
    variant: headless
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: release-name
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: release-name
---
# Source: opscruise/charts/promgw/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: promgw-service
  namespace: default
  labels:
    opscruisePerimeter: opscruise
    opscruiseGroup: gateways
    opscruiseProduct: promGW
    opscruiseStream: opscruise
spec:
  selector:
    app: promgw

  ports:
    - protocol: TCP
      port: 8585
      targetPort: 8080
---
# Source: opscruise/charts/tracegw/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tracegw-service
  namespace: default
  labels:
    opscruiseGroup: gateways
    opscruiseProduct: tracegw-service
    opscruiseStream: opscruise
spec:
  selector:
    app: tracegw
  ports:
    - port: 8000
      targetPort: 9000
      protocol: TCP
      name: grpc
---
# Source: opscruise/charts/loki-stack/charts/promtail/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-promtail
  namespace: default
  labels:
    app: promtail
    chart: promtail-2.1.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  selector:
    matchLabels:
      app: promtail
      release: release-name
  updateStrategy:
    {}
  template:
    metadata:
      labels:
        app: promtail
        release: release-name
      annotations:
        checksum/config: 434510fbc25f01430c2c1941b908b431746d53c7160574ae45d293f4653e6ffa
        opscruise.prometheus/path: /metrics
        opscruise.prometheus/port: "3101"
        opscruise.prometheus/scheme: http
        opscruise.prometheus/scrape: "true"
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-promtail
      containers:
        - name: promtail
          image: "grafana/promtail:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/promtail/promtail.yaml"
            - "-client.url=http://release-name-loki:3100/loki/api/v1/push"
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - name: run
              mountPath: /run/promtail
            - mountPath: /var/lib/docker/containers
              name: docker
              readOnly: true
            - mountPath: /var/log/pods
              name: pods
              readOnly: true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 3101
              name: http-metrics
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsUser: 0
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: release-name-promtail
        - name: run
          hostPath:
            path: /run/promtail
        - hostPath:
            path: /var/lib/docker/containers
          name: docker
        - hostPath:
            path: /var/log/pods
          name: pods
---
# Source: opscruise/charts/opscruise-node-exporter-new/templates/node-exporter.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: oc-node-exporter-core
  namespace: default
  labels:
    chart: "opscruise-node-exporter-new-0.1.0"
    opscruise-chart-version: NOT_DEFINED
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: opscruise-node-exporter
    kubernetes.io/cluster-service: "true"
    version: v0.15.2
spec:
  selector:
    matchLabels:
      k8s-app: opscruise-node-exporter
      version: v0.15.2
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: opscruise-node-exporter
        opscruiseGroup: exporters
        opscruisePerimeter: opscruise
        opscruiseProduct: NodeExporter
        opscruiseStream: opscruise
        version: v0.15.2
      annotations:
        opscruise.prometheus/path: /metrics
        opscruise.prometheus/port: "9100"
        opscruise.prometheus/scheme: http
        opscruise.prometheus/scrape: "true"
        checksum/env-config: f33e9bec253a3ff312949363f1a3b1206ccb5c3aa6438d7f2a019c464430d8af
    spec:
      serviceAccountName: ne-service-account
      containers:
        -
          args:
            - "--log.level info"
            - "--path.procfs=/host/proc"
            - "--path.sysfs=/host/sys"
            - "--web.max-requests=1"
            - "--collector.conntrackext.forward-and-reverse-path-packets"
            - "--collector.ocflowbpfcollector.enable-all-metrics"
            - "--web.listen-address=:9100"
            - "--collector.ocflowbpfcollector.interface ^ens|^cali|^eth|^veth|^eni"
            - "--collector.ocflowbpfcollector.k8sgw-event-config-iplist-url http://k8sgw-service.opscruise.svc.cluster.local:8586/collect-event-config-iplist"
            - "--collector.ocflowbpfcollector.k8sgw-all-config-iplist-url http://k8sgw-service.opscruise.svc.cluster.local:8586/collect-all-config-iplist"
            - "--no-collector.rapl"
            - "--no-collector.pressure"
            - "--no-collector.ocprocessevent"
            - "--no-collector.ipvs_extended"
            - "--no-collector.ipvs"
            - "--no-collector.xfs"
            - "--no-collector.powersupplyclass"
            - "--no-collector.netstat"
            - "--no-collector.thermal_zone"
            - "--no-collector.entropy"
            - "--no-collector.schedstat"
            - "--no-collector.sockstat"
            - "--no-collector.softnet"
            - "--no-collector.timex"
            - "--no-collector.ocflowbpfcollector.drop-summary-metric-for-single-url"
          image: "registry.connect.redhat.com/opscruise/opscruise-node-exporter:rel35.2.1"
          imagePullPolicy: IfNotPresent
          name: prometheus-node-exporter-new
          ports:
            -
              containerPort: 9100
              hostPort: 9100
              name: metrics
          resources:
            limits:
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 300Mi
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_ADMIN
            privileged: true
          volumeMounts:
            -
              mountPath: /host/etc/os-release
              name: os-release
            -
              mountPath: /host/var
              name: var
            -
              mountPath: /host/dev
              name: dev
            -
              mountPath: /host/proc
              name: proc
            -
              mountPath: /host/sys
              name: sys
            -
              mountPath: /rootfs
              name: rootfs
            -
              mountPath: /lib/modules
              name: lib-modules
            -
              mountPath: /boot
              name: boot
            - 
              name: opsc-ne-configmap-volume
              mountPath: /var/opscruise/configmap
            -
              name: sys-kernel-debug
              mountPath: /sys/kernel/debug
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      imagePullSecrets:
        -
          name: 15962631-oc-test-pull-secret
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
        -
          hostPath:
            path: /sys/kernel/debug
          name: sys-kernel-debug
        -
          hostPath:
            path: /etc/os-release
          name: os-release
        -
          hostPath:
            path: /var
          name: var
        -
          hostPath:
            path: /proc
          name: proc
        -
          hostPath:
            path: /dev
          name: dev
        -
          hostPath:
            path: /sys
          name: sys
        -
          hostPath:
            path: /
          name: rootfs
        -
          hostPath:
            path: /lib/modules
          name: lib-modules
        -
          hostPath:
            path: /boot
          name: boot
        -
          name: opsc-ne-configmap-volume
          configMap:
            name: opsc-ne-configmap
---
# Source: opscruise/charts/awsgw/templates/deployment.yaml
# with is to keep the global scope, so that can be access fields by . itself
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-awsgw-us-east-1
  namespace: default
  labels:
    chart: "awsgw-0.1.0"
    opscruise-chart-version: NOT_DEFINED
    app: awsgw
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awsgw
  template:
    metadata:
      labels:
        app: awsgw
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: awsGW
        opscruiseStream: opscruise
      annotations:
        checksum/config: 4bafa82563ed6483abe5a94ce8b29302f3c95dc374a19e5ccabef9947daaea3e
    spec:
      serviceAccountName: awsgw-service-account
      containers:
        - name: awsgw
          image: "registry.connect.redhat.com/opscruise/opscruise-awsgw:rel35.2.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: LOGLEVEL
              value: "info"
            - name: AWS_REGION
              value: us-east-1
          envFrom:
            - secretRef:
                name: oc-gw-creds
            - secretRef:
                name: oc-aws-credential
            
          volumeMounts:
            - mountPath: /var/opscruise/certs
              name: awsgw-certs-volume
            - mountPath: /var/opscruise/configmap
              name: awsgw-config-volume
          
          resources:
            limits:
              cpu: 500m
              memory: 250Mi
            requests:
              cpu: 200m
              memory: 50Mi

      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret

      volumes:
        - name: awsgw-certs-volume
          secret:
            secretName: oc-gw-certs
        - configMap:
            name: awsgw-configmap
          name: awsgw-config-volume

      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/gcpgw/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-gcpgw
  namespace: default
  labels:
    app: gcpgw
    chart: "gcpgw-0.1.0"
    opscruise-chart-version: NOT_DEFINED
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gcpgw
  template:
    metadata:
      labels:
        app: gcpgw
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: gcpgw
        opscruiseStream: opscruise
      annotations:
        checksum/env-config: 30c540090c066f34bf8e00519fa4fde9d8b746d2616458d900a89fc5bcd1d7d1
        checksum/gw-config: bb06e35d3e106507d777d3ae7595da319d7b42ef0d64d5f4b7d8ffe13d383f4a
    spec:
      serviceAccountName: gcpgw-service-account
      containers:
        - name: gcpgw
          image: "registry.connect.redhat.com/opscruise/opscruise-gcpgw:rel35.2.1"
          volumeMounts:
            - mountPath: /opt/opscruise/configs/GcpGatewayConfig.json
              name: gcpgw-config
              subPath: GcpGatewayConfig.json
            - mountPath: /etc/ssl/certs/gcpgw-cert.pem
              name: gcpgw-cert
              subPath: gcpgw-cert.pem
            - mountPath: /opt/opscruise/configs/gcp-creds.json
              name: gcp-creds
              subPath: gcp-creds.json
          envFrom:
            - configMapRef:
                name: gcpgw-env-config
            - secretRef:
                name: jgateway-secret
            - secretRef:
                name: gcp-creds
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret
      volumes:
          - configMap:
              name: gcpgw-config
            name: gcpgw-config
          - name: gcpgw-cert
            secret:
              secretName: oc-gw-certs
          - name: gcp-creds
            secret:
              secretName: gcp-creds
      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/k8sgw/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-k8sgw
  namespace: default
  labels:
    chart: "k8sgw-0.1.0"
    opscruise-chart-version: NOT_DEFINED
    app: k8sgw
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8sgw
  template:
    metadata:
      labels:
        app: k8sgw
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: k8sGW
        opscruiseStream: opscruise
      annotations:
        checksum/env-config: 8845f297f590125da9ca4df804c39ad06a34b1b0e454aae9a13bc521cad40062

    spec:
      serviceAccountName: k8sgw-service-account
      containers:
        - name: k8sgw
          image: "registry.connect.redhat.com/opscruise/opscruise-k8sgw:rel35.2.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: LOGLEVEL
              value: "info"
          envFrom:
            - secretRef:
                name: oc-gw-creds
          volumeMounts:
            - mountPath: /var/opscruise/certs
              name: k8s-certs-volume
            - mountPath: /var/opscruise/configmap
              name: k8sgw-config-volume
          resources:
            limits:
              cpu: 500m
              memory: 2000Mi
            requests:
              cpu: 200m
              memory: 200Mi
      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret
      volumes:
        - name: k8s-certs-volume
          secret:
            secretName: oc-gw-certs
        - configMap:
            name: k8sgw-configmap
          name: k8sgw-config-volume

      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/kube-state-metrics/templates/4-kube-state-metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: kube-state-metrics
    chart: "kube-state-metrics-0.1.0"
    opscruise-chart-version: NOT_DEFINED
  name: release-name-kube-state-metrics
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kube-state-metrics
  template:
    metadata:
      labels:
        k8s-app: kube-state-metrics
        opscruiseGroup: exporters
        opscruisePerimeter: opscruise
        opscruiseProduct: KSM
        opscruiseStream: opscruise
    spec:
      containers:
        -
          image: "quay.io/coreos/kube-state-metrics:v2.0.0-rc.0"
          name: kube-state-metrics
          ports:
            -
              containerPort: 8080
              name: http-metrics
            -
              containerPort: 8081
              name: telemetry
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 300m
              memory: 250Mi
            requests:
              cpu: 100m
              memory: 30Mi
          
      serviceAccountName: kube-state-metrics
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/loggw-loki/templates/loggw-loki.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-loggw-loki
  namespace: default
  labels:
    app: loggw-loki
    chart: "loggw-loki-0.1.0"
    opscruise-chart-version: NOT_DEFINED
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loggw-loki
  template:
    metadata:
      labels:
        app: loggw-loki
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: loggw-loki
        opscruiseStream: opscruise
      annotations:
        checksum/env-config: 8641e74dd233facf0bac43f0273cfaea59632696f04702e7d0550d1f22e2e484
        checksum/parser-config: 1d4ab83de8fa91cd3acb1d037abd736e4c4eee1fc4cc7bfe9627cbc852916b43
    spec:
      serviceAccountName: loggw-service-account
      containers:
        - name: loggw-loki
          image: "registry.connect.redhat.com/opscruise/opscruise-loggw:rel35.2.1"
          volumeMounts:
            - name: loggw-loki-parser-config
              mountPath: /opt/opscruise/cache/parser-config.json
              subPath: parser-config.json
            - name: loggw-loki-cert
              mountPath: /etc/ssl/certs/loggw-cert.pem
              subPath: loggw-cert.pem
          envFrom:
            - configMapRef:
                name: loggw-loki-env-config
            - secretRef:
                name: jgateway-secret
          resources:
          
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 256Mi
      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret
      volumes:
        - name: loggw-loki-parser-config
          configMap:
            name: loggw-loki-parser-config
        - name: loggw-loki-cert
          secret:
            secretName: oc-gw-certs

      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/prometheus/templates/prometheus-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
  labels:
    chart: "prometheus-0.1.0"
    opscruise-chart-version: NOT_DEFINED
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      annotations:
        checksum/config: 3f1d46aa12675d4a1a609335d8bebcc332d4f0cc6f58234a0ab6efaf7e7293d8
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-service-account
      containers:
      - name: prometheus
        image: "prom/prometheus:v2.36.2"
        args:
          - "--log.level=info"
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--web.listen-address=0.0.0.0:9090"
          - "--storage.tsdb.retention.time=2h"
          - "--storage.tsdb.retention.size=5GB"

        ports:
        - name: web
          containerPort: 9090

        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30

        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30

        resources:
          limits:
            memory: 5Gi
          requests:
            cpu: 200m
            memory: 1000Mi

        volumeMounts:
          - mountPath: /etc/prometheus
            name: config-volume

      terminationGracePeriodSeconds: 300

      volumes:
        - configMap:
            name: prometheus-configmap
          name: config-volume

      restartPolicy: "Always"
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/promgw/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-promgw
  namespace: default
  labels:
    chart: "promgw-0.1.0"
    opscruise-chart-version: NOT_DEFINED
    app: promgw
spec:
  replicas: 1
  selector:
    matchLabels:
      app: promgw
  template:
    metadata:
      labels:
        app: promgw
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: promGW
        opscruiseStream: opscruise
      annotations:
        checksum/env-config: cebdae02e8ec4e8021b82c55a1d4a1b00505e1883bab4513492f22c865ac9d07
    spec:
      serviceAccountName: promgw-service-account
      containers:
      - name: promgw
        image: "registry.connect.redhat.com/opscruise/opscruise-promgw:rel35.2.1"
        imagePullPolicy: IfNotPresent
        env:
          - name: LOGLEVEL
            value: info
        envFrom:
          - secretRef:
              name: oc-gw-creds

        ports:
        - containerPort: 8080

        volumeMounts:
          - mountPath: /var/opscruise/certs
            name: promgw-certs-volume
          - mountPath: /var/opscruise/configmap
            name: promgw-config-volume

        resources:
            limits:
              cpu: 500m
              memory: 300Mi
            requests:
              cpu: 200m
              memory: 50Mi

      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret

      volumes:
        - name: promgw-certs-volume
          secret:
            secretName: oc-gw-certs
        - configMap:
            name: promgw-configmap
          name: promgw-config-volume

      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/tracegw/templates/tracegw.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-tracegw
  namespace: default
  labels:
    app: tracegw
    chart: "tracegw-0.1.0"
    opscruise-chart-version: NOT_DEFINED
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tracegw
  template:
    metadata:
      labels:
        app: tracegw
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: tracegw
        opscruiseStream: opscruise
      annotations:
        checksum/env-config: 781047672c5afad04fad9f9f3ed218c2743d803e7dc8308a60815c389f2d3b78
    spec:
      serviceAccountName: tracegw-service-account
      containers:
        - name: tracegw
          image: "registry.connect.redhat.com/opscruise/opscruise-tracegw:rel35.2.1"
          volumeMounts:
            - mountPath: /etc/ssl/certs/tracegw-cert.pem
              name: tracegw-cert
              subPath: tracegw-cert.pem
          envFrom:
            - configMapRef:
                name: tracegw-env-config
            - secretRef:
                name: jgateway-secret
          resources:
            limits:
              cpu: 500m
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 128Mi
      imagePullSecrets:
        - name: 15962631-oc-test-pull-secret
      volumes:
          - name: tracegw-cert
            secret:
              secretName: oc-gw-certs
      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        key: opscruise
        operator: Exists
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: monitoring
                operator: In
                values:
                - "true"
            weight: 1
---
# Source: opscruise/charts/loki-stack/charts/loki/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-loki
  namespace: default
  labels:
    app: loki
    chart: loki-2.2.0
    release: release-name
    heritage: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: loki
      release: release-name
  serviceName: release-name-loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        name: loki
        release: release-name
      annotations:
        checksum/config: 85a4b3ba04ebd4f6af9eaf65a9b407f9ba437dc306abcb14b0d2e7794ef2466e
        opscruise.prometheus/path: /metrics
        opscruise.prometheus/port: "3100"
        opscruise.prometheus/scheme: http
        opscruise.prometheus/scrape: "true"
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: release-name-loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        []
      containers:
        - name: loki
          image: "grafana/loki:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/loki
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 300m
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: config
          secret:
            secretName: release-name-loki
        - name: storage
          emptyDir: {}
---
# Source: opscruise/charts/prometheus/templates/prometheus-deployment.yaml
---
---
# Source: opscruise/charts/loki-stack/templates/tests/loki-test-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: loki-stack
    chart: loki-stack-2.3.0
    release: release-name
    heritage: Helm
  name: release-name-loki-stack-test
spec:
  containers:
  - name: test
    image: bats/bats:v1.1.0
    args:
    - /var/lib/loki/test.sh
    env:
    - name: LOKI_SERVICE
      value: release-name-loki
    - name: LOKI_PORT
      value: "3100"
    volumeMounts:
    - name: tests
      mountPath: /var/lib/loki
  restartPolicy: Never
  volumes:
  - name: tests
    configMap:
      name: release-name-loki-stack-test
---
# Source: opscruise/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  containers:
  - image: busybox
    command:
      - sleep
      - "5"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Never
