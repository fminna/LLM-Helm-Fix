---
# Source: helm-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orkestra
  labels:
    helm.sh/chart: helm-controller-0.1.1
    app.kubernetes.io/name: helm-controller
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.9.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: helm-controller/templates/cluster_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reconciler-role
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ['*']
  - nonResourceURLs: ['*']
    verbs: ['*']
---
# Source: helm-controller/templates/helmrelease_editor_role.yaml
# permissions for end users to edit helmreleases.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: helmrelease-editor-role
rules:
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases/status
  verbs:
  - get
---
# Source: helm-controller/templates/helmrelease_viewer_role.yaml
# permissions for end users to view helmreleases.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: helmrelease-viewer-role
rules:
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases/status
  verbs:
  - get
---
# Source: helm-controller/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manager-role
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases/finalizers
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - source.toolkit.fluxcd.io
  resources:
  - helmcharts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - source.toolkit.fluxcd.io
  resources:
  - helmcharts/status
  verbs:
  - get
---
# Source: helm-controller/templates/cluster_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: reconciler-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: reconciler-role
subjects:
- kind: ServiceAccount
  name: orkestra 
  namespace: default
---
# Source: helm-controller/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: orkestra 
  namespace: default
---
# Source: helm-controller/templates/leader_election_role.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: helm-controller/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: orkestra 
  namespace: default
---
# Source: helm-controller/charts/source-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-source-controller
  labels:
    helm.sh/chart: source-controller-0.1.0
    app.kubernetes.io/name: source-controller
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: source-controller
    app.kubernetes.io/instance: release-name
---
# Source: helm-controller/charts/source-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-source-controller
  labels:
    helm.sh/chart: source-controller-0.1.0
    app.kubernetes.io/name: source-controller
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: source-controller
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: source-controller
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: orkestra
      containers:
      - name: manager 
        image: "fluxcd/source-controller:v0.10.0"
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        args:
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        - --storage-path=/data
        - --storage-adv-addr=release-name-source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        ports:
        - containerPort: 9090
          name: http
        - containerPort: 8080
          name: http-prom
        - containerPort: 9440
          name: healthz
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /tmp
          name: tmp
      securityContext:
        fsGroup: 1337
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: data
      - emptyDir: {}
        name: tmp
---
# Source: helm-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-helm-controller
  labels:
    helm.sh/chart: helm-controller-0.1.1
    app.kubernetes.io/name: helm-controller
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: helm-controller
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: helm-controller
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: orkestra
      terminationGracePeriodSeconds: 600
      containers:
      - name: manager 
        # image: fluxcd/helm-controller 
        image: "fluxcd/helm-controller:v0.9.0"
        imagePullPolicy: Always
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          # allowPrivilegeEscalation: false
          # readOnlyRootFilesystem: true
        ports:
          - containerPort: 8080
            name: http-prom
          - containerPort: 9440
            name: healthz
            protocol: TCP
        env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        args:
          - --concurrent=10
          - --watch-all-namespaces
          - --log-level=debug
          - --log-encoding=json
          - --enable-leader-election
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
          - name: temp
            mountPath: /tmp
      volumes:
        - name: temp
          emptyDir: {}
