---
# Source: authorization-component/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: "SXZLeGlMWGk5eQ=="
  postgresql-password: "IUNoYW5nZU1lIQ=="
---
# Source: authorization-component/templates/dependencies-secret.yaml
apiVersion: v1
kind: Secret
metadata:
    name: release-name-authorization-component-dependencies
    labels:
        app.kubernetes.io/name: release-name
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
stringData:
    dependencies.yaml: |
        parameters:
---
# Source: authorization-component/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
    name: release-name-authorization-component
    labels:
        app.kubernetes.io/name: release-name
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
    database-url: "cGdzcWw6Ly9leGFtcGxlOiFDaGFuZ2VNZSFAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWwvYXBpP3NlcnZlclZlcnNpb249MTA="
  
    app_application_key: "MGExNzk0NTUtODRmZS00ZDdkLWEzMjItYmU0MTQ2MTNkNDEy"

    app_commonground_secret_key: "ZXlKaGJHY2lPaUpTVXpVeE1pSXNJblZ6WlNJNkluTnBaeUlzSW10MGVTSTZJbEpUUVNJc0ltNGlPaUp0V2xWUU5FTlFRMWxJU0dkeE9VczRZMU5QZGpsYVVVTkViMnRPVVdWdVlrdzJObHBwT0VGNVZGWlllRjlKT1hWNE5FWlZNbnAxT0dZMmFsTk5lVGhNWlRaMVdrMUZkR0pJTkRkalpXWkhlRE0xYWxCQ1ZHRlFaMFl0YUZJM1JXdEJRMDA0TWtablUwUkdTQzEzVnpaSVVVRjFUREZ0ZERKcFgzQjBhWGx1TmxGMmR5MTVXR1prTW5JekxVdEdOVkptY25sa1NFMXZOazl5VFRjME4ybzFVSFZaYjNaNWVEUnJRbW8wV1V4R2RERTVlbWhuV2tKVWRuWTBlSGROWkVGVGVHdG9SRWhxWlc1aUxXOU1jMUpxTVZKc1RHZE1kSEJoTmt4M1QzZzJOVFZvTFRkTGJWVkZPQzFtUTNCbFlWRklhVlZmT1daSFpFaHdTRVZ5VlhKRFlYWnpVMUp6ZVZkU1ZXNU9UR0ZvY0dSdk9YbDNOMmN6U2pSb1pXeHRSRlpKU1ZvMVJsZGhaMWxOWXkxRVgyYzFWa1JHUWpONGFsZEpWVzEzVFhCNk5UTXpja1ZQTTBkYVR6bGFkMXBpY0hJdFdWaHpWMU5tV0VWYU9FWmlZalpQUTE5U2RtTktWMmQ0V2w4eFJDMVJjVlZqTUhCRVUzUmxTekJOU0RKU1NEVllhRFJuUlZwUVZUQk9PRFJEUVd0NldsRklVbXRRWmpacU1GUmZUVXh6U20wMFVITkhURFEzT0daclkxOVlhVmRTVVdkSk9VODJjVFJXUkhWWGEyUnJUMUY1VTBzelRqTlljbTQzVEV0bFVtNU1XR1ZMYkZkSVRGOWhkbTFqWlhJeGVrbG9ibTV3WTJWT1NFbHZYekJoVGxONVpYTTNhRTlPVFdkalkzZzBkbXR1TjBKTVNVcFJMVWhzUW1GM2JrdFpkbWwzYzNSdlUzZFlNa2w2V25GSmVrVnBRMjVVWkVJemJuTTRiek0yYzBnemFHb3RhV1Z4WjJ0cWJuUkpZMmh1Tm5BdGMzWjBXVFJEYlRGT2IyaDFkSEZIWldacldXeGlUamN0UmxONVVWUk9TMEpwYUhkMGJrZEJUemRDZWkwME1HeFJaVjlNZVdjNVRtTnNOM0pJT0ZObGMzUnhWVzVCUXpZd2EyRlFVMDFLVEZWWU5VVXRhblpxT0hGaFVFeHVRak5aZFROeVowSk9WU0lzSW1VaU9pSkJVVUZDSWl3aVpDSTZJbTFMWkMxUFUyRjVSRTVWUlVsVFZqbEpkVkEzUVZKclZteHJZMHBuTW5WcU4zUm5XVlJNTVVWQmJsTmlOalZNVWpWTlIySnBOMGh5YjJWUk1qQnhUVjlSWWxOR2RHMW5aMk5rVXpWT2QyaFRObVJJYTJFdFZWbGhPWGRvTTJKWGJqa3RPRTlwYldVemQwMUZOMlpDTmxac2MxbHFVRFJTWms0M1JUWmpkVzVPYkVGc1VHa3daREp1WDJKaVEyeHlPVzVCUWpCR1pYRTBVME5LYUUwdE9XMDFkWE13YzNocVRESlZZa2xyY1hWd1dqZGtiaTFxVm5ZeVJtRnVUVEYxV21Zd2RrSXRjbWxzV2xwNllqSlhhR2hhY1RSWGVYbFVPVWQyZWtFeFlrdHllWEF6Wkd4eU1FVlhSRGhVZWxoNlNEUlFOMkptVjFkcU5qTXRkVkY1VldNMkxVMVZYMjlTWVVaU1RGQlBNRTgzVjBKdmNsVXphbTFqV1daMGNFbEZjRTV2VVZSR1NDMUhhRGgwYVRFNVN6bG5VRGRaTXpWNU4wMXBhMmhXY0RKTVJFZFFiR0Z6VWpKTVgwUnpiRmRFWmpsQmRqSndYMnh3WlZGT2QyaHROVzU0UzFKMmJUTTJiekU0Y1RZNGNIbG5ZMDVtVEVGeU5WSm1kMHBpZVhoUWNXODBURkp3UzAxWlNXVkZhMU5DZVRWSVUwRTFWMjk0YUY4NGVVWklibXBtYmpORE0zSnZXRVV0ZVZwVk9UQjFaRzEzY3pkSE9ETm1MVFJIWVdaRWVXdGZZbXBEWTFCSk1IcEpNa1JpZUdFM1RXRndSbDlaZFZZeGNrTm1OMmhYU3pGSWF6VnlNME5DUlhOTWFIbElSSGRaUjFWTWVtSmlaMFkxZWkxblgyOUplVTVIWm1oTU9FRjZOV2xEUVd4T1dHOXBaVzlLVVVGMU4zTlVlRkl0Wlhwc1gwbFJVRzFOUlc1RkxVdGZhRVI2UlhOdVdtODRPWFJwV25WaVkxaGhWRkp2ZDFGc2RtVktOMng2Vm5Wd2RIUldTM3BzYlhOV05ISk5hWEp5T0cxelIwaFVXR2x6WmpCbFkxRjNRM1UzZFdoNE0xTnFhVlp0WTNoWmFEQlhaVWRYUVU4elptbFNOaTEwTURoeVFtNXNXWHB5WW5GNFkzbzFPVlF3ZFdaNVZqWlViVFpET1Y5dU5GQXdJaXdpY0NJNklubExSWEZxZEZnMlNqRmtXRFUxU2tKVVptNXBabFJaUkhsWGEwRlJSV3hQTWtKellUbEJXakJHWlVoRVlWcHdaWEpoYkhaUFNFdHlPSHBRVEV4aExVMUROMHM1TldWNFlVNDVhbmhaV25GemVWQjFSREZLVDNkVVIxZEpRVXBRZFZKcVR6bDNiVlZtWkdkc1ozUjFhVEpFVlU1b1psSkdNVFJuV0hwME5teERUbkpxVFhwTVJWVlpUVTFwWWpOdVlVUkROMGh0Y2xBMVRYTTFkVXhVZDB4WVZYUlNVa3BNV1VsdGFFSkNOMnhKVWpob2JXRTVWbVp5VTBZdFQySlNkWEJtWjFnME5rTkpkM2N5Y1VjMFowdHJjR1pqY1hWcVJ6RXlXQzFFVTBVNVgyODVPR055YlhaMmRHUnNiM1ZQVkhOQ1N6VXhUWGM1ZDNRNWQxSkhUVTlYT0c1dFRUQXpka3RsVVZNeUxXZDNZekphUlU1b2JuRlhNWGxxVlRWcFdXWkNTbUp6WkdoS1kyMU1ia2xMUTNJM1YwTnpUbkJKZDNkdFozZHhTbEJ3V21sdGNuZFFUWGxpY1djeFprb3hhVFZOYjJSM2R5SXNJbkVpT2lKM1gyWnpRVTlXVTFaMmNHbzRVVFJIZEdOc09FVlRVV3QzUkZkUFluQlJiRXBLVUV0cGIwSnJaMHRPYlMwd1IzWm5SRUpEVFY5clVtNW9aR053UjB4bFRtTXROVFZHVDBkV1NIQXRkbEZVWDNwUGNYYzNhMW95WVdvMlZuVmZNWFZHZUUxRmMxWlFjblZUT1ZNd1QxWjRVSGxZTnpOdU1FbGxiazlEVmxKYVQwWlpOamR5UW1sc1FVUkdUbmR4ZVdwU09XTkhUMVZ4U1d4TmNHNURkV2M0ZEVSeExVNVBUV1pKYVVjNFNIcEZSbFZvU2xaQkxYcEtURU0wYURGUVRHSkNiakZaTm05dFp6azJWa1JwVFhOTk0yWXhNbEZPV1c5R1ltaHZRVlF0TnpOd1lYbHZTMVprTTB4blExUkZXSFl3ZFdGRk5FRlhSMWwxYTJZMVlXRnNjWHBwY0c0d1YwWkNkWFp0UmtSelUydGFaRkJWTm1sTGNIVkxSVVZ1WVZKMFkyRmtUelUyZEdJNU9Ib3ROMnRRTUhFeU0zQnlhelpVUmtJd1dEZE1TRzA1TjNJMmNHaHhNV0o0VFhaTFVtVkNOR2Q0YUhjaUxDSmtjQ0k2SW10QlVrRjZSeTFHVG1sQ1dXeFlOVVJMYm05d2RuSXROMVZEVkhwaVZFbDVVM0ZoUzFodmExUlpNMGhCUjBadlltaEpWMUIwVUVZM2VGRlNNRFJOUzFkM1VEYzFiV05hYW5KS2MzRkRiWEJDYUdKUmJVZGlORFpYTVhreWJEbFBXWGQzVURWUU1GaG1ielZrZG5WV2VYRTRha3BuUmt0emJqazJkRmRITkhsQldEQXRaMnN6TmpWd1ozWnpMVU5DT0VOVGNUZFdZVE5FVVVack1tUlliMWx1YTNWdFpIQmpRMVo0UTBoUVkyZGxkbTlvTkVoUlpqVjFaMjVGTVdnNVZFaG5hRTFmWWxWTE9YaHJhamx6WkdNM05GaGlabFZRUkVkSVR6WlFhWEZUYldSNlpEbEhlV1ZZTVhVelRsbHZkbEpqUkhKaVNHMUJSRUppWjA5ZlluWkpObmd5Wkc1WFNFeEpZblpyY2xCR2N6bEVRbEJwVXpCUFoycDRjRTU0ZHkxUU9HdHRla1Z4TlRsV1prY3RhVFpCV21aWWFIZFVRbmMwZFZCQmFsQkxOSFU0WlhZd04xUTRUMDFIU1dkSVNVd3pkREpwVVNJc0ltUnhJam9pWjJFNVRuaFJTRGxVV1ZsRFNWbElkM1YwYVU1bVEwbzFSalpJV210cFFVUjJTVXcxV2taTE0wdzVTSGt3YnkxVVpuSmtkeTFGWmpWbGNUbHVTbGh2ZDBveGFFTlpia1pNTUdoblIxTjZlRVp6TFhkVlJHNXpaVE5uZUhkMGNXeDBPREpOYjJ4a2F6bG5OVEZ1Y0hOd1VDMVZVVjkxTFhKMVl6SnhRbU0yUjBKS2R6ZGZOekZIV0hvNWNsRTFUMWQxV1Vad1VubG9VV2s0Y1ZKSVRVcGhhbkJZYmtOaFpXeHljbmRETkVvNFVXWkRNRTFMWXpoQ09VZFFiVzFrWmtGS1RtWkJOWEZYZUU4d09WQlJURE5UUVVoWFFXZHZOazlXWmpGdk4zRmhablIzWXpOcmFFSTRjbFZIWlU1VVkwSjVhSGhVTmtabE5WTkZjRGRJT1hkbmFsWnVNekk0Ylc1c1RVMUdibnA2WlZGblJIbHllVWRqWlRadVZ6Um9VMlJ0U1dVNVFVZHFXbFpmUmxOMllVRlFMVVJ4VUdKb2VsOUpOM0oyU0ZvMVZTMU9NRFU0ZGxKRlJXdHNSVGhVZUVwUVJEVnFNMlpSSWl3aWNXa2lPaUpuYTBkNmRGaExVazVMYTI0dGJsVjJWa1pJUTJkQ1R6ZDBhelI1TWpSVlZYVlphR1pUZUMxQlluTndNaTFIWWxwTWVVOTZTa2h0UmpGMlZXbHZOM1ZmT1hneE9UWmpaa0pMTlZSTGRuZ3lOSFZ3TUhWckxYVkZlazQ0U0dScGJESkhha1ZEWlVkd1lYaFliSFI2YzJvd1IzVlZPRE5QVlVsU2JqQnNSVE4xUkdZemFUQm1hV0pUZFVOdE1sbExOMlpWY0VwU1FTMTBlRFZGTTFWMVZVdzBZazVXY1RjNFpIaE5SbE5IYkdOaVowSklaRkZuWVU1YVZHMXlaalp3Wms1RE0xcEVWUzFPUkRkNE1UTjNabHBxYXpsVk5EbFJaRGd6YXpkVVRraHFiMEk1ZHpCNk1YYzRiRVpvWVRoMlMxTXdkbVpwTWtsNWMydHZTREZGY2pjemF6ZGxVbXhQYUdWRk5UQlZXbHBVZEU1cWJYUnNkSGRGYTJVeVRHeGhURlZJZUZjNVZHNVpXSE0wTTJzMldXbDBTa2h3TFZBeWJrWlNNR3cwZGxaWVUweDFiemRCZDNWVGFGWjJiR0ZVWlZVNU9XRjBVa0VpZlE9PQ=="
---
# Source: authorization-component/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: release-name-authorization-component
    #namespace: 
    labels:
        app.kubernetes.io/name: release-name
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
data:
    app-version: "V1.0"
    app-corsAllowOrigin: "[*]"
    cache: "true"
    debug: "0"
    trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
    trusted-hosts: "^.+$"
    php-service: release-name-php
    url: "https://.local/"
---
# Source: authorization-component/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: authorization-component/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: authorization-component/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: release-name
    labels:
        app.kubernetes.io/name: release-name
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
spec:
    type: NodePort
    ports:
        - port: 80
          targetPort: 80
          protocol: TCP
          name: http
        - port: 443
          targetPort: 80
          protocol: TCP
          name: https
    selector:
        app.kubernetes.io/name: release-name-nginx
        app.kubernetes.io/instance: release-name
---
# Source: authorization-component/templates/php-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: release-name-php
    labels:
        app.kubernetes.io/name: release-name-php
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
spec:
    type: ClusterIP
    ports:
        - port: 9000
    selector:
        app.kubernetes.io/name: release-name-php
        app.kubernetes.io/instance: release-name
---
# Source: authorization-component/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: release-name-nginx
    labels:
        app.kubernetes.io/name: release-name-nginx
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
spec:
    selector:
        matchLabels:
            app.kubernetes.io/name: release-name-nginx
    replicas: 2
    template:
        metadata:
            labels:
                app.kubernetes.io/name: release-name-nginx
                app.kubernetes.io/part-of: release-name
                helm.sh/chart: authorization-component-1.0.0
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/managed-by: Helm
        spec:
            containers:
                - name: release-name-nginx
                  image: "ghcr.io/conductionnl/authorization-component-nginx:latest"
                  imagePullPolicy: Always
                  ports:
                      - containerPort: 80
                  env:
                      - name: PHP_SERVICE
                        value: release-name-php
                      - name: NGINX_HOST
                        value: release-name-php
                      - name: BACKENDS
                        value: release-name-php
                  resources:
                      {}
---
# Source: authorization-component/templates/php-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: release-name-php
    labels:
        app.kubernetes.io/name: release-name-php
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: authorization-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
spec:
    selector:
        matchLabels:
            app.kubernetes.io/name: release-name-php
    replicas: 2
    template:
        metadata:
            labels:
                app.kubernetes.io/name: release-name-php
                app.kubernetes.io/part-of: release-name
                helm.sh/chart: authorization-component-1.0.0
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/managed-by: Helm
        spec:
            volumes:
                - name: dependencies
                  secret:
                      secretName: release-name-authorization-component-dependencies
                      defaultMode: 420
            containers:
                - name: release-name-php
                  image: "ghcr.io/conductionnl/authorization-component-php:latest"
                  imagePullPolicy: Always
                  ports:
                      - containerPort: 9000
                  volumeMounts:
                      - mountPath: /srv/api/config/packages/dependencies.yaml
                        subPath: dependencies.yaml
                        name: dependencies
                        readOnly: true
                  env:
                      - name: JWT_SECRET_KEY
                        value: '%kernel.project_dir%/config/jwt/private.pem'
                      - name: JWT_PUBLIC_KEY
                        value: '%kernel.project_dir%/config/jwt/public.pem'
                      - name: JWT_PASSPHRASE
                        value: 'bafe1dc254b45471754c221081f874aa'
                      - name: APP_ENV
                        value: 'prod'
                      - name: TRUSTED_HOSTS
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: trusted-hosts
                      - name: TRUSTED_PROXIES
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: trusted-proxies
                      - name: APP_VERSION
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: app-version
                      - name: APP_DEBUG
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: debug
                      - name: APP_CACHE
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: cache
                      - name: DATABASE_URL
                        valueFrom:
                            secretKeyRef:
                                name: release-name-authorization-component
                                key: database-url
                      - name: CORS_ALLOW_ORIGIN
                        valueFrom:
                            configMapKeyRef:
                                name: release-name-authorization-component
                                key: app-corsAllowOrigin
                      - name: APP_APPLICATION_KEY
                        valueFrom:
                            secretKeyRef:
                                name: release-name-authorization-component
                                key: app_application_key
                    
                      - name: APP_COMMONGROUND_SECRET_KEY
                        valueFrom:
                            secretKeyRef:
                                name: release-name-authorization-component
                                key: app_commonground_secret_key
                      - name: APP_URL
                        valueFrom:
                            configMapKeyRef:
                                key: url
                                name: release-name-authorization-component
                  resources:
                      {}
---
# Source: authorization-component/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.1.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "example"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "api"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
