---
# Source: jira-umbrella/charts/jira/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-jira
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
---
# Source: jira-umbrella/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.17
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "amlyYQ=="
  postgresql-password: "amlyYQ=="
---
# Source: jira-umbrella/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-jira-secrets
  labels:
    helm.sh/chart: jira-umbrella-1.0.1
    app.kubernetes.io/name: jira-umbrella
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-url: "amRiYzpwb3N0Z3Jlc3FsOi8vcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9qaXJh"
  postgresql-username: "amlyYQ=="
  postgresql-password: "amlyYQ=="
  license-key: "QUFBQ0ZnME9EQW9QZU5xTlZFMXY0akFVdk9kWFdOb2JrazFJdDdRZ1JkcVd1RjJxa3FBUUt1M1h3U1FQY0J2c3lIYlNaWC85bWpRSXVqUm9Eems0Zm04OGIyYnNUM2VLb3dsVHlCMmdYbi9vOVljWExycWZKTWh6ZTlmT00xZU1GRXBtWldySWJvRTFxSXFua0lGK0lTdzF2QUxmcUJLY2xRSVFhMWtVb01pakxSQWFhTVlObDhLbllVTGphVHllVVNjc053dFEwWEp1WWJTUGU4NUlDbU5oUXJZQm4vL2hRbFljcWkvTTVFeHJ6Z1JKNWVZREVxbFVRRTZ3cHFWSzEweER3QXo0bHY0bDdublk5WnlHVHJJdG9ENG5vRS8wTVpyU2VMOURmeGRjYmV1MjZhRC9kVStLVGhqUFcxbk5yQkNneG9GL1M2OG8vaHg4OTNBL2VyakM5eGVERDNXVFMvUEtMTzFqMFN3T09hQWVTOXZPK2J3bDdYM3Z6OXFqUElORllWWTNYbkd4SWxsS3BNaTMvbUpiMkVKblZpNTBxbmhSMjlobWN4dkg5aFMwR0hxc3pQa3BUNnp2ZERwaGxPQzdLTWJUT0FybW8yUWNoWGcrbzNiREh5bXcxbVpvc1VWbURhamhoYWhJWlFZS05TcWdIMnRqaXAvRGJuY2x5VHVydS9sYkI0YTNqbDhFQlJJSmFWREd0VkY4VVJxd3lGd2pJMUZhYWlNM2xoWnhiSHlFQWNGRWVwSXdTMnNVMDV1RUJ2ajIyNDVqVzhvYXNqWm1jL0VpNUtzNEY2MFRXV1kwOU8ySEwxM1hpZFNLQ2E1WmJjYkRPTDVCR1ZTUVMrdWtSczJFYUNrVk1xQ056WUpUeTJhTC83MU9UZTJUN2R0QmVVNEFoNUQ4RDNBOVFkdmJjZnlmVml3djJTRjhaMFp2eitKZitwZTYwakF0QWhRK0d6Q0pVN01ZRm15cjliV2NJY2FIeUFCWkJ3SVZBSXd3VVpPbC9xUmRBNHNuVnRZendjQ1NaMU8vWDAycDU="
---
# Source: jira-umbrella/charts/jira/templates/config-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-jira-jvm-config
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    
data:
  additional_jvm_args: >-
    -Datlassian.logging.cloud.enabled=false
    -XX:ActiveProcessorCount=2
  max_heap: 768m
  min_heap: 384m
  reserved_code_cache: 512m
---
# Source: jira-umbrella/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-jira-server-config
  labels:
    helm.sh/chart: jira-umbrella-1.0.1
    app.kubernetes.io/name: jira-umbrella
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
data:
  restore-db.sh: |-
    #! /bin/bash -xe
    until timeout 1 bash -c 'cat < /dev/null > /dev/tcp/release-name-postgresql/5432'; do echo "WAITING: db host release-name-postgresql port 5432"; sleep 1; done
    psql -h release-name-postgresql -p 5432 -U jira -d jira -c 'SELECT 1 FROM cwd_user' && exit 0
    unset PGPASSWORD
---
# Source: jira-umbrella/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-jira-dump-config
  labels:
    helm.sh/chart: jira-umbrella-1.0.1
    app.kubernetes.io/name: jira-umbrella
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
data:
  db.dump: |-
    -- Dumped from database version 11.12
    -- Dumped by pg_dump version 11.12
---
# Source: jira-umbrella/charts/jira/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-jira
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
---
# Source: jira-umbrella/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.17
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: jira-umbrella/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.17
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: jira-umbrella/charts/jira/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-jira
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    
spec:
  replicas: 1
  serviceName: release-name-jira
  selector:
    matchLabels:
      app.kubernetes.io/name: jira
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jira
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-jira
      terminationGracePeriodSeconds: 30
      
      securityContext:
        # This is intended to ensure that the shared-home volume is group-writeable by the GID used by the Jira container.
        # However, this doesn't appear to work for NFS volumes due to a K8s bug: https://github.com/kubernetes/examples/issues/260
        fsGroup: 2001
      
      initContainers:
        # -- Additional initContainer to load initial Jira database.
        # The initial Jira setup was performed in order to connect to a ready Postgresql database
        # After the chart deployment the default user is able immediately to login without init routine
        - name: init-db
          image: docker.io/bitnami/postgresql:11
          imagePullPolicy: IfNotPresent
          resources: {}
          volumeMounts:
            - name: server-config
              mountPath: /tmp/restore-db.sh
              subPath: restore-db.sh
            - name: dump-config
              mountPath: /tmp/db.dump
              subPath: db.dump
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-jira-secrets
                  key: postgresql-password
          args: ['/tmp/restore-db.sh']
        - name: nfs-permission-fixer
          image: alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0 # make sure we run as root so we get the ability to change the volume permissions
          volumeMounts:
            - name: shared-home
              mountPath: "/shared-home"
          command: ["sh", "-c", "(chgrp 2001 /shared-home; chmod g+w /shared-home)"]
      containers:
        - name: jira
          image: "atlassian/jira-software:8.19.0-jdk11"
          imagePullPolicy: IfNotPresent
          env:
            
            - name: ATL_TOMCAT_SCHEME
              value: "https"
            - name: ATL_TOMCAT_SECURE
              value: "true"
            
            
            
            - name: ATL_DB_TYPE
              value: postgres72
            - name: ATL_DB_DRIVER
              value: org.postgresql.Driver
            - name: ATL_JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-jira-secrets
                  key: postgresql-url
            - name: ATL_JDBC_USER
              valueFrom:
                secretKeyRef:
                  name: release-name-jira-secrets
                  key: postgresql-username
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-jira-secrets
                  key: postgresql-password
            
            
            
            
            - name: SET_PERMISSIONS
              value: "true"
            - name: JIRA_SHARED_HOME
              value: "/var/atlassian/application-data/shared-home"
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: release-name-jira-jvm-config
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: release-name-jira-jvm-config
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: release-name-jira-jvm-config
            - name: JVM_RESERVED_CODE_CACHE_SIZE
              valueFrom:
                configMapKeyRef:
                  key: reserved_code_cache
                  name: release-name-jira-jvm-config
            
            - name: JIRA_SETUP_LICENSE
              valueFrom:
                secretKeyRef:
                  name: release-name-jira-secrets
                  key: license-key
            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: ehcache
              containerPort: 40001 
              protocol: TCP 
            - name: ehcacheobject
              containerPort: 40011
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 8080
              path: /status
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          resources:
            requests:
              cpu: "2"
              memory: 2G
          volumeMounts:
            
            - name: local-home
              mountPath: "/var/atlassian/application-data/jira"
            - name: local-home
              mountPath: "/opt/atlassian/jira/logs"
              subPath: "log"
            - name: shared-home
              mountPath: "/var/atlassian/application-data/shared-home"
            
            
            
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "/shutdown-wait.sh"]
        
        
        
      volumes:
        
        
        
        - name: local-home
        
          emptyDir: {}
        - name: shared-home
        
          emptyDir: {}
        # -- Volume with additional dump file for SQL import to the database
        - name: server-config
          configMap:
            name: release-name-jira-server-config
            items:
            - key: restore-db.sh
              path: restore-db.sh
              mode: 0755
        - name: dump-config
          configMap:
            name: release-name-jira-dump-config
            items:
            - key: db.dump
              path: db.dump
---
# Source: jira-umbrella/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.17
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.3.17
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.11.0-debian-10-r62
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "jira"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "jira"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "jira" -d "dbname=jira" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "jira" -d "dbname=jira" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: jira-umbrella/charts/jira/templates/tests/test-application-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-jira-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    
spec:
  containers:
    - name: test
      image: alpine
      imagePullPolicy: IfNotPresent
      env:
        - name: STATUS_URL
          value: "http://release-name-jira:80/status"
      command:
        - /bin/sh
        - -ec
        - |
          apk add -q jq curl
          STATUS=$(curl -s "$STATUS_URL")
          echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
          echo $STATUS | jq -e '.state|test("RUNNING|FIRST_RUN")'
  restartPolicy: Never
---
# Source: jira-umbrella/charts/jira/templates/tests/test-shared-home-permissions.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-jira-shared-home-permissions-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: jira-1.0.0
    app.kubernetes.io/name: jira
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.19.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    
spec:
  containers:
    - name: test
      image: debian:stable-slim
      imagePullPolicy: IfNotPresent
      securityContext:
        # Slightly dodgy; we assume that the UID and GID used by the product images are the same, which in practice they are
        runAsUser: 2001
        runAsGroup: 2001
      volumeMounts:
        - name: shared-home
          mountPath: /shared-home
      command:
        - /bin/sh
        - -ec
        - |
          ls -ld /shared-home
          echo "Creating temporary file in shared home as user $(id -u):$(id -g)"
          touch /shared-home/permissions-test
          ls -l /shared-home/permissions-test
          rm /shared-home/permissions-test
  volumes:
    
    - name: shared-home
    
      emptyDir: {}
  restartPolicy: Never
