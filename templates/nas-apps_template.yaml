---
# Source: nas-apps/templates/jackett.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'jackett'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - name: 'http'
    port: 9117
    protocol: TCP
    targetPort: 9117
    nodePort: 61120
  selector:
    app: 'jackett'
---
# Source: nas-apps/templates/nas-tools.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'nastools'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - name: 'http'
    port: 3000
    protocol: TCP
    targetPort: 3000
    nodePort: 61130
  selector:
    app: 'nastools'
---
# Source: nas-apps/templates/proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'proxy-nginx'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
    nodePort: 61110
  selector:
    app: 'proxy'
---
# Source: nas-apps/templates/qb.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'qbittorrent-http'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - name: 'http'
    port: 61100
    protocol: TCP
    targetPort: 61100
    nodePort: 61100
  selector:
    app: 'qbittorrent'
---
# Source: nas-apps/templates/qb.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'qbittorrent-listen-tcp'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - name: 'listen-tcp'
    port: 61101
    protocol: TCP
    targetPort: 61101
    nodePort: 61101
  selector:
    app: 'qbittorrent'
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: 'qbittorrent-listen-udp'
#  namespace: 'default'
#spec:
#  type: NodePort
#  ports:
#  - name: 'listen-udp'
#    port: 61101
#    protocol: UDP
#    targetPort: 61101
#    nodePort: 61101
#  selector:
#    app: 'qbittorrent'
---
# Source: nas-apps/templates/speedtest.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'st'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 61010
  selector:
    app: 'st'
---
# Source: nas-apps/templates/tm.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'tm'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 61200
  selector:
    app: 'tm'
---
# Source: nas-apps/templates/wetty.yaml
apiVersion: v1
kind: Service
metadata:
  name: 'wetty'
  namespace: 'default'
spec:
  type: NodePort
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
    nodePort: 61020
  selector:
    app: 'wetty'
---
# Source: nas-apps/templates/speedtest.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: 'st'
  name: 'st'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'st'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'st'
    spec:
      containers:
      - name: 'st'
        image: "adolfintel/speedtest:latest"
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
---
# Source: nas-apps/templates/jackett.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'jackett'
  name: 'jackett'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'jackett'
  serviceName: 'jackett'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'jackett'
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: 'jackett'
        image: "linuxserver/jackett:latest"
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: '1000'
        - name: PGID
          value: '1000'
        - name: TZ
          value: 'Asia/Hong_Kong'
        ports:
          - name: 'http'
            containerPort: 9117
            protocol: TCP
        volumeMounts:
        - mountPath: /downloads
          name: 'pvc-nfs-app'
          subPath: 'jackett/downloads'
        - mountPath: /config
          name: 'pvc-nfs-app'
          subPath: 'jackett/config'
      volumes:
      - name: 'pvc-nfs-app'
        persistentVolumeClaim:
          claimName: 'pvc-nfs-app'
---
# Source: nas-apps/templates/nas-tools.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'nastools'
  name: 'nastools'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'nastools'
  serviceName: 'nastools'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'nastools'
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: 'nastools'
        image: "jxxghp/nas-tools:latest"
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: '0'
        - name: PGID
          value: '0'
        - name: UMASK
          value: '0'
        - name: TZ
          value: 'Asia/Hong_Kong'
        - name: NASTOOL_AUTO_UPDATE
          value: 'false'
        ports:
          - name: 'http'
            containerPort: 3000
            protocol: TCP
        volumeMounts:
        - mountPath: /downloads
          name: 'pvc-nfs-app'
          subPath: 'qbittorrent_data'
        - mountPath: /config
          name: 'pvc-nfs-app'
          subPath: 'nas-tools/config'
      volumes:
      - name: 'pvc-nfs-app'
        persistentVolumeClaim:
          claimName: 'pvc-nfs-app'
---
# Source: nas-apps/templates/proxy.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'proxy'
  name: 'proxy'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'proxy'
  serviceName: 'proxy'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'proxy'
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: 'proxy-nginx'
        image: "nginx:latest"
        imagePullPolicy: IfNotPresent
        ports:
          - name: 'http'
            containerPort: 443
            protocol: TCP
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: 'pvc-nfs-app'
          subPath: 'nginx/conf.d'
          readOnly: true
        - mountPath: /etc/nginx/ssl
          name: 'pvc-nfs-app'
          subPath: 'nginx/ssl'
          readOnly: true
        - mountPath: /usr/share/nginx/root
          name: 'pvc-nfs-app'
          subPath: 'nginx/root'
          readOnly: true
      volumes:
      - name: 'pvc-nfs-app'
        persistentVolumeClaim:
          claimName: 'pvc-nfs-app'
---
# Source: nas-apps/templates/qb.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'qbittorrent'
  name: 'qbittorrent'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'qbittorrent'
  serviceName: 'qbittorrent'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'qbittorrent'
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: 'test-init'
        image: busybox:stable
        command:
          - "/bin/sh"
        args:
          - "-c"
          - "touch /downloads/test && exit 0 || exit 1"
        volumeMounts:
        - mountPath: /downloads
          name: 'pvc-nfs-app'
          subPath: 'qbittorrent_data'
      containers:
      - name: 'qbittorrent'
        image: "linuxserver/qbittorrent:latest"
        imagePullPolicy: IfNotPresent
        env:
        - name: PUID
          value: '1000'
        - name: PGID
          value: '1000'
        - name: TZ
          value: 'Asia/Hong_Kong'
        - name: WEBUI_PORT
          value: '61100'
        # livenessProbe:
        #   initialDelaySeconds: 30
        #   timeoutSeconds: 30
        #   periodSeconds: 300
        #   exec:
        #     command:
        #
        #       - curl -fs http://localhost:61100/ || exit 1
        #
        ports:
          - name: 'listen-tcp'
            containerPort: 61101
            protocol: TCP
          - name: 'listen-udp'
            containerPort: 61101
            protocol: UDP
          - name: 'http'
            containerPort: 61100
            protocol: TCP
        volumeMounts:
        - mountPath: /downloads
          name: 'pvc-nfs-app'
          subPath: 'qbittorrent_data'
        - mountPath: /config
          name: 'pvc-nfs-app'
          subPath: 'qbittorrent_config'
      volumes:
      - name: 'pvc-nfs-app'
        persistentVolumeClaim:
          claimName: 'pvc-nfs-app'
---
# Source: nas-apps/templates/tm.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'tm'
  name: 'tm'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'tm'
  serviceName: 'tm'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'tm'
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: 'test-init'
        image: busybox:stable
        command:
          - "/bin/sh"
        args:
          - "-c"
          - "touch /usr/src/app/db/test && exit 0 || exit 1"
        volumeMounts:
        - mountPath: /usr/src/app/db
          name: 'pvc-nfs-app'
          subPath: 'tm_db'
      containers:
      - name: 'tm'
        image: "ltdstudio/terraforming-mars:latest"
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        volumeMounts:
        - mountPath: /usr/src/app/db
          name: 'pvc-nfs-app'
          subPath: 'tm_db'
      volumes:
      - name: 'pvc-nfs-app'
        persistentVolumeClaim:
          claimName: 'pvc-nfs-app'
---
# Source: nas-apps/templates/wetty.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: 'wetty'
  name: 'wetty'
  namespace: 'default'
spec:
  selector:
    matchLabels:
      app: 'wetty'
  serviceName: 'wetty'
  replicas: 1
  template:
    metadata:
      labels:
        app: 'wetty'
    spec:
      terminationGracePeriodSeconds: 30
      hostAliases:
      - ip: ''
        hostnames: 
        - 'awesome-nas'
      containers:
      - name: 'wetty'
        image: "wettyoss/wetty:latest"
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 3000
            protocol: TCP
        args:
          - --ssh-host='awesome-nas'
