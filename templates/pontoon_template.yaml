---
# Source: pontoon/templates/network-policies.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-control-plane-traffic
  labels:
    release: release-name
    heritage: Helm
spec:
  podSelector: {}
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          linkerd.io/control-plane-ns: linkerd
    ports:
    - port: 4143
      protocol: TCP
    - port: 4191
      protocol: TCP
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          linkerd.io/control-plane-ns: linkerd
  policyTypes:
  - Ingress
  - Egress
---
# Source: pontoon/templates/network-policies.yaml
# Allow for incoming public traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: release-name-allow-internet-ingress
spec:
  podSelector:
    matchLabels:
      networking/allow-internet-ingress: "true"
  ingress:
    - from: []
  policyTypes:
    - Ingress
---
# Source: pontoon/templates/network-policies.yaml
# Allow for outgoing traffic to external services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: release-name-allow-internet-egress
spec:
  podSelector:
    matchLabels:
      networking/allow-internet-egress: "true"
  egress:
    - {}
  policyTypes:
    - Egress
---
# Source: pontoon/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
spec:
  podSelector:
    matchLabels:
      app: redis
      release: release-name
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: redis
          release: release-name
    ports:
    - port: 4143
      protocol: TCP
    - port: 6379
      protocol: TCP
    - port: 26379
      protocol: TCP
  - from:
    - podSelector:
        matchLabels:
          networking/allow-redis-access: "true"
    ports:
    - port: 4143
      protocol: TCP
    - port: 6379
      protocol: TCP
    - port: 26379
      protocol: TCP
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
          release: release-name
    ports:
    - port: 4143
      protocol: TCP
    - port: 6379
      protocol: TCP
    - port: 26379
      protocol: TCP
  policyTypes:
  - Ingress
  - Egress
---
# Source: pontoon/charts/redis/templates/redis-ha-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    heritage: Helm
    release: release-name
    chart: redis-4.12.15
    app: release-name-redis
---
# Source: pontoon/templates/pontoon-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-pontoon
  labels:
    helm.sh/chart: pontoon-2.2.0
    app.kubernetes.io/name: pontoon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "db4dd60"
    app.kubernetes.io/managed-by: Helm
---
# Source: pontoon/templates/pontoon-secrets.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "release-name-pontoon-secrets"
type: Opaque
data:
  SECRET_KEY: "c3VwZXJzZWNyZXRrZXljaGFuZ2VtZQ=="
  DATABASE_URL: ""
---
# Source: pontoon/charts/redis/templates/redis-ha-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configmap
  namespace: "default"
  labels:
    heritage: Helm
    release: release-name
    chart: redis-4.12.15
    app: release-name-redis
data:
  redis.conf: |
    dir "/data"
    port 6379
    maxmemory 0
    maxmemory-policy volatile-lru
    min-replicas-max-lag 5
    min-replicas-to-write 1
    rdbchecksum yes
    rdbcompression yes
    repl-diskless-sync yes
    save 900 1

  sentinel.conf: |
    dir "/data"
    port 26379
        sentinel down-after-milliseconds mymaster 10000
        sentinel failover-timeout mymaster 180000
        maxclients 10000
        sentinel parallel-syncs mymaster 5

  init.sh: |
    echo "$(date) Start..."
    HOSTNAME="$(hostname)"
    INDEX="${HOSTNAME##*-}"
    SENTINEL_PORT=26379
    MASTER=''
    MASTER_GROUP="mymaster"
    QUORUM="2"
    REDIS_CONF=/data/conf/redis.conf
    REDIS_PORT=6379
    REDIS_TLS_PORT=
    SENTINEL_CONF=/data/conf/sentinel.conf
    SENTINEL_TLS_PORT=
    SERVICE=release-name-redis
    SENTINEL_TLS_REPLICATION_ENABLED=false
    REDIS_TLS_REPLICATION_ENABLED=false
    set -eu

    sentinel_get_master() {
    set +e
        if [ "$SENTINEL_PORT" -eq 0 ]; then
            redis-cli -h "${SERVICE}" -p "${SENTINEL_TLS_PORT}"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel get-master-addr-by-name "${MASTER_GROUP}" |\
            grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
        else
            redis-cli -h "${SERVICE}" -p "${SENTINEL_PORT}"  sentinel get-master-addr-by-name "${MASTER_GROUP}" |\
            grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
        fi
    set -e
    }

    sentinel_get_master_retry() {
        master=''
        retry=${1}
        sleep=3
        for i in $(seq 1 "${retry}"); do
            master=$(sentinel_get_master)
            if [ -n "${master}" ]; then
                break
            fi
            sleep $((sleep + i))
        done
        echo "${master}"
    }

    identify_master() {
        echo "Identifying redis master (get-master-addr-by-name).."
        echo "  using sentinel (release-name-redis), sentinel group name (mymaster)"
        echo "  $(date).."
        MASTER="$(sentinel_get_master_retry 3)"
        if [ -n "${MASTER}" ]; then
            echo "  $(date) Found redis master (${MASTER})"
        else
            echo "  $(date) Did not find redis master (${MASTER})"
        fi
    }

    sentinel_update() {
        echo "Updating sentinel config.."
        echo "  evaluating sentinel id (\${SENTINEL_ID_${INDEX}})"
        eval MY_SENTINEL_ID="\$SENTINEL_ID_${INDEX}"
        echo "  sentinel id (${MY_SENTINEL_ID}), sentinel grp (${MASTER_GROUP}), quorum (${QUORUM})"
        sed -i "1s/^/sentinel myid ${MY_SENTINEL_ID}\\n/" "${SENTINEL_CONF}"
        if [ "$SENTINEL_TLS_REPLICATION_ENABLED" = true ]; then
            echo "  redis master (${1}:${REDIS_TLS_PORT})"
            sed -i "2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT} ${QUORUM} \\n/" "${SENTINEL_CONF}"
        else
            echo "  redis master (${1}:${REDIS_PORT})"
            sed -i "2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_PORT} ${QUORUM} \\n/" "${SENTINEL_CONF}"
        fi
        echo "sentinel announce-ip ${ANNOUNCE_IP}" >> ${SENTINEL_CONF}
        if [ "$SENTINEL_PORT" -eq 0 ]; then
            echo "  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})"
            echo "sentinel announce-port ${SENTINEL_TLS_PORT}" >> ${SENTINEL_CONF}
        else
            echo "  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})"
            echo "sentinel announce-port ${SENTINEL_PORT}" >> ${SENTINEL_CONF}
        fi
    }

    redis_update() {
        echo "Updating redis config.."
        if [ "$REDIS_TLS_REPLICATION_ENABLED" = true ]; then
            echo "  we are slave of redis master (${1}:${REDIS_TLS_PORT})"
            echo "slaveof ${1} ${REDIS_TLS_PORT}" >> "${REDIS_CONF}"
            echo "slave-announce-port ${REDIS_TLS_PORT}" >> ${REDIS_CONF}
        else
            echo "  we are slave of redis master (${1}:${REDIS_PORT})"
            echo "slaveof ${1} ${REDIS_PORT}" >> "${REDIS_CONF}"
            echo "slave-announce-port ${REDIS_PORT}" >> ${REDIS_CONF}
        fi
        echo "slave-announce-ip ${ANNOUNCE_IP}" >> ${REDIS_CONF}
    }

    copy_config() {
        echo "Copying default redis config.."
        echo "  to '${REDIS_CONF}'"
        cp /readonly-config/redis.conf "${REDIS_CONF}"
        echo "Copying default sentinel config.."
        echo "  to '${SENTINEL_CONF}'"
        cp /readonly-config/sentinel.conf "${SENTINEL_CONF}"
    }

    setup_defaults() {
        echo "Setting up defaults.."
        echo "  using statefulset index (${INDEX})"
        if [ "${INDEX}" = "0" ]; then
            echo "Setting this pod as master for redis and sentinel.."
            echo "  using announce (${ANNOUNCE_IP})"
            redis_update "${ANNOUNCE_IP}"
            sentinel_update "${ANNOUNCE_IP}"
            echo "  make sure ${ANNOUNCE_IP} is not a slave (slaveof no one)"
            sed -i "s/^.*slaveof.*//" "${REDIS_CONF}"
        else
            echo "Getting redis master ip.."
            echo "  blindly assuming (${SERVICE}-announce-0) or (${SERVICE}-server-0) are master"
            DEFAULT_MASTER="$(getent_hosts 0 | awk '{ print $1 }')"
            echo "  identified redis (may be redis master) ip (${DEFAULT_MASTER})"
            if [ -z "${DEFAULT_MASTER}" ]; then
                echo "Error: Unable to resolve redis master (getent hosts)."
                exit 1
            fi
            echo "Setting default slave config for redis and sentinel.."
            echo "  using master ip (${DEFAULT_MASTER})"
            redis_update "${DEFAULT_MASTER}"
            sentinel_update "${DEFAULT_MASTER}"
        fi
    }

    redis_ping() {
    set +e
        if [ "$REDIS_PORT" -eq 0 ]; then
            redis-cli -h "${MASTER}" -p "${REDIS_TLS_PORT}"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping
        else
            redis-cli -h "${MASTER}" -p "${REDIS_PORT}" ping
        fi
    set -e
    }

    redis_ping_retry() {
        ping=''
        retry=${1}
        sleep=3
        for i in $(seq 1 "${retry}"); do
            if [ "$(redis_ping)" = "PONG" ]; then
               ping='PONG'
               break
            fi
            sleep $((sleep + i))
            MASTER=$(sentinel_get_master)
        done
        echo "${ping}"
    }

    find_master() {
        echo "Verifying redis master.."
        if [ "$REDIS_PORT" -eq 0 ]; then
            echo "  ping (${MASTER}:${REDIS_TLS_PORT})"
        else
            echo "  ping (${MASTER}:${REDIS_PORT})"
        fi
        echo "  $(date).."
        if [ "$(redis_ping_retry 3)" != "PONG" ]; then
            echo "  $(date) Can't ping redis master (${MASTER})"
            echo "Attempting to force failover (sentinel failover).."

            if [ "$SENTINEL_PORT" -eq 0 ]; then
                echo "  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})"
                echo "  $(date).."
                if redis-cli -h "${SERVICE}" -p "${SENTINEL_TLS_PORT}"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel failover "${MASTER_GROUP}" | grep -q 'NOGOODSLAVE' ; then
                    echo "  $(date) Failover returned with 'NOGOODSLAVE'"
                    echo "Setting defaults for this pod.."
                    setup_defaults
                    return 0
                fi
            else
                echo "  on sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})"
                echo "  $(date).."
                if redis-cli -h "${SERVICE}" -p "${SENTINEL_PORT}"  sentinel failover "${MASTER_GROUP}" | grep -q 'NOGOODSLAVE' ; then
                    echo "  $(date) Failover returned with 'NOGOODSLAVE'"
                    echo "Setting defaults for this pod.."
                    setup_defaults
                    return 0
                fi
            fi

            echo "Hold on for 10sec"
            sleep 10
            echo "We should get redis master's ip now. Asking (get-master-addr-by-name).."
            if [ "$SENTINEL_PORT" -eq 0 ]; then
                echo "  sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})"
            else
                echo "  sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})"
            fi
            echo "  $(date).."
            MASTER="$(sentinel_get_master)"
            if [ "${MASTER}" ]; then
                echo "  $(date) Found redis master (${MASTER})"
                echo "Updating redis and sentinel config.."
                sentinel_update "${MASTER}"
                redis_update "${MASTER}"
            else
                echo "$(date) Error: Could not failover, exiting..."
                exit 1
            fi
        else
            echo "  $(date) Found reachable redis master (${MASTER})"
            echo "Updating redis and sentinel config.."
            sentinel_update "${MASTER}"
            redis_update "${MASTER}"
        fi
    }

    redis_ro_update() {
        echo "Updating read-only redis config.."
        echo "  redis.conf set 'replica-priority 0'"
        echo "replica-priority 0" >> ${REDIS_CONF}
    }

    getent_hosts() {
        index=${1:-${INDEX}}
        service="${SERVICE}-announce-${index}"
        pod="${SERVICE}-server-${index}"
        host=$(getent hosts "${service}")
        if [ -z "${host}" ]; then
            host=$(getent hosts "${pod}")
        fi
        echo "${host}"
    }

    mkdir -p /data/conf/

    echo "Initializing config.."
    copy_config

    # where is redis master
    identify_master

    echo "Identify announce ip for this pod.."
    echo "  using (${SERVICE}-announce-${INDEX}) or (${SERVICE}-server-${INDEX})"
    ANNOUNCE_IP=$(getent_hosts | awk '{ print $1 }')
    echo "  identified announce (${ANNOUNCE_IP})"
    if [ -z "${ANNOUNCE_IP}" ]; then
        "Error: Could not resolve the announce ip for this pod."
        exit 1
    elif [ "${MASTER}" ]; then
        find_master
    else
        setup_defaults
    fi

    if [ "${AUTH:-}" ]; then
        echo "Setting redis auth values.."
        ESCAPED_AUTH=$(echo "${AUTH}" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/replace-default-auth/${ESCAPED_AUTH}/" "${REDIS_CONF}" "${SENTINEL_CONF}"
    fi

    if [ "${SENTINELAUTH:-}" ]; then
        echo "Setting sentinel auth values"
        ESCAPED_AUTH_SENTINEL=$(echo "$SENTINELAUTH" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/replace-default-sentinel-auth/${ESCAPED_AUTH_SENTINEL}/" "$SENTINEL_CONF"
    fi

    echo "$(date) Ready..."

  haproxy_init.sh: |
    HAPROXY_CONF=/data/haproxy.cfg
    cp /readonly/haproxy.cfg "$HAPROXY_CONF"
    for loop in $(seq 1 10); do
      getent hosts release-name-redis-announce-0 && break
      echo "Waiting for service release-name-redis-announce-0 to be ready ($loop) ..." && sleep 1
    done
    ANNOUNCE_IP0=$(getent hosts "release-name-redis-announce-0" | awk '{ print $1 }')
    if [ -z "$ANNOUNCE_IP0" ]; then
      echo "Could not resolve the announce ip for release-name-redis-announce-0"
      exit 1
    fi
    sed -i "s/REPLACE_ANNOUNCE0/$ANNOUNCE_IP0/" "$HAPROXY_CONF"

    if [ "${AUTH:-}" ]; then
        echo "Setting auth values"
        ESCAPED_AUTH=$(echo "$AUTH" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/" "$HAPROXY_CONF"
    fi
    for loop in $(seq 1 10); do
      getent hosts release-name-redis-announce-1 && break
      echo "Waiting for service release-name-redis-announce-1 to be ready ($loop) ..." && sleep 1
    done
    ANNOUNCE_IP1=$(getent hosts "release-name-redis-announce-1" | awk '{ print $1 }')
    if [ -z "$ANNOUNCE_IP1" ]; then
      echo "Could not resolve the announce ip for release-name-redis-announce-1"
      exit 1
    fi
    sed -i "s/REPLACE_ANNOUNCE1/$ANNOUNCE_IP1/" "$HAPROXY_CONF"

    if [ "${AUTH:-}" ]; then
        echo "Setting auth values"
        ESCAPED_AUTH=$(echo "$AUTH" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/" "$HAPROXY_CONF"
    fi
    for loop in $(seq 1 10); do
      getent hosts release-name-redis-announce-2 && break
      echo "Waiting for service release-name-redis-announce-2 to be ready ($loop) ..." && sleep 1
    done
    ANNOUNCE_IP2=$(getent hosts "release-name-redis-announce-2" | awk '{ print $1 }')
    if [ -z "$ANNOUNCE_IP2" ]; then
      echo "Could not resolve the announce ip for release-name-redis-announce-2"
      exit 1
    fi
    sed -i "s/REPLACE_ANNOUNCE2/$ANNOUNCE_IP2/" "$HAPROXY_CONF"

    if [ "${AUTH:-}" ]; then
        echo "Setting auth values"
        ESCAPED_AUTH=$(echo "$AUTH" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/" "$HAPROXY_CONF"
    fi
---
# Source: pontoon/charts/redis/templates/redis-ha-health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health-configmap
  namespace: "default"
  labels:
    heritage: Helm
    release: release-name
    chart: redis-4.12.15
    app: release-name-redis
data:
  redis_liveness.sh: |
    response=$(
      redis-cli \
        -h localhost \
        -p 6379 \
        ping
    )
    if [ "$response" != "PONG" ] && [ "${response:0:7}" != "LOADING" ] ; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
  redis_readiness.sh: |
    response=$(
      redis-cli \
        -h localhost \
        -p 6379 \
        ping
    )
    if [ "$response" != "PONG" ] ; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
  sentinel_liveness.sh: |
    response=$(
      redis-cli \
        -h localhost \
        -p 26379 \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
---
# Source: pontoon/charts/redis/templates/redis-ha-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
rules:
- apiGroups:
    - ""
  resources:
    - endpoints
  verbs:
    - get
---
# Source: pontoon/charts/redis/templates/redis-ha-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
subjects:
- kind: ServiceAccount
  name: release-name-redis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-redis
---
# Source: pontoon/charts/redis/templates/redis-ha-announce-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-announce-0
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
  - name: tcp-server
    port: 6379
    protocol: TCP
    targetPort: redis
  - name: tcp-sentinel
    port: 26379
    protocol: TCP
    targetPort: sentinel
  selector:
    release: release-name
    app: redis
    "statefulset.kubernetes.io/pod-name": release-name-redis-server-0
---
# Source: pontoon/charts/redis/templates/redis-ha-announce-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-announce-1
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
  - name: tcp-server
    port: 6379
    protocol: TCP
    targetPort: redis
  - name: tcp-sentinel
    port: 26379
    protocol: TCP
    targetPort: sentinel
  selector:
    release: release-name
    app: redis
    "statefulset.kubernetes.io/pod-name": release-name-redis-server-1
---
# Source: pontoon/charts/redis/templates/redis-ha-announce-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-announce-2
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
  - name: tcp-server
    port: 6379
    protocol: TCP
    targetPort: redis
  - name: tcp-sentinel
    port: 26379
    protocol: TCP
    targetPort: sentinel
  selector:
    release: release-name
    app: redis
    "statefulset.kubernetes.io/pod-name": release-name-redis-server-2
---
# Source: pontoon/charts/redis/templates/redis-ha-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: tcp-server
    port: 6379
    protocol: TCP
    targetPort: redis
  - name: tcp-sentinel
    port: 26379
    protocol: TCP
    targetPort: sentinel
  selector:
    release: release-name
    app: redis
---
# Source: pontoon/templates/pontoon-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pontoon
  labels:
    helm.sh/chart: pontoon-2.2.0
    app.kubernetes.io/name: pontoon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "db4dd60"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: release-name-pontoon
    component: "pontoon"
---
# Source: pontoon/templates/pontoon-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pontoon
  labels:
    app: release-name-pontoon
    chart: pontoon-2.2.0
    heritage: Helm
    release: release-name
    component: "pontoon"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-pontoon
      heritage: Helm
      release: release-name
      component: "pontoon"
  template:
    metadata:
      annotations:
        checksum/pontoon-secrets: 2a32a304df6c36b0e97b2f51b1870f89350fb29d15ac2c88ba3518c09c9d3b46
        checksum/pontoon-ssh-secrets: 73ff08b4018cc84a35a6b10246c6ced87a257f830b8e4cffb19ab67b33cbae31
        checksum/pontoon-settings: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/pontoon-unsafe-wsgi: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app: release-name-pontoon
        chart: pontoon-2.2.0
        heritage: Helm
        release: release-name
        component: "pontoon"
    spec:
      imagePullSecrets:
      serviceAccountName: release-name-pontoon
      securityContext:
        {}
      containers:
        - name: pontoon
          securityContext:
            {}
          image: "skillsnetwork/pontoon:db4dd60"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          command: ["gunicorn"]
          args:
            - pontoon.wsgi:application
            - --bind=0.0.0.0
          # TODO - add livenessProbe and readinessProbe
          # Pontoon does not seem to have a health check endpoint...
          # Maybe consider adding one to upstream
          resources:
            {}
          envFrom:
            - secretRef:
                name: "release-name-pontoon-secrets"
          env:
            - name: SITE_URL
              value: ""
            - name: CELERY_ALWAYS_EAGER
              value: "False"
            - name: DJANGO_DEBUG
              value: "False"
            - name: DJANGO_DEV
              value: "False"            
            - name: REDIS_PASSWORD
              value: 
            - name: REDIS_HOST
              value: release-name-redis.release-name.svc.cluster.local
            - name: REDIS_PORT
              value: "26379"
            - name: REDIS_MASTER_NAME
              value: mymaster
            - name: BROKER_URL
              value: sentinel://:@release-name-redis.release-name.svc.cluster.local:26379            
          volumeMounts:
      volumes:
---
# Source: pontoon/templates/pontoon-worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pontoon-worker
  labels:
    app: release-name-pontoon
    chart: pontoon-2.2.0
    heritage: Helm
    release: release-name
    component: "pontoon-worker"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-pontoon
      heritage: Helm
      release: release-name
      component: "pontoon-worker"
  template:
    metadata:
      annotations:
        checksum/pontoon-secrets: 2a32a304df6c36b0e97b2f51b1870f89350fb29d15ac2c88ba3518c09c9d3b46
        checksum/pontoon-ssh-secrets: 73ff08b4018cc84a35a6b10246c6ced87a257f830b8e4cffb19ab67b33cbae31
        checksum/pontoon-settings: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app: release-name-pontoon
        chart: pontoon-2.2.0
        heritage: Helm
        release: release-name
        networking/allow-redis-access: "true"
        component: "pontoon-worker"
    spec:
      imagePullSecrets:
      serviceAccountName: release-name-pontoon
      securityContext:
        {}
      containers:
        - name: pontoon-worker
          securityContext:
            {}
          image: "skillsnetwork/pontoon:db4dd60"
          imagePullPolicy: IfNotPresent
          command: ["celery"]
          args:
            - worker
            - --app=pontoon.base.celeryapp
            - --loglevel=info
            - --without-gossip
            - --without-mingle
            - --without-heartbeat
          resources:
            {}
          envFrom:
            - secretRef:
                name: "release-name-pontoon-secrets"
          env:
            - name: SITE_URL
              value: ""
            - name: CELERY_ALWAYS_EAGER
              value: "False"
            - name: DJANGO_DEBUG
              value: "False"
            - name: DJANGO_DEV
              value: "False"            
            - name: REDIS_PASSWORD
              value: 
            - name: REDIS_HOST
              value: release-name-redis.release-name.svc.cluster.local
            - name: REDIS_PORT
              value: "26379"
            - name: REDIS_MASTER_NAME
              value: mymaster
            - name: BROKER_URL
              value: sentinel://:@release-name-redis.release-name.svc.cluster.local:26379
          volumeMounts:
      volumes:
---
# Source: pontoon/charts/redis/templates/redis-ha-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-server
  namespace: "default"
  labels:
    release-name-redis: replica
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
    {}
spec:
  selector:
    matchLabels:
      release: release-name
      app: redis
  serviceName: release-name-redis
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/init-config: 69343ceaec7ebc8b839acf02c51314464e772df7ad1a5f3a5ed7a9db62e75647
      labels:
        release: release-name
        app: redis
        release-name-redis: replica
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: redis
                  release: release-name
                  release-name-redis: replica
              topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: release-name-redis
      automountServiceAccountToken: false
      initContainers:
      - name: config-init
        image: redis:6.0.7-alpine
        imagePullPolicy: IfNotPresent
        resources:
          {}
        command:
        - sh
        args:
        - /readonly-config/init.sh
        env:
        - name: SENTINEL_ID_0
          value: a2fa1436cbe047403984d3334711f896b4043783

        - name: SENTINEL_ID_1
          value: a8a6d55eaeada0702af6ac44de77cd691846a09f

        - name: SENTINEL_ID_2
          value: 90aceaddfb1262137be8c9272dbf093825a5f4b5

        volumeMounts:
        - name: config
          mountPath: /readonly-config
          readOnly: true
        - name: data
          mountPath: /data


      containers:
      - name: redis
        image: redis:6.0.7-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        args:
        - /data/conf/redis.conf
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
              - sh
              - -c
              - /health/redis_liveness.sh
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
              - sh
              - -c
              - /health/redis_readiness.sh
        resources:
          {}
        ports:
        - name: redis
          containerPort: 6379
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /health
          name: health
        lifecycle:
          {}
      - name: sentinel
        image: redis:6.0.7-alpine
        imagePullPolicy: IfNotPresent
        command:
          - redis-sentinel
        args:
          - /data/conf/sentinel.conf
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
              - sh
              - -c
              - /health/sentinel_liveness.sh
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 15
          successThreshold: 3
          failureThreshold: 5
          exec:
            command:
              - sh
              - -c
              - /health/sentinel_liveness.sh
        resources:
          {}
        ports:
          - name: sentinel
            containerPort: 26379
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /health
          name: health
        lifecycle:
          {}
      volumes:
      - name: config
        configMap:
          name: release-name-redis-configmap
      - name: health
        configMap:
          name: release-name-redis-health-configmap
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"
---
# Source: pontoon/templates/pontoon-sync-projects-cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-pontoon-sync-projects-cronjob
  labels:
    app: release-name-pontoon
    chart: pontoon-2.2.0
    heritage: Helm
    release: release-name
    component: "pontoon-sync-projects-cronjob"
spec:
  concurrencyPolicy: "Allow"
  schedule: "@every 30m"
  suspend: false
  successfulJobsHistoryLimit: 4
  failedJobsHistoryLimit: 10
  jobTemplate:
    metadata:
      labels:
        app: release-name-pontoon
        chart: pontoon-2.2.0
        heritage: Helm
        release: release-name
        component: "pontoon-sync-projects-cronjob"
      annotations:
    spec:
      template:
        metadata:
          labels:
            app: release-name-pontoon
            chart: pontoon-2.2.0
            heritage: Helm
            release: release-name
            networking/allow-redis-access: "true"
            component: "pontoon-sync-projects-cronjob"
          annotations:
        spec:
          imagePullSecrets:
          serviceAccountName: release-name-pontoon
          securityContext:
            {}
          restartPolicy: OnFailure
          containers:
            - name: sync-projects
              securityContext:
                {}
              image: "skillsnetwork/pontoon:db4dd60"
              imagePullPolicy: IfNotPresent
              command: ["python"]
              args:
                - "manage.py"
                - "sync_projects"
              resources:
                {}
              envFrom:
                - secretRef:
                    name: "release-name-pontoon-secrets"
              env:
                - name: SITE_URL
                  value: ""
                - name: CELERY_ALWAYS_EAGER
                  value: "False"
                - name: DJANGO_DEBUG
                  value: "False"
                - name: DJANGO_DEV
                  value: "False"                
                - name: REDIS_PASSWORD
                  value: 
                - name: REDIS_HOST
                  value: release-name-redis.release-name.svc.cluster.local
                - name: REDIS_PORT
                  value: "26379"
                - name: REDIS_MASTER_NAME
                  value: mymaster
                - name: BROKER_URL
                  value: sentinel://:@release-name-redis.release-name.svc.cluster.local:26379                
              volumeMounts:
          volumes:
---
# Source: pontoon/templates/image-pull-secrets.yaml
# Loop through the imagePullSecrets to create image pull secrets
---
# Source: pontoon/templates/pontoon-ssh-secrets.yaml
# SSH Keys and config are used to authenticate with VCS servers via SSH
# Learn more at
---
# Source: pontoon/charts/redis/templates/tests/test-redis-ha-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-redis-configmap-test
  labels:
    app: redis
    heritage: "Helm"
    release: "release-name"
    chart: redis-4.12.15
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: check-init
    image: koalaman/shellcheck:v0.5.0
    args:
    - --shell=sh
    - /readonly-config/init.sh
    volumeMounts:
    - name: config
      mountPath: /readonly-config
      readOnly: true
  restartPolicy: Never
  volumes:
  - name: config
    configMap:
      name: release-name-redis-configmap
---
# Source: pontoon/templates/pontoon-migration-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: 'release-name-pontoon-migration-job-wuwl'
  labels:
    app: release-name-pontoon
    chart: pontoon-2.2.0
    heritage: Helm
    release: release-name
    component: "pontoon-migration-job"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 10
  template:
    metadata:
      name: 'release-name-pontoon-migration-job'
      labels:
        app: release-name-pontoon
        chart: pontoon-2.2.0
        heritage: Helm
        release: release-name
        component: "pontoon-migration-job"
        networking/allow-redis-access: "true"
    spec:
      imagePullSecrets:
      serviceAccountName: release-name-pontoon
      restartPolicy: Never
      containers:
        - name: pontoon-migration
          image: "skillsnetwork/pontoon:db4dd60"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: "release-name-pontoon-secrets"
          command: ["python"]
          args: ["manage.py", "migrate"]
          env:
            - name: SITE_URL
              value: ""
            - name: CELERY_ALWAYS_EAGER
              value: "False"
            - name: DJANGO_DEBUG
              value: "False"
            - name: DJANGO_DEV
              value: "False"            
            - name: REDIS_PASSWORD
              value: 
            - name: REDIS_HOST
              value: release-name-redis.release-name.svc.cluster.local
            - name: REDIS_PORT
              value: "26379"
            - name: REDIS_MASTER_NAME
              value: mymaster
            - name: BROKER_URL
              value: sentinel://:@release-name-redis.release-name.svc.cluster.local:26379            
          volumeMounts:
      volumes:
