---
# Source: backuppc/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-backuppc
  namespace: "default"
  labels:
    app.kubernetes.io/name: backuppc
    helm.sh/chart: backuppc-0.0.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "100Gi"
---
# Source: backuppc/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-backuppc
  namespace: "default"
  labels:
    app.kubernetes.io/name: backuppc
    helm.sh/chart: backuppc-0.0.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      nodePort: null
  selector:
    app.kubernetes.io/name: backuppc
    app.kubernetes.io/instance: release-name
---
# Source: backuppc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-backuppc
  namespace: "default"
  labels:
    app.kubernetes.io/name: backuppc
    helm.sh/chart: backuppc-0.0.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: backuppc
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backuppc
        helm.sh/chart: backuppc-0.0.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      
      serviceAccountName: default
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: backuppc
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      initContainers:
        - name: volume-permissions
          image: "docker.io/bitnami/bitnami-shell:10-debian-10-r134"
          imagePullPolicy: "Always"
          command:
            - /bin/sh
            - -cx
            - |
              chown -R 1000:1000 /data
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - mountPath: /data
              name: backuppc-data
              subPath: .
      containers:
        - name: backuppc
          image: docker.io/adferrand/backuppc:4.4.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: BACKUPPC_UUID
              value: "1000"
            - name: BACKUPPC_UUID
              value: "1000"
            - name: BACKUPPC_WEB_USER
              value: "backuppc"
            - name: BACKUPPC_WEB_PASSWD
              value: "password"
            - name: TZ
              value: Europe/Paris
          envFrom:
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          resources:
            limits: {}
            requests:
              cpu: 1000m
              memory: 2048Mi
          volumeMounts:
            - mountPath: /etc/backuppc
              name: backuppc-data
              subPath: etc
            - mountPath: /home/backuppc
              name: backuppc-data
              subPath: home
            - mountPath: /data/backuppc
              name: backuppc-data
              subPath: data
      volumes:
        - name: backuppc-data
          persistentVolumeClaim:
            claimName: release-name-backuppc
