---
# Source: telegram-pepperbot/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: telegram-pepperbot/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/type: webserver
---
# Source: telegram-pepperbot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: message-queuing-release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: telegram-pepperbot
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/type: message-queuing
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegram-pepperbot
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/type: message-queuing
    spec:
      serviceAccountName: release-name-telegram-pepperbot
      securityContext:
        {}
      initContainers:
        - name: telegram-pepperbot-redis-ready
          image: busybox:1.35
          command: [ 'sh', '-c', 'echo -e "Checking for the availability of Redis Server"; while ! nc -z redis-headless.example.svc.cluster.local 6379; do sleep 1; printf "-"; done; echo -e "  >> Redis Server is ready";' ]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
      containers:
        - name: telegram-pepperbot
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: "marnixjanssen/telgram-pepperbot:latest"
          imagePullPolicy: Always
          command: ["dumb-init", "message-queuing"]
          env:
            - name: HELM_CHART_VERSION
              value: "v1.3.5"
            - name: REDIS_URL
              value: "redis://redis-headless.example.svc.cluster.local:6379"
            - name: TELOXIDE_TOKEN
              value: ""
            - name: ADMIN_CHAT_ID
              value: ""
            - name: RUST_LOG
              value: "info"
          resources:
            limits:
              memory: 25Mi
            requests:
              memory: 25Mi
---
# Source: telegram-pepperbot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bot-commands-release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: telegram-pepperbot
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/type: bot-commands
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegram-pepperbot
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/type: bot-commands
    spec:
      serviceAccountName: release-name-telegram-pepperbot
      securityContext:
        {}
      initContainers:
        - name: telegram-pepperbot-redis-ready
          image: busybox:1.35
          command: [ 'sh', '-c', 'echo -e "Checking for the availability of Redis Server"; while ! nc -z redis-headless.example.svc.cluster.local 6379; do sleep 1; printf "-"; done; echo -e "  >> Redis Server is ready";' ]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
      containers:
        - name: telegram-pepperbot
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: "marnixjanssen/telgram-pepperbot:latest"
          imagePullPolicy: Always
          command: ["dumb-init", "bot-commands"]
          env:
            - name: HELM_CHART_VERSION
              value: "v1.3.5"
            - name: REDIS_URL
              value: "redis://redis-headless.example.svc.cluster.local:6379"
            - name: TELOXIDE_TOKEN
              value: ""
            - name: ADMIN_CHAT_ID
              value: ""
            - name: RUST_LOG
              value: "info"
          resources:
            limits:
              memory: 25Mi
            requests:
              memory: 25Mi
---
# Source: telegram-pepperbot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bot-consumer-release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 4
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: telegram-pepperbot
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/type: bot-consumer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegram-pepperbot
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/type: bot-consumer
    spec:
      serviceAccountName: release-name-telegram-pepperbot
      securityContext:
        {}
      initContainers:
        - name: telegram-pepperbot-redis-ready
          image: busybox:1.35
          command: [ 'sh', '-c', 'echo -e "Checking for the availability of Redis Server"; while ! nc -z redis-headless.example.svc.cluster.local 6379; do sleep 1; printf "-"; done; echo -e "  >> Redis Server is ready";' ]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
      containers:
        - name: telegram-pepperbot
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: "marnixjanssen/telgram-pepperbot:latest"
          imagePullPolicy: Always
          command: ["dumb-init", "bot-consumer"]
          env:
            - name: HELM_CHART_VERSION
              value: "v1.3.5"
            - name: REDIS_URL
              value: "redis://redis-headless.example.svc.cluster.local:6379"
            - name: TELOXIDE_TOKEN
              value: ""
            - name: ADMIN_CHAT_ID
              value: ""
            - name: RUST_LOG
              value: "info"
          resources:
            limits:
              memory: 25Mi
            requests:
              memory: 25Mi
---
# Source: telegram-pepperbot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webserver-release-name-telegram-pepperbot
  labels:
    helm.sh/chart: telegram-pepperbot-1.3.5
    app.kubernetes.io/name: telegram-pepperbot
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 4
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: telegram-pepperbot
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/type: webserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegram-pepperbot
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/type: webserver
    spec:
      serviceAccountName: release-name-telegram-pepperbot
      securityContext:
        {}
      initContainers:
        - name: telegram-pepperbot-redis-ready
          image: busybox:1.35
          command: [ 'sh', '-c', 'echo -e "Checking for the availability of Redis Server"; while ! nc -z redis-headless.example.svc.cluster.local 6379; do sleep 1; printf "-"; done; echo -e "  >> Redis Server is ready";' ]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
      containers:
        - name: telegram-pepperbot
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: "marnixjanssen/telgram-pepperbot:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_health
              port: http
          readinessProbe:
            httpGet:
              path: /_health
              port: http
          command: ["dumb-init", "webserver"]
          env:
            - name: HELM_CHART_VERSION
              value: "v1.3.5"
            - name: REDIS_URL
              value: "redis://redis-headless.example.svc.cluster.local:6379"
            - name: TELOXIDE_TOKEN
              value: ""
            - name: ADMIN_CHAT_ID
              value: ""
            - name: RUST_LOG
              value: "info"
          resources:
            limits:
              memory: 25Mi
            requests:
              memory: 25Mi
