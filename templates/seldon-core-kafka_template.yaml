---
# Source: seldon-core-kafka/templates/kafka-deployment.yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: 
    labels:
      app: kafka
      service: seldon
    name: kafka
  spec:
    ports:
    - name: kafka-port
      nodePort: 30010
      port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      app: kafka
    sessionAffinity: None
    type: NodePort
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    creationTimestamp: 
    labels:
      app: kafka
      service: seldon
    name: kafka
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kafka
    template:
      metadata:
        creationTimestamp: 
        labels:
          app: kafka
      spec:
        containers:
        - env:
          - name: KAFKA_BROKER_ID
            value: '1'
          - name: KAFKA_ADVERTISED_PROTOCOL_NAME
            value: PLAINTEXT
          - name: KAFKA_ADVERTISED_PORT
            value: '9092'
          - name: KAFKA_PROTOCOL_NAME
            value: EXTERNAL
          - name: KAFKA_ADVERTISED_HOST_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: ADD_LISTENER
            value: EXTERNAL://0.0.0.0:9093
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: PLAINTEXT
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
          - name: KAFKA_PORT
            value: '9092'
          - name: KAFKA_HOST_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper-1
          - name: KAFKA_CREATE_TOPICS
            value: predictions:1:1
          - name: KAFKA_LOG_RETENTION_HOURS
            value: '2'
          - name: KAFKA_LOG_ROLL_HOURS
            value: '2'
          - name: KAFKA_LOG_CLEANUP_POLICY
            value: delete
          - name: KAFKA_LOG_CLEANER_ENABLE
            value: 'true'
          image: seldonio/kafka-core:0.1
          imagePullPolicy: IfNotPresent
          name: kafka
          ports:
          - containerPort: 9092
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
kind: List
---
# Source: seldon-core-kafka/templates/zookeeper-deployment.yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: zookeeper-1
      service: seldon
    name: zookeeper-1
  spec:
    ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: followers
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: election
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      server-id: '1'
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: zookeeper-2
      service: seldon
    name: zookeeper-2
  spec:
    ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: followers
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: election
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      server-id: '2'
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: zookeeper-3
      service: seldon
    name: zookeeper-3
  spec:
    ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: followers
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: election
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      server-id: '3'
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      name: zookeeper
      server-id: '1'
      service: seldon
    name: zookeeper-1
  spec:
    containers:
    - env:
      - name: SERVER_ID
        value: '1'
      - name: MAX_SERVERS
        value: '3'
      image: seldonio/zookeeper-k8s:1.0
      imagePullPolicy: IfNotPresent
      name: server
      ports:
      - containerPort: 2181
        protocol: TCP
      - containerPort: 2888
        protocol: TCP
      - containerPort: 3888
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    securityContext: {}
    terminationGracePeriodSeconds: 30
  status: {}
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      name: zookeeper
      server-id: '2'
      service: seldon
    name: zookeeper-2
  spec:
    containers:
    - env:
      - name: SERVER_ID
        value: '2'
      - name: MAX_SERVERS
        value: '3'
      image: seldonio/zookeeper-k8s:1.0
      imagePullPolicy: IfNotPresent
      name: server
      ports:
      - containerPort: 2181
        protocol: TCP
      - containerPort: 2888
        protocol: TCP
      - containerPort: 3888
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    securityContext: {}
    terminationGracePeriodSeconds: 30
  status: {}
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      name: zookeeper
      server-id: '3'
      service: seldon
    name: zookeeper-3
  spec:
    containers:
    - env:
      - name: SERVER_ID
        value: '3'
      - name: MAX_SERVERS
        value: '3'
      image: seldonio/zookeeper-k8s:1.0
      imagePullPolicy: IfNotPresent
      name: server
      ports:
      - containerPort: 2181
        protocol: TCP
      - containerPort: 2888
        protocol: TCP
      - containerPort: 3888
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    securityContext: {}
    terminationGracePeriodSeconds: 30
  status: {}
kind: List
