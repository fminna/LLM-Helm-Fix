---
# Source: fleet/charts/gitjob/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitjob
---
# Source: fleet/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-controller
---
# Source: fleet/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-controller-bootstrap
---
# Source: fleet/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fleet-controller
data:
  config: |
    {
      "systemDefaultRegistry": "",
      "agentImage": "rancher/fleet-agent:v0.9.4",
      "agentImagePullPolicy": "IfNotPresent",
      "apiServerURL": "",
      "apiServerCA": "",
      "agentCheckinInterval": "15m",
      "ignoreClusterRegistrationLabels": false,
      "bootstrap": {
        "paths": "",
        "repo": "",
        "secret": "",
        "branch":  "master",
        "namespace": "fleet-local",
        "agentNamespace": "",
      },
      "webhookReceiverURL": "",
      "githubURLPrefix": ""
    }
---
# Source: fleet/charts/gitjob/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitjob
rules:
  - apiGroups:
      - "batch"
    resources:
      - 'jobs'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - 'pods'
    verbs:
      - 'list'
      - 'get'
      - 'watch'
  - apiGroups:
      - ""
    resources:
      - 'secrets'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - 'configmaps'
    verbs:
      - '*'
  - apiGroups:
      - "gitjob.cattle.io"
    resources:
      - "gitjobs"
      - "gitjobs/status"
    verbs:
      - "*"
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-controller
rules:
- apiGroups:
  - gitjob.cattle.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - fleet.cattle.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - namespaces
  - serviceaccounts
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - clusterrolebindings
  - roles
  - rolebindings
  verbs:
  - '*'
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-controller-bootstrap
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: fleet/charts/gitjob/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gitjob-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gitjob
subjects:
  - kind: ServiceAccount
    name: gitjob
    namespace: default
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fleet-controller
subjects:
- kind: ServiceAccount
  name: fleet-controller
  namespace: default
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-controller-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fleet-controller-bootstrap
subjects:
- kind: ServiceAccount
  name: fleet-controller-bootstrap
  namespace: default
---
# Source: fleet/charts/gitjob/templates/leases.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitjob
rules:
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - "leases"
    verbs:
      - "*"
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: fleet-controller
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - '*'
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
---
# Source: fleet/charts/gitjob/templates/leases.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitjob
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitjob
subjects:
  - kind: ServiceAccount
    name: gitjob
---
# Source: fleet/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fleet-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: fleet-controller
subjects:
- kind: ServiceAccount
  name: fleet-controller
---
# Source: fleet/charts/gitjob/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitjob
spec:
  ports:
    - name: http-80
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: "gitjob"
---
# Source: fleet/charts/gitjob/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitjob
spec:
  selector:
    matchLabels:
      app: "gitjob"
  template:
    metadata:
      labels:
        app: "gitjob"
    spec:
      serviceAccountName: gitjob
      containers:
        - image: "rancher/gitjob:v0.9.7"
          name: gitjob
          args:
          - gitjob
          - --gitjob-image
          - "rancher/gitjob:v0.9.7"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      tolerations:
        - effect: NoSchedule
          key: cattle.io/os
          operator: Equal
          value: linux
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: fleet/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleet-controller
spec:
  selector:
    matchLabels:
      app: fleet-controller
  template:
    metadata:
      labels:
        app: fleet-controller
    spec:
      containers:
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FLEET_PROPAGATE_DEBUG_SETTINGS_TO_AGENTS
          value: "true"
        image: 'rancher/fleet:v0.9.4'
        name: fleet-controller
        imagePullPolicy: "IfNotPresent"
        command:
        - fleetcontroller
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          privileged: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
          - mountPath: /tmp
            name: tmp
      volumes:
        - name: tmp
          emptyDir: {}

      serviceAccountName: fleet-controller
      nodeSelector: 
        kubernetes.io/os: linux
      tolerations: 
        - key: "cattle.io/os"
          value: "linux"
          effect: "NoSchedule"
          operator: "Equal"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
---
# Source: fleet/templates/job_cleanup_clusterregistrations.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: fleet-cleanup-clusterregistrations
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: fleet-job
    spec:
      serviceAccountName: fleet-controller
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
      containers:
      - name: cleanup
        image: "rancher/fleet-agent:v0.9.4"
        imagePullPolicy: 
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          privileged: false
        command:
        - fleet
        args:
        - cleanup
      nodeSelector: 
        kubernetes.io/os: linux
      tolerations: 
        - key: "cattle.io/os"
          value: "linux"
          effect: "NoSchedule"
          operator: "Equal"
  backoffLimit: 1
