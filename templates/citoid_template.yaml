---
# Source: citoid/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: citoid-release-name
  labels:
    app: citoid
    chart: citoid-0.3.2
    release: release-name
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      app: citoid
      release: release-name
  policyTypes:
    - Ingress
  ingress:
    - ports:
      - port: 1970
        protocol: TCP
      - port: 9102
        protocol: TCP
---
# Source: citoid/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-release-name
data:
  config.yaml: |- 
    # Number of worker processes to spawn.
    # Set to 0 to run everything in a single process without clustering.
    # Use 'ncpu' to run as many workers as there are CPU units
    num_workers: 1
    
    # Log error messages and gracefully restart a worker if v8 reports that it
    # uses more heap (note: not RSS) than this many mb.
    worker_heap_limit_mb: 300
    
    # The maximum interval in ms that can pass between two beat messages
    # sent by each worker to the master before it is killed
    worker_heartbeat_timeout: 7500
    
    # Logger info
    logging:
      name: citoid
      streams:
        - type: stdout
          named_levels: true
    
    services:
      - name: citoid
        # a relative path or the name of an npm package, if different from name
        module: app.js
        # per-service config
        conf:
          port: 1970
          # interface: localhost # uncomment to only listen on localhost
          # more per-service config settings
          # the location of the spec, defaults to spec.yaml if not specified
          # spec: ./spec.template.yaml
          # allow cross-domain requests to the API (default '*')
          cors: '*'
          # to disable use:
          # cors: false
          # to restrict to a particular domain, use:
          # cors: restricted.domain.org
          # content for the CSP headers
          # csp: false  # uncomment this line to disable sending them
          # URL of the outbound proxy to use (complete with protocol)
          # the list of domains for which not to use the proxy defined above
          # no_proxy_list:
          #   - domain1.com
          #   - domain2.org
          # the list of incoming request headers that can be logged; if left empty,
          # the following headers are allowed: cache-control, content-length,
          # content-type, if-match, user-agent, x-request-id
          # log_header_whitelist:
          #   - cache-control
          #   - content-length
          #   - content-type
          #   - if-match
          #   - user-agent
          #   - x-request-id
          # User-Agent HTTP header to use for requests
          user_agent: "Citoid (Wikimedia tool; learn more at https://www.mediawiki.org/wiki/Citoid)"
          # contact e-mail address; used for making crossRef requests
          mailto: noc@wikimedia.org
          # whether Citoid should use Zotero
          zotero: false
          # URL where to contact Zotero
          zoteroInterface: 
          # zotero's server port
          zoteroPort: 1969
          # whether the proxy should be used to contact zotero
          zoteroUseProxy: false
          # whether Citoid should always wait for the PubMed request to complete
          pubmed: false
          # whether Citoid is allowed to scrape private IPs
          allowPrivateAddresses: false
          # maximum number of redirects allowed
          maxRedirects: 10
---
# Source: citoid/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: citoid-release-name
  labels:
    app: citoid
    chart: citoid-0.3.2
    release: release-name
    heritage: Helm
spec:
  type: NodePort
  selector:
    app: citoid
    release: release-name
    routed_via: release-name
  ports:
  - name: http
    protocol: TCP
    port: 1970
---
# Source: citoid/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citoid-release-name
  labels:
    app: citoid
    chart: citoid-0.3.2
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: citoid
      release: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app: citoid
        release: release-name
        routed_via: release-name
      annotations:
        checksum/config: 8d0125016a689e9a45a992310b888b1df32ea8dc3b7c18cbadccebbaf859b12d
        prometheus.io/scrape: "false"
                
    spec:
      containers:
        # The main application container
        - name: citoid-release-name
          image: "docker-registry.wikimedia.org/wikimedia/mediawiki-services-citoid:latest"
          command: ["node"]
          args: ["/srv/service/server.js", "-c", "/etc/citoid/config.yaml"]
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1970
          livenessProbe:
            tcpSocket:
              port: 1970
          readinessProbe:
            httpGet:
              path: /_info
              port: 1970
          env:
            - name: SERVICE_IDENTIFIER
              value: citoid-release-name
          volumeMounts:
            - name: config-volume
              mountPath: /etc/citoid
          resources:
            requests:
              cpu: 1m
              memory: 100Mi
            limits:
              cpu: 1
              memory: 400Mi        
      volumes:
        
        - name: config-volume
          configMap:
            name: config-release-name
---
# Source: citoid/templates/tests/test-service-checker.yaml
apiVersion: v1
kind: Pod
metadata:
  name: 'citoid-release-name-service-checker'
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  containers:
  - name: 'citoid-release-name-service-checker'
    image: "docker-registry.wikimedia.org/service-checker"
    imagePullPolicy: IfNotPresent
    args: ["-t", "5", '$(CITOID_RELEASE_NAME_SERVICE_HOST)', 'http://citoid-release-name:1970']
  dnsPolicy: ClusterFirst
  restartPolicy: Never
