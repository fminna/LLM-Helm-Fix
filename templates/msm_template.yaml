---
# Source: msm/templates/serviceaccount.yaml
# cni-prep
apiVersion: v1
kind: ServiceAccount
metadata:
  name: msm-cni
  namespace: default
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: msm-cni
---
# Source: msm/templates/serviceaccount.yaml
# webhook-prep
apiVersion: v1
kind: ServiceAccount
metadata:
  name: msm-admission-webhook-sa
  namespace: default
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: msm/templates/serviceaccount.yaml
# cp-prep
apiVersion: v1
kind: ServiceAccount
metadata:
  name: msm-cp-sa
  labels:
    app: msm-cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: msm/templates/configmap.yaml
#cni-prep
kind: ConfigMap
apiVersion: v1
metadata:
  name: msm-cni-config
  namespace: default
  labels:
    app: msm-cni
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  # The CNI network configuration to chain with an existing CNI plugin on each node.
  cni_network_config: |-
    {
      "cniVersion": "0.3.1",
      "name": "msm-cni",
      "type": "msm-cni",
      "logLevel": "error",
      "kubernetes": {
          "kubeConfig": "__KUBECONFIG_FILEPATH__",
          "cniBinDir": "/opt/cni/bin",
          "excludeNamespaces": [ "msm-system" ]
      }
    }
---
# Source: msm/templates/clusterrole.yaml
# webhook-prep
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: msm-admission-webhook-role
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  - apiGroups: ["admissionregistration.k8s.io"]
    resources:
      - "mutatingwebhookconfigurations"
    verbs: ["*"]
---
# Source: msm/templates/clusterrole.yaml
#cni-prep
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: msm-cni
  labels:
    app: msm-cni
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
---
# Source: msm/templates/clusterrole.yaml
# cp-prep
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: url-handler
  labels:
    app: msm-cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - services
      - nodes
      - endpoints
    verbs:
      - list
      - get
---
# Source: msm/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-watcher
  labels:
    app: msm-cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - watch
---
# Source: msm/templates/clusterrolebinding.yaml
# webhook-prep
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: msm-admission-webhook-binding
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: msm-admission-webhook-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: msm-admission-webhook-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: msm/templates/clusterrolebinding.yaml
#cni-prep
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: msm-cni
  labels:
    app: msm-cni
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: msm-cni
subjects:
  - kind: ServiceAccount
    name: msm-cni
    namespace: default
---
# Source: msm/templates/clusterrolebinding.yaml
#msm-cp
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: url-handler
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: url-handler
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: msm-cp-sa
    namespace: default
---
# Source: msm/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-watcher
  labels:
    app: msm-cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-watcher
subjects:
  - kind: ServiceAccount
    name: msm-cp-sa
    namespace: default
---
# Source: msm/templates/service.yaml
# webhook
apiVersion: v1
kind: Service
metadata:
  name: msm-admission-webhook-svc
  namespace: default
  labels:
    app: msm-admission-webhook
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: ssl
      port: 443
      targetPort: 443
  selector:
    app: msm-admission-webhook
---
# Source: msm/templates/service.yaml
#msm-control-plane-svc
apiVersion: v1
kind: Service
metadata:
  name: msm-cp
  namespace: default
  labels:
    msm: cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: grpc
      port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    msm: cp
---
# Source: msm/templates/daemonset.yaml
# cni
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: msm-cni
  namespace: default
  labels:
    app: msm-cni
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: msm-cni
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: msm-cni
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        - effect: NoExecute
          operator: Exists
      priorityClassName: system-node-critical
      serviceAccountName: msm-cni
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 5
      containers:
        # This container installs the MSM CNI binaries
        # and CNI network config file on each node.
        - name: installer
          image: "ghcr.io/media-streaming-mesh/msm-cni:latest"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8000
          command: ["installer"]
          env:
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: msm-cni-config
                  key: cni_network_config
            - name: CNI_NET_DIR
              value: /etc/cni/net.d
            # Deploy as a standalone CNI plugin or as chained?
            - name: CHAINED_CNI_PLUGIN
              value: "true"
            - name: LOG_LEVEL
              value: 
            - name: LOG_TYPE
              value: 
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
      volumes:
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
---
# Source: msm/templates/daemonset.yaml
# msm-gateway
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: msm-gateway
  namespace: default
  labels:
    msm: gateway
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      msm: gateway
  template:
    metadata:
      labels:
        msm: gateway
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: msm-proxy
          image: "ghcr.io/media-streaming-mesh/msm-dp:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: rtp
              protocol: UDP
              containerPort: 8050
            - name: rtcp
              protocol: UDP
              containerPort: 8051
            - name: grpc
              protocol: TCP
              containerPort: 9000
          env:
            - name: LOG_LEVEL
              value: 
            - name: LOG_TYPE
              value: 
          readinessProbe:
            exec:
              command: ["grpc-health-probe", "-addr=:9000"]
            initialDelaySeconds: 2
          livenessProbe:
            exec:
              command: ["grpc-health-probe", "-addr=:9000"]
            initialDelaySeconds: 10
        - name: msm-rtsp-stub
          image: "ghcr.io/media-streaming-mesh/msm-rtsp-stub:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: rtsp
              protocol: TCP
              containerPort: 8554
          env:
            - name: MSM_LOG_LVL
              value: 
            - name: LOCAL_RTP_PORT
              value: "8000"
            - name: MSM_CONTROL_PLANE
              value: http://msm-cp:9000
            - name: MSM_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MSM_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MSM_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MSM_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MSM_POD_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
---
# Source: msm/templates/deployment.yaml
# webhook
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msm-admission-webhook
  namespace: default
  labels:
    app: msm-admission-webhook
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: msm-admission-webhook
  template:
    metadata:
      labels:
        app: msm-admission-webhook
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      serviceAccount: msm-admission-webhook-sa
      containers:
        - name: msm-admission-webhook
          image: "ghcr.io/media-streaming-mesh/msm-admission-webhook:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - protocol: TCP
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /livenessz
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 3
            timeoutSeconds: 5
          env:
            - name: REPO
              value: "ciscolabs"
            - name: TAG
              value: "latest"
            - name: MSM_SIDECAR
              value: "msm-rtsp-stub"
            - name: IMAGE_PULL_POLICY
              value: "IfNotPresent"
            - name: LOG_LVL
              value: 
            - name: LOG_TYPE
              value: 
            - name: MSM_LOG_LVL
              value: 
            - name: MSM_CONTROL_PLANE
              value: http://msm-cp:9000
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: IGNORED_NAMESPACE
              value: ingress-nginx
            - name: WEBHOOK_CONFIG_NAME
              value: msm-admission-webhook-default
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
---
# Source: msm/templates/deployment.yaml
# msm-control-plane
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msm-control-plane
  namespace: default
  labels:
    msm: cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      msm: cp
  template:
    metadata:
      labels:
        msm: cp
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      serviceAccountName: msm-cp-sa
      containers:
        - name: msm-control-plane
          image: "ghcr.io/media-streaming-mesh/msm-cp:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: grpc
              protocol: TCP
              containerPort: 9000
          env:
            - name: LOG_LEVEL
              value: 
            - name: LOG_TYPE
              value: 
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
---
# Source: msm/templates/deployment.yaml
# msm-network-controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msm-network-controller
  namespace: default
  labels:
    msm: cp
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      msm: cp
  template:
    metadata:
      labels:
        msm: cp
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      serviceAccountName: msm-cp-sa
      containers:
        - name: msm-network-controller
          image: "ghcr.io/media-streaming-mesh/msm-nc:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: grpc
              protocol: TCP
              containerPort: 9000
          env:
            - name: LOG_LEVEL
              value: 
            - name: LOG_TYPE
              value: 
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
---
# Source: msm/templates/webhook.yaml
kind: MutatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1
metadata:
  name: msm-admission-webhook-default
  labels:
    helm.sh/chart: msm-0.1.17
    app.kubernetes.io/name: msm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
webhooks:
- admissionReviewVersions:
    - v1
  name:  msm-admission-webhook-default.mediastreamingmesh.io
  clientConfig:
    service:
      name: msm-admission-webhook-svc
      namespace: default
      path: "/mutate"
      port: 443
  sideEffects: None
  objectSelector:
    matchExpressions:
    - key: sidecar.mediastreamingmesh.io/inject
      operator: In
      values:
      - "true"
  rules:
  - operations: [ "CREATE", "UPDATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    scope: "*"
  failurePolicy: Ignore
  timeoutSeconds: 10
