---
# Source: lnd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: lnd/templates/lnd-pass-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-lnd-pass
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
data:
  password: cGJZaFJnR3BLTVRlbnVvbVl4dXRVa1RC
---
# Source: lnd/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
data:
  lnd.conf: |-
    wallet-unlock-password-file=/tmp/lnd-pass
    wallet-unlock-allow-create=true
    restlisten=0.0.0.0:8080
    rpclisten=0.0.0.0:10009
    listen=0.0.0.0:9735
    prometheus.listen=0.0.0.0:9092
    bitcoin.active=true
    bitcoin.node=bitcoind
    bitcoind.rpcuser=rpcuser
    bitcoind.zmqpubrawblock=tcp://bitcoind:28332
    bitcoind.zmqpubrawtx=tcp://bitcoind:28333
    tlsextradomain=lnd
    accept-keysend=1
    allow-circular-route=1
    stagger-initial-reconnect=1
    protocol.wumbo-channels=1
    maxchansize=500000000
    bitcoin.timelockdelta=60
    default-remote-max-htlcs=50
    debuglevel=info
    prometheus.enable=1
    gc-canceled-invoices-on-the-fly=true
    gc-canceled-invoices-on-startup=true
    tor.active=true
    tor.v3=true
    tor.skip-proxy-for-clearnet-targets=true
    tlsextradomain=release-name-lnd
    bitcoin.mainnet=true
---
# Source: lnd/templates/export-secrets-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-lnd-export-secrets
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
data:
  exportSecrets.sh: |
    #!/bin/sh

    PUBKEY=$(lncli -n mainnet getinfo | jq -r .identity_pubkey)
    kubectl create secret generic release-name-lnd-pubkey --from-literal=pubkey=$PUBKEY --dry-run=client -o yaml | kubectl apply -f -

    export TLS=$(base64 /root/.lnd/tls.cert | tr -d '\n\r')
    export MACAROON=$(base64 /root/.lnd/data/chain/bitcoin/$NETWORK/admin.macaroon | tr -d '\n\r')
    export READONLY_MACAROON=$(base64 /root/.lnd/data/chain/bitcoin/$NETWORK/readonly.macaroon | tr -d '\n\r')
    export XPUB=$(lncli -n mainnet wallet accounts list --name default | jq -c -r '.accounts[] | select(.derivation_path | contains("m/84")) | .extended_public_key')

    mkdir macaroons
    cp /root/.lnd/data/chain/bitcoin/$NETWORK/*.macaroon macaroons

    kubectl create secret generic release-name-lnd-credentials \
    --from-literal=tls_base64=$TLS --from-file=/root/.lnd/tls.cert \
    --from-literal=readonly_macaroon_base64=$READONLY_MACAROON \
    --from-literal=xpub=$XPUB \
    --from-literal=admin_macaroon_base64=$MACAROON --from-file=macaroons \
    --dry-run=client -o yaml | kubectl apply -f -
---
# Source: lnd/templates/wallet-init-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-lnd-wallet-init
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
data:
  walletInit.exp: |
    #!/usr/bin/expect -f
    #
    # This Expect script was generated by autoexpect on Sun Mar 14 17:50:41 2021
    # Expect and autoexpect were both written by Don Libes, NIST.
    #
    # Note that autoexpect does not guarantee a working script.  It
    # necessarily has to guess about certain things.  Two reasons a script
    # might fail are:
    #
    # 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
    # etc.) and devices discard or ignore keystrokes that arrive "too
    # quickly" after prompts.  If you find your new script hanging up at
    # one spot, try adding a short sleep just before the previous send.
    # Setting "force_conservative" to 1 (see below) makes Expect do this
    # automatically - pausing briefly before sending each character.  This
    # pacifies every program I know of.  The -c flag makes the script do
    # this in the first place.  The -C flag allows you to define a
    # character to toggle this mode off and on.

    set force_conservative 0  ;# set to 1 to force conservative mode even if
                ;# script wasn't run conservatively originally
    if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
            sleep .1
            exp_send -s -- $arg
        }
    }

    #
    # 2) differing output - Some programs produce different output each time
    # they run.  The "date" command is an obvious example.  Another is
    # ftp, if it produces throughput statistics at the end of a file
    # transfer.  If this causes a problem, delete these patterns or replace
    # them with wildcards.  An alternative is to use the -p flag (for
    # "prompt") which makes Expect only look for the last line of output
    # (i.e., the prompt).  The -P flag allows you to define a character to
    # toggle this mode off and on.
    #
    # Read the man page for more info.
    #
    # -Don

    set timeout -1
    set NETWORK [lindex $argv 0];
    set PASSWORD [lindex $argv 1];
    spawn lncli -n $NETWORK create
    match_max 100000
    expect -exact "Input wallet password: "
    send -- "$PASSWORD\r"
    expect -exact "\r
    Confirm password: "
    send -- "$PASSWORD\r"
    expect -exact "\r
    \r
    Do you have an existing cipher seed mnemonic or extended master root key you want to use?\r
    Enter 'y' to use an existing cipher seed mnemonic, 'x' to use an extended master root key \r
    or 'n' to create a new seed (Enter y/x/n): "
    send -- "n\r"
    expect -exact "n\r
    \r
    Your cipher seed can optionally be encrypted.\r
    Input your passphrase if you wish to encrypt it (or press enter to proceed without a cipher seed passphrase): "
    send -- "\r"
    expect eof
---
# Source: lnd/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-lnd
  annotations:
    "helm.sh/resource-policy": keep
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: lnd/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "patch", "delete"]
---
# Source: lnd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  name: release-name-lnd
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-name-lnd
    namespace: default
---
# Source: lnd/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: rpc
      port: 10009
    - name: rest
      port: 8080
  selector:
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
---
# Source: lnd/templates/service-p2p.yml
apiVersion: v1
kind: Service
metadata:
  name: release-name-lnd-p2p
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: p2p
      port: 9735
  selector:
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
---
# Source: lnd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-lnd
  labels:
    helm.sh/chart: lnd-0.10.1
    app.kubernetes.io/name: lnd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.16.1"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-lnd
  selector:
    matchLabels:
      app.kubernetes.io/name: lnd
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 384c87715a457ceb8f92acc25316ed912f50f8162938cbf7f558469cd88316a0
        checksum/exportSecrets: 6b70119ccc3409f7074bea2dd1fb592c988f6da1d339435ca80e2e5da28bd840
        prometheus.io/path: /metrics
        prometheus.io/port: "9092"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: lnd
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-lnd
      terminationGracePeriodSeconds: 600
      initContainers:
        - name: copy-lnd-config
          image: "lightninglabs/lnd:v0.17.4-beta"
          command:
          - 'sh'
          - '-c'
          - |
            cat <<EOF > /root/.lnd/lnd.conf
            bitcoind.rpcpass=$(cat /rpcpassword/password)
            $(cat /configmap/lnd.conf)
            EOF
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /root/.lnd/
            - name: rpcpassword
              mountPath: /rpcpassword
      containers:
        - name: tor
          image: osminogin/tor-simple
          securityContext:
            runAsUser: 100
          command: ['/bin/sh']
          volumeMounts:
          - name: tor-cookie-auth
            mountPath: /var/lib/tor/auth
          args:
          - '-c'
          - |
            sed 's/SocksPort 0.0.0.0:9050/SocksPort 127.0.0.1:9050/g' /etc/tor/torrc > ~/torrc
            cat <<EOF > ~/torrc
            ControlPort 9051
            CookieAuthentication 1
            CookieAuthFile /var/lib/tor/auth/cookie
            CookieAuthFileGroupReadable 1
            $(cat ~/torrc)
            EOF
            exec tor -f ~/torrc
        - name: export-secrets
          image: "us.gcr.io/galoy-org/lnd-sidecar@sha256:ae56a70bb2910af00561ec02f17e1d32df3010fb5dca24b1e3edd10786ce060a"
          command: ['/bin/sh']
          args:
          - '-c'
          - |
            lncli -n=$NETWORK getinfo
            while [[ $? != 0 ]]; do sleep 1; lncli -n=$NETWORK getinfo; done
            /home/alpine/exportSecrets.sh
            trap "echo shutting down; exit 0" SIGKILL SIGTERM
            while true; do sleep 1; done
          env:
          - name: NETWORK
            valueFrom:
              secretKeyRef:
                name: network
                key: network
          volumeMounts:
          - name: export-secrets
            mountPath: /home/alpine/exportSecrets.sh
            subPath: exportSecrets.sh
          - name: lnd-storage
            mountPath: /root/.lnd
        - name: lnd
          image: "lightninglabs/lnd:v0.17.4-beta"
          ports:
            - name: rpc
              containerPort: 10009
            - name: p2p
              containerPort: 9735
            - name: rest
              containerPort: 8080
          volumeMounts:
            - name: tor-cookie-auth
              mountPath: /var/lib/tor/auth
            - name: lnd-storage
              mountPath: /root/.lnd
            - name: config
              mountPath: /root/.lnd/lnd.conf
              subPath: lnd.conf
            - name: lnd-password
              mountPath: /tmp/lnd-pass
              subPath: password
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - "lncli -n mainnet state | grep -q SERVER_ACTIVE"
            failureThreshold: 540
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - "lncli -n mainnet state | grep -q SERVER_ACTIVE"
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - "lncli -n mainnet state | grep -q SERVER_ACTIVE"
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
            initialDelaySeconds: 600
          resources:
            {}
      volumes:
        - name: wallet-init
          configMap:
            name: release-name-lnd-wallet-init
            defaultMode: 0777
        - name: export-secrets
          configMap:
            name: release-name-lnd-export-secrets
            defaultMode: 0777
        - name: config
          emptyDir: {}
        - name: rpcpassword
          secret:
            secretName: bitcoind-rpcpassword
        - name: configmap
          configMap:
            name: release-name-lnd
        - name: lnd-password
          secret:
            secretName: release-name-lnd-pass
        - name: lnd-storage
          persistentVolumeClaim:
            claimName: release-name-lnd
        - name: tor-cookie-auth
          emptyDir: {}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - bitcoind
              topologyKey: kubernetes.io/hostname
            weight: 100
