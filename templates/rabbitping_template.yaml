---
# Source: rabbitping/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitping
  labels:
    helm.sh/chart: rabbitping-1.2.1
    app.kubernetes.io/name: rabbitping
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: rabbitping/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitping
data:
  AMQP_URL: amqp://guest:guest@rabbitmq:5672/
  FAILURE_THRESHOLD: "6"
  HEALTH_ADDR: :8888
  HEALTH_PATH: /health
  INTERVAL: 10s
  METRICS_ADDR: :3000
  METRICS_BUCKETS_LATENCY: 0.0005, 0.001, 0.0025, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25,
    .5, 1, 2.5, 5
  METRICS_NAMESPACE: ""
  METRICS_PATH: /metrics
  RESTART_DEPLOY: my-miniapi
  RESTART_NAMESPACE: miniapi
  TIMEOUT: 5s
---
# Source: rabbitping/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-rabbitping
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - update
---
# Source: rabbitping/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-rabbitping
  namespace: miniapi
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-rabbitping
subjects:
- kind: ServiceAccount
  name: release-name-rabbitping
  namespace: default
---
# Source: rabbitping/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-rabbitping
  labels:
    helm.sh/chart: rabbitping-1.2.1
    app.kubernetes.io/name: rabbitping
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitping
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        rollme: "RwuuH"
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "true"
      labels:
        app.kubernetes.io/name: rabbitping
        app.kubernetes.io/instance: release-name
        app: rabbitping
    spec:
      serviceAccountName: release-name-rabbitping
      securityContext:
        {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: release-name
          securityContext:
            {}
          image: "udhos/rabbitping:1.2.1"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: release-name-rabbitping
          startupProbe:
            # must initialize within 3*100=300 seconds
            httpGet:
              path: /health
              port: 8888
            periodSeconds: 3
            failureThreshold: 100
          readinessProbe:
            # not ready after 10*6=60 seconds without success
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            periodSeconds: 10
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            # kill after 20*6=120 seconds without success
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 10            
          resources:
            limits:
              cpu: 2000m
              ephemeral-storage: 200Mi
              memory: 300Mi
            requests:
              cpu: 300m
              ephemeral-storage: 100Mi
              memory: 100Mi
