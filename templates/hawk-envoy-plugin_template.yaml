---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
# Copyright Istio Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

##################################################################################################
# httpbin service
##################################################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: "release-name-hawk-envoy-plugin-httpbin"
  labels:
    istio-injection: "enabled"
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
automountServiceAccountToken: true
secrets:
  - name: release-name-rabbitmq
---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "release-name-hawk-envoy-plugin-httpbin"
  namespace: "release-name-hawk-envoy-plugin-httpbin"
---
# Source: hawk-envoy-plugin/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-hawk-envoy-plugin
  labels:
    helm.sh/chart: hawk-envoy-plugin-0.1.0
    app.kubernetes.io/name: hawk-envoy-plugin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IGd1ZXN0CiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCgojIHF1ZXVlIG1hc3RlciBsb2NhdG9yCnF1ZXVlX21hc3Rlcl9sb2NhdG9yID0gbWluLW1hc3RlcnMKIyBlbmFibGUgbG9vcGJhY2sgdXNlcgpsb29wYmFja191c2Vycy5ndWVzdCA9IGZhbHNlCiNkZWZhdWx0X3Zob3N0ID0gZGVmYXVsdC12aG9zdAojZGlza19mcmVlX2xpbWl0LmFic29sdXRlID0gNTBNQg==
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
type: Opaque
data:
  rabbitmq-password: "Z3Vlc3Q="
  rabbitmq-erlang-cookie: "dGpuOVFxejZiSm45WlRLZVBmRUJPRjRSd2xJbUd0SUU="
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
subjects:
  - kind: ServiceAccount
    name: release-name-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq-endpoint-reader
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: rabbitmq
  publishNotReadyAddresses: true
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: rabbitmq
---
# Source: hawk-envoy-plugin/templates/collector/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-hawk-envoy-plugin-collector
  labels:
    helm.sh/chart: hawk-envoy-plugin-0.1.0
    app.kubernetes.io/name: hawk-envoy-plugin-collector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hawk-envoy-plugin-collector
    app.kubernetes.io/instance: release-name
---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-hawk-envoy-plugin-httpbin"
  namespace: "release-name-hawk-envoy-plugin-httpbin"
  labels:
    app: httpbin
    service: httpbin
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin
---
# Source: hawk-envoy-plugin/templates/collector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hawk-envoy-plugin-collector
  labels:
    helm.sh/chart: hawk-envoy-plugin-0.1.0
    app.kubernetes.io/name: hawk-envoy-plugin-collector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hawk-envoy-plugin-collector
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hawk-envoy-plugin-collector
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hawk-envoy-plugin
      securityContext:
        null
      containers:
        - name: hawk-envoy-plugin-collector
          securityContext:
            null
          image: "ghcr.io/privacyengineering/collector-go:main"
          imagePullPolicy: Always
          env:
            # TODO: use secret from rabbitmq helm chart
            - name: AMQP_CONNECTION
              value: "amqp://guest:guest@release-name-rabbitmq:5672/"
            - name: AMQP_QUEUE
              value: "queue.collector"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 32Mi
---
# Source: hawk-envoy-plugin/templates/consumer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hawk-envoy-plugin-consumer
  labels:
    helm.sh/chart: hawk-envoy-plugin-0.1.0
    app.kubernetes.io/name: hawk-envoy-plugin-consumer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hawk-envoy-plugin-consumer
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hawk-envoy-plugin-consumer
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hawk-envoy-plugin
      securityContext:
        null
      containers:
        - name: hawk-envoy-plugin-consumer
          securityContext:
            null
          image: "ghcr.io/privacyengineering/consumer:main"
          imagePullPolicy: IfNotPresent
          env:
            # TODO: use secret from rabbitmq helm chart
            - name: AMQP_CONNECTION
              value: "amqp://guest:guest@release-name-rabbitmq:5672/"
            - name: AMQP_QUEUE
              value: "queue.collector"
            - name: AMQP_DLQ
              value: "queue.collector.dlq"
            - name: COLLECTOR_URL
              value: "http://hawk-service.hawk.svc.cluster.local/api/usages/batch"
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 32Mi
---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-hawk-envoy-plugin-httpbin"
  namespace: "release-name-hawk-envoy-plugin-httpbin"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      serviceAccountName: "release-name-hawk-envoy-plugin-httpbin"
      containers:
      - image: docker.io/kong/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        ports:
        - containerPort: 80
---
# Source: hawk-envoy-plugin/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-12.1.0
spec:
  serviceName: release-name-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-12.1.0
      annotations:
        checksum/config: 65f667bc94197be8843037bd3dab2ce66254f47ea52c71b469d5213b2eca91f0
        checksum/secret: 4c70d1e8ddb7f1ecd7b1c6743cbd694de64cefbe7462ec9041cb8827f07e4568
    spec:
      
      serviceAccountName: release-name-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: rabbitmq
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.12.3-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: release-name-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "guest"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - curl -f --user guest:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/virtual-hosts
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - curl -f --user guest:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/local-alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: release-name-rabbitmq-config
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/name: rabbitmq
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hawk-envoy-plugin/templates/filter/actixgo.filter.yaml
# istio api config: https://github.com/istio/api/blob/master/networking/v1alpha3/envoy_filter.gen.json
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  # namespace is important because it is the namespace where the filter will act
  name: actixgo-filter-config
  namespace: sock-shop
spec:
  configPatches:
    - applyTo: EXTENSION_CONFIG
      match:
#        context: GATEWAY
        context: SIDECAR_INBOUND
      patch:
        operation: ADD
        value:
          name: actixgo-filter-config
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
            value:
              config:
                # envoy api: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-remotedatasource
                vm_config:
                  vm_id: actixgo-filter
                  allow_precompiled: true
                  runtime: envoy.wasm.runtime.v8
                  configuration:
                    "@type": "type.googleapis.com/google.protobuf.StringValue"
                    value: "outbound|80||release-name-hawk-envoy-plugin-collector.default.svc.cluster.local"
                  code:
                    remote:
                      # envoy api for http_uri: https://github.com/envoyproxy/envoy/blob/main/api/envoy/api/v2/core/http_uri.proto
                      http_uri:
                        uri: https://github.com/jmgoyesc/istio-extensions/blob/main/actixgo-filter.wasm?raw=true
#                        uri: http://nginx-serve-filter-service.nginx-serve-filter.svc/actixgo-filter.wasm
                        timeout: 10s
                        cluster: jwks_cluster
                      # command `sha256sum`
#                      sha256: 5c52cd8b899e36f938d71474a9de230d1fde68949d63d88fe905640d319b4c1b
                      sha256: d0b468938af078e0d2c347483ed03d049b93167bcb5e0d7a0416229a26f07139
---
# Source: hawk-envoy-plugin/templates/filter/actixgo.filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  # namespace is important because it is the namespace where the filter will act
  name: actixgo-filter
  namespace: sock-shop
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
#        context: GATEWAY
        context: SIDECAR_INBOUND
#        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: actixgo-filter-config
          config_discovery:
            config_source:
              ads: {}
              initial_fetch_timeout: 0s # wait indefinitely to prevent bad Wasm fetch
            type_urls: [ "type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm"]
---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
# istio api config: https://github.com/istio/api/blob/master/networking/v1alpha3/envoy_filter.gen.json
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  # namespace is important because it is the namespace where the filter will act
  name: actixgo-filter-config
  namespace: release-name-hawk-envoy-plugin-httpbin
spec:
  configPatches:
    - applyTo: EXTENSION_CONFIG
      match:
#        context: GATEWAY
        context: SIDECAR_INBOUND
      patch:
        operation: ADD
        value:
          name: actixgo-filter-config
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
            value:
              config:
                # envoy api: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-remotedatasource
                vm_config:
                  vm_id: actixgo-filter
                  allow_precompiled: true
                  runtime: envoy.wasm.runtime.v8
                  configuration:
                    "@type": "type.googleapis.com/google.protobuf.StringValue"
                    value: "outbound|80||release-name-hawk-envoy-plugin-collector.default.svc.cluster.local"
                  code:
                    remote:
                      # envoy api for http_uri: https://github.com/envoyproxy/envoy/blob/main/api/envoy/api/v2/core/http_uri.proto
                      http_uri:
                        uri: https://github.com/jmgoyesc/istio-extensions/blob/main/actixgo-filter.wasm?raw=true
#                        uri: http://nginx-serve-filter-service.nginx-serve-filter.svc/actixgo-filter.wasm
                        timeout: 10s
                        cluster: jwks_cluster
                      # command `sha256sum`
#                      sha256: 5c52cd8b899e36f938d71474a9de230d1fde68949d63d88fe905640d319b4c1b
                      sha256: d0b468938af078e0d2c347483ed03d049b93167bcb5e0d7a0416229a26f07139
---
# Source: hawk-envoy-plugin/templates/httpbin/httpbin.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  # namespace is important because it is the namespace where the filter will act
  name: actixgo-filter
  namespace: release-name-hawk-envoy-plugin-httpbin
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
#        context: GATEWAY
        context: SIDECAR_INBOUND
#        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: actixgo-filter-config
          config_discovery:
            config_source:
              ads: {}
              initial_fetch_timeout: 0s # wait indefinitely to prevent bad Wasm fetch
            type_urls: [ "type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm"]
---
# Source: hawk-envoy-plugin/templates/tests/httpbin.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-hawk-envoy-plugin-test-connection"
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: alpine/curl
      command:
        - sh
        - -c
        - |
          set -e
          PARAM="should-be-in-hawk-service-${RANDOM}"
          curl -X GET "http://release-name-hawk-envoy-plugin-httpbin.release-name-hawk-envoy-plugin-httpbin.svc:8000/response-headers?freeform=${PARAM}"
          
          sleep 10
          
          echo "Checking if ${PARAM} is in unmapped endpoints:"

          curl -X GET "http://hawk-service.hawk.svc.cluster.local/api/endpoints/unmapped" | grep "${PARAM}"
  restartPolicy: Never
