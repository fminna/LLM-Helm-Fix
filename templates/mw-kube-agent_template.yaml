---
# Source: mw-kube-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mw-service-account
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: mw-kube-agent/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mw-app-certs
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
---
# Source: mw-kube-agent/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mw-app-csrf
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  csrf: ""
---
# Source: mw-kube-agent/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mw-app-key-holder
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
---
# Source: mw-kube-agent/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mw-app-settings
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: mw-kube-agent/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
  name: mw-cluster-role
  namespace: mw-agent-ns
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

  # Other resources
  - apiGroups: [""]
    resources: ["nodes", "nodes/stats", "namespaces", "pods", "serviceaccounts", "services", "configmaps", "endpoints", "persistentvolumeclaims", "replicationcontrollers", "replicationcontrollers/scale", "persistentvolumeclaims", "persistentvolumes", "bindings", "events", "limitranges", "namespaces/status", "pods/log", "pods/status", "replicationcontrollers/status", "resourcequotas", "resourcequotas/status"]
    verbs: ["get", "list", "watch"]
  
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "deployments/scale", "replicasets", "replicasets/scale", "statefulsets"]
    verbs: ["get", "list", "watch", "patch"]

  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["batch"]
    resources: ["cronjobs", "jobs"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["extensions"]
    resources: ["daemonsets", "deployments", "deployments/scale", "networkpolicies", "replicasets", "replicasets/scale", "replicationcontrollers/scale"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "networkpolicies"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "volumeattachments"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterrolebindings", "clusterroles", "roles", "rolebindings", ]
    verbs: ["get", "list", "watch"]
---
# Source: mw-kube-agent/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mw-cluster-role-binding
  namespace: mw-agent-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mw-cluster-role
subjects:
  - kind: ServiceAccount
    name: mw-service-account
    namespace: mw-agent-ns
---
# Source: mw-kube-agent/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
  name: mw-role
  namespace: mw-agent-ns
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: [mw-app-certs, mw-app-csrf, mw-app-key-holder]
    verbs: ["get", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/exec"]
    verbs: ["get", "list", "delete", "patch", "create"]
    # Allow Dashboard to get and update 'mw-app-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: [mw-app-settings]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
---
# Source: mw-kube-agent/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mw-role-binding
  namespace: mw-agent-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mw-role
subjects:
  - kind: ServiceAccount
    name: mw-service-account
    namespace: mw-agent-ns
---
# Source: mw-kube-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mw-kube-agent-svc
  namespace: mw-agent-ns
  labels:
    helm.sh/chart: mw-kube-agent-0.1.2
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: 8443
      name: grpc
    - port: 9319
      targetPort: 9319
      name: grpc2
    - port: 9320
      targetPort: 9320
      name: http
    - port: 8006
      targetPort: 8006
      name: fluent
  selector:
    app.kubernetes.io/name: mw-kube-agent
    app.kubernetes.io/instance: release-name
---
# Source: mw-kube-agent/templates/daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: mw-kube-agent
  namespace: mw-agent-ns
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mw-kube-agent
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mw-kube-agent
        app.kubernetes.io/instance: release-name
    spec:
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
      hostNetwork: true
      volumes:
      # volume binding for log collection 
      - name: varlog
        hostPath:
          path: /var/log
      - name: varrun
        hostPath:
          path: /var/run/docker.sock
      - name: runcontainerd
        hostPath:
          path: /run/containerd/containerd.sock
      # volume binding for log collection
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      containers:
        - args:
            - mw-agent
            - start
          env:
            - name: MW_TARGET
              value: MW_TARGET
            - name: MW_API_KEY
              value: MW_API_KEY
          image: "ghcr.io/middleware-labs/mw-kube-agent:master"
          imagePullPolicy: IfNotPresent
          name: mw-kube-agent
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /var/log
            name: varlog
            readOnly: true
          - mountPath: /var/run/docker.sock
            name: varrun
            readOnly: true
          - mountPath: /run/containerd/containerd.sock
            name: runcontainerd
            readOnly: true
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          resources: {}
      restartPolicy: Always
      serviceAccountName: mw-service-account
