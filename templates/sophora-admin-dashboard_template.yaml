---
# Source: sophora-admin-dashboard/templates/config-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sophora-admin-dashboard
  labels:
    helm.sh/chart: sophora-admin-dashboard-1.2.1
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  dashboard-config.json: |
    {
      httpPort: 8090,
      hostname: "localhost",
      defaultPollInterval: 10000,
      statusPollInterval: 1000,
      documentCountInterval: 3600000,
      ibfEnabled: false,
      server: {
          sophoraUsername: "${SERVER_SOPHORAUSERNAME}",
          sophoraPassword: "${SERVER_SOPHORAPASSWORD}",
          masterHostname: "",
          masterHttpPort: 1196,
          contentApiPath: "/content-api",
          jolokiaUsername: "${SERVER_JOLOKIAUSERNAME}",
          jolokiaPassword: "${SERVER_JOLOKIAPASSWORD}",
          jolokiaPath: "/jolokia",
          hasEmbeddedSolr: true,
          solrUsername: "${SERVER_SOLRUSERNAME}",
          solrPassword: "${SERVER_SOLRPASSWORD}",
          solrPath: "/solr",
          tomcatJmx: {
              port: 9012
          }
      },
      importer: {
          jolokiaPath: "/jolokia",
          jolokiaUsername: "${IMPORTER_JOLOKIAUSERNAME}",
          jolokiaPassword: "${IMPORTER_JOLOKIAPASSWORD}"
      },
      indexer: {
          jolokiaPath: "/jolokia",
          jolokiaUsername: "${INDEXER_JOLOKIAUSERNAME}",
          jolokiaPassword: "${INDEXER_JOLOKIAPASSWORD}"
      }
    }
---
# Source: sophora-admin-dashboard/templates/logback-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sophora-admin-dashboard-logback
  labels:
    helm.sh/chart: sophora-admin-dashboard-1.2.1
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8" ?>
    
    <configuration scan="true" scanPerion="10 seconds">
        <jmxConfigurator />
        
        <!-- Propagate level settings to java.util.logging. -->
        <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator" />
        
        <property name="PATTERN" value="%d{HH:mm:ss} %-5level [%thread] [%X] %logger{0}:%L: %m%n" />
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>[%d{ISO8601}, %-5p] [%thread] %-5level %.40c:%L - %msg %n</pattern>
            </encoder>
        </appender>
        <appender name="logfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>logs/dashboard.log</File>
        
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>logs/dashboard.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                <maxHistory>7</maxHistory>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
        </appender>
        
        <appender name="warnlog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
            </filter>
        
            <File>logs/dashboard_warn.log</File>
        
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>logs/dashboard_warn.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                <maxHistory>7</maxHistory>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
        </appender>
        
        <appender name="jetty" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>logs/dashboard_request.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>logs/dashboard_request.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                <maxHistory>30</maxHistory>
            </rollingPolicy>
            <encoder>
                <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
            </encoder>
        </appender>
        
        <logger name="com.subshell.sophora" level="INFO" />
        <logger name="org.springframework" level="WARN" />
        <!-- Suppress warnings from the RestTemplate. It will throw an exception anyway. -->
        <logger name="org.springframework.web.client.RestTemplate" level="ERROR" />
        <logger name="org.eclipse.jetty" level="WARN" />
        
        <logger name="org.eclipse.jetty.server.RequestLog" level="INFO" additivity="false">
            <appender-ref ref="jetty" />
        </logger>
        
        <root level="WARN">
            <appender-ref ref="STDOUT" />
        </root>
    </configuration>
---
# Source: sophora-admin-dashboard/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sophora-admin-dashboard
  labels:
    helm.sh/chart: sophora-admin-dashboard-1.2.1
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: 
  
  
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
---
# Source: sophora-admin-dashboard/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-sophora-admin-dashboard
  labels:
    helm.sh/chart: sophora-admin-dashboard-1.2.1
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: release-name-sophora-admin-dashboard
  selector:
    matchLabels:
      app.kubernetes.io/name: sophora-admin-dashboard
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 4c850377ec5de3e384d1522dd272ae6184ce88103539ea9b09a3f20e4b54c888
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        
      labels:
        app.kubernetes.io/name: sophora-admin-dashboard
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
        - name: config-generator
          image: "docker.subshell.com/misc/alpine-toolkit:0.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVER_SOPHORAUSERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: 
            - name: SERVER_SOPHORAPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: 
            - name: SERVER_SOLRUSERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: 
            - name: SERVER_SOLRPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: 
            - name: SERVER_JOLOKIAUSERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: 
            - name: SERVER_JOLOKIAPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: 
            - name: IMPORTER_JOLOKIAUSERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: 
            - name: IMPORTER_JOLOKIAPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: 
            - name: INDEXER_JOLOKIAUSERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: 
            - name: INDEXER_JOLOKIAPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: 
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              envsubst < /dashboard-config-template/dashboard-config.json > /dashboard-config/dashboard-config.json
              echo "Generated /dashboard-config/dashboard-config.json from ENV"
          volumeMounts:
            - name: sophora-dashboard-config-template
              mountPath: /dashboard-config-template
            - name: sophora-dashboard-config
              mountPath: /dashboard-config
      containers:
        - name: sophora-admin-dashboard
          image: "docker.subshell.com/sophora/sophora-dashboard:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 10
            initialDelaySeconds: 10
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2.5Gi
            requests:
              cpu: 50m
              memory: 2.5Gi
          volumeMounts:
            - name: sophora-dashboard-config
              mountPath: /app/dashboard/config/dashboard-config.json
              subPath: dashboard-config.json
            - name: sophora-dashboard-logback
              mountPath: /app/dashboard/config/logback.xml
              subPath: logback.xml
            - name: persistence
              mountPath: /app/dashboard/persistence
            - name: rrd
              mountPath: /app/dashboard/rrd
          env:
            - name: JDK_JAVA_OPTIONS
              value: -XX:InitialRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0 -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem
            

      volumes:
        - name: sophora-dashboard-config-template
          configMap:
            name: release-name-sophora-admin-dashboard
        - name: sophora-dashboard-logback
          configMap:
            name: release-name-sophora-admin-dashboard-logback
        - name: sophora-dashboard-config
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: persistence
        labels:
          app.kubernetes.io/name: sophora-admin-dashboard
          app.kubernetes.io/instance: release-name
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: 
        resources:
          requests:
            storage: 1Mi
    - metadata:
        name: rrd
        labels:
          app.kubernetes.io/name: sophora-admin-dashboard
          app.kubernetes.io/instance: release-name
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: 
        resources:
          requests:
            storage: 200Mi
---
# Source: sophora-admin-dashboard/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-sophora-admin-dashboard
  labels:
    helm.sh/chart: sophora-admin-dashboard-1.2.1
    app.kubernetes.io/name: sophora-admin-dashboard
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
