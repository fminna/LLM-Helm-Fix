---
# Source: archiva/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-archiva
  namespace: default
  labels:
    helm.sh/chart: archiva-0.0.7
    app.kubernetes.io/name: archiva
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.2.5"
    app.kubernetes.io/managed-by: Helm
data:
  archiva.xml: |-
    
    <configuration>
        <remoteRepositories>
            <remoteRepository>
                <url>https://repo.maven.apache.org/maven2</url>
                <downloadRemoteIndex>false</downloadRemoteIndex>
                <downloadRemoteIndexOnStartup>false</downloadRemoteIndexOnStartup>
                <id>central</id>
                <name>Central Repository</name>
            </remoteRepository>
            <remoteRepository>
                <url>https://plugins.gradle.org/m2</url>
                <downloadRemoteIndex>false</downloadRemoteIndex>
                <downloadRemoteIndexOnStartup>false</downloadRemoteIndexOnStartup>
                <id>gradle</id>
                <name>Gradle Plugins Repository</name>
            </remoteRepository>
        </remoteRepositories>
        <proxyConnectors>
            <proxyConnector>
                <order>1</order>
                <sourceRepoId>internal</sourceRepoId>
                <targetRepoId>central</targetRepoId>
                <proxyId/>
                <whiteListPatterns>
                    <whiteListPattern>**/*</whiteListPattern>
                </whiteListPatterns>
                <policies>
                    <releases>once</releases>
                    <checksum>fix</checksum>
                    <snapshots>never</snapshots>
                    <cache-failures>yes</cache-failures>
                </policies>
                <disabled>false</disabled>
            </proxyConnector>
            <proxyConnector>
                <order>2</order>
                <sourceRepoId>internal</sourceRepoId>
                <targetRepoId>gradle</targetRepoId>
                <proxyId/>
                <whiteListPatterns>
                    <whiteListPattern>**/*</whiteListPattern>
                </whiteListPatterns>
                <policies>
                    <releases>once</releases>
                    <checksum>fix</checksum>
                    <snapshots>never</snapshots>
                    <cache-failures>yes</cache-failures>
                </policies>
                <disabled>false</disabled>
            </proxyConnector>
        </proxyConnectors>
    </configuration>
---
# Source: archiva/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-archiva
  namespace: default
  labels:
    helm.sh/chart: archiva-0.0.7
    app.kubernetes.io/name: archiva
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.2.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: archiva
    app.kubernetes.io/instance: release-name
---
# Source: archiva/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-archiva
  namespace: default
  labels:
    helm.sh/chart: archiva-0.0.7
    app.kubernetes.io/name: archiva
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.2.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: archiva
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: archiva
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: init
          image: busybox
          command:
            - sh
            - -c
          args:
            - cp /tmp-conf/archiva.xml /archiva-templates/conf/archiva.xml;
              echo "<configuration />" > /archiva-templates/conf/shared.xml;
              chown -R 1000:1000 /archiva-templates;
              chown -R 1000:1000 /archiva-data;
          volumeMounts:
            - name: release-name-archiva
              mountPath: /tmp-conf/archiva.xml
              subPath: archiva.xml
            - name: release-name-archiva-shared
              mountPath: /archiva-templates/conf/
            - mountPath: /archiva-data
              name: data
      containers:
        - name: archiva
          securityContext:
            {}
          image: "xetusoss/archiva:v2.2.5"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /healthcheck.sh
          readinessProbe:
            exec:
              command:
              - /healthcheck.sh
          resources:
            {}
          env:
            - name: DB_TYPE
              value: derby
          volumeMounts:
            - name: release-name-archiva-shared
              mountPath: /archiva-templates/conf/
            - mountPath: /archiva-data
              name: data
      volumes:
        - name: release-name-archiva-shared
          emptyDir: {}
        - name: release-name-archiva
          configMap:
            name: release-name-archiva
            items:
              - key: archiva.xml
                path: archiva.xml
        - emptyDir: {}
          name: data
---
# Source: archiva/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-archiva-test-connection"
  namespace: default
  labels:
    helm.sh/chart: archiva-0.0.7
    app.kubernetes.io/name: archiva
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.2.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-archiva:80']
  restartPolicy: Never
