---
# Source: core/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-core
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: core/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-core
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  dhis.conf: |
    connection.dialect = org.hibernate.dialect.PostgreSQLDialect
    connection.driver_class = org.postgresql.Driver
    connection.url = jdbc:postgresql://dhis2-core-database-postgresql.dhis2-core.svc.cluster.local/dhis2
    connection.username = dhis
    connection.password = dhis
    # Database schema behavior, can be validate, update, create, create-drop
    connection.schema = update
    
  server.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!-- Note:  A "Server" is not itself a "Container", so you may not
         define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/server.html
     -->
    <Server port="-1">
        <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
        <!-- Security listener. Documentation at /docs/config/listeners.html
        <Listener className="org.apache.catalina.security.SecurityListener" />
        -->
        <!--APR library loader. Documentation at /docs/apr.html -->
        <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
        <!-- Prevent memory leaks due to use of particular java/javax APIs-->
        <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
        <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
        <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
    
        <!-- Global JNDI resources
             Documentation at /docs/jndi-resources-howto.html
        -->
        <GlobalNamingResources>
            <!-- Editable user database that can also be used by
                 UserDatabaseRealm to authenticate users
            -->
            <Resource name="UserDatabase" auth="Container"
                      type="org.apache.catalina.UserDatabase"
                      description="User database that can be updated and saved"
                      factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                      pathname="conf/tomcat-users.xml" />
        </GlobalNamingResources>
    
        <!-- A "Service" is a collection of one or more "Connectors" that share
             a single "Container" Note:  A "Service" is not itself a "Container",
             so you may not define subcomponents such as "Valves" at this level.
             Documentation at /docs/config/service.html
         -->
        <Service name="Catalina">
    
            <!--The connectors can use a shared executor, you can define one or more named thread pools-->
            <!--
            <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
                maxThreads="150" minSpareThreads="4"/>
            -->
    
    
            <!-- A "Connector" represents an endpoint by which requests are received
                 and responses are returned. Documentation at :
                 Java HTTP Connector: /docs/config/http.html
                 Java AJP  Connector: /docs/config/ajp.html
                 APR (HTTP/AJP) Connector: /docs/apr.html
                 Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
            -->
            <Connector port="8080" protocol="HTTP/1.1"
                       connectionTimeout="20000"
                       redirectPort="8443"
                       URIEncoding="UTF-8"
                       relaxedQueryChars='\ { } | [ ]'/>
            <!-- A "Connector" using the shared thread pool-->
            <!--
            <Connector executor="tomcatThreadPool"
                       port="8080" protocol="HTTP/1.1"
                       connectionTimeout="20000"
                       redirectPort="8443" />
            -->
            <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443
                 This connector uses the NIO implementation. The default
                 SSLImplementation will depend on the presence of the APR/native
                 library and the useOpenSSL attribute of the
                 AprLifecycleListener.
                 Either JSSE or OpenSSL style configuration may be used regardless of
                 the SSLImplementation selected. JSSE style configuration is used below.
            -->
            <!--
            <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                       maxThreads="150" SSLEnabled="true">
                <SSLHostConfig>
                    <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                                 type="RSA" />
                </SSLHostConfig>
            </Connector>
            -->
            <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
                 This connector uses the APR/native implementation which always uses
                 OpenSSL for TLS.
                 Either JSSE or OpenSSL style configuration may be used. OpenSSL style
                 configuration is used below.
            -->
            <!--
            <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                       maxThreads="150" SSLEnabled="true" >
                <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
                <SSLHostConfig>
                    <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                                 certificateFile="conf/localhost-rsa-cert.pem"
                                 certificateChainFile="conf/localhost-rsa-chain.pem"
                                 type="RSA" />
                </SSLHostConfig>
            </Connector>
            -->
    
            <!-- Define an AJP 1.3 Connector on port 8009 -->
            <!--
            <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" secretRequired="false" />
            -->
    
            <!-- An Engine represents the entry point (within Catalina) that processes
                 every request.  The Engine implementation for Tomcat stand alone
                 analyzes the HTTP headers included with the request, and passes them
                 on to the appropriate Host (virtual host).
                 Documentation at /docs/config/engine.html -->
    
            <!-- You should set jvmRoute to support load-balancing via AJP ie :
            <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
            -->
            <Engine name="Catalina" defaultHost="localhost">
    
                <!--For clustering, please take a look at documentation at:
                    /docs/cluster-howto.html  (simple how to)
                    /docs/config/cluster.html (reference documentation) -->
                <!--
                <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
                -->
    
                <!-- Use the LockOutRealm to prevent attempts to guess user passwords
                     via a brute-force attack -->
                <Realm className="org.apache.catalina.realm.LockOutRealm">
                    <!-- This Realm uses the UserDatabase configured in the global JNDI
                         resources under the key "UserDatabase".  Any edits
                         that are performed against this UserDatabase are immediately
                         available for use by the Realm.  -->
                    <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                           resourceName="UserDatabase"/>
                </Realm>
    
                <Host
                        name="localhost"
                        appBase="webapps"
                        unpackWARs="false"
                        autoDeploy="false"
                        deployOnStartup="false"
                >
    
                    <Context path="${context.path}" docBase="ROOT/" />
    
                    <!-- SingleSignOn valve, share authentication between web applications
                         Documentation at: /docs/config/valve.html -->
                    <!--
                    <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
                    -->
    
                    <!-- Access log processes all example.
                         Documentation at: /docs/config/valve.html
                         Note: The pattern used is equivalent to using pattern="common" -->
                    <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                           prefix="localhost_access_log" suffix=".txt"
                           pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    
                </Host>
            </Engine>
        </Service>
    </Server>
    
  dhis-google-auth.json: |
    {
      "type": "service_account",
      "project_id": "",
      "private_key_id": "",
      "private_key": "",
      "client_email": "",
      "client_id": "",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/dhis2-demo%40dhis2-gis.iam.gserviceaccount.com"
    }
---
# Source: core/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-core
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
---
# Source: core/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-core
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: core
      app.kubernetes.io/instance: release-name
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: core
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-core
      securityContext:
        {}
      initContainers:
        - name: copy-ro-config
          image: busybox
          command: ['sh', '-c', 'cp -v /dhis-conf-ro/* /dhis-conf-rw/ && cp -v /dhis-google-auth-json-ro/* /dhis-conf-rw/ && cp -v /server-xml-ro/* /server-xml-rw/']
          volumeMounts:
            - name: dhis-conf-ro
              mountPath: /dhis-conf-ro
            - name: dhis-conf-rw
              mountPath: /dhis-conf-rw

            - name: dhis-google-auth-json-ro
              mountPath: /dhis-google-auth-json-ro

            - name: server-xml-rw
              mountPath: /server-xml-rw
            - name: server-xml-ro
              mountPath: /server-xml-ro
      containers:
        - name: core
          securityContext:
            {}
          image: "dhis2/core:2.36.0-tomcat-8.5.34-jre8-alpine"
          imagePullPolicy: IfNotPresent
          env:
            - name: CATALINA_OPTS
              value: -Dcontext.path=''
            - name: JAVA_OPTS
              value: 
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 300
            httpGet:
              path: /
              port: http
          readinessProbe:
            initialDelaySeconds: 300
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: dhis-conf-rw
              mountPath: /DHIS2_home
              readOnly: false
            - name: server-xml-rw
              mountPath: /usr/local/tomcat/conf/server.xml
              subPath: server.xml
          resources:
            {}
      volumes:

        - name: dhis-conf-rw
          emptyDir: {}
        - name: dhis-conf-ro
          configMap:
            name: release-name-core
            items:
              - key: dhis.conf
                path: dhis.conf

        - name: dhis-google-auth-json-ro
          configMap:
            name: release-name-core
            items:
              - key: dhis-google-auth.json
                path: dhis-google-auth.json

        - name: server-xml-rw
          emptyDir: {}
        - name: server-xml-ro
          configMap:
            name: release-name-core
            items:
              - key: server.xml
                path: server.xml
---
# Source: core/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-core
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  rules:
    - host: "dhis2-core.127.0.0.1.nip.io"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-core
                port:
                  number: 8080
---
# Source: core/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-core-test-connection"
  labels:
    helm.sh/chart: core-0.10.0
    app.kubernetes.io/name: core
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-core:8080']
  restartPolicy: Never
