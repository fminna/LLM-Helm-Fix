---
# Source: nri-metadata-injection/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-nri-metadata-injection
  namespace: default
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/name: nri-metadata-injection
---
# Source: nri-metadata-injection/templates/admission-webhooks/mutatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: release-name-nri-metadata-injection
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
webhooks:
- name: metadata-injection.newrelic.com
  clientConfig:
    service:
      name: release-name-nri-metadata-injection
      namespace: default
      path: "/mutate"
    caBundle: ""
  rules:
  - operations: ["CREATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  failurePolicy: Ignore
  timeoutSeconds: 30
  sideEffects: None
  admissionReviewVersions:
  - v1beta1
  - v1
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-nri-metadata-injection-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: false
  # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #requiredDropCapabilities:
  #  - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-nri-metadata-injection
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-nri-metadata-injection-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - get
      - update
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs: ['use']
    resourceNames:
    - release-name-nri-metadata-injection-admission
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-nri-metadata-injection-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-nri-metadata-injection-admission
subjects:
  - kind: ServiceAccount
    name: release-name-nri-metadata-injection
    namespace: default
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-nri-metadata-injection-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-nri-metadata-injection-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-nri-metadata-injection-admission
subjects:
  - kind: ServiceAccount
    name: release-name-nri-metadata-injection
    namespace: default
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-nri-metadata-injection-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection
    action: admission-create
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      labels:
        app: nri-metadata-injection
        action: admission-create
        app.kubernetes.io/name: nri-metadata-injection
        helm.sh/chart: nri-metadata-injection-2.2.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.7.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: create
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=release-name-nri-metadata-injection,release-name-nri-metadata-injection.default.svc
            - --namespace=default
            - --secret-name=release-name-nri-metadata-injection-admission
            - --cert-name=tls.crt
            - --key-name=tls.key
      restartPolicy: OnFailure
      serviceAccountName: release-name-nri-metadata-injection
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: nri-metadata-injection/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-nri-metadata-injection-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection
    action: admission-patch
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-2.2.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      labels:
        app: nri-metadata-injection
        action: admission-patch
        app.kubernetes.io/name: nri-metadata-injection
        helm.sh/chart: nri-metadata-injection-2.2.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.7.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: patch
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=release-name-nri-metadata-injection
            - --namespace=default
            - --secret-name=release-name-nri-metadata-injection-admission
            - --patch-failure-policy=Ignore
            - --patch-validating=false
      restartPolicy: OnFailure
      serviceAccountName: release-name-nri-metadata-injection
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
