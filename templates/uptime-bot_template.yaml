---
# Source: uptime-bot/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: uptime-bot
  namespace: default
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: uptime-bot/templates/service-monitor-basic-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: uptime-bot-basic-auth
data:
  username: 
  password: 
type: Opaque
---
# Source: uptime-bot/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uptime-bot-configmap
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    app: uptime-bot
    release: prometheus
    role: agent
  namespace: default
---
# Source: uptime-bot/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: uptime-bot
  namespace: "default"
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    app: uptime-bot
    release: prometheus
    role: agent
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "2Gi"
---
# Source: uptime-bot/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: uptime-bot
  namespace: default
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    
    app: uptime-bot
    release: prometheus
    role: agent
  annotations:
spec:
  type: ClusterIP
  ports:
    
    - name: http
      port: 80
      targetPort: 3001
    - name: metrics
      port: 9913
      protocol: TCP
      targetPort: 3001
    - name: https
      port: 443
      targetPort: 3001
  selector:
      
    app: uptime-bot
    release: prometheus
    role: agent
---
# Source: uptime-bot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: uptime-bot
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    app: uptime-bot
    release: prometheus
    role: agent
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uptime-bot
      release: prometheus
      role: agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: uptime-bot
        helm.sh/chart: uptime-bot-1.1.12
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: uptime
        app.kubernetes.io/name: uptime-bot
        app: uptime-bot
        release: prometheus
        role: agent
    spec:
      priorityClassName: "system-cluster-critical"
      serviceAccountName: uptime-bot
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: uptime-bot
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      nodeSelector:
        alpha.eksctl.io/nodegroup-name: please_update
      initContainers:
        - name: volume-permissions
          image: "bitnami/bitnami-shell:10-debian-10-r299"
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -cx
            - |
              chown -R 0:0 /app/data
              chmod +w /app/data
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /app/data
              name: uptime-bot
      containers:
        - name:  uptime-bot 
          image: registry.hub.docker.com/veriks/uptime-datasource:v0.1.6
          imagePullPolicy: "IfNotPresent"
          args:
          env:
              
            - name: GET_HOSTS_FROM
              value: dns
          ports:
            - name: http-port
              protocol: TCP
              containerPort: 3001
          startupProbe:
            httpGet:
              path: /status
              port: http-port
            failureThreshold: 30
            periodSeconds: 6
          livenessProbe:
            httpGet:
              path: /status
              port: http-port 
            initialDelaySeconds: 5
            periodSeconds: 30
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /status
              port: http-port  
            initialDelaySeconds: 3
            failureThreshold: 3
            periodSeconds: 10
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /app/data
              name: uptime-bot
      volumes: 
        - name: uptime-bot
          persistentVolumeClaim:
            claimName: uptime-bot
        - emptyDir: {}
          name: extra-data
---
# Source: uptime-bot/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: uptime-bot
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: uptime-bot
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 85
---
# Source: uptime-bot/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: uptime-bot-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    app: uptime-bot
    release: prometheus
    role: agent
spec:
  rules:
    - host: uptime.veriksystems.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: uptime-bot
                port:
                  number: 80
---
# Source: uptime-bot/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: uptime-bot
  namespace: default
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
    app: uptime-bot
    release: prometheus
    role: agent
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: uptime-bot
      app.kubernetes.io/instance: release-name
      app: uptime-bot
      release: prometheus
      role: agent
  endpoints:
    - port: metrics
      path: "/metrics"
      honorLabels: false
      basicAuth:
        password:
          name: uptime-bot-basic-auth
          key: password
        username:
          name: uptime-bot-basic-auth
          key: username  
  namespaceSelector:
    matchNames:
      - default
---
# Source: uptime-bot/templates/provision-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: uptime-bot-provision-job
  namespace: default
  labels:
    app.kubernetes.io/name: uptime-bot
    helm.sh/chart: uptime-bot-1.1.12
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: uptime
    app.kubernetes.io/name: uptime-bot
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-upgrade, pre-install
    # "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      containers:
        - name: uptime-bot-update-datasource
          image: veriks/uptime-datasource:v0.1.1
          imagePullPolicy: "IfNotPresent"
          command: ["/bin/sh","-c"]
          args: ['skiped provision data due to no arguments were set']
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: GET_HOSTS_FROM
              value: dns
          volumeMounts:
            - mountPath: /app/data
              name: uptime-bot
      volumes: 
        - name: uptime-bot
          persistentVolumeClaim:
            claimName: uptime-bot
        - emptyDir: {}
          name: extra-data
      restartPolicy: Never
  backoffLimit: 1
