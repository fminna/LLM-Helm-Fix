---
# Source: kraken/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kraken
data:
  agent.yaml:   |
    extends: /etc/kraken/config/agent/base.yaml
    tls:
      client:
        disabled: true
      server:
        disabled: true
    tracker:
      hosts:
        dns: kraken-tracker:80
    build_index:
      hosts:
        dns: kraken-build-index:80
  build-index.yaml:   |
    extends: /etc/kraken/config/build-index/base.yaml
    tls:
      client:
        disabled: true
      server:
        disabled: true
    cluster:
      hosts:
        dns: kraken-build-index:80
    origin:
      hosts:
        dns: kraken-origin:80
    backends:
  
  
      - namespace: .*
        backend:
          testfs:
            addr: kraken-testfs:80
            root: tags
            name_path: docker_tag
  
  
    remotes: {}
  
    tag_replication:
      retry_interval: 100ms
      poll_retries_interval: 250ms
  
    tag_types:
      - namespace: .*
        type: docker
        root: tags
  
    tag_store:
      write_through: false
  
    writeback:
      retry_interval: 100ms
      poll_retries_interval: 250ms
  
    nginx:
      cache_dir: /tmp/kraken-build-index-nginx/
  origin.yaml:   |
    extends: /etc/kraken/config/origin/base.yaml
    tls:
      client:
        disabled: true
      server:
        disabled: true
    cluster:
      dns: kraken-origin:80
  
    backends:
  
  
      - namespace: .*
        backend:
          testfs:
            addr: kraken-testfs:80
            root: blobs
            name_path: identity
  
  
    hashring:
      max_replica: 2
  
    writeback:
      retry_interval: 100ms
      poll_retries_interval: 250ms
  proxy.yaml:   |
    extends: /etc/kraken/config/proxy/base.yaml
    tls:
      client:
        disabled: true
      server:
        disabled: true
    build_index:
      hosts:
        dns: kraken-build-index:80
    origin:
      hosts:
        dns: kraken-origin:80
  
    nginx:
      cache_dir: /tmp/kraken-proxy-nginx/
  tracker.yaml:   |
    extends: /etc/kraken/config/tracker/base.yaml
    tls:
      client:
        disabled: true
      server:
        disabled: true
    origin:
      hosts:
        dns: kraken-origin:80
  
    peerstore:
      redis:
        addr: 127.0.0.1:6379
  
    trackerserver:
      announce_interval: 3s
  
    nginx:
      cache_dir: /tmp/kraken-tracker-nginx/
---
# Source: kraken/templates/agents.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-agent
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: agent
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8081
    nodePort: 30081
  externalTrafficPolicy: Local
---
# Source: kraken/templates/build-index.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-build-index
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: build-index
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
# Source: kraken/templates/origins.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-origin
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: origin
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
# Source: kraken/templates/proxy.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-proxy
spec:
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: proxy
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
# Source: kraken/templates/testfs.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-testfs
spec:
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: testfs
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
# Source: kraken/templates/trackers.yaml
kind: Service
apiVersion: v1
metadata:
  name: kraken-tracker
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: kraken
    app.kubernetes.io/component: tracker
    app.kubernetes.io/instance: release-name
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
# Source: kraken/templates/agents.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kraken-agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: agent
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: agent
        app.kubernetes.io/instance: release-name
      
    spec:
      containers:
      - name: main
        image: gcr.io/uber-container-tools/kraken-agent:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/kraken-agent
        - --config=/etc/config/agent.yaml
        - --agent-server-port=80
        - --peer-port=8080
        - --agent-registry-port=8081
        volumeMounts:
        - name: config
          mountPath: /etc/config

      volumes:
      - name: config
        configMap:
          name: kraken
---
# Source: kraken/templates/build-index.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kraken-build-index
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: build-index
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: build-index
        app.kubernetes.io/instance: release-name
      
    spec:
      
      containers:
      - name: main
        image: gcr.io/uber-container-tools/kraken-build-index:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - "sleep 30 && /usr/bin/kraken-build-index --config=/etc/config/build-index.yaml --port=80"
        volumeMounts:
        - name: config
          mountPath: /etc/config

      volumes:
      - name: config
        configMap:
          name: kraken
---
# Source: kraken/templates/origins.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kraken-origin
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: origin
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: origin
        app.kubernetes.io/instance: release-name
      
    spec:
      
      containers:
      - name: main
        image: gcr.io/uber-container-tools/kraken-origin:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - "sleep 30 && /usr/bin/kraken-origin --config=/etc/config/origin.yaml --blobserver-port=80 --peer-port=8080"
        volumeMounts:
        - name: config
          mountPath: /etc/config

      volumes:
      - name: config
        configMap:
          name: kraken
---
# Source: kraken/templates/proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kraken-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: proxy
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: proxy
        app.kubernetes.io/instance: release-name
      
    spec:
      
      containers:
      - name: main
        image: gcr.io/uber-container-tools/kraken-proxy:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/kraken-proxy
        - --config=/etc/config/proxy.yaml
        - --port=80
        volumeMounts:
        - name: config
          mountPath: /etc/config

      volumes:
      - name: config
        configMap:
          name: kraken
---
# Source: kraken/templates/testfs.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kraken-testfs
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: testfs
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: testfs
        app.kubernetes.io/instance: release-name
      
    spec:
      containers:
      - name: main
        image: gcr.io/uber-container-tools/kraken-testfs:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/kraken-testfs
        - --port=80
---
# Source: kraken/templates/trackers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kraken-tracker
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kraken
      app.kubernetes.io/component: tracker
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kraken
        app.kubernetes.io/component: tracker
        app.kubernetes.io/instance: release-name
      
    spec:
      
      containers:
      - name: redis
        image: redis:5.0
      - name: main
        image: gcr.io/uber-container-tools/kraken-tracker:v0.1.1
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - "sleep 30 && /usr/bin/kraken-tracker --config=/etc/config/tracker.yaml --port=80"
        volumeMounts:
        - name: config
          mountPath: /etc/config

      volumes:
      - name: config
        configMap:
          name: kraken
