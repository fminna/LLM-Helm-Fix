---
# Source: ibm-app-navigator/templates/serviceAccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata: 
  name: release-name-sa
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
imagePullSecrets:
  - name: sa-default
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.deployment.liberty.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.deployment-liberty
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [   
      {
        "name":"metrics",
        "text":"View Metrics",
        "text.nls":"action.url.liberty.metrics.text",
        "description":"View Liberty Grafana dashboard",
        "description.nls":"action.url.liberty.metrics.desc",
        "url-pattern":"${builtin.grafana-url}/d/websphere-liberty/liberty-Metrics-G5-20190521?refresh=10s&orgId=1&var-app=${resource.$.metadata.name}",
        "open-window": "tab"
      },  
      {
        "name":"klog",
        "text":"View Kibana Logs",
        "text.nls":"action.url.liberty.klog.text",
        "description":"View Liberty Kibana problem dashboard to see logs",
        "description.nls":"action.url.liberty.klog.desc",
        "url-pattern":"${snippet.create_kibana_log_url(${builtin.kibana-url},${resource.$.metadata.namespace},${func.podlist()})}",
        "open-window": "tab"
      }
    ]
  snippets: |
    {
      "create_kibana_log_url": "function createKibanaLogUrl(kibanaUrl, namespace, json) 
                                { var timeSlot = '15m';
                                  var pods = JSON.parse(json).pods;
                                  var podsString = '';
                                  var matchPhrases = '';
                                  pods.map( function(nextPod) {
                                    if(podsString.length>0) podsString = podsString + ',';
                                    if(matchPhrases.length>0) matchPhrases = matchPhrases + ',';
                                    podsString = podsString + '%7B%22term%22:%7B%22kubernetes.pod.keyword%22:%22' + nextPod +'%22%7D%7D';
                                    matchPhrases = matchPhrases + '(term:(kubernetes.pod.keyword:' + nextPod + '))'
                                  })
                                  return kibanaUrl 
                                      + \"#/dashboard/Liberty-Problems-K5-20190609?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-15m,mode:quick,to:now))&_a=(description:'',filters:!(('$state':(store:appState),meta:(alias:'Pod%20Filter',disabled:!f,index:'logstash-*',key:query,negate:!f,type:custom,value:'%7B%22bool%22:%7B%22minimum_should_match%22:1,%22should%22:%5B\" 
                                      + podsString 
                                      + \"%5D%7D%7D'),query:(bool:(minimum_should_match:1,should:!(\"
                                      + matchPhrases 
                                      + \"))))),options:(darkTheme:!f),panels:!((col:1,id:liberty_probleminfo,panelIndex:1,row:1,size_x:12,size_y:1,type:visualization),(col:1,id:liberty_topMessageIds,panelIndex:5,row:6,size_x:12,size_y:3,type:visualization),(col:1,id:liberty_messageGraph,panelIndex:6,row:9,size_x:4,size_y:2,type:visualization),(col:9,id:liberty_ffdcGraph,panelIndex:7,row:9,size_x:4,size_y:2,type:visualization),(col:5,id:liberty_traceGraph,panelIndex:8,row:9,size_x:4,size_y:2,type:visualization),(col:1,id:b1afa090-c266-11e8-b344-7d7a26e293da,panelIndex:19,row:2,size_x:4,size_y:2,type:visualization),(col:5,id:c1f2fce0-c266-11e8-b344-7d7a26e293da,panelIndex:20,row:2,size_x:4,size_y:2,type:visualization),(col:9,id:d29457b0-c266-11e8-b344-7d7a26e293da,panelIndex:21,row:2,size_x:4,size_y:2,type:visualization),(col:1,columns:!(loglevel,module,message,kubernetes.pod,ibm_sequence),id:liberty_messageSearch,panelIndex:25,row:11,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,columns:!(loglevel,module,message,kubernetes.pod,ibm_sequence),id:liberty_traceSearch,panelIndex:26,row:15,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,columns:!(ibm_className,ibm_probeID,ibm_exceptionName,kubernetes.pod,ibm_sequence),id:liberty_ffdcSearch,panelIndex:27,row:19,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,id:bbdafb10-8a2e-11e9-bccd-ad683bf7518d,panelIndex:28,row:4,size_x:4,size_y:2,type:visualization),(col:5,id:f04cbb40-8a2e-11e9-bccd-ad683bf7518d,panelIndex:29,row:4,size_x:4,size_y:2,type:visualization),(col:9,id:'21ecbdd0-8a2f-11e9-bccd-ad683bf7518d',panelIndex:30,row:4,size_x:4,size_y:2,type:visualization)),query:(query_string:(analyze_wildcard:!t,query:'*')),timeRestore:!t,title:Liberty-Problems-K5-20190609,uiState:(P-19:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-20:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-21:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-28:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-29:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-30:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-6:(vis:(colors:(AUDIT:%233F2B5B,INFO:%237EB26D,SEVERE:%23BF1B00,WARNING:%23F2C96D)))),viewMode:view)\";
                                }"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.deployment.twas.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.deployment-twas
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [    
      {
        "name":"klog",
        "text":"View Kibana Logs",
        "text.nls":"action.url.was.traditional.klog.text",
        "description":"View Liberty Kibana problem dashboard to see problems in logs",
        "description.nls":"action.url.was.traditional.klog.desc",
        "url-pattern":"${snippet.create_kibana_log_urlw(${builtin.kibana-url},${resource.$.metadata.namespace},${func.podlist()})}",
        "open-window": "tab"
      }
    ]
  snippets: |
    {
      "create_kibana_log_urlw": "function createKibanaLogUrlw(kibanaUrl, namespace, json) 
                                { var timeSlot = '15m';
                                  var pods = JSON.parse(json).pods;
                                  var podsString = '';
                                  var matchPhrases = '';
                                  pods.map( function(nextPod) {
                                    if(podsString.length>0) podsString = podsString + ',';
                                    if(matchPhrases.length>0) matchPhrases = matchPhrases + ',';
                                    podsString = podsString + '%7B%22term%22:%7B%22kubernetes.pod.keyword%22:%22' + nextPod +'%22%7D%7D';
                                    matchPhrases = matchPhrases + '(term:(kubernetes.pod.keyword:' + nextPod + '))'
                                  })
                                  return kibanaUrl 
                                      + \"#/dashboard/WAS-traditional-Problems-K5-20190609?_g=()&_a=(description:'Dashboard%20visualizes%20message%20and%20trace%20information%20for%20WebSphere%20Application%20Server%20traditional',filters:!(('$state':(store:appState),meta:(alias:'Pod%20Filter',disabled:!f,index:'logstash-*',key:query,negate:!f,type:custom,value:'%7B%22bool%22:%7B%22minimum_should_match%22:1,%22should%22:%5B\" 
                                      + podsString 
                                      + \"%5D%7D%7D'),query:(bool:(minimum_should_match:1,should:!(\"
                                      + matchPhrases 
                                      + \"))))),options:(darkTheme:!f),panels:!((col:1,id:was_probleminfo,panelIndex:1,row:1,size_x:12,size_y:1,type:visualization),(col:1,id:was_hostsTable,panelIndex:2,row:2,size_x:4,size_y:3,type:visualization),(col:9,id:was_containersTable,panelIndex:4,row:2,size_x:4,size_y:3,type:visualization),(col:1,id:was_topMessageIds,panelIndex:5,row:8,size_x:12,size_y:3,type:visualization),(col:1,columns:!(loglevel,module,message,ibm_sequence),id:was_messageSearch,panelIndex:9,row:14,size_x:12,size_y:4,sort:!(ibm_sequence,desc),type:search),(col:1,id:was_messageGraph,panelIndex:14,row:11,size_x:6,size_y:3,type:visualization),(col:7,id:was_traceGraph,panelIndex:12,row:11,size_x:6,size_y:3,type:visualization),(col:5,id:was_podGraph,panelIndex:15,row:2,size_x:4,size_y:3,type:visualization),(col:1,columns:!(loglevel,module,message,ibm_sequence),id:was_traceSearch,panelIndex:16,row:18,size_x:12,size_y:4,sort:!(ibm_sequence.keyword,desc),type:search),(col:1,id:was_cellsTable,panelIndex:17,row:5,size_x:4,size_y:3,type:visualization),(col:5,id:was_nodesTable,panelIndex:18,row:5,size_x:4,size_y:3,type:visualization),(col:9,id:was_serversTable,panelIndex:19,row:5,size_x:4,size_y:3,type:visualization)),query:(query_string:(analyze_wildcard:!t,query:'*')),timeRestore:!t,title:WAS-traditional-Problems-K5-20190609,uiState:(P-13:(vis:(defaultColors:('0%20-%20100':'rgb(0,104,55)'))),P-15:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-17:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-18:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-19:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-2:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-4:(vis:(params:(sort:(columnIndex:!n,direction:!n))))),viewMode:view)\";
                                }"

    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.deployment
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [
      { 
        "name":"detail", 
        "text":"View Detail", 
        "text.nls":"action.url.deployment.detail.text", 
        "description":"View Deployment detail", 
        "description.nls":"action.url.deployment.detail.desc", 

        "url-pattern":"${builtin.icp-console-url}/workloads/deployments/${resource.$.metadata.namespace}/${resource.$.metadata.name}", 

        "open-window": "current", 
        "menu-item": "false" 
      }
    ]
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.ingress.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.ingress
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [
      { 
        "name":"detail", 
        "text":"View Detail", 
        "text.nls":"action.url.ingress.detail.text",
        "description":"View Ingress detail", 
        "description.nls":"action.url.ingress.detail.desc", 

        "url-pattern":"${builtin.icp-console-url}/access/services/ingress/${resource.$.metadata.namespace}/${resource.$.metadata.name}", 

        "open-window": "current", 
        "menu-item": "false" 
      }
    ]
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.job
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [
      { 
        "name":"detail", 
        "text":"View Detail", 
        "text.nls":"action.url.job.detail.text", 
        "description":"View Job detail",
        "description.nls":"action.url.job.detail.desc",

        "url-pattern":"${builtin.icp-console-url}/workloads/jobs/${resource.$.metadata.namespace}/${resource.$.metadata.name}", 

        "open-window": "current", 
        "menu-item": "false" 
      }
    ]
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.liberty-app.yaml
apiVersion:  v1
kind: ConfigMap
metadata: 
  name: prism.actions.liberty-app
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: | 
      [
        {  
          "name": "console", 
          "text": "Access Admin Center",
          "text.nls": "action.url.liberty.app.console.text",
          "description": "Access Liberty Admin Center", 
          "description.nls": "action.url.liberty.app.console.desc", 
          "url-pattern": "${resource.$.metadata.annotations['prism.platform.console-url']}",
          "open-window": "tab"
        },
        {  
          "name": "klog", 
          "text":"View Kibana Logs",
          "text.nls":"action.url.liberty.klog.text",
          "description":"View Liberty Kibana problem dashboard to see logs",
          "description.nls":"action.url.liberty.klog.desc",
          "url-pattern":"${snippet.geturl(${builtin.kibana-url},${builtin.liberty-problems-dashboard},${func.kubectlGet(Liberty-App,${resource.$.metadata.name},--namespace,${resource.$.metadata.namespace},-o,json)})}",
          "open-window": "tab"
        }
      ] 
  snippets: |
    {
      "status": "function status() {
        return '{.status}';
      }",
      "geturl": "function geturl(kibanaUrl,dashboard,libertyApp) { 
          var System = Java.type('java.lang.System');
          System.out.println(\"Enter geturl \"+2); 

          var libertyJSON= JSON.parse(libertyApp);
          var status= libertyJSON.status; 
          var usrDir= ''; 

          var dashboardUrl= kibanaUrl+\"#/dashboard/Liberty-Problems-K5-20190609?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-15m,mode:quick,to:now))&_a=(description:'',filters:!(('$state':(store:appState),meta:(alias:'Server%20Filter',disabled:!f,index:'logstash-*',key:query,negate:!f,type:custom,value:\"

           +\"'%7B%22bool%22:%7B%22should%22:%5B\";

           for (i=0; i<status.deployments.length; i++) {

              dashboardUrl+=\"%7B%22bool%22:%7B%22must%22:%5B%7B%22term%22:%7B%22host.keyword%22:%22\";

              dashboardUrl+=status.deployments[i].host;

              dashboardUrl+=\"%22%7D%7D,%7B%22term%22:%7B%22ibm_userDir.keyword%22:%22\";

              usrDir= status.deployments[i].wlpUsrDir+'/usr/';
              usrDir= usrDir.replace(new RegExp(' ', 'g'), '%20');
              usrDir= usrDir.replace(new RegExp('/', 'g'), '%2F');

              dashboardUrl+=usrDir; 
          
              dashboardUrl+=\"%22%7D%7D,%7B%22term%22:%7B%22ibm_serverName.keyword%22:%22\";

              dashboardUrl+=status.deployments[i].server;         
            
              dashboardUrl+=\"%22%7D%7D%5D%7D%7D\";

              if ( i < status.deployments.length-1 ) dashboardUrl+=\",\"; 
           }
            
           dashboardUrl+=\"%5D%7D%7D'),query:(bool:(should:!(\";

           for (i=0; i<status.deployments.length; i++) {

              dashboardUrl+=\"(bool:(must:!((term:(host.keyword:\"; 
              
              dashboardUrl+=status.deployments[i].host;

              
              dashboardUrl+=\")),(term:(ibm_userDir.keyword:\";
            
              usrDir= status.deployments[i].wlpUsrDir+'/usr/';
              usrDir= usrDir.replace(new RegExp(' ', 'g'), '%20');
              usrDir= usrDir.replace(new RegExp('/', 'g'), '%2F');

              dashboardUrl+=usrDir;
          
              dashboardUrl+=\")),(term:(ibm_serverName.keyword:\";
      
              dashboardUrl+=status.deployments[i].server; 
  
              dashboardUrl+=\")))))\"; 

              if ( i < status.deployments.length-1 ) dashboardUrl+=\",\"; 
           }
              
        dashboardUrl+=\")))))\"
            
            +\",options:(darkTheme:!f),panels:!((col:1,id:liberty_probleminfo,panelIndex:1,row:1,size_x:12,size_y:1,type:visualization),(col:1,id:liberty_topMessageIds,panelIndex:5,row:6,size_x:12,size_y:3,type:visualization),(col:1,id:liberty_messageGraph,panelIndex:6,row:9,size_x:4,size_y:2,type:visualization),(col:9,id:liberty_ffdcGraph,panelIndex:7,row:9,size_x:4,size_y:2,type:visualization),(col:5,id:liberty_traceGraph,panelIndex:8,row:9,size_x:4,size_y:2,type:visualization),(col:1,id:b1afa090-c266-11e8-b344-7d7a26e293da,panelIndex:19,row:2,size_x:4,size_y:2,type:visualization),(col:5,id:c1f2fce0-c266-11e8-b344-7d7a26e293da,panelIndex:20,row:2,size_x:4,size_y:2,type:visualization),(col:9,id:d29457b0-c266-11e8-b344-7d7a26e293da,panelIndex:21,row:2,size_x:4,size_y:2,type:visualization),(col:1,columns:!(loglevel,module,message,kubernetes.pod,ibm_sequence),id:liberty_messageSearch,panelIndex:25,row:11,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,columns:!(loglevel,module,message,kubernetes.pod,ibm_sequence),id:liberty_traceSearch,panelIndex:26,row:15,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,columns:!(ibm_className,ibm_probeID,ibm_exceptionName,kubernetes.pod,ibm_sequence),id:liberty_ffdcSearch,panelIndex:27,row:19,size_x:12,size_y:4,sort:!('@timestamp',desc),type:search),(col:1,id:bbdafb10-8a2e-11e9-bccd-ad683bf7518d,panelIndex:28,row:4,size_x:4,size_y:2,type:visualization),(col:5,id:f04cbb40-8a2e-11e9-bccd-ad683bf7518d,panelIndex:29,row:4,size_x:4,size_y:2,type:visualization),(col:9,id:'21ecbdd0-8a2f-11e9-bccd-ad683bf7518d',panelIndex:30,row:4,size_x:4,size_y:2,type:visualization)),query:(query_string:(analyze_wildcard:!t,query:'*')),timeRestore:!t,title:Liberty-Problems-K5-20190609,uiState:(P-19:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-20:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-21:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-28:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-29:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-30:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-6:(vis:(colors:(AUDIT:%233F2B5B,INFO:%237EB26D,SEVERE:%23BF1B00,WARNING:%23F2C96D)))),viewMode:view)\"; 

          return dashboardUrl;
      }"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.pod.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.pod
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [
      { 
        "name":"detail", 
        "text":"View detail", 
        "text.nls":"action.url.pod.detail.text",
        "description":"View Pod detail",  
        "description.nls":"action.url.pod.detail.desc", 

        "url-pattern":"${builtin.icp-console-url}/workloads/deployments/${resource.$.metadata.namespace}/${snippet.get_name(${func.kubectlGet(deployments, -l, app=${resource.$.metadata.labels.app}, -n, ${resource.$.metadata.namespace}, -o, json)})}/pods/${resource.$.metadata.name}", 

        "open-window": "current", 
        "menu-item": "false" 
      }
    ]
  snippets: |
    {
      "get_name": "function getName(json) 
                   { 
                     return JSON.parse(json).items[0].metadata.name;
                   }"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.service.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.actions.service
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: |
    [
      { 
        "name":"detail", 
        "text":"View Detail",
        "text.nls":"action.url.service.detail.text", 
        "description":"View Service detail", 
        "description.nls":"action.url.service.detail.desc", 

        "url-pattern":"${builtin.icp-console-url}/access/services/${resource.$.metadata.namespace}/${resource.$.metadata.name}", 

        "open-window": "current", 
        "menu-item": "false" 
      }
    ]
---
# Source: ibm-app-navigator/templates/configmaps/configmap.action.was-traditional-app.yaml
apiVersion:  v1
kind: ConfigMap
metadata: 
  name: prism.actions.was-traditional-app
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name" 
data:
  url-actions: | 
      [
        {  
          "name": "console", 
          "text": "Access Admin Console",
          "text.nls": "action.url.was.traditional.console.text",
          "description": "Access WebSphere Admin Console", 
          "description.nls": "action.url.was.traditional.console.desc", 
          "url-pattern": "${resource.$.metadata.annotations['prism.platform.console-url']}",
          "open-window": "tab",
          "propagate-identity": "true"
        },
        {  
          "name": "klog", 
          "text":"View Kibana Logs",
          "text.nls":"action.url.was.traditional.klog.text",
          "description":"View WebSphere Kibana problem dashboard to see logs",
          "description.nls":"action.url.was.traditional.klog.desc",
          "url-pattern":"${snippet.geturlw(${builtin.kibana-url},${builtin.liberty-problems-dashboard},${func.kubectlGet(WAS-Traditional-App,${resource.$.metadata.name},--namespace,${resource.$.metadata.namespace},-o,json)},${func.kubectlGet(WAS-ND-Cell,${resource.$.metadata.labels['was-nd-cell']},--namespace,${resource.$.metadata.namespace},-o,jsonpath=${snippet.cellname()})})}",
          "open-window": "tab"
        }
      ] 
  cmd-actions: |
    [
      {
        "name": "setTraceSpecification",
        "text": "Set Trace",
        "text.nls": "action.cmd.was.traditional.trace.text",
        "description": "Set diagnostic trace string.",
        "description.nls": "action.cmd.was.traditional.trace.desc",
        "image": "ibmcom/app-nav-cmds:1.0.1",
        "cmd-pattern": "sh set-tWAS-App-trace.sh ${resource.$.metadata.name} ${resource.$.metadata.namespace} ${input.trace-string}",
        "requires-input": "trace-setting"
      }
    ]
  inputs: |
    {
      "trace-setting": {
        "title": "Trace string",
        "fields": {
            "trace-string":
                { "label": "Trace String", "type" : "string", "size":"large", "description": "WebSphere server trace string", "default": "*=all=disabled", "optional":false, "validator": "tracestring-validator" }
        }
      }
    }
  snippets: |
    {
        "tracestring-validator": "function tracestringValidator(json) {
                                       var value = JSON.parse(json).value
                                       if ( value != undefined && value.length>0 )
                                          return  \"{ 'valid': true, 'message': ''}\"
                                       else
                                          return   \"{ 'valid': false, 'message': 'Trace string is required!'}\"
                                    }",
         "status": "function status() {
                       return '{.status}';
                   }",
         "cellname": "function cellname() {
                       return '{.status.cellName}';
                   }",
         "geturlw": "function geturlw(kibanaUrl,dashboard,WASApp,cellName) { 
          var System = Java.type('java.lang.System');

          var wasJSON= JSON.parse(WASApp);
          var status= wasJSON.status; 
          var metadata= wasJSON.metadata; 

          var dashboardUrl= kibanaUrl+\"#/dashboard/WAS-traditional-Problems-K5-20190609?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-15m,mode:quick,to:now))&_a=(description:'',filters:!(('$state':(store:appState),meta:(alias:'Server%20Filter',disabled:!f,index:'logstash-*',key:query,negate:!f,type:custom,value:\"

           +\"'%7B%22bool%22:%7B%22should%22:%5B\";

           for (i=0; i<status.deployments.length; i++) {

              dashboardUrl+=\"%7B%22bool%22:%7B%22must%22:%5B%7B%22term%22:%7B%22ibm_cellName.keyword%22:%22\";

              dashboardUrl+=cellName;

              dashboardUrl+=\"%22%7D%7D,%7B%22term%22:%7B%22ibm_nodeName.keyword%22:%22\";

              dashboardUrl+=status.deployments[i].node;
          
              dashboardUrl+=\"%22%7D%7D,%7B%22term%22:%7B%22ibm_serverName.keyword%22:%22\";

              dashboardUrl+=status.deployments[i].server;         
            
              dashboardUrl+=\"%22%7D%7D%5D%7D%7D\";

              if ( i < status.deployments.length-1 ) dashboardUrl+=\",\"; 
           }
            
           dashboardUrl+=\"%5D%7D%7D'),query:(bool:(should:!(\";

           for (i=0; i<status.deployments.length; i++) {

              dashboardUrl+=\"(bool:(must:!((term:(ibm_cellName.keyword:\"; 
              
              dashboardUrl+=cellName;
              
              dashboardUrl+=\")),(term:(ibm_nodeName.keyword:\";
            
              dashboardUrl+=status.deployments[i].node;
          
              dashboardUrl+=\")),(term:(ibm_serverName.keyword:\";
      
              dashboardUrl+=status.deployments[i].server; 
  
              dashboardUrl+=\")))))\"; 

              if ( i < status.deployments.length-1 ) dashboardUrl+=\",\"; 
           }
              
        dashboardUrl+=\")))))\"
            
            +\",options:(darkTheme:!f),panels:!((col:1,id:was_probleminfo,panelIndex:1,row:1,size_x:12,size_y:1,type:visualization),(col:1,id:was_hostsTable,panelIndex:2,row:2,size_x:4,size_y:3,type:visualization),(col:9,id:was_containersTable,panelIndex:4,row:2,size_x:4,size_y:3,type:visualization),(col:1,id:was_topMessageIds,panelIndex:5,row:8,size_x:12,size_y:3,type:visualization),(col:1,columns:!(loglevel,module,message,ibm_sequence),id:was_messageSearch,panelIndex:9,row:14,size_x:12,size_y:4,sort:!(ibm_sequence,desc),type:search),(col:1,id:was_messageGraph,panelIndex:14,row:11,size_x:6,size_y:3,type:visualization),(col:7,id:was_traceGraph,panelIndex:12,row:11,size_x:6,size_y:3,type:visualization),(col:5,id:was_podGraph,panelIndex:15,row:2,size_x:4,size_y:3,type:visualization),(col:1,columns:!(loglevel,module,message,ibm_sequence),id:was_traceSearch,panelIndex:16,row:18,size_x:12,size_y:4,sort:!(ibm_sequence.keyword,desc),type:search),(col:1,id:was_cellsTable,panelIndex:17,row:5,size_x:4,size_y:3,type:visualization),(col:5,id:was_nodesTable,panelIndex:18,row:5,size_x:4,size_y:3,type:visualization),(col:9,id:was_serversTable,panelIndex:19,row:5,size_x:4,size_y:3,type:visualization)),query:(query_string:(analyze_wildcard:!t,query:'*')),timeRestore:!t,title:WAS-traditional-Problems-K5-20190609,uiState:(P-13:(vis:(defaultColors:('0%20-%20100':'rgb(0,104,55)'))),P-15:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-17:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-18:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-19:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-2:(vis:(params:(sort:(columnIndex:!n,direction:!n)))),P-4:(vis:(params:(sort:(columnIndex:!n,direction:!n))))),viewMode:view)\"; 

          return dashboardUrl;
      }"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prism.status-mapping.deployment
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"  
data:
  algorithm: "function getStatus(status) {
    var statusJson = JSON.parse(status);
    
    var replicas = statusJson.replicas;
    var available = statusJson.availableReplicas;
    if (!replicas) replicas = 0;
    if (!available) available = 0;

    var statusText = 'Unknown';

    if (replicas == 0) { 
      statusText= 'Warning';
    } else if (replicas == available) {
      statusText = 'Normal';
    } else if (available == 0) {
      statusText = 'Problem';
    } else if (replicas > available) {
      statusText = 'Warning';
    }

    var statusFlyover = 'Desired: ' + replicas + ', Available: ' + available;
    
    var nlsJSON= [ 'status.flyover.deployment', replicas.toString(), available.toString() ]; 

    var statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': nlsJSON};

    return JSON.stringify(statusJSON); 
}"
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.liberty-app.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.liberty-app
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"    
data:
  algorithm: "function getStatus(status) {

  var statusJson = JSON.parse(status);
  var running = statusJson.running;
  var targets = statusJson.targets;
  var unknown= statusJson.unknown; 
  if (!running) running = 0;
  if (!targets) targets = 0;
  if (!unknown) unknown = 0;

  var statusText = 'Unknown';
  var statusFlyover= '';
  var nlsJSON= '';
  var statusJSON= {};

  if ( unknown !== targets ) { 
    if ( running == 0 ) { 
       statusText= 'Problem';
    } else if ( running < targets ) { 
       statusText= 'Warning';
    } else if ( running == targets ) { 
       statusText= 'Normal';
    }
  }

  statusFlyover = 'Running: ' + running + ', Targets: ' + targets + ', Unknown: ' + unknown;

  nlsJSON= [ 'status.flyover.liberty.app', running.toString(), targets.toString(), unknown.toString() ]; 

  statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': nlsJSON }; 

  return JSON.stringify(statusJSON); 
}"
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.liberty-collective.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.liberty-collective
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"    
data:
  algorithm: "function getStatus(status) {

  var statusJson= {};
  var statusValue = '';
  var statusFlyover= 'Unknown';
  var statusFlyoverNLS= 'unknown';
  var statusText = 'Unknown';

  if ( status ) { 
     statusJson = JSON.parse(status);
     if ( statusJson.value ) statusValue = statusJson.value;
     if ( statusJson.details ) statusFlyover= statusJson.details;
     if ( statusJson['details.nls'] ) statusFlyoverNLS= JSON.parse(statusJson['details.nls']);
  } 

  if (statusValue == 'ONLINE') { 
     statusText= 'Normal';
  } else if (statusValue == 'OFFLINE') { 
     statusText= 'Problem';
  } 

  statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': statusFlyoverNLS }; 

  return JSON.stringify(statusJSON); 
}"
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.pod.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.pod
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"  
data:
  algorithm: "function getStatus(status) {

      var statusJson = JSON.parse(status);
      var statusText = 'Problem';
      var statusFlyover = '';
      var nlsJSON= {};
      var phase = statusJson.phase;

      if (phase == 'Running') {
        statusText = 'Normal';
        statusFlyover = 'Status returned by platform: '+phase;
	      nlsJSON= [ 'status.flyover.pod', phase ]; 
      } else if (phase == 'Succeeded') {
        statusText = 'Normal';
        statusFlyover = 'Status returned by platform: '+phase;
	      nlsJSON= [ 'status.flyover.pod', phase ]; 
      } else if (phase == 'Pending') {
        statusText = 'Warning';
        statusFlyover = 'No status returned by platform';
        nlsJSON= [ 'status.flyover.pod.error' ]; 

	      if (statusJson.containerStatuses !== undefined) { 
	         if (statusJson.containerStatuses[0] !== undefined) { 
	            if (statusJson.containerStatuses[0].state !== undefined) { 
                 if (statusJson.containerStatuses[0].state.waiting !== undefined) { 
                    if (statusJson.containerStatuses[0].state.waiting.reason !== undefined) { 
                       statusFlyover = 'Status returned by platform: '+statusJson.containerStatuses[0].state.waiting.reason;
                       nlsJSON= [ 'status.flyover.pod', statusJson.containerStatuses[0].state.waiting.reason ]; 
		                }
	               }
	            }
           }
        }
      } else {
        statusText = 'Problem';
        statusFlyover = 'No status returned by platform';
	      nlsJSON= [ 'status.flyover.pod.error' ]; 
      }

      var statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': nlsJSON };

      return JSON.stringify(statusJSON);
}"
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.service.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.service
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"  
data:
  exists: |
    {  
      value: "Normal",
      flyover: "Status is normal when resource exists",
      flyover.nls: "status.flyover.service"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.unregistered.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping-unregistered
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"  
data:
  exists: |
    {  
      "value": "Normal",
      "flyover": "Status is normal when resource exists",
      "flyover.nls": "status.flyover.unregistered"
    }
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.was-nd-cell.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.was-nd-cell
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"    
data:
  algorithm: "function getStatus(status) {

  var statusJson= {};
  var statusValue = '';
  var statusFlyover= 'Unknown';
  var statusFlyoverNLS= 'unknown';
  var statusText = 'Unknown';

  if ( status ) { 
     statusJson = JSON.parse(status);
     if ( statusJson.value ) statusValue = statusJson.value;
     if ( statusJson.details ) statusFlyover= statusJson.details;
     if ( statusJson['details.nls'] ) statusFlyoverNLS= JSON.parse(statusJson['details.nls']);
  } 

  if (statusValue == 'ONLINE') { 
     statusText= 'Normal';
  } else if (statusValue == 'OFFLINE') { 
     statusText= 'Problem';
  } 

  statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': statusFlyoverNLS }; 

  return JSON.stringify(statusJSON); 
}"
---
# Source: ibm-app-navigator/templates/configmaps/configmap.status-mapping.was-traditional-app.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism.status-mapping.was-traditional-app
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"    
data:
  algorithm: "function getStatus(status) {

  var statusJson = JSON.parse(status);
  var running = statusJson.running;
  var targets = statusJson.targets;
  var unknown= statusJson.unknown; 
  if (!running) running = 0;
  if (!targets) targets = 0;
  if (!unknown) unknown = 0;

  var statusText = 'Unknown';
  var statusFlyover= '';
  var nlsJSON= '';
  var statusJSON= {};

  if ( unknown !== targets ) { 
    if ( running == 0 ) { 
       statusText= 'Problem';
    } else if ( running < targets ) { 
       statusText= 'Warning';
    } else if ( running == targets ) { 
       statusText= 'Normal';
    }
  }

  statusFlyover = 'Running: ' + running + ', Targets: ' + targets + ', Unknown: ' + unknown;
  
  nlsJSON= [ 'status.flyover.was.traditional', running.toString(), targets.toString(), unknown.toString() ]; 
  
  statusJSON= { 'value': statusText, 'flyover': statusFlyover, 'flyover.nls': nlsJSON }; 
  
  return JSON.stringify(statusJSON); 
}"
---
# Source: ibm-app-navigator/templates/prism-config.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
  name: prism-config
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
data:
    status-color-mapping: |  
            { "values": { "Normal": "GREEN",   "Warning": "YELLOW",  "Problem": "RED",  "Unknown": "GREY"}, 
              "colors": { "GREEN":  "#5aa700", "YELLOW":  "#B4B017", "RED": "#A74343", "GREY":"#808080"} 
            }
    app-status-precedence: |  
            [ "Problem", "Warning", "Unknown", "Normal" ] 
    status-unknown: "Unknown" 
    prism-sa-name: release-name-sa
    prism-cmds-resource-enabled: "false"    
    prism-cmds-limits-cpu: 500m
    prism-cmds-limits-memory: 512Mi
    prism-cmds-requests-cpu: 500m
    prism-cmds-requests-memory: 512Mi
---
# Source: ibm-app-navigator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  release-name-ibm-app-nav
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"  
subjects:
- kind: ServiceAccount
  name: release-name-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: ibm-app-navigator/templates/service.ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: ibm-app-nav-ui-service
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/component: ibm-app-nav-ui
---
# Source: ibm-app-navigator/templates/deploy.WASController.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prism-was-controller
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ibm-app-nav-was-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "ibm-app-navigator"
        helm.sh/chart: "ibm-app-navigator"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        release: "release-name"
        app.kubernetes.io/component: "ibm-app-nav-was-controller"
        app-nav-component: ibm-app-nav-was-controller
      annotations:        
        productId: "IBMApplicationNavigator_1000_IPLA_00000"
        productName: "IBM Application Navigator"
        productVersion: "1.0.1"         
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:  
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:  
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x       
      containers:
      - name: prism-was-controller
        image: "ibmcom/app-nav-was-controller:1.0.1"
        imagePullPolicy: Always
        env:
          - name: PRISM_CONFIG_NAMESPACE
            value: default
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - testcntlr.sh
          initialDelaySeconds: 30            
          periodSeconds: 5             
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - testcntlr.sh
          initialDelaySeconds: 60            
          periodSeconds: 30           
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:            
      restartPolicy: "Always"
      serviceAccountName: release-name-sa        
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup:
      tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
---
# Source: ibm-app-navigator/templates/deploy.controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prism-controller
  namespace: default
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ibm-app-nav-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "ibm-app-navigator"
        helm.sh/chart: "ibm-app-navigator"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        release: "release-name"
        app.kubernetes.io/component: "ibm-app-nav-controller"
      annotations:        
        productId: "IBMApplicationNavigator_1000_IPLA_00000"
        productName: "IBM Application Navigator"
        productVersion: "1.0.1"         
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:  
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:  
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x   
      containers:
      - name: prism-controller
        image: "ibmcom/app-nav-controller:1.0.1"
        imagePullPolicy: Always       
        env:
          - name: PRISM_CONFIG_NAMESPACE
            value: default
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - testcntlr.sh
          initialDelaySeconds: 30            
          periodSeconds: 5             
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - testcntlr.sh
          initialDelaySeconds: 120
          periodSeconds: 30             
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:            

      - name: app-nav-api
        image: "ibmcom/app-nav-api:1.0.1"
        imagePullPolicy: Always
        env:
          - name: PRISM_CONFIG_NAMESPACE
            value: default
          - name: KUBE_ENV
            value: icp
        readinessProbe:
          httpGet:
            path: /prism/health
            scheme: HTTPS
            port: 9443
          initialDelaySeconds: 60
          periodSeconds: 15
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /prism/health
            scheme: HTTPS
            port: 9443
          initialDelaySeconds: 120
          periodSeconds: 15
          failureThreshold: 6        
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:

      restartPolicy: "Always"
      serviceAccountName: release-name-sa
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup:
      tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
---
# Source: ibm-app-navigator/templates/deploy.ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: prism
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ibm-app-nav-ui        
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "ibm-app-navigator"
        helm.sh/chart: "ibm-app-navigator"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        release: "release-name"
        app.kubernetes.io/component: "ibm-app-nav-ui"
      annotations:        
        productId: "IBMApplicationNavigator_1000_IPLA_00000"
        productName: "IBM Application Navigator"
        productVersion: "1.0.1"    
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:  
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:  
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x     
      containers:
      - name: app-nav-api
        image: "ibmcom/app-nav-api:1.0.1"
        imagePullPolicy: Always
        env:
          - name: PRISM_CONFIG_NAMESPACE
            value: default
          - name: KUBE_ENV
            value: icp
        readinessProbe:
          httpGet:
            path: /prism/health
            scheme: HTTPS
            port: 9443
          initialDelaySeconds: 60
          periodSeconds: 15
          failureThreshold: 6   
        livenessProbe:
          httpGet:
            path: /prism/health
            scheme: HTTPS
            port: 9443
          initialDelaySeconds: 120
          periodSeconds: 15
          failureThreshold: 6      
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:            
      - name: app-nav-ui
        image: "ibmcom/app-nav-ui:1.0.1"
        imagePullPolicy: Always
        env:
          - name: PRISM_CONFIG_NAMESPACE
            value: default
          - name: KUBE_ENV
            value: icp
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10  
          failureThreshold: 6    
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 3000 
          initialDelaySeconds: 40
          periodSeconds: 30
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:            
      restartPolicy: "Always" 
      serviceAccountName: release-name-sa
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup:
      tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
---
# Source: ibm-app-navigator/templates/ingress.ui.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ibm-app-nav-ui-ingress
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
  annotations:
spec:
  rules:
    - http:
        paths:
          - path: /appnav
            backend:
              serviceName: ibm-app-nav-ui-service
              servicePort: 3000
          - path: /prism
            backend:
              serviceName: ibm-app-nav-ui-service
              servicePort: 3000
---
# Source: ibm-app-navigator/templates/tests/ui-service-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-ui-service-test
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
    app.kubernetes.io/component: "ui-service-test"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:  
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - amd64
            - ppc64le
            - s390x
      preferredDuringSchedulingIgnoredDuringExecution:  
      - weight: 2
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - amd64
      - weight: 2
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - ppc64le
      - weight: 2
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - s390x
  restartPolicy: "Never"
  serviceAccountName: release-name-sa
  hostNetwork: false
  hostPID: false
  hostIPC: false
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup:
  containers:
  - name: main
    image: alpine:3.8
    imagePullPolicy: IfNotPresent
    command: ["sh", "-c", "wget -T 3 --no-check-certificate -O - http://ibm-app-nav-ui-service:3000/health"]
    securityContext:
      privileged: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
---
# Source: ibm-app-navigator/templates/job.post.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: prism-init-post
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app.kubernetes.io/name: "ibm-app-navigator"
    helm.sh/chart: "ibm-app-navigator"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    release: "release-name"
spec:
  template:
    metadata:
      name: app-nav-init 
      labels:
        app.kubernetes.io/name: "ibm-app-navigator"
        helm.sh/chart: "ibm-app-navigator"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        release: "release-name"
        app-nav-component: app-nav-init      
      annotations:
        sidecar.istio.io/inject: "false"        
        productId: "IBMApplicationNavigator_1000_IPLA_00000"
        productName: "IBM Application Navigator"
        productVersion: "1.0.1"         
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:  
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:  
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x        
      containers:
      - name: prism-init
        image: "ibmcom/app-nav-init:1.0.1"
        imagePullPolicy: Always    
        env: 
        - name: HOOK_MODE
          value: postinstall
        - name: KUBE_ENV        
          value: icp
        - name: PRISM_CONFIG_NAMESPACE
          value: default
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:  
      restartPolicy: Never
      serviceAccountName: release-name-sa
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup:
      tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
