---
# Source: kamaji-etcd/templates/etcd_service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: release-name
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 2379
      name: client
    - port: 2380
      name: peer
    - port: 2381
      name: metrics
  selector:
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
---
# Source: kamaji-etcd/templates/etcd_sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: release-name
  namespace: default
spec:
  serviceName: release-name
  selector:
    matchLabels:
      app.kubernetes.io/name: kamaji-etcd
      app.kubernetes.io/instance: release-name
  replicas: 3
  template:
    metadata:
      name: etcd
      labels:
        app.kubernetes.io/name: kamaji-etcd
        app.kubernetes.io/instance: release-name
        application: kamaji-etcd
      annotations:      
    spec:
      volumes:
        - name: certs
          secret:
            secretName: release-name-certs
      containers:
        - name: etcd
          image: quay.io/coreos/etcd:v3.5.6
          imagePullPolicy: IfNotPresent
          securityContext:
            null
          ports:
            - containerPort: 2379
              name: client
            - containerPort: 2380
              name: peer
            - containerPort: 2381
              name: metrics
          volumeMounts:
            - name: data
              mountPath: /var/run/etcd
            - name: certs
              mountPath: /etc/etcd/pki
          command:
            - etcd
            - --data-dir=/var/run/etcd
            - --name=$(POD_NAME)
            - --initial-cluster-state=new
            - --initial-cluster=release-name-0=https://release-name-0.release-name.default.svc.cluster.local:2380,release-name-1=https://release-name-1.release-name.default.svc.cluster.local:2380,release-name-2=https://release-name-2.release-name.default.svc.cluster.local:2380
            - --initial-advertise-peer-urls=https://$(POD_NAME).release-name.$(POD_NAMESPACE).svc.cluster.local:2380
            - --advertise-client-urls=https://$(POD_NAME).release-name.$(POD_NAMESPACE).svc.cluster.local:2379
            - --initial-cluster-token=kamaji
            - --listen-client-urls=https://0.0.0.0:2379
            - --listen-metrics-urls=http://0.0.0.0:2381
            - --listen-peer-urls=https://0.0.0.0:2380
            - --client-cert-auth=true
            - --peer-client-cert-auth=true
            - --trusted-ca-file=/etc/etcd/pki/ca.crt
            - --cert-file=/etc/etcd/pki/server.pem
            - --key-file=/etc/etcd/pki/server-key.pem
            - --peer-trusted-ca-file=/etc/etcd/pki/ca.crt
            - --peer-cert-file=/etc/etcd/pki/peer.pem
            - --peer-key-file=/etc/etcd/pki/peer-key.pem
            - --auto-compaction-mode=periodic
            - --auto-compaction-retention=5m
            - --snapshot-count=10000
            - --quota-backend-bytes=8589934592
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      priorityClassName:
        system-cluster-critical
      nodeSelector:
        kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: 
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: 10Gi
---
# Source: kamaji-etcd/templates/etcd_cronjob_defrag.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: "release-name-defrag"
  namespace: default
spec:
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 4
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: release-name
          restartPolicy: OnFailure
          containers:
          - name: etcd-client
            image: quay.io/coreos/etcd:v3.5.6
            imagePullPolicy: IfNotPresent
            command:
              - bash
              - -c
              - |-
                for ENDPOINT in release-name-0.release-name.default.svc.cluster.local:2379 release-name-1.release-name.default.svc.cluster.local:2379 release-name-2.release-name.default.svc.cluster.local:2379; do
                  etcdctl --endpoints=https://${ENDPOINT} defrag;
                  etcdctl --endpoints=https://${ENDPOINT} alarm disarm;
                  etcdctl --endpoints=https://${ENDPOINT} alarm list;
                  etcdctl --endpoints=https://${ENDPOINT} endpoint status -w table;
                  etcdctl --endpoints=https://${ENDPOINT} member list -w table;
                  sleep 15;
                done;
            env:
            - name: ETCDCTL_CACERT
              value: /opt/certs/ca/ca.crt
            - name: ETCDCTL_CERT
              value: /opt/certs/root-client-certs/tls.crt
            - name: ETCDCTL_KEY
              value: /opt/certs/root-client-certs/tls.key
            volumeMounts:
            - name: root-client-certs
              mountPath: /opt/certs/root-client-certs
            - name: certs
              mountPath: /opt/certs/ca
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          volumes:
          - name: root-client-certs
            secret:
              secretName: release-name-root-client-certs
              optional: true
          - name: certs
            secret:
              secretName: release-name-certs
              optional: true
---
# Source: kamaji-etcd/templates/etcd_sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": "hook-failed"
    "helm.sh/hook-weight": "0"
---
# Source: kamaji-etcd/templates/etcd_cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: release-name-csr
  namespace: default
data:
  ca-csr.json: |-
    {
      "CN": "Clastix CA",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "names": [
        {
          "C": "IT",
          "ST": "Italy",
          "L": "Milan"
        }
      ]
    }
  config.json: |-
    {
      "signing": {
        "default": {
          "expiry": "8760h"
        },
        "profiles": {
          "server-authentication": {
            "usages": ["signing", "key encipherment", "server auth"],
            "expiry": "8760h"
          },
          "client-authentication": {
            "usages": ["signing", "key encipherment", "client auth"],
            "expiry": "8760h"
          },
          "peer-authentication": {
            "usages": ["signing", "key encipherment", "server auth", "client auth"],
            "expiry": "8760h"
          }
        }
      }
    }
  server-csr.json: |-
    {
      "CN": "etcd",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "hosts": ["release-name-0.release-name.default.svc.cluster.local","release-name-1.release-name.default.svc.cluster.local","release-name-2.release-name.default.svc.cluster.local",
        "etcd-server.default.svc.cluster.local",
        "etcd-server.default.svc",
        "etcd-server",
        "127.0.0.1"
      ]
    }
  peer-csr.json: |-
    {
      "CN": "etcd",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "hosts": ["release-name-0",
        "release-name-0.release-name",
        "release-name-0.release-name.default.svc",
        "release-name-0.release-name.default.svc.cluster.local","release-name-1",
        "release-name-1.release-name",
        "release-name-1.release-name.default.svc",
        "release-name-1.release-name.default.svc.cluster.local","release-name-2",
        "release-name-2.release-name",
        "release-name-2.release-name.default.svc",
        "release-name-2.release-name.default.svc.cluster.local",
        "127.0.0.1"
      ]
    }
  root-client-csr.json: |-
    {
      "CN": "root",
      "key": {
        "algo": "rsa",
        "size": 2048
      },
      "names": [
        {
          "O": "system:masters"
        }
      ]
    }
---
# Source: kamaji-etcd/templates/etcd_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install,post-install,pre-delete
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: release-name-gen-certs-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - patch
      - delete
    resourceNames:
      - release-name-certs
      - release-name-root-client-certs
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - list
      - watch
      - patch
    resourceNames:
      - release-name
---
# Source: kamaji-etcd/templates/etcd_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install,post-install,pre-delete
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  name: release-name-gen-certs-rolebiding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-gen-certs-role
subjects:
  - kind: ServiceAccount
    name: release-name
    namespace: default
---
# Source: kamaji-etcd/templates/etcd_job_postdelete.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  name: "release-name-etcd-teardown"
  namespace: default
spec:
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: release-name
      restartPolicy: Never
      containers:
        - name: kubectl
          image: clastix/kubectl:v1.28
          command:
            - kubectl
            - --namespace=default
            - delete
            - secret
            - --ignore-not-found=true
            - release-name-certs
            - release-name-root-client-certs
---
# Source: kamaji-etcd/templates/etcd_job_preinstall_1.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  name: "release-name-etcd-setup-1"
  namespace: default
spec:
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: release-name
      restartPolicy: Never
      initContainers:
        - name: cfssl
          image: cfssl/cfssl:latest
          command:
            - bash
            - -c
            - |-
              cfssl gencert -initca /csr/ca-csr.json | cfssljson -bare /certs/ca &&
              mv /certs/ca.pem /certs/ca.crt && mv /certs/ca-key.pem /certs/ca.key &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/peer-csr.json | cfssljson -bare /certs/peer &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/server-csr.json | cfssljson -bare /certs/server &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=client-authentication /csr/root-client-csr.json | cfssljson -bare /certs/root-client
          volumeMounts:
            - mountPath: /certs
              name: certs
            - mountPath: /csr
              name: csr
      containers:
        - name: kubectl
          image: clastix/kubectl:v1.28
          command: ["/bin/sh", "-c"]
          args:
            - |
              if kubectl get secret release-name-certs --namespace=default &>/dev/null; then
                echo "Secret release-name-certs already exists"
              else
                echo "Creating secret release-name-certs"
                kubectl --namespace=default create secret generic release-name-certs --from-file=/certs/ca.crt --from-file=/certs/ca.key --from-file=/certs/peer-key.pem --from-file=/certs/peer.pem --from-file=/certs/server-key.pem --from-file=/certs/server.pem
              fi
              if kubectl get secret release-name-root-client-certs --namespace=default &>/dev/null; then
                echo "Secret release-name-root-client-certs already exists"
              else
                echo "Creating secret release-name-root-client-certs"
                kubectl --namespace=default create secret tls release-name-root-client-certs --key=/certs/root-client-key.pem --cert=/certs/root-client.pem
              fi
          volumeMounts:
            - mountPath: /certs
              name: certs
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
        - name: csr
          configMap:
            name: release-name-csr
        - name: certs
          emptyDir: {}
---
# Source: kamaji-etcd/templates/etcd_job_preinstall_2.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.5.1
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  name: "release-name-etcd-setup-2"
  namespace: default
spec:
  backoffLimit: 12
  template:
    metadata:
      name: "release-name"
    spec:
      serviceAccountName: release-name
      restartPolicy: Never
      initContainers:
        - name: kubectl
          image: clastix/kubectl:v1.28
          command:
          - sh
          - -c
          - kubectl --namespace=default rollout status sts/release-name --timeout=300s
      containers:
        - command:
          - bash
          - -c
          - |-
            etcdctl member list -w table
            if etcdctl user get root &>/dev/null; then
              echo "User already exists, nothing to do"
            else
              etcdctl user add --no-password=true root &&
              etcdctl role add root &&
              etcdctl user grant-role root root &&
              etcdctl auth enable
            fi
          env:
            - name: ETCDCTL_ENDPOINTS
              value: https://release-name-0.release-name.default.svc.cluster.local:2379
            - name: ETCDCTL_CACERT
              value: /opt/certs/ca/ca.crt
            - name: ETCDCTL_CERT
              value: /opt/certs/root-certs/tls.crt
            - name: ETCDCTL_KEY
              value: /opt/certs/root-certs/tls.key
          image: quay.io/coreos/etcd:v3.5.6
          imagePullPolicy: IfNotPresent
          name: etcd-client
          volumeMounts:
            - name: root-certs
              mountPath: /opt/certs/root-certs
            - name: ca
              mountPath: /opt/certs/ca
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
        - name: root-certs
          secret:
            secretName: release-name-root-client-certs
        - name: ca
          secret:
            secretName: release-name-certs
