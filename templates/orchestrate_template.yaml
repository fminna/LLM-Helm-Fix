---
# Source: orchestrate/templates/api/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-orchestrate-api-envmap
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: api
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
---
# Source: orchestrate/templates/tx-listener/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-orchestrate-tx-listener-envmap
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-listener
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
  API_URL: "http://release-name-orchestrate-api:8080"
  API_METRICS_URL: "http://release-name-orchestrate-api:8082"
---
# Source: orchestrate/templates/tx-sender/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-orchestrate-tx-sender-envmap
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-sender
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
  API_URL: "http://release-name-orchestrate-api:8080"
  API_METRICS_URL: "http://release-name-orchestrate-api:8082"
---
# Source: orchestrate/templates/api/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-orchestrate-api
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: api
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10
  ports:
    - port: 8080
      targetPort: http-svc
      protocol: TCP
      name: http-svc
    - port: 8082
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: api
---
# Source: orchestrate/templates/tx-listener/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-orchestrate-tx-listener
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-listener
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: tx-listener
---
# Source: orchestrate/templates/tx-sender/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-orchestrate-tx-sender
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-sender
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: tx-sender
---
# Source: orchestrate/templates/api/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-orchestrate-api
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: api
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orchestrate
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orchestrate
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: api
      annotations:
        checksum/config: 9334f95aa7c11a56742d3290b8ac79c5bb74e4c45a2f9a0e1ce8dd5bd22894f1
        checksum/secrets: 75a11da44c802486bc6f65640aa48a730f0f684c5c07a42ba3cd1735eb3fb070
    spec:
      imagePullSecrets:
        - name: release-name-orchestrate-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: api
          securityContext:
            {}
          image: "consensys/orchestrate:v21.12.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-orchestrate-api-envmap
          command:
            - /go/bin/main
          args:
            - api
            - run
          ports:
            - name: http-svc
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: http-svc
          readinessProbe:
            httpGet:
              path: /ready
              port: http-svc
          resources:
            {}
          volumeMounts:      
      volumes:
---
# Source: orchestrate/templates/tx-listener/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-orchestrate-tx-listener
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-listener
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orchestrate
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: tx-listener
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orchestrate
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: tx-listener
      annotations:
        checksum/config: 0996810f58dd453fc1092b3e7fa2938ae13213f00bd124b14d4d25769b3eeb9c
        checksum/secrets: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      imagePullSecrets:
        - name: release-name-orchestrate-registry
      serviceAccountName: default
      securityContext:
        null
      containers:
        - name: tx-listener
          securityContext:
            null
          image: "consensys/orchestrate:v21.12.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-orchestrate-tx-listener-envmap
          command:
            - /go/bin/main
          args:
            - tx-listener
            - run
          ports:
            - name: http-svc
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: http-svc
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http-svc
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            null
---
# Source: orchestrate/templates/tx-sender/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-orchestrate-tx-sender
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: tx-sender
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orchestrate
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: tx-sender
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orchestrate
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: tx-sender
      annotations:
        checksum/config: 3cfb17fa2f3aa3204acc9363c0a9674f5ce54c76bc8fec825495bf1bc7bf614f
        checksum/secrets: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      imagePullSecrets:
        - name: release-name-orchestrate-registry
      serviceAccountName: default
      securityContext:
        null
      containers:
        - name: tx-sender
          securityContext:
            null
          image: "consensys/orchestrate:v21.12.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-orchestrate-tx-sender-envmap
          command:
            - /go/bin/main
          args:
            - tx-sender
            - run
          ports:
            - name: http-svc
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: http-svc
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http-svc
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            null
          volumeMounts:      
      volumes:
---
# Source: orchestrate/templates/secret-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-orchestrate-registry
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5"
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6IHsiZG9ja2VyLmNvbnNlbnN5cy5uZXQiOiB7ImF1dGgiOiAiYzI5dFpXOXVaVHB6YVd4c2VXNWxjM009In19fQ==
---
# Source: orchestrate/templates/migration/hook-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-orchestrate-api-hook-envmap
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: api
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
data:
---
# Source: orchestrate/templates/migration/init-migrate-hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-orchestrate-api-migrate-init-job
  labels:
    helm.sh/chart: orchestrate-3.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orchestrate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v21.12.7"
    app.kubernetes.io/component: api
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 6
  template:
    metadata:
      name: migrate-init
      labels:
        helm.sh/chart: orchestrate-3.0.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: orchestrate
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v21.12.7"
        app.kubernetes.io/component: api
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: release-name-orchestrate-registry
      containers:
        - name: release-name-orchestrate-api-init-up-db
          image: "consensys/orchestrate:v21.12.0"
          imagePullPolicy: IfNotPresent
          command:
            - /go/bin/main
          args:
            - api
            - migrate
            - up
          envFrom:
            - configMapRef:
                name: release-name-orchestrate-api-hook-envmap
