---
# Source: paperless-ng/charts/postgresql/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.7.0
    helm-revision: "1"
    helm.sh/chart: postgresql-11.0.29
stringData:
  postgresql-password: 'testpass'
  postgresql-postgres-password: 'testroot'
---
# Source: paperless-ng/charts/redis/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.8
    helm-revision: "1"
    helm.sh/chart: redis-5.0.32
stringData:
  redis-password: 'testpass'
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: paperless-ng-7.0.31
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "1.13.0"
    app.kubernetes.io/managed-by: Helm
  name: dbcreds
data:
  postgresql-password: "bGlyTFptcHB0TW43RjRNdnBPSXVrTzBZb0k0d0wwTzFENTNqOGtwalpzYnhscExLTmk="
  postgresql-postgres-password: "a01HV2NEZzBSQnZMaHNjUFJJWHJlOXA3cFVnOVFuMjBYdnBQbVo2N090YXYwMXVGSE4="
  url: "cG9zdGdyZXNxbDovL3BhcGVybGVzcy1uZzpsaXJMWm1wcHRNbjdGNE12cE9JdWtPMFlvSTR3TDBPMUQ1M2o4a3BqWnNieGxwTEtOaUByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL3BhcGVybGVzcy1uZw=="
  url-noql: "cG9zdGdyZXM6Ly9wYXBlcmxlc3Mtbmc6bGlyTFptcHB0TW43RjRNdnBPSXVrTzBZb0k0d0wwTzFENTNqOGtwalpzYnhscExLTmlAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9wYXBlcmxlc3Mtbmc="
  urlnossl: "cG9zdGdyZXNxbDovL3BhcGVybGVzcy1uZzpsaXJMWm1wcHRNbjdGNE12cE9JdWtPMFlvSTR3TDBPMUQ1M2o4a3BqWnNieGxwTEtOaUByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL3BhcGVybGVzcy1uZz9zc2xtb2RlPWRpc2FibGU="
  plainporthost: "cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw="
  plainhost: "cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw="
  jdbc: "amRiYzpwb3N0Z3Jlc3FsOi8vcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9wYXBlcmxlc3Mtbmc="
type: Opaque
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: paperless-ng-7.0.31
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "1.13.0"
    app.kubernetes.io/managed-by: Helm
  name: rediscreds
data:
  redis-password: "NzE1T2hGYjhGZlNFMXp3RzFHTHl6bE04OHJvQ0VQSjNHOUxyaFpYeU85bjJGaU1DZUM="
  url: "cmVkaXM6Ly9kZWZhdWx0OjcxNU9oRmI4RmZTRTF6d0cxR0x5emxNODhyb0NFUEozRzlMcmhaWHlPOW4yRmlNQ2VDQHJlbGVhc2UtbmFtZS1yZWRpczo2Mzc5LzA="
  plainhostpass: "ZGVmYXVsdDo3MTVPaEZiOEZmU0UxendHMUdMeXpsTTg4cm9DRVBKM0c5THJoWlh5TzluMkZpTUNlQ0ByZWxlYXNlLW5hbWUtcmVkaXM="
  plainporthost: "cmVsZWFzZS1uYW1lLXJlZGlzOjYzNzk="
  plainhost: "cmVsZWFzZS1uYW1lLXJlZGlz"
type: Opaque
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: paperlessng-secrets
data:
  PAPERLESS_SECRET_KEY: YTFFSnNBV1VteDZtVDZtWVVWcnk1MktDcWxJR0JkNmc=
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.13.0
    helm-revision: "1"
    helm.sh/chart: paperless-ng-7.0.31
stringData:
  PAPERLESS_ADMIN_MAIL: admin@admin.com
  PAPERLESS_ADMIN_PASSWORD: admin
  PAPERLESS_ADMIN_USER: admin
---
# Source: paperless-ng/charts/redis/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.8
    helm-revision: "1"
    helm.sh/chart: redis-5.0.32
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
# Source: paperless-ng/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-consume
  labels:
    helm.sh/chart: paperless-ng-7.0.31
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "1.13.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: paperless-ng/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-data
  labels:
    helm.sh/chart: paperless-ng-7.0.31
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "1.13.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: paperless-ng/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-media
  labels:
    helm.sh/chart: paperless-ng-7.0.31
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "1.13.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: paperless-ng/charts/postgresql/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.7.0
    helm-revision: "1"
    helm.sh/chart: postgresql-11.0.29
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: paperless-ng/charts/redis/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.8
    helm-revision: "1"
    helm.sh/chart: redis-5.0.32
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.13.0
    helm-revision: "1"
    helm.sh/chart: paperless-ng-7.0.31
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 10140
    targetPort: 8000
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
---
# Source: paperless-ng/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.13.0
    helm-revision: "1"
    helm.sh/chart: paperless-ng-7.0.31
  annotations:
    rollme: z5USP
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: paperless-ng
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        
      labels:
        app.kubernetes.io/name: paperless-ng
        app.kubernetes.io/instance: release-name
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 0
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
        - name: db-wait
          image: tccr.io/truecharts/ubuntu:jammy-20221101@sha256:4b9475e08c5180d4e7417dc6a18a26dcce7691e4311e5353dbb952645c5ff43f
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: rediscreds
                  key: plainhost
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rediscreds
                  key: redis-password
            - name: REDIS_PORT
              value: "6379"
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Executing DB waits..."
              until
                pg_isready -U paperless-ng -h release-name-postgresql
                do sleep 2
              done
              [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD";
              export LIVE=false;
              until "$LIVE";
              do
                response=$(
                    timeout -s 3 2 \
                    redis-cli \
                      -h "$REDIS_HOST" \
                      -p "$REDIS_PORT" \
                      ping
                  )
                if [ "$response" == "PONG" ] || [ "$response" == "LOADING Redis is loading the dataset in memory" ]; then
                  LIVE=true
                  echo "$response"
                  echo "Redis Responded, ending initcontainer and starting main container(s)..."
                else
                  echo "$response"
                  echo "Redis not responding... Sleeping for 10 sec..."
                  sleep 10
                fi;
              done
              EOF
      containers:
        - name: release-name-paperless-ng
          image: tccr.io/truecharts/paperless-ng:1.13.0@sha256:f8836b6d50f6dad48fc4692ede49c56275677f3d387be76e560e285123e0b8e1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
        
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "PAPERLESS_CONSUMPTION_DIR"
              value: "/consume/"
            - name: "PAPERLESS_DATA_DIR"
              value: "/data/"
            - name: "PAPERLESS_DBHOST"
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: dbcreds
            - name: "PAPERLESS_DBNAME"
              value: "paperless-ng"
            - name: "PAPERLESS_DBPASS"
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: dbcreds
            - name: "PAPERLESS_DBPORT"
              value: "5432"
            - name: "PAPERLESS_DBUSER"
              value: "paperless-ng"
            - name: "PAPERLESS_MEDIA_ROOT"
              value: "/media/"
            - name: "PAPERLESS_PORT"
              value: "8000"
            - name: "PAPERLESS_REDIS"
              valueFrom:
                secretKeyRef:
                  key: url
                  name: rediscreds
            - name: "PAPERLESS_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  key: PAPERLESS_SECRET_KEY
                  name: paperlessng-secrets
            - name: "PAPERLESS_TIME_ZONE"
              value: "UTC"
            - name: "PAPERLESS_URL"
              value: ""
            - name: "PAPERLESS_WEBSERVER_WORKERS"
              value: "2"
            - name: "USERMAP_GID"
              value: "568"
            - name: "USERMAP_UID"
              value: "568"
          envFrom:
            - secretRef:
                name: release-name-paperless-ng
          ports:
            - name: main
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            
            - mountPath: /consume
              name: consume
            - mountPath: /data
              name: data
            - mountPath: /media
              name: media
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: consume
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-consume
        - name: data
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-data
        - name: media
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-media
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
---
# Source: paperless-ng/charts/postgresql/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.7.0
    helm-revision: "1"
    helm.sh/chart: postgresql-11.0.29
  annotations:
    rollme: ZRyTF
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
  serviceName: release-name-postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: release-name
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
      containers:
        - name: release-name-postgresql
          image: tccr.io/truecharts/postgresql:14.7.0@sha256:9c719a0785a7e67c07e24182b6a6db02d2aa496015322adf8082ac2f974fc8bd
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
        
          env:
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "POSTGRESQL_POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: postgresql-postgres-password
                  name: 'dbcreds'
            - name: "POSTGRES_DB"
              value: "paperless-ng"
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: 'dbcreds'
            - name: "POSTGRES_USER"
              value: "paperless-ng"
          envFrom:
          ports:
            - name: main
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/postgresql
              name: db
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
  volumeClaimTemplates:
    - metadata:
        name: db
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "999Gi"
---
# Source: paperless-ng/charts/redis/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.8
    helm-revision: "1"
    helm.sh/chart: redis-5.0.32
  annotations:
    rollme: tj5UF
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
  serviceName: release-name-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: release-name
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
      containers:
        - name: release-name-redis
          image: tccr.io/truecharts/redis:7.0.8@sha256:765cfd6086d4b34f0d2879e6295229ca2e56ee99d7761eadf93f3b62b299bb03
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
        
          env:
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "ALLOW_EMPTY_PASSWORD"
              value: "yes"
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: 'rediscreds'
            - name: "REDIS_PORT"
              value: "6379"
            - name: "REDIS_REPLICATION_MODE"
              value: "master"
          envFrom:
          ports:
            - name: main
              containerPort: 6379
              protocol: TCP
          volumeMounts:
            
            - mountPath: /health
              name: redis-health
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/redis
              name: data
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_liveness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 2
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: redis-health
          configMap:
            defaultMode: 493
            name: 'release-name-redis-health'
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "999Gi"
---
# Source: paperless-ng/templates/common.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-paperless-ng-manifests
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: paperless-ng/templates/common.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-paperless-ng-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups:  ["*"]
    resources:  ["*"]
    verbs:  ["*"]
---
# Source: paperless-ng/templates/common.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-paperless-ng-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-paperless-ng-manifests
subjects:
  - kind: ServiceAccount
    name: release-name-paperless-ng-manifests
    namespace: default
---
# Source: paperless-ng/templates/common.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: release-name-paperless-ng-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: release-name-paperless-ng-manifests
      containers:
        - name: release-name-paperless-ng-manifests
          image: tccr.io/truecharts/kubectl:v1.26.0@sha256:6d6e0e50f28b961ed1c1c6a9c140553238641591fbdc9ac7c1a348636f78c552
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/sh <<'EOF'
              echo "installing manifests..."
              kubectl apply --server-side --force-conflicts -k https://github.com/truecharts/manifests/manifests  || echo "Manifest application failed..."
              EOF
          volumeMounts:
            - name: release-name-paperless-ng-manifests-temp
              mountPath: /tmp
      restartPolicy: Never
      volumes:
        - name: release-name-paperless-ng-manifests-temp
          emptyDir: {}
