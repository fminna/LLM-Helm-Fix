---
# Source: mentoring/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mentoring
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: mentoring/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "VXplcE0yc1JHMQ=="
  postgresql-password: "ZGVmYXVsdHBhc3N3b3Jk"
---
# Source: mentoring/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mentoring
data:
  # echo -n "postgres://mentoring:defaultpassword@postgres:5432/mentoring" | base64 -w 0
  DATABASE_URL: cG9zdGdyZXM6Ly9tZW50b3Jpbmc6ZGVmYXVsdHBhc3N3b3JkQHBvc3RncmVzOjU0MzIvbWVudG9yaW5n
  DJANGO_OIDC_RP_CLIENT_ID: ZmFrZQ==
  # echo -n "this-is-not-the-production-value" | base64
  DJANGO_SECRET_KEY: dGhpcy1pcy1ub3QtdGhlLXByb2R1Y3Rpb24tdmFsdWU=
  DJANGO_PAIR_ID_HASH_SECRET: dGhpcy1pcy1ub3QtdGhlLXByb2R1Y3Rpb24tdmFsdWU=
  DJANGO_OIDC_RP_CLIENT_SECRET: dGhpcy1pcy1ub3QtdGhlLXByb2R1Y3Rpb24tdmFsdWU=
---
# Source: mentoring/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mentoring
data:
  DJANGO_ALLOWED_HOSTS: "*"
  DJANGO_STAFF_GROUPS: mozilliansorg_mentoring_staff
  DJANGO_OIDC_AUTHENTICATION_CALLBACK_URL: https://mentoring.mozilla.com/oidc/callback/
---
# Source: mentoring/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: mentoring/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: mentoring/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mentoring
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
---
# Source: mentoring/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mentoring
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mentoring
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mentoring
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: mentoring
      securityContext:
        null
      containers:
        - name: mentoring
          securityContext:
            {}
          image: "783633885093.dkr.ecr.us-west-2.amazonaws.com/mentoring:0.0.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
          envFrom:
          - configMapRef:
              name: mentoring
          - secretRef:
              name: mentoring
---
# Source: mentoring/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: mentoring
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mentoring
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 70
---
# Source: mentoring/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: postgres
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.3.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgres
          image: docker.io/bitnami/postgresql:11.11.0-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "mentoring"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "mentoring"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "mentoring" -d "dbname=mentoring" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "mentoring" -d "dbname=mentoring" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: mentoring/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: mentoring
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: "mentoring.mozilla.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: mentoring
              servicePort: 80
---
# Source: mentoring/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mentoring-test-connection"
  labels:
    helm.sh/chart: mentoring-0.2.0
    app.kubernetes.io/name: mentoring
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl
      command: ['curl']
      args: ['-L', 'mentoring:80']
  restartPolicy: Never
