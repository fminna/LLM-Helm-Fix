---
# Source: netchecker/templates/serviceaccount-agent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-netchecker-agent
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: netchecker/templates/serviceaccount-server.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-netchecker-server
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: netchecker/templates/server-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-netchecker-server
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - get
---
# Source: netchecker/templates/server-clusterrolebindig.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-netchecker-server
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-netchecker-server
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-netchecker-server
  apiGroup: rbac.authorization.k8s.io
---
# Source: netchecker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-netchecker-service
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
---
# Source: netchecker/templates/agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-netchecker-agent
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker-agent
    app: netchecker-agent
    app.kubernetes.io/instance: release-name-agent
    app.kubernetes.io/version: "1.16.0-agent"
    app.kubernetes.io/managed-by: Helm-agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: netchecker-agent
      app: netchecker-agent
      app.kubernetes.io/instance: release-name-agent
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: netchecker-agent
        app: netchecker-agent
        app.kubernetes.io/instance: release-name-agent
    spec:
      serviceAccountName: release-name-netchecker-agent
      securityContext:
        fsGroup: 1000
      containers:
        - name: netchecker
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          image: "mirantis/k8s-netchecker-agent:v1.2.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          args:
            - -v=5
            - -alsologtostderr=true
            - -serverendpoint=release-name-netchecker-service:8081
            - -reportinterval=60
          resources:
            limits:
              cpu: 30m
              memory: 100Mi
            requests:
              cpu: 15m
              memory: 64Mi
      tolerations:
        - effect: NoSchedule
          operator: Exists
---
# Source: netchecker/templates/agent-hostnet-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-netchecker-agent-hostnet
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker-agent-hostnet
    app: netchecker-agent-hostnet
    app.kubernetes.io/instance: release-name-agent-hostnet
    app.kubernetes.io/version: "1.16.0-agent-hostnet"
    app.kubernetes.io/managed-by: Helm-agent-hostnet
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: netchecker-agent-hostnet
      app: netchecker-agent-hostnet
      app.kubernetes.io/instance: release-name-agent-hostnet
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: netchecker-agent-hostnet
        app: netchecker-agent-hostnet
        app.kubernetes.io/instance: release-name-agent-hostnet
    spec:
      serviceAccountName: release-name-netchecker-agent
      securityContext:
        fsGroup: 1000
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: netchecker
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          image: "mirantis/k8s-netchecker-agent:v1.2.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          args:
            - -v=5
            - -alsologtostderr=true
            - -serverendpoint=release-name-netchecker-service:8081
            - -reportinterval=60
          resources:
            limits:
              cpu: 30m
              memory: 100Mi
            requests:
              cpu: 15m
              memory: 64Mi
      tolerations:
        - effect: NoSchedule
          operator: Exists
---
# Source: netchecker/templates/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-netchecker-server
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: netchecker
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: netchecker
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-netchecker-server
      securityContext:
        fsGroup: 1000
      volumes:
        - name: etcd-data
          emptyDir: {}
      containers:
        - name: netchecker-server
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          image: "mirantis/k8s-netchecker-server:v1.2.2"
          imagePullPolicy: IfNotPresent
          args:
            - -v=5
            - -logtostderr
            - -kubeproxyinit=false
            - -endpoint=0.0.0.0:8081
            - -etcd-endpoints=http://127.0.0.1:2379
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 64Mi
        - name: netchecker-etcd
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          image: "quay.io/coreos/etcd:v3.4.17"
          imagePullPolicy: IfNotPresent
          command:
            - etcd
            - --listen-client-urls=http://127.0.0.1:2379
            - --advertise-client-urls=http://127.0.0.1:2379
            - --data-dir=/var/lib/etcd
            - --enable-v2
            - --force-new-cluster
          volumeMounts:
            - mountPath: /var/lib/etcd
              name: etcd-data
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 100Mi
      tolerations:
        - effect: NoSchedule
          operator: Exists
---
# Source: netchecker/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-netchecker-test-connection"
  labels:
    helm.sh/chart: netchecker-0.1.0
    app.kubernetes.io/name: netchecker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-netchecker:8081']
  restartPolicy: Never
