---
# Source: ibm-datapower-dev/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata: 
    name: release-name-ibm-datapower-dev-default-overrides
    labels:
        app.kubernetes.io/name: release-name-ibm-datapower-dev
        helm.sh/chart: ibm-datapower-dev-3.1.15
        release: "release-name"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
data:    
    auto-startup.cfg: |
        top; configure terminal;
    
        %if% available "include-config"
    
        include-config "healthCheck"
          config-url "config:///health-check.cfg
          auto-execute
          no interface-detection
        exit
    
        %endif%
    
        exec "config:///health-check.cfg"
        %if% available "snmp"
        snmp
          admin-state enabled
          version 2c
          ip-address 0.0.0.0
          port 1161
          community public default read-only 0.0.0.0/0
          trap-default-subscriptions
          trap-priority warn
          trap-code 0x00030002
          trap-code 0x00230003
          trap-code 0x00330002
          trap-code 0x00b30014
          trap-code 0x00e30001
          trap-code 0x00e40008
          trap-code 0x00f30008
          trap-code 0x01530001
          trap-code 0x01a2000e
          trap-code 0x01a40001
          trap-code 0x01a40005
          trap-code 0x01a40008
          trap-code 0x01b10006
          trap-code 0x01b10009
          trap-code 0x01b20002
          trap-code 0x01b20004
          trap-code 0x01b20008
          trap-code 0x02220001
          trap-code 0x02220003
          trap-code 0x02240002
        exit
        %endif%
    
        domain "none"
          base-dir local:
          base-dir none:
          config-file none.cfg
          visible-domain default
          url-permissions "http+https"
          file-permissions "CopyFrom+CopyTo+Delete+Display+Exec+Subdir"
          file-monitoring "Audit+Log"
          config-mode local
          import-format ZIP
          local-ip-rewrite
          maxchkpoints 3
        exit
    
    auto-user.cfg: |
        top; configure terminal;
    
        %if% available "user"
    
        user "admin"
          summary "Administrator"
          password-hashed "$1$12345678$kbapHduhihjieYIUP66Xt/"
          access-level privileged
        exit
    
        %endif%    
    
    health-check.cfg: |
        top; configure terminal;
    
        action "HealthCheck_rule_0_gatewayscript_0"
          reset
          type gatewayscript
          input "INPUT"
          parse-settings-result-type none
          transform-language none
          gatewayscript-location "local:///health/health.js"
          output "OUTPUT"
          named-inouts default
          ssl-client-type proxy
          no transactional
          soap-validation body
          sql-source-type static
          strip-signature
          no asynchronous
          results-mode first-available
          retry-count 0
          retry-interval 1000
          no multiple-outputs
          iterator-type XPATH
          timeout 0
          http-method GET
          http-method-limited POST
          http-method-limited2 POST
        exit
    
        action "HealthCheck_rule_0_setvar_0"
          reset
          type setvar
          input "INPUT"
          parse-settings-result-type none
          transform-language none
          named-inouts default
          variable "var://service/mpgw/skip-backside"
          value "1"
          ssl-client-type proxy
          no transactional
          soap-validation body
          sql-source-type static
          strip-signature
          no asynchronous
          results-mode first-available
          retry-count 0
          retry-interval 1000
          no multiple-outputs
          iterator-type XPATH
          timeout 0
          http-method GET
          http-method-limited POST
          http-method-limited2 POST
        exit
    
        rule "HealthCheck_rule_0"
          reset
            action "HealthCheck_rule_0_setvar_0"
            action "HealthCheck_rule_0_gatewayscript_0"
          type request-rule
          input-filter none
          output-filter none
          no non-xml-processing
          no unprocessed
        exit
    
        matching "Health"
          urlmatch "/health"
          no match-with-pcre
          no combine-with-or
        exit
    
        stylepolicy "HealthCheck"
          reset
          filter "store:///filter-reject-all.xsl"
          xsldefault "store:///identity.xsl"
          xquerydefault "store:///reject-all-json.xq"
          match "Health" "HealthCheck_rule_0"
        exit
    
        %if% available "source-http"
    
        source-http "HTTPHealth"
          local-address 0.0.0.0
          port 7878
          http-client-version HTTP/1.1
          allowed-features "HTTP-1.0+HTTP-1.1+GET"
          persistent-connections
          max-persistent-reuse 0
          no compression
          no websocket-upgrade
          websocket-idle-timeout 0
          max-url-len 16384
          max-total-header-len 128000
          max-header-count 0
          max-header-name-len 0
          max-header-value-len 0
          max-querystring-len 0
          credential-charset protocol
          http2-max-streams 100
          http2-max-frame 16384
          no http2-stream-header
          chunked-encoding
        exit
    
        %endif%
    
        %if% available "policy-attachments"
    
        policy-attachments "HealthCheck"
          enforcement-mode enforce
          policy-references
          sla-enforcement-mode allow-if-no-sla
        exit
    
        %endif%
    
        %if% available "mpgw"
    
        mpgw "HealthCheck"
          no policy-parameters
          summary "Health check endpoint"
          priority normal
          front-protocol HTTPHealth
          xml-manager default
          ssl-client-type proxy
          default-param-namespace "http://www.datapower.com/param/config"
          query-param-namespace "http://www.datapower.com/param/query"
          backend-url "http://httpbin.org/get"
          propagate-uri
          monitor-processing-policy terminate-at-first-throttle
          request-attachments strip
          response-attachments strip
          no request-attachments-flow-control
          no response-attachments-flow-control
          root-part-not-first-action process-in-order
          front-attachment-format dynamic
          back-attachment-format dynamic
          mime-front-headers
          mime-back-headers
          stream-output-to-back buffer-until-verification
          stream-output-to-front buffer-until-verification
          max-message-size 0
          no gateway-parser-limits
          element-depth 512
          attribute-count 128
          max-node-size 33554432
          forbid-external-references
          external-references forbid
          max-prefixes 1024
          max-namespaces 1024
          max-local-names 60000
          attachment-byte-count 2000000000
          attachment-package-byte-count 0
          debugger-type internal
          debug-history 25
          no flowcontrol
          soap-schema-url "store:///schemas/soap-envelope.xsd"
          front-timeout 120
          back-timeout 120
          front-persistent-timeout 180
          back-persistent-timeout 180
          no include-content-type-encoding
          http-server-version HTTP/1.1
          persistent-connections
          no loop-detection
          host-rewriting
          no chunked-uploads
          process-http-errors
          http-client-ip-label "X-Client-IP"
          http-global-tranID-label "X-Global-Transaction-ID"
          inorder-mode ""
          wsa-mode sync2sync
          wsa-require-aaa
          wsa-strip-headers
          wsa-default-replyto "http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous"
          wsa-default-faultto "http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous"
          no wsa-force
          wsa-genstyle sync
          wsa-http-async-response-code 204
          wsa-timeout 120
          no wsrm
          wsrm-sequence-expiration 3600
          wsrm-destination-accept-create-sequence
          wsrm-destination-maximum-sequences 400
          no wsrm-destination-inorder
          wsrm-destination-maximum-inorder-queue-length 10
          no wsrm-destination-accept-offers
          no wsrm-request-force
          no wsrm-response-force
          no wsrm-source-request-create-sequence
          no wsrm-source-response-create-sequence
          no wsrm-source-make-offer
          no wsrm-source-sequence-ssl
          wsrm-source-maximum-sequences 400
          wsrm-source-retransmission-interval 10
          wsrm-source-exponential-backoff
          wsrm-source-retransmit-count 4
          wsrm-source-maximum-queue-length 30
          wsrm-source-request-ack-count 1
          wsrm-source-inactivity-close-interval 360
          force-policy-exec
          rewrite-errors
          delay-errors
          delay-errors-duration 1000
          request-type json
          response-type json
          follow-redirects
          no rewrite-location-header
          stylepolicy HealthCheck
          type static-backend
          no compression
          no allow-cache-control
          policy-attachments HealthCheck
          no wsmagent-monitor
          wsmagent-monitor-capture-mode all-messages
          no proxy-http-response
          transaction-timeout 0
        exit
    
        %endif%
---
# Source: ibm-datapower-dev/templates/configmaps-static-health.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: release-name-ibm-datapower-dev-static-health
    labels:
        app.kubernetes.io/name: release-name-ibm-datapower-dev
        helm.sh/chart: ibm-datapower-dev-3.1.15
        release: "release-name"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
data:
  health.js: |
    // health
    
    console.debug("Health check invoked");
    
    var servicevars = require ('service-metadata');
    
    servicevars.mpgw.skipBackside = true;
    
    session.output.write({'a': 'Running'});
---
# Source: ibm-datapower-dev/templates/configmaps-static-init-admin-user.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: release-name-ibm-datapower-dev-static-init-admin-user
    labels:
        app.kubernetes.io/name: release-name-ibm-datapower-dev
        helm.sh/chart: ibm-datapower-dev-3.1.15
        release: "release-name"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
data:
  init-admin-user.sh: |
    if [[ -f /opt/ibm/datapower/init/admin-user-secret/password-hashed ]] ; then
      ADMIN_USER_PASSWORD_HASHED="$(cat /opt/ibm/datapower/init/admin-user-secret/password-hashed)"
    else
      ADMIN_USER_PASSWORD="$(cat /opt/ibm/datapower/init/admin-user-secret/password)"
      ADMIN_USER_METHOD="$([[ -f /opt/ibm/datapower/init/admin-user-secret/method ]] && cat /opt/ibm/datapower/init/admin-user-secret/method || echo md5)"
      ADMIN_USER_SALT="$([[ -f /opt/ibm/datapower/init/admin-user-secret/salt ]] && cat /opt/ibm/datapower/init/admin-user-secret/salt || echo 12345678)"
      ADMIN_USER_PASSWORD_HASHED="$(cryptpw --method $ADMIN_USER_METHOD $ADMIN_USER_PASSWORD $ADMIN_USER_SALT)"
    fi
    
    if [[ -n "$ADMIN_USER_PASSWORD_HASHED" ]] ; then
    cat << EOF > /drouter/config/auto-user.cfg
    top; configure terminal;
    
    %if% available "user"
    
    user "admin"
      summary "Administrator"
      password-hashed "$ADMIN_USER_PASSWORD_HASHED"
      access-level privileged
      suppress-password-change on
    exit
    
    %endif%
    EOF
    else
      echo "No admin password provided!"
    fi
---
# Source: ibm-datapower-dev/templates/configmaps-static-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: release-name-ibm-datapower-dev-static-scripts
    labels:
        app.kubernetes.io/name: release-name-ibm-datapower-dev
        helm.sh/chart: ibm-datapower-dev-3.1.15
        release: "release-name"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
data:
  initConfig.sh: |
    #!/bin/bash
    
    # This script handles initializing config in an unobtrusive way, applying
    # the config associated with the chart while not overwritting the baked in
    # config of the image.
    
    # Directories/files
    initDir="/opt/ibm/datapower/init"
    initConfig="$initDir/config"
    initLocal="$initDir/local"
    initUsrcert="$initDir/usrcerts"
    initSharedcert="$initDir/sharedcerts"
    initOverrides="$initDir/chart-overrides"
    drouterConfig="$DATAPOWER_BASE_DIR/drouter/config"
    drouterLocal="$DATAPOWER_BASE_DIR/drouter/local"
    drouterUsrcert="$DATAPOWER_BASE_DIR/root/secure/usrcerts"
    drouterSharedcert="$DATAPOWER_BASE_DIR/root/secure/sharedcerts"
    
    generate_domain_config() {
    cat <<EOF
    domain $1
      visible-domain default
    exit
    
    %if% available "include-config"
    
    include-config "$1-cfg"
      config-url "config:///$1/$1.cfg"
      auto-execute
      no interface-detection
    exit
    
    %endif%
    EOF
    }
    
    # In this merge, the order of precedence will be:
    #   1. Tuneables set in chart values        (highest)
    #   2. Config given through configmaps
    #   3. Config built into the image          (lowest)
    
    # Append all configmap files over top of existing config
    (
    if [ ! -d $initConfig ]; then
        exit # From sub-shell
    fi
    
    # Domains need to be in the configure terminal context to be configured
    echo "top; configure terminal;" >> ${drouterConfig}/auto-startup.cfg
    
    cd $initConfig
    for dir in $(ls); do
        # domain is top level dir
        domain=$dir
    
        # Domain is a special case, all config should appended to auto-startup.
        if [ "$domain" = "default" ]; then
            for config in $(find $domain -type f); do
                cat $config >> ${drouterConfig}/auto-startup.cfg
            done
            continue
        fi
    
        # Check if domain doesn't exist
        if [ ! -d "$drouterConfig/$domain" ]; then
            generate_domain_config $domain >> $drouterConfig/auto-startup.cfg
        fi
    
        # Ensure domain directory exists
        mkdir -p $drouterConfig/$domain
    
        # Append config
        echo "top; configure terminal" >> $drouterConfig/$domain/$domain.cfg
        for config in $(find $domain -type f); do
            cat $config >> $drouterConfig/$domain/$domain.cfg
        done
    done
    ) # FIN config
    
    
    ( # Unpack and copy the contents of the local tar file
    
    if [ ! -d $initLocal ]; then
        exit # the subshell
    fi
    
    # unpack tar file
    mkdir -p /opt/ibm/datapower/unpack-tmp
    for targz in $(find $initLocal -type f); do
        tar xf $targz -C /opt/ibm/datapower/unpack-tmp
    done
    # copy unpacked contents to local
    if [ -d "/opt/ibm/datapower/unpack-tmp/local" ]; then
        cp -r /opt/ibm/datapower/unpack-tmp/local/* $drouterLocal
    else
        cp -r /opt/ibm/datapower/unpack-tmp/* $drouterLocal
    fi
    rm -rf /opt/ibm/datapower/unpack-tmp
    
    ) # FIN local
    
    
    ( # Copy certs
    
    if [ ! -d $initUsrcert ]; then
        exit # the subshell
    fi
    
    cd $initUsrcert
    
    for dir in $(find . -maxdepth 1 -type d); do
        domain=$(basename $dir)
    
        # skip the current dir result from find
        if [ "$domain" = "." ]; then
            continue
        fi
    
        [ "$domain" != "default" ] && mkdir -p $drouterUsrcert/$domain
        for cert in $(find $domain -type f); do
            if [ "$domain" = "default" ]; then
                cp $cert $drouterUsrcert
            else
                cp $cert $drouterUsrcert/$domain
            fi
        done
    done
    
    )
    
    (
    if [ ! -d $initSharedcert ]; then
        exit # the subshell
    fi
    
    cd $initSharedcert
    mkdir -p $drouterSharedcert
    
    for cert in $(find . -type f); do
        cp $cert $drouterSharedcert
    done
    
    ) # FIN certs
    
    
    # Begin chart specific config
    
    # Append values-specified config
    for file in $initOverrides/*; do
        if [ -d $file ]; then
            continue
        fi
        cat $file >> $drouterConfig/$(basename $file)
    done
    
    # Overwrite local files
    for file in $initOverrides/local/*; do
        cp -r $file $drouterLocal/$(basename $file)
    done
    
    # FIN chart specific config
---
# Source: ibm-datapower-dev/templates/deployment.yaml
# The values variable below picks the pattern-specific config options from
# values.yaml. For example, if patternName is "webApplicationProxy" it will pick
# the webApplicationProxy config options from the map structure in values.yaml.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-ibm-datapower-dev
  labels:
    app.kubernetes.io/name: release-name-ibm-datapower-dev
    helm.sh/chart: ibm-datapower-dev-3.1.15
    release: "release-name"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name-ibm-datapower-dev
  template:
    metadata:
      labels:
        helm.sh/chart: ibm-datapower-dev-3.1.15
        release: "release-name"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: release-name-ibm-datapower-dev
      annotations:
        productName: 'IBM DataPower Gateway Virtual Edition for Developers'
        productID: 'IBMDataPowerGatewayVirtualEdition_2018.4.1.26_Developers'
        productVersion: "2018.4.1.26"
        productMetric: "FREE"
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/snmp'
        prometheus.io/port: '63512'
        prometheus.io/target: '127.0.0.1:1161'
        prometheus.io/module: 'dpStatusMIB'
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
      containers:
      - name: ibm-datapower-dev
        image: "icr.io/cpopen/datapower/datapower-limited:2018.4.1.26"
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            sh /opt/ibm/datapower/init/scripts/initConfig.sh
            /usr/local/bin/datapower-health-check -port=7879 &
            exec /start.sh --log-format json-icp
        stdin: true
        tty: true
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
# Dynamically increase the user permissions of the DataPower container when SSH is enabled.
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
            - ALL
# Add capabilities needed for SSH only when SSH is enabled
        resources:
          limits:
            cpu: 8
            memory: "64Gi"
          requests:
            cpu: 4
            memory: "8Gi"
        env:
        - name: DATAPOWER_ACCEPT_LICENSE
          value: "true"
        - name: DATAPOWER_INTERACTIVE
          value: "true"
        - name: DATAPOWER_LOG_COLOR
          value: "false"
        - name: DATAPOWER_WORKER_THREADS
          value: "4"
        livenessProbe:
          httpGet:
            httpHeaders:
              - name: Connection
                value: close
            path: /
            port: liveness
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            httpHeaders:
              - name: Connection
                value: close
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
        ports:
        - name: health
          containerPort: 7878
        - name: liveness
          containerPort: 7879
        volumeMounts:
            - mountPath: "/opt/ibm/datapower/init/chart-overrides"
              name: release-name-ibm-datapower-dev-init-overrides-volume
            - mountPath: "/opt/ibm/datapower/init/scripts"
              name: release-name-ibm-datapower-dev-scripts-volume
            - mountPath: "/drouter/local/health"
              name: release-name-ibm-datapower-dev-health # ne patternName "none"
      volumes:
        - name: release-name-ibm-datapower-dev-init-overrides-volume
          configMap:
            name: release-name-ibm-datapower-dev-default-overrides
            items:
            - key: auto-user.cfg
              path: "auto-user.cfg"
            - key: auto-startup.cfg
              path: "auto-startup.cfg"
            - key: health-check.cfg
              path: "health-check.cfg"
        - name: release-name-ibm-datapower-dev-scripts-volume
          configMap:
            name: release-name-ibm-datapower-dev-static-scripts
        - name: release-name-ibm-datapower-dev-health
          configMap:
            name: release-name-ibm-datapower-dev-static-health # ne patternName "none"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "kubernetes.io/arch"
                  operator: In
                  values: ["amd64"]
