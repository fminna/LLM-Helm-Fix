---
# Source: radar-appserver/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: radar-appserver-0.2.2
      app.kubernetes.io/name: radar-appserver
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/version: "2.4.1"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'radar-appserver-postgresql'
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
---
# Source: radar-appserver/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  managementPortalClientId: "cmFkYXI="
  managementPortalClientSecret: "cmFkYXI="
  databaseUser: "cG9zdGdyZXM="
  databasePassword: "cGFzc3dvcmQ="
  githubClientToken: ""
  firebaseAdminSdkKey: ""
---
# Source: radar-appserver/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  healthcheck.sh: |
    #!/bin/sh
    STATUS=$(curl -s --max-time 4 localhost:8080/actuator/health)
    if ! (echo "$STATUS" | grep -Fq 'db":{"status":"UP'); then
      exit 1
    fi
  radar_is.yml: |
    resourceName: res_AppServer

    # Set of supported public key endpoints for authentication
    publicKeyEndpoints:
        - https://localhost/managementportal/oauth/token_key
---
# Source: radar-appserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
---
# Source: radar-appserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: radar-appserver
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/configmap: 6684596323f9bfeff2135753b18809cdd114b07094eb21359505ba459dca786a
        checksum/secrets: 676fd10db8571e755a9edd350321e92d5898c026e0af0d3ca10fe4ff02df1678
      labels:
        app.kubernetes.io/name: radar-appserver
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - radar-appserver
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: radar-appserver
          securityContext:
            {}
          image: "radarbase/radar-appserver:2.4.1"
          imagePullPolicy: IfNotPresent
          env:
          - name: RADAR_IS_CONFIG_LOCATION
            value: /etc/radar-appserver/radar_is.yml
          - name: SPRING_DATASOURCE_URL
            value: "jdbc:postgresql://radar-appserver-postgresql:5432/appserver"
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: release-name-radar-appserver
                key: databaseUser
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: release-name-radar-appserver
                key: databasePassword
          - name: SECURITY_RADAR_MANAGEMENTPORTAL_URL
            value: "http://management-portal:8080/managementportal"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/google/firebase-adminsdk.json
          - name: RADAR_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: release-name-radar-appserver
                key: managementPortalClientId
          - name: RADAR_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: release-name-radar-appserver
                key: managementPortalClientSecret
          - name: SECURITY_GITHUB_CLIENT_TOKEN
            valueFrom:
              secretKeyRef:
                name: release-name-radar-appserver
                key: githubClientToken
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/radar-appserver/healthcheck.sh
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/radar-appserver/healthcheck.sh
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: config
              mountPath: /etc/radar-appserver/
            - name: secrets
              mountPath: /etc/google/firebase-adminsdk.json
              subPath: firebaseAdminSdkKey
      volumes:
        - name: config
          configMap:
            name: release-name-radar-appserver
        - name: secrets
          secret:
            secretName: release-name-radar-appserver
---
# Source: radar-appserver/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-radar-appserver
  labels:
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/name: radar-appserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: "nginx"
  tls:
    - hosts:
        - "localhost"
      secretName: radar-base-tls-appserver
  rules:
    - host: "localhost"
      http:
        paths:
          - path: "/appserver/?(.*)"
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-radar-appserver
                port:
                  number: 8080
---
# Source: radar-appserver/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-radar-appserver-test-connection"
  labels:
    app.kubernetes.io/name: radar-appserver
    helm.sh/chart: radar-appserver-0.2.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['release-name-radar-appserver:8080']
  restartPolicy: Never
