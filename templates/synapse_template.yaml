---
# Source: synapse/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "TlBzMlViZXgyTg=="
  password: "c2V0LXlvdXItb3duLXBhc3N3b3Jk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: synapse/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: synapse-config
  labels:
    helm.sh/chart: synapse-0.1.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.77.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    rollme: "0g5dV"
stringData:
  homeserver.yaml: |
    database:
      args:
        cp_max: 10
        cp_min: 5
        database: synapse
        host: release-name-postgresql
        password: set-your-own-password
        port: 5432
        user: synapse
      name: psycopg2
    enable_registration: true
    enable_registration_captcha: true
    experimental_features:
      faster_joins: true
    form_secret: 50-len-key
    listeners:
    - port: 8008
      resources:
      - compress: false
        names:
        - client
        - federation
      tls: false
      type: http
      x_forwarded: true
    log_config: /data/config/example.com.log.config
    macaroon_secret_key: 50-len-key
    media_store_path: /data/media_store
    pid_file: /data/homeserver.pid
    public_baseurl: https://matrix.example.com
    recaptcha_private_key: 40-len-key
    recaptcha_public_key: 40-len-key
    report_stats: false
    server_name: example.com
    signing_key_path: /data/example.com.signing.key
    trusted_key_servers:
    - server_name: matrix.org
    url_preview_enabled: true
    url_preview_ip_range_blacklist:
    - 127.0.0.0/8
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
    - 100.64.0.0/10
    - 169.254.0.0/16
    - 192.0.0.0/24
    - 192.88.99.0/24
    - 198.18.0.0/15
    - 192.0.2.0/24
    - 198.51.100.0/24
    - 203.0.113.0/24
    - 224.0.0.0/4
    - ::1/128
    - fe80::/10
    - fc00::/7
    - 2001:db8::/32
    - ff00::/8
    - fec0::/10
    
    # vim:ft=yaml

  example.com.log.config: |
    formatters:
      precise:
        format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: precise
    loggers:
      synapse.storage.SQL:
        level: INFO
    root:
      handlers:
      - console
      level: INFO
    version: 1
---
# Source: synapse/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-synapse-media
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: synapse
    app.kubernetes.io/version: v1.77.0
    helm.sh/chart: synapse-0.1.0
  annotations:
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  storageClassName: "standard"
---
# Source: synapse/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: synapse/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: synapse/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-synapse
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: synapse
    app.kubernetes.io/version: v1.77.0
    helm.sh/chart: synapse-0.1.0
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 8008
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: release-name
---
# Source: synapse/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-synapse
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: synapse
    app.kubernetes.io/version: v1.77.0
    helm.sh/chart: synapse-0.1.0
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: synapse
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: synapse
        app.kubernetes.io/instance: release-name
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: release-name-synapse
          image: "matrixdotorg/synapse:v1.78.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: SYNAPSE_CONFIG_PATH
              value: /data/config/homeserver.yaml
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /data/config
            - name: data
              mountPath: /data
            - name: media
              mountPath: /data/media_store
          livenessProbe:
            tcpSocket:
              port: 8008
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8008
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8008
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
      volumes:
        - name: config
          secret:
            secretName: synapse-config
        - name: data
          emptyDir:
            {}
        - name: media
          persistentVolumeClaim:
            claimName: release-name-synapse-media
---
# Source: synapse/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.2.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/postgres:15.2-alpine
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "synapse"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "synapse"
            # Replication
            # Initdb
            - name: POSTGRES_INITDB_ARGS
              value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "synapse" -d "dbname=synapse" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "synapse" -d "dbname=synapse" -h 127.0.0.1 -p 5432
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: standard
---
# Source: synapse/templates/common.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-synapse
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: synapse
    app.kubernetes.io/version: v1.77.0
    helm.sh/chart: synapse-0.1.0
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
spec:
  rules:
    - host: "matrix.example.com"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: release-name-synapse
                port:
                  number: 8008
