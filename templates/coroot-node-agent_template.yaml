---
# Source: coroot-node-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-coroot-node-agent
  labels:
    helm.sh/chart: coroot-node-agent-0.7.1
    app.kubernetes.io/name: coroot-node-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: coroot-node-agent/templates/deployment.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-coroot-node-agent
  labels:
    helm.sh/chart: coroot-node-agent-0.7.1
    app.kubernetes.io/name: coroot-node-agent
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.8.2"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: coroot-node-agent
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coroot-node-agent
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-coroot-node-agent
      tolerations:
        - operator: Exists
      hostPID: true
      securityContext:
        {}
      containers:
        - name: coroot-node-agent
          securityContext:
            privileged: true
          image: "ghcr.io/coroot/coroot-node-agent:1.8.2"
          imagePullPolicy: IfNotPresent
          args: ["--cgroupfs-root", "/host/sys/fs/cgroup"]
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /host/sys/fs/cgroup
              name: cgroupfs
              readOnly: true
            - mountPath: /sys/kernel/debug
              name: debugfs
              readOnly: false
          resources:
            {}
      volumes:
        - hostPath:
            path: /sys/fs/cgroup
          name: cgroupfs
        - hostPath:
            path: /sys/kernel/debug
          name: debugfs
