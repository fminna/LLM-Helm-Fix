---
# Source: myweatherhelm/templates/myweather-nfs-pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myweather-nfs
spec:
  capacity:
    storage: 2000Mi
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  nfs:
    server: 100.0.0.10
    path: "/var/nfs/public"
---
# Source: myweatherhelm/templates/myweather-local-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myweather-mssql-depl
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2000Mi
---
# Source: myweatherhelm/templates/myweather-nfs-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myweather-nfs
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  resources:
    requests:
      storage: 2000Mi
---
# Source: myweatherhelm/templates/myweather-angular-client.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-angular-client
spec:
  type: ClusterIP
  selector:
    app: myweather-angular-client
  ports:
  - name: myweather-angular-client
    protocol: TCP
    port: 80
    targetPort: 80
  # - name: myweathergrpc
  #   protocol: TCP
  #   port: 666
  #   targetPort: 666
---
# Source: myweatherhelm/templates/myweather-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-depl
spec:
  type: ClusterIP
  selector:
    app: myweather-depl
  ports:
  - name: myweather-depl
    protocol: TCP
    port: 80
    targetPort: 80
  # - name: myweathergrpc
  #   protocol: TCP
  #   port: 666
  #   targetPort: 666
---
# Source: myweatherhelm/templates/myweather-gateway-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-gateway-depl
spec:
  type: ClusterIP
  selector:
    app: myweather-gateway-depl
  ports:
  - name: myweather-gateway-depl
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: myweatherhelm/templates/myweather-mssql-plat-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-mssql-depl
spec:
  type: ClusterIP
  selector:
    app: myweather-mssql-depl
  ports:
  - name: myweather-mssql-depl
    protocol: TCP
    port: 1433
    targetPort: 1433
---
# Source: myweatherhelm/templates/myweather-mssql-plat-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-mssql-depl
spec:
  type: LoadBalancer
  selector:
    app: myweather-mssql-depl
  ports:
  - protocol: TCP
    port: 1433
    targetPort: 1433
---
# Source: myweatherhelm/templates/myweather-processing-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-processing-depl
spec:
  type: ClusterIP
  selector:
    app: myweather-processing-depl
  ports:
  - name: myweather-processing-depl
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: myweatherhelm/templates/myweather-processing-react-client.yaml
apiVersion: v1
kind: Service
metadata:
  name: myweather-processingreact-client
spec:
  type: ClusterIP
  selector:
    app: myweather-processingreact-client
  ports:
  - name: myweather-processingreact-client
    protocol: TCP
    port: 3000
    targetPort: 3000
---
# Source: myweatherhelm/templates/myweather-rabbitmq-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: mw-rabtmq-depl
spec:
  type: ClusterIP
  selector:
    app: mw-rabtmq-depl
  ports:
  - name: mw-rb-mgmgt-prt
    protocol: TCP
    port: 15672
    targetPort: 15672
  - name: mw-rbmq-msg-prt
    protocol: TCP
    port: 5672
    targetPort: 5672
---
# Source: myweatherhelm/templates/myweather-rabbitmq-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: mw-rabtmq-depl
spec:
  type: LoadBalancer
  selector:
    app: mw-rabtmq-depl
  ports:
  - name: mw-rb-mgmgt-prt
    protocol: TCP
    port: 15672
    targetPort: 15672
  - name: mw-rbmq-msg-prt
    protocol: TCP
    port: 5672
    targetPort: 5672
---
# Source: myweatherhelm/templates/myweather-redis-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: mw-redis-depl
spec:
  type: ClusterIP
  selector:
    app: mw-redis-depl
  ports:
  - name: mw-rd-prt
    protocol: TCP
    port: 16379
    targetPort: 16379
  - name: mw-rd-msg-prt
    protocol: TCP
    port: 6379
    targetPort: 6379
---
# Source: myweatherhelm/templates/myweather-redis-depl.yaml
apiVersion: v1
kind: Service
metadata:
  name: mw-redis-depl
spec:
  type: LoadBalancer
  selector:
    app: mw-redis-depl
  ports:
  - name: mw-rd-prt
    protocol: TCP
    port: 16379
    targetPort: 16379
  - name: mw-rd-msg-prt
    protocol: TCP
    port: 6379
    targetPort: 6379
---
# Source: myweatherhelm/templates/myweather-angular-client.yaml
# Deploying container into a pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-angular-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-angular-client
  template:
    metadata:
      labels:
        app: myweather-angular-client
    spec:
      containers:
      - name: myweather-angular-client
        image: "hecrom/myweatherangularclient:1.3.11"
        # image: myharbor.com:80/microsrv/myweatherangularclient
        imagePullPolicy: Always
---
# Source: myweatherhelm/templates/myweather-depl.yaml
# Deploying container into a pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-depl
  template:
    metadata:
      labels:
        app: myweather-depl
    spec:
      containers:
      - name: myweather-depl
        # image: hecrom/myweatherservice:latest
        image: "hecrom/myweatherservice:1.3.11"
        imagePullPolicy: Always
---
# Source: myweatherhelm/templates/myweather-gateway-depl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-gateway-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-gateway-depl
  template:
    metadata:
      labels:
        app: myweather-gateway-depl
    spec:
      containers:
      - name: myweather-gateway-depl
        # image: hecrom/myweathergatewayservice:latest
        image: "hecrom/myweathergatewayservice:1.3.11"
        imagePullPolicy: Always
---
# Source: myweatherhelm/templates/myweather-mssql-plat-depl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-mssql-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-mssql-depl
  template:
    metadata:
      labels:
        app: myweather-mssql-depl
    spec:
      securityContext:
        fsGroup: 10001
      containers:
      - name: myweather-mssql-depl
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
        - containerPort: 1433
        env:
          - name: MYWEATHER_MSSQL_PID
            value: "Express"
          - name: ACCEPT_EULA
            value: "Y"
          - name: "SA_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: mssql
                key: "SA_PASSWORD"
        volumeMounts:
        - mountPath: /var/opt/myweather-mssql-depl/data
          name: myweather-mssql-depl
      volumes:
      - name: myweather-mssql-depl
        persistentVolumeClaim:
          claimName: myweather-mssql-depl
          # claimName:  # nfs
---
# Source: myweatherhelm/templates/myweather-processing-depl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-processing-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-processing-depl
  template:
    metadata:
      labels:
        app: myweather-processing-depl
    spec:
      containers:
      - name: myweather-processing-depl
        # image: hecrom/myweatherprocessingservice:latest
        image: "hecrom/myweatherprocessingservice:1.3.11"
        imagePullPolicy: Always
---
# Source: myweatherhelm/templates/myweather-processing-react-client.yaml
# Deploying container into a pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweather-processingreact-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myweather-processingreact-client
  template:
    metadata:
      labels:
        app: myweather-processingreact-client
    spec:
      containers:
      - name: myweather-processingreact-client
        # image: hecrom/myweatherprocessingreactclient:latest
        image: "hecrom/myweatherprocessingreactclient:1.3.11"
        imagePullPolicy: Always
---
# Source: myweatherhelm/templates/myweather-rabbitmq-depl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mw-rabtmq-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mw-rabtmq-depl
  template:
    metadata:
      labels:
        app: mw-rabtmq-depl
    spec:
      containers:
      - name: mw-rabtmq-depl
        image: rabbitmq:3-management
        ports:
        - containerPort: 15672
          name: mw-rb-mgmgt-prt
        - containerPort: 5672
          name: mw-rbmq-msg-prt
---
# Source: myweatherhelm/templates/myweather-redis-depl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mw-redis-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mw-redis-depl
  template:
    metadata:
      labels:
        app: mw-redis-depl
    spec:
      containers:
      - name: mw-redis-depl
        image: redis:5.0.4
        ports:
        - containerPort: 16379
          name: mw-rd-prt
        - containerPort: 6379
          name: mw-rd-msg-prt
---
# Source: myweatherhelm/templates/myweather-angular-ingress-srv.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweather-angular-client
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: myweatherangular.com
    http:
      paths:
      - path: "/"
        pathType: Prefix        
        backend:
          service:
            name: myweather-angular-client
            port: 
              number: 80
---
# Source: myweatherhelm/templates/myweather-gateway-ingress-srv.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweather-gateway-ingress-srv
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: gatewaydemo.com
    http:
      paths:
      - path: "/*"
        pathType: Prefix        
        backend:
          service:
            # name: myweather-gateway-clusterip-srv
            name: myweather-gateway-depl
            port: 
              number: 80
---
# Source: myweatherhelm/templates/myweather-ingress-srv.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweather-depl
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: myweatherdemo.com
    http:
      paths:
      - path: "/api/companies"
        pathType: Prefix        
        backend:
          service:
            name: myweather-depl
            port: 
              number: 80
---
# Source: myweatherhelm/templates/myweather-processing-ingress-srv.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweather-processing-depl
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: processingdemo.com
    http:
      paths:
      - path: "/api/companies"
        pathType: Prefix        
        backend:
          service:
            name: myweather-processing-depl
            port: 
              number: 80
---
# Source: myweatherhelm/templates/myweather-processing-react-ingress-srv.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myweather-processingreact-client
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: myweatherprocessingreact.com
    http:
      paths:
      - path: "/"
        pathType: Prefix        
        backend:
          service:
            name: myweather-processingreact-client
            port: 
              number: 3000
