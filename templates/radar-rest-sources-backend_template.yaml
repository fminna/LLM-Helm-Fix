---
# Source: radar-rest-sources-backend/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: radar-rest-sources-backend-1.1.2
      app.kubernetes.io/name: radar-rest-sources-backend
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/version: "4.4.0"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'postgresql'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: radar-push-endpoint
  policyTypes:
  - Ingress
  - Egress
---
# Source: radar-rest-sources-backend/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql_password: "cGFzc3dvcmQ="
---
# Source: radar-rest-sources-backend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  authorizer.yml: |
    service:
      # Interval time in minutes for syncing projects and subjects.
      baseUri: http://0.0.0.0:8080/rest-sources/backend/
      advertisedBaseUri: https://localhost/rest-sources/backend/
      enableCors: true
      syncParticipantsIntervalMin: 2
      persistentTokenExpiryInMin: 7200
      tokenExpiryTimeInMinutes: 15

    auth:
      # Management Portal URL
      managementPortalUrl: http://management-portal:8080/managementportal
      # OAuth2 Client id of rest sources authorizer backend
      clientId: radar_rest_sources_auth_backend
      # OAuth2 Client Secret of rest sources authorizer backend client
      clientSecret: secret

    database:
      driver: org.postgresql.Driver
      url: jdbc:postgresql://postgresql:5432/restsourceauthorizer
      user: postgres
      password: password
      dialect: org.hibernate.dialect.PostgreSQLDialect

    restSourceClients:
      - authorizationEndpoint: https://cloud.ouraring.com/oauth/authorize
        clientId: Oura-clientid
        clientSecret: Oura-clientsecret
        deregistrationEndpoint: https://api.ouraring.com/oauth/revoke
        scope: daily session heartrate workout tag personal email spo2 ring_configuration
        sourceType: Oura
        tokenEndpoint: https://api.ouraring.com/oauth/token
    redis:
        uri: redis://redis-master:6379
---
# Source: radar-rest-sources-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
---
# Source: radar-rest-sources-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: radar-rest-sources-backend
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/configmap: 8c91cd57de40c2486a561ef4728c082e2d190705f687e41abbcae2df1d8db7fa
        checksum/secrets: df3e3b715e2e7162f9ce3c7ef54b5c7777768864620b2f110be053d3de840d83
      labels:
        app.kubernetes.io/name: radar-rest-sources-backend
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - radar-rest-sources-backend
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: radar-rest-sources-backend
          securityContext:
            {}
          image: "radarbase/radar-rest-source-auth-backend:4.4.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: REST_SOURCE_AUTHORIZER_SOURCE_CLIENTS_FILE_PATH
            value: /etc/radar-rest-sources-backend/authorizer.yml
          - name: REST_SOURCE_AUTHORIZER_VALIDATOR
            value: "managementportal"
          - name: REST_SOURCE_AUTHORIZER_AUTH_PUBLIC_KEY_ENDPOINTS_0
            value: "http://management-portal:8080/managementportal/oauth/token_key"
          - name: APP_SLEEP
            value: "10"   # gives time for the database to boot before the application
          command:
          - authorizer-app-backend
          - /etc/radar-rest-sources-backend/authorizer.yml
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /rest-sources/backend/health
              port: 8080
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /rest-sources/backend/health
              port: 8080
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 400Mi
          volumeMounts:
            - name: config
              mountPath: /etc/radar-rest-sources-backend/
      volumes:
        - name: config
          configMap:
            name: release-name-radar-rest-sources-backend
---
# Source: radar-rest-sources-backend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-radar-rest-sources-backend
  labels:
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/name: radar-rest-sources-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/session-cookie-expires: "900"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "900"
    nginx.ingress.kubernetes.io/session-cookie-path: /rest-sources/
    nginx.ingress.kubernetes.io/session-cookie-samesite: Strict
spec:
  ingressClassName: "nginx"
  tls:
    - hosts:
        - "localhost"
      secretName: radar-base-tls-radar-rest-sources-backend
  rules:
    - host: "localhost"
      http:
        paths:
          - path: "/rest-sources/backend"
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-radar-rest-sources-backend
                port:
                  number: 8080
---
# Source: radar-rest-sources-backend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-radar-rest-sources-backend-test-connection"
  labels:
    app.kubernetes.io/name: radar-rest-sources-backend
    helm.sh/chart: radar-rest-sources-backend-1.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['release-name-radar-rest-sources-backend:8080']
  restartPolicy: Never
