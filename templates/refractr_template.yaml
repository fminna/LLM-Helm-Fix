---
# Source: refractr/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: refractr
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: refractr
      app.kubernetes.io/instance: release-name
---
# Source: refractr/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: refractr
data:
  # echo -n "127.0.0.1:5114" | base64
  PAPERTRAIL_URL: MTI3LjAuMC4xOjUxMTQ=
---
# Source: refractr/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: refractr
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 80
    protocol: TCP
  selector:
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
---
# Source: refractr/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: refractr
  annotations:
    fluxcd.io/automated: "true"
    fluxcd.io/tag.refractr-web: glob:dev-*
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: "25%"
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: refractr
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: refractr
        app.kubernetes.io/instance: release-name
      annotations:
        prometheus.io/port: "9113"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: refractr
      securityContext:
        {}
      containers:
        - name: refractr
          securityContext:
            {}
          image: ":"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            successThreshold: 3
            httpGet:
              path: /
              port: http
          envFrom:
          - secretRef:
              name: refractr
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
        - name: metrics
          image: docker.io/bitnami/nginx-exporter:0.8.0-debian-10-r91
          imagePullPolicy: "IfNotPresent"
          command: ['/usr/bin/exporter', '-nginx.scrape-uri', 'http://127.0.0.1:80/status']
          ports:
            - name: metrics
              containerPort: 9113
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 64Mi
---
# Source: refractr/templates/issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: it-se@mozilla.com
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: letsencrypt
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
      - http01:
          ingress:
            class: nginx
      - dns01:
          # This is so we can instruct LE to follow a CNAME on the target domain to
          # a domain we control (refractr.mozit.cloud) in route53
          cnameStrategy: Follow
          route53:
            region: us-west-2
            hostedZoneID: this is a required argument
---
# Source: refractr/templates/ingress-hook.yaml
# Create refractr service account, roles and rolebinding so helm cart can run
apiVersion: v1
kind: ServiceAccount
metadata:
  name: refractr
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: refractr/templates/ingress-hook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: refractr
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - ingresses
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - update
      - create
      - list
      - patch
      - delete
      - watch
---
# Source: refractr/templates/ingress-hook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: refractr
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: refractr
subjects:
  - kind: ServiceAccount
    name: refractr
---
# Source: refractr/templates/ingress-hook.yaml
# run a helm pre-install hook, calling the refractr container with an argument to create an Ingress dynamically from the list of domains since we need certs for all of them
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name-ingress-preinstall-hook"
  labels:
    app: release-name-refractr
    environment: stage
    helm.sh/chart: refractr-1.1.2
    app.kubernetes.io/name: refractr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
spec:
  template:
    metadata:
      name: "release-name-ingress-preinstall-hook"
      labels:
        app: release-name-refractr
        environment: stage
        helm.sh/chart: refractr-1.1.2
        app.kubernetes.io/name: refractr
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: refractr
      restartPolicy: Never
      containers:
        - name: "release-name-ingress-preinstall-hook"
          image: ":"
          args: ["ingress"]
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 64Mi
