---
# Source: keystone/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: keystone-api
spec:
  minAvailable: 0
  selector:
    matchLabels:
      release_group: release-name
      application: keystone
      component: api
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-credential-rotate
  namespace: default
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-fernet-rotate
  namespace: default
---
# Source: keystone/templates/deployment-api.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-api
  namespace: default
---
# Source: keystone/templates/job-bootstrap.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-bootstrap
  namespace: default
---
# Source: keystone/templates/job-credential-cleanup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone
  namespace: default
---
# Source: keystone/templates/job-credential-setup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-credential-setup
  namespace: default
---
# Source: keystone/templates/job-db-init.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-db-init
  namespace: default
---
# Source: keystone/templates/job-db-sync.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-db-sync
  namespace: default
---
# Source: keystone/templates/job-domain-manage.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-domain-manage
  namespace: default
---
# Source: keystone/templates/job-fernet-setup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-fernet-setup
  namespace: default
---
# Source: keystone/templates/job-rabbit-init.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keystone-rabbit-init
  namespace: default
---
# Source: keystone/templates/pod-rally-test.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: default
---
# Source: keystone/templates/configmap-etc.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-etc
type: Opaque
data:
  rally_tests.yaml: S2V5c3RvbmVCYXNpYy5hZGRfYW5kX3JlbW92ZV91c2VyX3JvbGU6Ci0gcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuYXV0aGVudGljYXRlX3VzZXJfYW5kX3ZhbGlkYXRlX3Rva2VuOgotIGFyZ3M6IHt9CiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX2FkZF9hbmRfbGlzdF91c2VyX3JvbGVzOgotIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApLZXlzdG9uZUJhc2ljLmNyZWF0ZV9hbmRfZGVsZXRlX2VjMmNyZWRlbnRpYWw6Ci0gcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX2FuZF9kZWxldGVfcm9sZToKLSBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDAKS2V5c3RvbmVCYXNpYy5jcmVhdGVfYW5kX2RlbGV0ZV9zZXJ2aWNlOgotIGFyZ3M6CiAgICBkZXNjcmlwdGlvbjogdGVzdF9kZXNjcmlwdGlvbgogICAgc2VydmljZV90eXBlOiBSYWxseV90ZXN0X3R5cGUKICBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDAKS2V5c3RvbmVCYXNpYy5jcmVhdGVfYW5kX2dldF9yb2xlOgotIGFyZ3M6IHt9CiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX2FuZF9saXN0X2VjMmNyZWRlbnRpYWxzOgotIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApLZXlzdG9uZUJhc2ljLmNyZWF0ZV9hbmRfbGlzdF9zZXJ2aWNlczoKLSBhcmdzOgogICAgZGVzY3JpcHRpb246IHRlc3RfZGVzY3JpcHRpb24KICAgIHNlcnZpY2VfdHlwZTogUmFsbHlfdGVzdF90eXBlCiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX2FuZF9saXN0X3RlbmFudHM6Ci0gYXJnczoge30KICBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDAKS2V5c3RvbmVCYXNpYy5jcmVhdGVfYW5kX2xpc3RfdXNlcnM6Ci0gYXJnczoge30KICBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDAKS2V5c3RvbmVCYXNpYy5jcmVhdGVfZGVsZXRlX3VzZXI6Ci0gYXJnczoge30KICBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDAKS2V5c3RvbmVCYXNpYy5jcmVhdGVfdGVuYW50OgotIGFyZ3M6IHt9CiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX3RlbmFudF93aXRoX3VzZXJzOgotIGFyZ3M6CiAgICB1c2Vyc19wZXJfdGVuYW50OiAxCiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX3VwZGF0ZV9hbmRfZGVsZXRlX3RlbmFudDoKLSBhcmdzOiB7fQogIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApLZXlzdG9uZUJhc2ljLmNyZWF0ZV91c2VyOgotIGFyZ3M6IHt9CiAgcnVubmVyOgogICAgY29uY3VycmVuY3k6IDEKICAgIHRpbWVzOiAxCiAgICB0eXBlOiBjb25zdGFudAogIHNsYToKICAgIGZhaWx1cmVfcmF0ZToKICAgICAgbWF4OiAwCktleXN0b25lQmFzaWMuY3JlYXRlX3VzZXJfc2V0X2VuYWJsZWRfYW5kX2RlbGV0ZToKLSBhcmdzOgogICAgZW5hYmxlZDogdHJ1ZQogIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMAotIGFyZ3M6CiAgICBlbmFibGVkOiBmYWxzZQogIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApLZXlzdG9uZUJhc2ljLmNyZWF0ZV91c2VyX3VwZGF0ZV9wYXNzd29yZDoKLSBhcmdzOiB7fQogIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApLZXlzdG9uZUJhc2ljLmdldF9lbnRpdGllczoKLSBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDA=
  keystone.conf: W0RFRkFVTFRdCmxvZ19jb25maWdfYXBwZW5kID0gL2V0Yy9rZXlzdG9uZS9sb2dnaW5nLmNvbmYKbWF4X3Rva2VuX3NpemUgPSAyNTUKdHJhbnNwb3J0X3VybCA9IHJhYmJpdDovL2tleXN0b25lOnBhc3N3b3JkQHJhYmJpdG1xLXJhYmJpdG1xLTAucmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1NjcyLGtleXN0b25lOnBhc3N3b3JkQHJhYmJpdG1xLXJhYmJpdG1xLTEucmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1NjcyL2tleXN0b25lCltjYWNoZV0KYmFja2VuZCA9IGRvZ3BpbGUuY2FjaGUubWVtY2FjaGVkCmVuYWJsZWQgPSB0cnVlCm1lbWNhY2hlX3NlcnZlcnMgPSBtZW1jYWNoZWQuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxMTIxMQpbY3JlZGVudGlhbF0Ka2V5X3JlcG9zaXRvcnkgPSAvZXRjL2tleXN0b25lL2NyZWRlbnRpYWwta2V5cy8KW2RhdGFiYXNlXQpjb25uZWN0aW9uID0gbXlzcWwrcHlteXNxbDovL2tleXN0b25lOnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L2tleXN0b25lCm1heF9yZXRyaWVzID0gLTEKW2Zlcm5ldF90b2tlbnNdCmtleV9yZXBvc2l0b3J5ID0gL2V0Yy9rZXlzdG9uZS9mZXJuZXQta2V5cy8KW2lkZW50aXR5XQpkb21haW5fY29uZmlnX2RpciA9IC9ldGMva2V5c3RvbmUvZG9tYWlucwpkb21haW5fc3BlY2lmaWNfZHJpdmVyc19lbmFibGVkID0gdHJ1ZQpbb3Nsb19tZXNzYWdpbmdfbm90aWZpY2F0aW9uc10KZHJpdmVyID0gbWVzc2FnaW5ndjIKW29zbG9fbWVzc2FnaW5nX3JhYmJpdF0KcmFiYml0X2hhX3F1ZXVlcyA9IHRydWUKW29zbG9fbWlkZGxld2FyZV0KZW5hYmxlX3Byb3h5X2hlYWRlcnNfcGFyc2luZyA9IHRydWUKW29zbG9fcG9saWN5XQpwb2xpY3lfZmlsZSA9IC9ldGMva2V5c3RvbmUvcG9saWN5LnlhbWwKW3NlY3VyaXR5X2NvbXBsaWFuY2VdCmxvY2tvdXRfZHVyYXRpb24gPSAxODAwCmxvY2tvdXRfZmFpbHVyZV9hdHRlbXB0cyA9IDUKW3Rva2VuXQpleHBpcmF0aW9uID0gNDMyMDAKcHJvdmlkZXIgPSBmZXJuZXQK
  logging.conf: W2Zvcm1hdHRlcl9jb250ZXh0XQpjbGFzcyA9IG9zbG9fbG9nLmZvcm1hdHRlcnMuQ29udGV4dEZvcm1hdHRlcgpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKW2Zvcm1hdHRlcl9kZWZhdWx0XQpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKZm9ybWF0ID0gJShtZXNzYWdlKXMKW2Zvcm1hdHRlcnNdCmtleXMgPSBjb250ZXh0LGRlZmF1bHQKW2hhbmRsZXJfbnVsbF0KYXJncyA9ICgpCmNsYXNzID0gbG9nZ2luZy5OdWxsSGFuZGxlcgpmb3JtYXR0ZXIgPSBkZWZhdWx0CltoYW5kbGVyX3N0ZGVycl0KYXJncyA9IChzeXMuc3RkZXJyLCkKY2xhc3MgPSBTdHJlYW1IYW5kbGVyCmZvcm1hdHRlciA9IGNvbnRleHQKW2hhbmRsZXJfc3Rkb3V0XQphcmdzID0gKHN5cy5zdGRvdXQsKQpjbGFzcyA9IFN0cmVhbUhhbmRsZXIKZm9ybWF0dGVyID0gY29udGV4dApbaGFuZGxlcnNdCmtleXMgPSBzdGRvdXQsc3RkZXJyLG51bGwKW2xvZ2dlcl9hbXFwXQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBhbXFwCltsb2dnZXJfYW1xcGxpYl0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYW1xcGxpYgpbbG9nZ2VyX2JvdG9dCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGJvdG8KW2xvZ2dlcl9ldmVudGxldHdzZ2ldCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGV2ZW50bGV0LndzZ2kuc2VydmVyCltsb2dnZXJfa2V5c3RvbmVdCmhhbmRsZXJzID0gc3Rkb3V0CmxldmVsID0gSU5GTwpxdWFsbmFtZSA9IGtleXN0b25lCltsb2dnZXJfcm9vdF0KaGFuZGxlcnMgPSBudWxsCmxldmVsID0gV0FSTklORwpbbG9nZ2VyX3NxbGFsY2hlbXldCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IHNxbGFsY2hlbXkKW2xvZ2dlcnNdCmtleXMgPSByb290LGtleXN0b25lCg==
  policy.yaml: e30=
  access_rules.json: e30=
  ports.conf: ''  
  security.conf: IwojIERpc2FibGUgYWNjZXNzIHRvIHRoZSBlbnRpcmUgZmlsZSBzeXN0ZW0gZXhjZXB0IGZvciB0aGUgZGlyZWN0b3JpZXMgdGhhdAojIGFyZSBleHBsaWNpdGx5IGFsbG93ZWQgbGF0ZXIuCiMKIyBUaGlzIGN1cnJlbnRseSBicmVha3MgdGhlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY29tZSB3aXRoIHNvbWUgd2ViIGFwcGxpY2F0aW9uCiMgRGViaWFuIHBhY2thZ2VzLgojCiM8RGlyZWN0b3J5IC8+CiMgICBBbGxvd092ZXJyaWRlIE5vbmUKIyAgIFJlcXVpcmUgYWxsIGRlbmllZAojPC9EaXJlY3Rvcnk+CgojIENoYW5naW5nIHRoZSBmb2xsb3dpbmcgb3B0aW9ucyB3aWxsIG5vdCByZWFsbHkgYWZmZWN0IHRoZSBzZWN1cml0eSBvZiB0aGUKIyBzZXJ2ZXIsIGJ1dCBtaWdodCBtYWtlIGF0dGFja3Mgc2xpZ2h0bHkgbW9yZSBkaWZmaWN1bHQgaW4gc29tZSBjYXNlcy4KCiMKIyBTZXJ2ZXJUb2tlbnMKIyBUaGlzIGRpcmVjdGl2ZSBjb25maWd1cmVzIHdoYXQgeW91IHJldHVybiBhcyB0aGUgU2VydmVyIEhUVFAgcmVzcG9uc2UKIyBIZWFkZXIuIFRoZSBkZWZhdWx0IGlzICdGdWxsJyB3aGljaCBzZW5kcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgT1MtVHlwZQojIGFuZCBjb21waWxlZCBpbiBtb2R1bGVzLgojIFNldCB0byBvbmUgb2Y6ICBGdWxsIHwgT1MgfCBNaW5pbWFsIHwgTWlub3IgfCBNYWpvciB8IFByb2QKIyB3aGVyZSBGdWxsIGNvbnZleXMgdGhlIG1vc3QgaW5mb3JtYXRpb24sIGFuZCBQcm9kIHRoZSBsZWFzdC4KU2VydmVyVG9rZW5zIFByb2QKCiMKIyBPcHRpb25hbGx5IGFkZCBhIGxpbmUgY29udGFpbmluZyB0aGUgc2VydmVyIHZlcnNpb24gYW5kIHZpcnR1YWwgaG9zdAojIG5hbWUgdG8gc2VydmVyLWdlbmVyYXRlZCBwYWdlcyAoaW50ZXJuYWwgZXJyb3IgZG9jdW1lbnRzLCBGVFAgZGlyZWN0b3J5CiMgbGlzdGluZ3MsIG1vZF9zdGF0dXMgYW5kIG1vZF9pbmZvIG91dHB1dCBldGMuLCBidXQgbm90IENHSSBnZW5lcmF0ZWQKIyBkb2N1bWVudHMgb3IgY3VzdG9tIGVycm9yIGRvY3VtZW50cykuCiMgU2V0IHRvICJFTWFpbCIgdG8gYWxzbyBpbmNsdWRlIGEgbWFpbHRvOiBsaW5rIHRvIHRoZSBTZXJ2ZXJBZG1pbi4KIyBTZXQgdG8gb25lIG9mOiAgT24gfCBPZmYgfCBFTWFpbApTZXJ2ZXJTaWduYXR1cmUgT2ZmCgojCiMgQWxsb3cgVFJBQ0UgbWV0aG9kCiMKIyBTZXQgdG8gImV4dGVuZGVkIiB0byBhbHNvIHJlZmxlY3QgdGhlIHJlcXVlc3QgYm9keSAob25seSBmb3IgdGVzdGluZyBhbmQKIyBkaWFnbm9zdGljIHB1cnBvc2VzKS4KIwojIFNldCB0byBvbmUgb2Y6ICBPbiB8IE9mZiB8IGV4dGVuZGVkClRyYWNlRW5hYmxlIE9mZgoKIwojIEZvcmJpZCBhY2Nlc3MgdG8gdmVyc2lvbiBjb250cm9sIGRpcmVjdG9yaWVzCiMKIyBJZiB5b3UgdXNlIHZlcnNpb24gY29udHJvbCBzeXN0ZW1zIGluIHlvdXIgZG9jdW1lbnQgcm9vdCwgeW91IHNob3VsZAojIHByb2JhYmx5IGRlbnkgYWNjZXNzIHRvIHRoZWlyIGRpcmVjdG9yaWVzLiBGb3IgZXhhbXBsZSwgZm9yIHN1YnZlcnNpb246CiMKIzxEaXJlY3RvcnlNYXRjaCAiL1wuc3ZuIj4KIyAgIFJlcXVpcmUgYWxsIGRlbmllZAojPC9EaXJlY3RvcnlNYXRjaD4KCiMKIyBTZXR0aW5nIHRoaXMgaGVhZGVyIHdpbGwgcHJldmVudCBNU0lFIGZyb20gaW50ZXJwcmV0aW5nIGZpbGVzIGFzIHNvbWV0aGluZwojIGVsc2UgdGhhbiBkZWNsYXJlZCBieSB0aGUgY29udGVudCB0eXBlIGluIHRoZSBIVFRQIGhlYWRlcnMuCiMgUmVxdWlyZXMgbW9kX2hlYWRlcnMgdG8gYmUgZW5hYmxlZC4KIwojSGVhZGVyIHNldCBYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiAibm9zbmlmZiIKCiMKIyBTZXR0aW5nIHRoaXMgaGVhZGVyIHdpbGwgcHJldmVudCBvdGhlciBzaXRlcyBmcm9tIGVtYmVkZGluZyBwYWdlcyBmcm9tIHRoaXMKIyBzaXRlIGFzIGZyYW1lcy4gVGhpcyBkZWZlbmRzIGFnYWluc3QgY2xpY2tqYWNraW5nIGF0dGFja3MuCiMgUmVxdWlyZXMgbW9kX2hlYWRlcnMgdG8gYmUgZW5hYmxlZC4KIwojSGVhZGVyIHNldCBYLUZyYW1lLU9wdGlvbnM6ICJzYW1lb3JpZ2luIg==  
  mpm_event.conf: PElmTW9kdWxlIG1wbV9ldmVudF9tb2R1bGU+CiAgU2VydmVyTGltaXQgICAgICAgICAxMDI0CiAgU3RhcnRTZXJ2ZXJzICAgICAgICAzMgogIE1pblNwYXJlVGhyZWFkcyAgICAgMzIKICBNYXhTcGFyZVRocmVhZHMgICAgIDI1NgogIFRocmVhZHNQZXJDaGlsZCAgICAgMjUKICBNYXhSZXF1ZXN0c1BlckNoaWxkIDEyOAogIFRocmVhZExpbWl0ICAgICAgICAgNzIwCjwvSWZNb2R1bGU+  
  wsgi-keystone.conf: Ckxpc3RlbiAwLjAuMC4wOjUwMDAKCkxvZ0Zvcm1hdCAiJWggJWwgJXUgJXQgXCIlclwiICU+cyAlYiBcIiV7UmVmZXJlcn1pXCIgXCIle1VzZXItQWdlbnR9aVwiIiBjb21iaW5lZApMb2dGb3JtYXQgIiV7WC1Gb3J3YXJkZWQtRm9yfWkgJWwgJXUgJXQgXCIlclwiICU+cyAlYiBcIiV7UmVmZXJlcn1pXCIgXCIle1VzZXItQWdlbnR9aVwiIiBwcm94eQoKU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZApDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tYmluZWQgZW52PSFmb3J3YXJkZWQKQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IHByb3h5IGVudj1mb3J3YXJkZWQKCjxWaXJ0dWFsSG9zdCAqOjUwMDA+CiAgICBXU0dJRGFlbW9uUHJvY2VzcyBrZXlzdG9uZS1wdWJsaWMgcHJvY2Vzc2VzPTEgdGhyZWFkcz0xIHVzZXI9a2V5c3RvbmUgZ3JvdXA9a2V5c3RvbmUgZGlzcGxheS1uYW1lPSV7R1JPVVB9CiAgICBXU0dJUHJvY2Vzc0dyb3VwIGtleXN0b25lLXB1YmxpYwogICAgV1NHSVNjcmlwdEFsaWFzIC8gL3Zhci93d3cvY2dpLWJpbi9rZXlzdG9uZS9rZXlzdG9uZS13c2dpLXB1YmxpYwogICAgV1NHSUFwcGxpY2F0aW9uR3JvdXAgJXtHTE9CQUx9CiAgICBXU0dJUGFzc0F1dGhvcml6YXRpb24gT24KICAgIDxJZlZlcnNpb24gPj0gMi40PgogICAgICBFcnJvckxvZ0Zvcm1hdCAiJXtjdX10ICVNIgogICAgPC9JZlZlcnNpb24+CiAgICBFcnJvckxvZyAvZGV2L3N0ZG91dAoKICAgIFNldEVudklmIFgtRm9yd2FyZGVkLUZvciAiXi4qXC4uKlwuLipcLi4qIiBmb3J3YXJkZWQKICAgIEN1c3RvbUxvZyAvZGV2L3N0ZG91dCBjb21iaW5lZCBlbnY9IWZvcndhcmRlZAogICAgQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IHByb3h5IGVudj1mb3J3YXJkZWQKPC9WaXJ0dWFsSG9zdD4=  
  sso_callback_template.html: PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KICA8aGVhZD4KICAgIDx0aXRsZT5LZXlzdG9uZSBXZWJTU08gcmVkaXJlY3Q8L3RpdGxlPgogIDwvaGVhZD4KICA8Ym9keT4KICAgICA8Zm9ybSBpZD0ic3NvIiBuYW1lPSJzc28iIGFjdGlvbj0iJGhvc3QiIG1ldGhvZD0icG9zdCI+CiAgICAgICBQbGVhc2Ugd2FpdC4uLgogICAgICAgPGJyLz4KICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InRva2VuIiBpZD0idG9rZW4iIHZhbHVlPSIkdG9rZW4iLz4KICAgICAgIDxub3NjcmlwdD4KICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0X25vX2phdmFzY3JpcHQiIGlkPSJzdWJtaXRfbm9famF2YXNjcmlwdCIKICAgICAgICAgICAgdmFsdWU9IklmIHlvdXIgSmF2YVNjcmlwdCBpcyBkaXNhYmxlZCwgcGxlYXNlIGNsaWNrIHRvIGNvbnRpbnVlIi8+CiAgICAgICA8L25vc2NyaXB0PgogICAgIDwvZm9ybT4KICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgIGRvY3VtZW50LmZvcm1zWydzc28nXS5zdWJtaXQoKTsKICAgICAgIH0KICAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4=
---
# Source: keystone/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYva2V5c3RvbmU=
---
# Source: keystone/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL2tleXN0b25lOnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L2tleXN0b25l
---
# Source: keystone/templates/secret-keystone.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-keystone-admin
type: Opaque
data:  
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: ZGVmYXVsdA==
  OS_PROJECT_NAME: YWRtaW4=
  OS_USER_DOMAIN_NAME: ZGVmYXVsdA==
  OS_USERNAME: YWRtaW4=
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
# Source: keystone/templates/secret-keystone.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-keystone-test
type: Opaque
data:  
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: ZGVmYXVsdA==
  OS_PROJECT_NAME: dGVzdA==
  OS_USER_DOMAIN_NAME: ZGVmYXVsdA==
  OS_USERNAME: a2V5c3RvbmUtdGVzdA==
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
# Source: keystone/templates/secret-rabbitmq.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-rabbitmq-admin
type: Opaque
data:
  RABBITMQ_CONNECTION: cmFiYml0Oi8vcmFiYml0bXE6cGFzc3dvcmRAcmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxNTY3Mi9rZXlzdG9uZQ==
---
# Source: keystone/templates/secret-rabbitmq.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-rabbitmq-user
type: Opaque
data:
  RABBITMQ_CONNECTION: cmFiYml0Oi8va2V5c3RvbmU6cGFzc3dvcmRAcmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxNTY3Mi9rZXlzdG9uZQ==
---
# Source: keystone/templates/configmap-bin.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystone-bin
data:
  bootstrap.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    # admin needs the admin role for the default domain
    openstack role add \
          --user="${OS_USERNAME}" \
          --domain="${OS_DEFAULT_DOMAIN}" \
          "admin"
    
    
  rally-test.sh: |
    #!/bin/bash
    set -ex
    
    : "${RALLY_ENV_NAME:="openstack-helm"}"
    : "${OS_INTERFACE:="public"}"
    : "${RALLY_CLEANUP:="true"}"
    
    if [ "x$RALLY_CLEANUP" == "xtrue" ]; then
      function rally_cleanup {
        openstack user delete \
            --domain="${SERVICE_OS_USER_DOMAIN_NAME}" \
            "${SERVICE_OS_USERNAME}"
        
      }
      trap rally_cleanup EXIT
    fi
    
    function create_or_update_db () {
      revisionResults=$(rally db revision)
      if [ $revisionResults = "None"  ]
      then
        rally db create
      else
        rally db upgrade
      fi
    }
    
    create_or_update_db
    
    cat > /tmp/rally-config.json << EOF
    {
        "openstack": {
            "auth_url": "${OS_AUTH_URL}",
            "region_name": "${OS_REGION_NAME}",
            "endpoint_type": "${OS_INTERFACE}",
            "admin": {
                "username": "${OS_USERNAME}",
                "password": "${OS_PASSWORD}",
                "user_domain_name": "${OS_USER_DOMAIN_NAME}",
                "project_name": "${OS_PROJECT_NAME}",
                "project_domain_name": "${OS_PROJECT_DOMAIN_NAME}"
            },
            "users": [
                {
                    "username": "${SERVICE_OS_USERNAME}",
                    "password": "${SERVICE_OS_PASSWORD}",
                    "project_name": "${SERVICE_OS_PROJECT_NAME}",
                    "user_domain_name": "${SERVICE_OS_USER_DOMAIN_NAME}",
                    "project_domain_name": "${SERVICE_OS_PROJECT_DOMAIN_NAME}"
                }
            ],
            "https_insecure": false,
            "https_cacert": "${OS_CACERT}"
        }
    }
    EOF
    rally deployment create --file /tmp/rally-config.json --name "${RALLY_ENV_NAME}"
    rm -f /tmp/rally-config.json
    rally deployment use "${RALLY_ENV_NAME}"
    rally deployment check
    rally task validate /etc/rally/rally_tests.yaml
    rally task start /etc/rally/rally_tests.yaml
    rally task sla-check
    rally env cleanup
    rally deployment destroy --deployment "${RALLY_ENV_NAME}"
  ks-user.sh: |    
    #!/bin/bash
    
    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -ex
    
    shopt -s nocasematch
    
    if [[ "${SERVICE_OS_PROJECT_DOMAIN_NAME}" == "Default" ]]
    then
      PROJECT_DOMAIN_ID="default"
    else
      # Manage project domain
      PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}" \
        "${SERVICE_OS_PROJECT_DOMAIN_NAME}")
    fi
    
    if [[ "${SERVICE_OS_USER_DOMAIN_NAME}" == "Default" ]]
    then
      USER_DOMAIN_ID="default"
    else
      # Manage user domain
      USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}" \
        "${SERVICE_OS_USER_DOMAIN_NAME}")
    fi
    
    shopt -u nocasematch
    
    # Manage user project
    USER_PROJECT_DESC="Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}"
    USER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \
        --domain="${PROJECT_DOMAIN_ID}" \
        --description="${USER_PROJECT_DESC}" \
        "${SERVICE_OS_PROJECT_NAME}");
    
    # Manage user
    USER_DESC="Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}"
    USER_ID=$(openstack user create --or-show --enable -f value -c id \
        --domain="${USER_DOMAIN_ID}" \
        --project-domain="${PROJECT_DOMAIN_ID}" \
        --project="${USER_PROJECT_ID}" \
        --description="${USER_DESC}" \
        "${SERVICE_OS_USERNAME}");
    
    # Manage user password (we do this in a seperate step to ensure the password is updated if required)
    set +x
    echo "Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}"
    openstack user set --password="${SERVICE_OS_PASSWORD}" "${USER_ID}"
    set -x
    
    function ks_assign_user_role () {
      if [[ "$SERVICE_OS_ROLE" == "admin" ]]
      then
        USER_ROLE_ID="$SERVICE_OS_ROLE"
      else
        USER_ROLE_ID=$(openstack role create --or-show -f value -c id "${SERVICE_OS_ROLE}");
      fi
    
      # Manage user role assignment
      openstack role add \
          --user="${USER_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --project-domain="${PROJECT_DOMAIN_ID}" \
          --project="${USER_PROJECT_ID}" \
          "${USER_ROLE_ID}"
    }
    
    # Manage user service role
    IFS=','
    for SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do
      ks_assign_user_role
    done
    
    # Manage user member role
    : ${MEMBER_OS_ROLE:="member"}
    export USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
        "${MEMBER_OS_ROLE}");
    ks_assign_user_role
  cred-clean.py: |
    
    
    #!/usr/bin/python
    
    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.
    
    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    
    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)
    
    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                            'key': '/etc/mysql/certs/tls.key',
                            'cert': '/etc/mysql/certs/tls.crt'}}
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical(
                'environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical(
                "Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical(
            'Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':',
                                   root_password, '@', host, ':', str(port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Delete all entries from credential table
    
    try:
        cmd = "DELETE FROM credential"
        user_engine.execute(cmd)
        logger.info('Deleted all entries in credential table')
    except:
        logger.critical('Failed to clean up credential table in keystone db')
        raise
    
    logger.info('Finished DB Management')
    
  db-init.py: |    
    #!/usr/bin/env python
    
    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.
    
    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    
    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)
    
    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                    'key': '/etc/mysql/certs/tls.key',
                    'cert': '/etc/mysql/certs/tls.crt'}}
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise
    
    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\' {3}".format(
                database, user, password, mysql_x509))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise
    
    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise
    
    logger.info('Finished DB Management')
  db-sync.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    keystone-manage --config-file=/etc/keystone/keystone.conf db_sync
    keystone-manage --config-file=/etc/keystone/keystone.conf bootstrap \
        --bootstrap-username ${OS_USERNAME} \
        --bootstrap-password ${OS_PASSWORD} \
        --bootstrap-project-name ${OS_PROJECT_NAME} \
        --bootstrap-admin-url ${OS_BOOTSTRAP_ADMIN_URL} \
        --bootstrap-public-url ${OS_BOOTSTRAP_PUBLIC_URL} \
        --bootstrap-internal-url ${OS_BOOTSTRAP_INTERNAL_URL} \
        --bootstrap-region-id ${OS_REGION_NAME}
    
    exec python /tmp/endpoint-update.py
    
  db-drop.py: |    
    #!/usr/bin/env python
    
    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.
    
    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    
    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)
    
    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                            'key': '/etc/mysql/certs/tls.key',
                            'cert': '/etc/mysql/certs/tls.crt'}}
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Delete DB
    try:
        root_engine.execute("DROP DATABASE IF EXISTS {0}".format(database))
        logger.info("Deleted database {0}".format(database))
    except:
        logger.critical("Could not drop database {0}".format(database))
        raise
    
    # Delete DB User
    try:
        root_engine.execute("DROP USER IF EXISTS {0}".format(user))
        logger.info("Deleted user {0}".format(user))
    except:
        logger.critical("Could not delete user {0}".format(user))
        raise
    
    logger.info('Finished DB Management')
  keystone-api.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    COMMAND="${@:-start}"
    
    function start () {
    
      for KEYSTONE_WSGI_SCRIPT in keystone-wsgi-public; do
        cp -a $(type -p ${KEYSTONE_WSGI_SCRIPT}) /var/www/cgi-bin/keystone/
      done
    
      if [ -f /etc/apache2/envvars ]; then
         # Loading Apache2 ENV variables
         source /etc/apache2/envvars
      fi
    
      if [ -f /var/run/apache2/apache2.pid ]; then
         # Remove the stale pid for debian/ubuntu images
         rm -f /var/run/apache2/apache2.pid
      fi
    
      # Start Apache2
      exec apache2 -DFOREGROUND
    }
    
    function stop () {
      if [ -f /etc/apache2/envvars ]; then
         # Loading Apache2 ENV variables
         source /etc/apache2/envvars
      fi
      apache2 -k graceful-stop
    }
    
    $COMMAND
    
  endpoint-update.py: |
    #!/usr/bin/env python
    import os
    import logging
    import sys
    
    from sqlalchemy import create_engine
    
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm Keystone Endpoint management')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical(
                'environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical(
                "Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical(
            'Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn)
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Set Internal Endpoint
    try:
        endpoint_url = os.environ['OS_BOOTSTRAP_INTERNAL_URL']
        cmd = ("update endpoint set url = %s where interface ='internal' and "
               "service_id = (select id from service where "
               "service.type = 'identity')")
        user_engine.execute(cmd, (endpoint_url,))
    except:
        logger.critical("Could not update internal endpoint")
        raise
    
    # Set Admin Endpoint
    try:
        endpoint_url = os.environ['OS_BOOTSTRAP_ADMIN_URL']
        cmd = ("update endpoint set url = %s where interface ='admin' "
               "and service_id = (select id from service where "
               "service.type = 'identity')")
        user_engine.execute(cmd, (endpoint_url,))
    except:
        logger.critical("Could not update admin endpoint")
        raise
    
    # Set Public Endpoint
    try:
        endpoint_url = os.environ['OS_BOOTSTRAP_PUBLIC_URL']
        cmd = ("update endpoint set url = %s where interface ='public' "
               "and service_id = (select id from service where "
               "service.type = 'identity')")
        user_engine.execute(cmd, (endpoint_url,))
    except:
        logger.critical("Could not update public endpoint")
        raise
    
    # Print endpoints
    try:
        endpoints = user_engine.execute(
            ("select interface, url from endpoint where service_id = "
             "(select id from service where service.type = 'identity')")
        ).fetchall()
        for row in endpoints:
            logger.info("endpoint ({0}): {1}".format(row[0], row[1]))
    except:
        logger.critical("Could not update endpoint")
        raise
    
    logger.info('Finished Endpoint Management')
    
  fernet-manage.py: |
    #!/usr/bin/env python
    
    
    
    import argparse
    import base64
    import errno
    import grp
    import logging
    import os
    import pwd
    import re
    import subprocess  #nosec
    import sys
    import time
    
    import requests
    
    FERNET_DIR = os.environ['KEYSTONE_KEYS_REPOSITORY']
    KEYSTONE_USER = os.environ['KEYSTONE_USER']
    KEYSTONE_GROUP = os.environ['KEYSTONE_GROUP']
    NAMESPACE = os.environ['KUBERNETES_NAMESPACE']
    
    # k8s connection data
    KUBE_HOST = None
    KUBE_CERT = '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
    KUBE_TOKEN = None
    
    LOG_DATEFMT = "%Y-%m-%d %H:%M:%S"
    LOG_FORMAT = "%(asctime)s.%(msecs)03d - %(levelname)s - %(message)s"
    logging.basicConfig(format=LOG_FORMAT, datefmt=LOG_DATEFMT)
    LOG = logging.getLogger(__name__)
    LOG.setLevel(logging.INFO)
    
    
    def read_kube_config():
        global KUBE_HOST, KUBE_TOKEN
        KUBE_HOST = "https://%s:%s" % ('kubernetes.default',
                                       os.environ['KUBERNETES_SERVICE_PORT'])
        with open('/var/run/secrets/kubernetes.io/serviceaccount/token', 'r') as f:
            KUBE_TOKEN = f.read()
    
    
    def get_secret_definition(name):
        url = '%s/api/v1/namespaces/%s/secrets/%s' % (KUBE_HOST, NAMESPACE, name)
        resp = requests.get(url,
                            headers={'Authorization': 'Bearer %s' % KUBE_TOKEN},
                            verify=KUBE_CERT)
        if resp.status_code != 200:
            LOG.error('Cannot get secret %s.', name)
            LOG.error(resp.text)
            return None
        return resp.json()
    
    
    def update_secret(name, secret):
        url = '%s/api/v1/namespaces/%s/secrets/%s' % (KUBE_HOST, NAMESPACE, name)
        resp = requests.put(url,
                            json=secret,
                            headers={'Authorization': 'Bearer %s' % KUBE_TOKEN},
                            verify=KUBE_CERT)
        if resp.status_code != 200:
            LOG.error('Cannot update secret %s.', name)
            LOG.error(resp.text)
            return False
        return True
    
    
    def read_from_files():
        keys = [name for name in os.listdir(FERNET_DIR) if os.path.isfile(FERNET_DIR + name)
                and re.match("^\d+$", name)]
        data = {}
        for key in keys:
            with open(FERNET_DIR + key, 'r') as f:
                data[key] = f.read()
        if len(list(keys)):
            LOG.debug("Keys read from files: %s", keys)
        else:
            LOG.warning("No keys were read from files.")
        return data
    
    
    def get_keys_data():
        keys = read_from_files()
        return dict([(key, base64.b64encode(value.encode()).decode())
                    for (key, value) in keys.items()])
    
    
    def write_to_files(data):
        if not os.path.exists(os.path.dirname(FERNET_DIR)):
            try:
                os.makedirs(os.path.dirname(FERNET_DIR))
            except OSError as exc: # Guard against race condition
                if exc.errno != errno.EEXIST:
                    raise
            uid = pwd.getpwnam(KEYSTONE_USER).pw_uid
            gid = grp.getgrnam(KEYSTONE_GROUP).gr_gid
            os.chown(FERNET_DIR, uid, gid)
    
        for (key, value) in data.items():
            with open(FERNET_DIR + key, 'w') as f:
                decoded_value = base64.b64decode(value).decode()
                f.write(decoded_value)
                LOG.debug("Key %s: %s", key, decoded_value)
        LOG.info("%s keys were written", len(data))
    
    
    def execute_command(cmd):
        LOG.info("Executing 'keystone-manage %s --keystone-user=%s "
                 "--keystone-group=%s' command.",
                 cmd, KEYSTONE_USER, KEYSTONE_GROUP)
        subprocess.call(['keystone-manage', cmd,  #nosec
                         '--keystone-user=%s' % KEYSTONE_USER,
                         '--keystone-group=%s' % KEYSTONE_GROUP])
    
    def main():
        parser = argparse.ArgumentParser()
        parser.add_argument('command', choices=['fernet_setup', 'fernet_rotate',
                                                'credential_setup',
                                                'credential_rotate'])
        args = parser.parse_args()
    
        is_credential = args.command.startswith('credential')
    
        SECRET_NAME = ('keystone-credential-keys' if is_credential else
                       'keystone-fernet-keys')
    
        read_kube_config()
        secret = get_secret_definition(SECRET_NAME)
        if not secret:
            LOG.error("Secret '%s' does not exist.", SECRET_NAME)
            sys.exit(1)
    
        if args.command in ('fernet_rotate', 'credential_rotate'):
            LOG.info("Copying existing %s keys from secret '%s' to %s.",
                     'credential' if is_credential else 'fernet', SECRET_NAME,
                     FERNET_DIR)
            write_to_files(secret['data'])
    
        if args.command in ('credential_setup', 'fernet_setup'):
            if secret.get('data', False):
                LOG.info('Keys already exist, skipping setup...')
                sys.exit(0)
    
        execute_command(args.command)
    
        LOG.info("Updating data for '%s' secret.", SECRET_NAME)
        updated_keys = get_keys_data()
        secret['data'] = updated_keys
        if not update_secret(SECRET_NAME, secret):
            sys.exit(1)
        LOG.info("%s fernet keys have been placed to secret '%s'",
                 len(updated_keys), SECRET_NAME)
        LOG.debug("Placed keys: %s", updated_keys)
        LOG.info("%s keys %s has been completed",
                 "Credential" if is_credential else 'Fernet',
                 "rotation" if args.command.endswith('_rotate') else "generation")
    
        if args.command == 'credential_rotate':
            # `credential_rotate` needs doing `credential_migrate` as well once all
            # of the nodes have the new keys. So we'll sleep configurable amount of
            # time to make sure k8s reloads the secrets in all pods and then
            # execute `credential_migrate`.
    
            migrate_wait = int(os.getenv('KEYSTONE_CREDENTIAL_MIGRATE_WAIT', "60"))
            LOG.info("Waiting %d seconds to execute `credential_migrate`.",
                     migrate_wait)
            time.sleep(migrate_wait)
    
            execute_command('credential_migrate')
    
    if __name__ == "__main__":
        main()
    
  domain-manage-init.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
  domain-manage.sh: |
    #!/bin/bash
    
    
    
    set -e
    endpt=http://keystone-api.default.svc.cluster.local:5000/v3
    path=/etc/keystone/domains
    
  domain-manage.py: |
    #!/usr/bin/python
    
    
    import json
    import os
    import requests
    import sys
    
    def main(args):
        base_url, token, domainId, filename = args[1], args[2], args[3], args[5]
        url = "%s/domains/%s/config" % (base_url, domainId)
        print("Connecting to url: %r" % url)
    
        headers = {
            'Content-Type': "application/json",
            'X-Auth-Token': token,
            'Cache-Control': "no-cache"
        }
    
        verify = os.getenv('OS_CACERT', True)
    
        response = requests.request("GET", url, headers=headers, verify=verify)
    
        if response.status_code == 404:
            print("domain config not found - put")
            action = "PUT"
        else:
            print("domain config found - patch")
            action = "PATCH"
    
        with open(filename, "rb") as f:
            data = {"config": json.load(f)}
    
        response = requests.request(action, url,
                                    data=json.dumps(data),
                                    headers=headers, verify=verify)
    
        print("Response code on action [%s]: %s" % (action, response.status_code))
        # Put and Patch can return 200 or 201. If it is not a 2XX code, error out.
        if (response.status_code // 100) != 2:
            sys.exit(1)
    
    
    if __name__ == "__main__":
        if len(sys.argv) != 6:
            sys.exit(1)
        main(sys.argv)
    
  rabbit-init.sh: |    
    #!/bin/bash
    set -e
    # Extract connection details
    RABBIT_HOSTNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $1}')
    RABBIT_PORT=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $2}')
    
    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_ADMIN_PASSWORD=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User creadential
    RABBITMQ_USERNAME=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_PASSWORD=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User vHost
    RABBITMQ_VHOST=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $3}')
    # Resolve vHost to / if no value is set
    RABBITMQ_VHOST="${RABBITMQ_VHOST:-/}"
    
    function rabbitmqadmin_cli () {
      if [ -n "$RABBITMQ_X509" ]
      then
        rabbitmqadmin \
          --ssl \
          --ssl-disable-hostname-verification \
          --ssl-ca-cert-file="${USER_CERT_PATH}/ca.crt" \
          --ssl-cert-file="${USER_CERT_PATH}/tls.crt" \
          --ssl-key-file="${USER_CERT_PATH}/tls.key" \
          --host="${RABBIT_HOSTNAME}" \
          --port="${RABBIT_PORT}" \
          --username="${RABBITMQ_ADMIN_USERNAME}" \
          --password="${RABBITMQ_ADMIN_PASSWORD}" \
          ${@}
      else
        rabbitmqadmin \
          --host="${RABBIT_HOSTNAME}" \
          --port="${RABBIT_PORT}" \
          --username="${RABBITMQ_ADMIN_USERNAME}" \
          --password="${RABBITMQ_ADMIN_PASSWORD}" \
          ${@}
      fi
    }
    
    echo "Managing: User: ${RABBITMQ_USERNAME}"
    rabbitmqadmin_cli \
      declare user \
      name="${RABBITMQ_USERNAME}" \
      password="${RABBITMQ_PASSWORD}" \
      tags="user"
    
    if [ "${RABBITMQ_VHOST}" != "/" ]
    then
      echo "Managing: vHost: ${RABBITMQ_VHOST}"
      rabbitmqadmin_cli \
        declare vhost \
        name="${RABBITMQ_VHOST}"
    else
      echo "Skipping root vHost declaration: vHost: ${RABBITMQ_VHOST}"
    fi
    
    echo "Managing: Permissions: ${RABBITMQ_USERNAME} on ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare permission \
      vhost="${RABBITMQ_VHOST}" \
      user="${RABBITMQ_USERNAME}" \
      configure=".*" \
      write=".*" \
      read=".*"
    
    if [ ! -z "$RABBITMQ_AUXILIARY_CONFIGURATION" ]
    then
      echo "Applying additional configuration"
      echo "${RABBITMQ_AUXILIARY_CONFIGURATION}" > /tmp/rmq_definitions.json
      rabbitmqadmin_cli import /tmp/rmq_definitions.json
    fi
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-credential-rotate
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - jobs
      - pods
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keystone-credential-rotate
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-fernet-rotate
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - jobs
      - pods
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keystone-fernet-rotate
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
---
# Source: keystone/templates/deployment-api.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-api
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
# Source: keystone/templates/job-bootstrap.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-bootstrap
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
# Source: keystone/templates/job-credential-cleanup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
# Source: keystone/templates/job-credential-setup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keystone-credential-setup
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
---
# Source: keystone/templates/job-db-init.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-db-init
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
# Source: keystone/templates/job-db-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-db-sync
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
# Source: keystone/templates/job-domain-manage.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-keystone-domain-manage
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
# Source: keystone/templates/job-fernet-setup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keystone-fernet-setup
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
---
# Source: keystone/templates/pod-rally-test.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: default
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-credential-rotate
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-credential-rotate
subjects:
  - kind: ServiceAccount
    name: keystone-credential-rotate
    namespace: default
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keystone-credential-rotate
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keystone-credential-rotate
subjects:
  - kind: ServiceAccount
    name: keystone-credential-rotate
    namespace: default
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-fernet-rotate
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-fernet-rotate
subjects:
  - kind: ServiceAccount
    name: keystone-fernet-rotate
    namespace: default
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keystone-fernet-rotate
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keystone-fernet-rotate
subjects:
  - kind: ServiceAccount
    name: keystone-fernet-rotate
    namespace: default
---
# Source: keystone/templates/deployment-api.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-api
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-api
subjects:
  - kind: ServiceAccount
    name: keystone-api
    namespace: default
---
# Source: keystone/templates/job-bootstrap.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-bootstrap
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-bootstrap
subjects:
  - kind: ServiceAccount
    name: keystone-bootstrap
    namespace: default
---
# Source: keystone/templates/job-credential-cleanup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone
subjects:
  - kind: ServiceAccount
    name: keystone
    namespace: default
---
# Source: keystone/templates/job-credential-setup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keystone-credential-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keystone-credential-setup
subjects:
  - kind: ServiceAccount
    name: keystone-credential-setup
    namespace: default
---
# Source: keystone/templates/job-db-init.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-db-init
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-db-init
subjects:
  - kind: ServiceAccount
    name: keystone-db-init
    namespace: default
---
# Source: keystone/templates/job-db-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-db-sync
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-db-sync
subjects:
  - kind: ServiceAccount
    name: keystone-db-sync
    namespace: default
---
# Source: keystone/templates/job-domain-manage.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-keystone-domain-manage
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-keystone-domain-manage
subjects:
  - kind: ServiceAccount
    name: keystone-domain-manage
    namespace: default
---
# Source: keystone/templates/job-fernet-setup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keystone-fernet-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keystone-fernet-setup
subjects:
  - kind: ServiceAccount
    name: keystone-fernet-setup
    namespace: default
---
# Source: keystone/templates/pod-rally-test.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
# Source: keystone/templates/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: keystone-api
spec:
  ports:
    - name: ks-pub
      port: 5000
      
  selector:
    release_group: release-name
    application: keystone
    component: api
---
# Source: keystone/templates/service-ingress-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: keystone
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
# Source: keystone/templates/deployment-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keystone-api
  annotations:
    "openstackhelm.openstack.org/release_uuid": ""
  labels:
    release_group: release-name
    application: keystone
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: keystone
      component: api
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: api
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
        configmap-bin-hash: "f8134da01fd3fa82780666f71b58ddde83436047b0fff810e455546ceedd6b4b"
        configmap-etc-hash: "a0e9c21bd15c793e02ef36c9da3f6d1dc912667e6cb23034f4d7549643d8ce6b"
        
    spec:
      securityContext:
        runAsUser: 42424
      serviceAccountName: keystone-api
      affinity:
        
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - release-name
                  - key: application
                    operator: In
                    values:
                    - keystone
                  - key: component
                    operator: In
                    values:
                    - api
              topologyKey: kubernetes.io/hostname
            weight: 10
      nodeSelector:
        openstack-control-plane: enabled

      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:memcached,default:mariadb"
            - name: DEPENDENCY_JOBS
              value: "keystone-db-sync,keystone-credential-setup,keystone-fernet-setup"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            null
      containers:
        - name: keystone-api
          image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
          imagePullPolicy: IfNotPresent
          
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          command:
            - /tmp/keystone-api.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/keystone-api.sh
                  - stop
          ports:
            - name: ks-pub
              containerPort: 5000
          readinessProbe:
            httpGet:
              path: /v3/
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 15
          livenessProbe:
            httpGet:
              path: /v3/
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 50
            periodSeconds: 60
            timeoutSeconds: 15
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etckeystone
              mountPath: /etc/keystone
            - name: logs-apache
              mountPath: /var/log/apache2
            - name: run-apache
              mountPath: /var/run/apache2
            - name: wsgi-keystone
              mountPath: /var/www/cgi-bin/keystone
            - name: keystone-etc
              mountPath: /etc/keystone/keystone.conf
              subPath: keystone.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/apache2/ports.conf
              subPath: ports.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/policy.yaml
              subPath: policy.yaml
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/access_rules.json
              subPath: access_rules.json
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/sso_callback_template.html
              subPath: sso_callback_template.html
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/apache2/conf-enabled/wsgi-keystone.conf
              subPath: wsgi-keystone.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/apache2/mods-available/mpm_event.conf
              subPath: mpm_event.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/apache2/conf-enabled/security.conf
              subPath: security.conf
              readOnly: true
            - name: keystone-bin
              mountPath: /tmp/keystone-api.sh
              subPath: keystone-api.sh
              readOnly: true
            - name: keystone-fernet-keys
              mountPath: /etc/keystone/fernet-keys/
            - name: keystone-credential-keys
              mountPath: /etc/keystone/credential-keys/

      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: etckeystone
          emptyDir: {}
        - name: wsgi-keystone
          emptyDir: {}
        - name: logs-apache
          emptyDir: {}
        - name: run-apache
          emptyDir: {}
        - name: keystone-etc
          secret:
            secretName: keystone-etc
            defaultMode: 0444
        - name: keystone-bin
          configMap:
            name: keystone-bin
            defaultMode: 0555
        - name: keystone-fernet-keys
          secret:
            secretName: keystone-fernet-keys
        - name: keystone-credential-keys
          secret:
            secretName: keystone-credential-keys
---
# Source: keystone/templates/cron-job-credential-rotate.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: keystone-credential-rotate
  annotations:
    "openstackhelm.openstack.org/release_uuid": ""
spec:
  schedule: "0 0 1 * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: credential-rotate
    spec:
      template:
        metadata:
          labels:
            release_group: release-name
            application: keystone
            component: credential-rotate
        spec:
          serviceAccountName: keystone-credential-rotate
          initContainers:
            
            - name: init
              image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
              imagePullPolicy: IfNotPresent  
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsUser: 65534
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: INTERFACE_NAME
                  value: eth0
                - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
                - name: DEPENDENCY_SERVICE
                  value: ""
                - name: DEPENDENCY_JOBS
                  value: "keystone-credential-setup"
                - name: DEPENDENCY_DAEMONSET
                  value: ""
                - name: DEPENDENCY_CONTAINER
                  value: ""
                - name: DEPENDENCY_POD_JSON
                  value: ""
                - name: DEPENDENCY_CUSTOM_RESOURCE
                  value: ""
              command:
                - kubernetes-entrypoint
              volumeMounts:
                null
          restartPolicy: OnFailure

          nodeSelector:
            openstack-control-plane: enabled
          containers:
            - name: keystone-credential-rotate
              image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
              imagePullPolicy: IfNotPresent
              
              env:
                - name: KEYSTONE_USER
                  value: "keystone"
                - name: KEYSTONE_GROUP
                  value: "keystone"
                - name: KUBERNETES_NAMESPACE
                  value: "default"
                - name: KEYSTONE_KEYS_REPOSITORY
                  value: "/etc/keystone/credential-keys/"
                - name: KEYSTONE_CREDENTIAL_MIGRATE_WAIT
                  value: "120"
              command:
                - python
                - /tmp/fernet-manage.py
                - credential_rotate
              volumeMounts:
                - name: pod-tmp
                  mountPath: /tmp
                - name: etckeystone
                  mountPath: /etc/keystone
                - name: keystone-etc
                  mountPath: /etc/keystone/keystone.conf
                  subPath: keystone.conf
                  readOnly: true
                - name: keystone-etc
                  mountPath: /etc/keystone/logging.conf
                  subPath: logging.conf
                  readOnly: true
                - name: keystone-bin
                  mountPath: /tmp/fernet-manage.py
                  subPath: fernet-manage.py
                  readOnly: true

          volumes:
            - name: pod-tmp
              emptyDir: {}
            - name: etckeystone
              emptyDir: {}
            - name: keystone-etc
              secret:
                secretName: keystone-etc
                defaultMode: 0444
            - name: keystone-bin
              configMap:
                name: keystone-bin
                defaultMode: 0555
---
# Source: keystone/templates/cron-job-fernet-rotate.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: keystone-fernet-rotate
  annotations:
    "openstackhelm.openstack.org/release_uuid": ""
spec:
  schedule: "0 */12 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: fernet-rotate
    spec:
      template:
        metadata:
          labels:
            release_group: release-name
            application: keystone
            component: fernet-rotate
        spec:
          serviceAccountName: keystone-fernet-rotate
          securityContext:
            runAsUser: 42424
          initContainers:
            
            - name: init
              image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
              imagePullPolicy: IfNotPresent  
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsUser: 65534
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: INTERFACE_NAME
                  value: eth0
                - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
                - name: DEPENDENCY_SERVICE
                  value: ""
                - name: DEPENDENCY_JOBS
                  value: "keystone-fernet-setup"
                - name: DEPENDENCY_DAEMONSET
                  value: ""
                - name: DEPENDENCY_CONTAINER
                  value: ""
                - name: DEPENDENCY_POD_JSON
                  value: ""
                - name: DEPENDENCY_CUSTOM_RESOURCE
                  value: ""
              command:
                - kubernetes-entrypoint
              volumeMounts:
                null
          restartPolicy: OnFailure

          nodeSelector:
            openstack-control-plane: enabled
          containers:
            - name: keystone-fernet-rotate
              image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
              imagePullPolicy: IfNotPresent
              
              
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              env:
                - name: KEYSTONE_USER
                  value: "keystone"
                - name: KEYSTONE_GROUP
                  value: "keystone"
                - name: KUBERNETES_NAMESPACE
                  value: "default"
                - name: KEYSTONE_KEYS_REPOSITORY
                  value: "/etc/keystone/fernet-keys/"
              command:
                - python
                - /tmp/fernet-manage.py
                - fernet_rotate
              volumeMounts:
                - name: pod-tmp
                  mountPath: /tmp
                - name: etckeystone
                  mountPath: /etc/keystone
                - name: keystone-etc
                  mountPath: /etc/keystone/keystone.conf
                  subPath: keystone.conf
                  readOnly: true
                - name: keystone-etc
                  mountPath: /etc/keystone/logging.conf
                  subPath: logging.conf
                  readOnly: true
                - name: keystone-bin
                  mountPath: /tmp/fernet-manage.py
                  subPath: fernet-manage.py
                  readOnly: true

          volumes:
            - name: pod-tmp
              emptyDir: {}
            - name: etckeystone
              emptyDir: {}
            - name: keystone-etc
              secret:
                secretName: keystone-etc
                defaultMode: 0444
            - name: keystone-bin
              configMap:
                name: keystone-bin
                defaultMode: 0555
---
# Source: keystone/templates/ingress-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keystone
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: keystone
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: keystone-api
                port:
                  name: "ks-pub"
    - host: keystone.default
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: keystone-api
                port:
                  name: "ks-pub"
    - host: keystone.default.svc.cluster.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: keystone-api
                port:
                  name: "ks-pub"
---
# Source: keystone/templates/network_policy.yaml
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: keystone/templates/secret-credential-keys.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-credential-keys
  annotations:
    "helm.sh/hook": pre-install
type: Opaque
data:
---
# Source: keystone/templates/secret-fernet-keys.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keystone-fernet-keys
  annotations:
    "helm.sh/hook": pre-install
type: Opaque
data:
---
# Source: keystone/templates/pod-rally-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: keystone
    component: test
  annotations:
    "helm.sh/hook": test-success
    "openstackhelm.openstack.org/release_uuid": ""
    
spec:
  restartPolicy: Never
  securityContext:
    runAsUser: 42424
  nodeSelector:
    openstack-control-plane: enabled
  serviceAccountName: release-name-test
  initContainers:
    
    - name: init
      image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
      imagePullPolicy: IfNotPresent  
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: "default:keystone-api"
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts:
        null
    - name: keystone-test-ks-user
      image: "docker.io/openstackhelm/heat:wallaby-ubuntu_focal"
      imagePullPolicy: IfNotPresent
      
      
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      command:
        - /tmp/ks-user.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: keystone-bin
          mountPath: /tmp/ks-user.sh
          subPath: ks-user.sh
          readOnly: true
      env:        
        - name: OS_IDENTITY_API_VERSION
          value: "3"
        - name: OS_AUTH_URL
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_AUTH_URL
        - name: OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_REGION_NAME
        - name: OS_INTERFACE
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_INTERFACE
        - name: OS_ENDPOINT_TYPE
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_INTERFACE
        - name: OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PROJECT_DOMAIN_NAME
        - name: OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PROJECT_NAME
        - name: OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_USER_DOMAIN_NAME
        - name: OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_USERNAME
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PASSWORD
        - name: OS_DEFAULT_DOMAIN
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_DEFAULT_DOMAIN
        - name: SERVICE_OS_SERVICE_NAME
          value: "test"        
        - name: SERVICE_OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_REGION_NAME
        - name: SERVICE_OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PROJECT_DOMAIN_NAME
        - name: SERVICE_OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PROJECT_NAME
        - name: SERVICE_OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_USER_DOMAIN_NAME
        - name: SERVICE_OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_USERNAME
        - name: SERVICE_OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PASSWORD
        - name: SERVICE_OS_ROLE
          value: "admin"
  containers:
    - name: keystone-test
      image: "docker.io/xrally/xrally-openstack:2.0.0"
      imagePullPolicy: IfNotPresent
      
      
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65500
      env:        
        - name: OS_IDENTITY_API_VERSION
          value: "3"
        - name: OS_AUTH_URL
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_AUTH_URL
        - name: OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_REGION_NAME
        - name: OS_INTERFACE
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_INTERFACE
        - name: OS_ENDPOINT_TYPE
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_INTERFACE
        - name: OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PROJECT_DOMAIN_NAME
        - name: OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PROJECT_NAME
        - name: OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_USER_DOMAIN_NAME
        - name: OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_USERNAME
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_PASSWORD
        - name: OS_DEFAULT_DOMAIN
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-admin
              key: OS_DEFAULT_DOMAIN        
        - name: SERVICE_OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_REGION_NAME
        - name: SERVICE_OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PROJECT_DOMAIN_NAME
        - name: SERVICE_OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PROJECT_NAME
        - name: SERVICE_OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_USER_DOMAIN_NAME
        - name: SERVICE_OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_USERNAME
        - name: SERVICE_OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keystone-keystone-test
              key: OS_PASSWORD
        - name: RALLY_ENV_NAME
          value: release-name
      command:
        - /tmp/rally-test.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: keystone-etc
          mountPath: /etc/rally/rally_tests.yaml
          subPath: rally_tests.yaml
          readOnly: true
        - name: keystone-bin
          mountPath: /tmp/rally-test.sh
          subPath: rally-test.sh
          readOnly: true
        - name: rally-db
          mountPath: /var/lib/rally
        - name: rally-work
          mountPath: /home/rally/.rally

  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: keystone-etc
      secret:
        secretName: keystone-etc
        defaultMode: 0444
    - name: keystone-bin
      configMap:
        name: keystone-bin
        defaultMode: 0555
    - name: rally-db
      emptyDir: {}
    - name: rally-work
      emptyDir: {}
---
# Source: keystone/templates/job-bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "keystone-bootstrap"
  labels:
    release_group: release-name
    application: keystone
    component: bootstrap
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "5"
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: bootstrap
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
    spec:
      serviceAccountName: keystone-bootstrap
      restartPolicy: OnFailure
            
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:keystone-api"
            - name: DEPENDENCY_JOBS
              value: "keystone-domain-manage"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            []
      containers:
        - name: bootstrap
          image: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
          imagePullPolicy: IfNotPresent
          
          env:            
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_DEFAULT_DOMAIN
          command:
            - /bin/bash
            - -c
            - /tmp/bootstrap.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: bootstrap-sh
              mountPath: /tmp/bootstrap.sh
              subPath: bootstrap.sh
              readOnly: true
            - name: etc-service
              mountPath: "/etc/keystone"
            - name: bootstrap-conf
              mountPath: "/etc/keystone/keystone.conf"
              subPath: "keystone.conf"
              readOnly: true
            - name: bootstrap-conf
              mountPath: "/etc/keystone/logging.conf"
              subPath: "logging.conf"
              readOnly: true
            
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: bootstrap-sh
          configMap:
            name: "keystone-bin"
            defaultMode: 0555
        - name: etc-service
          emptyDir: {}
        - name: bootstrap-conf
          secret:
            secretName: "keystone-etc"
            defaultMode: 0444
---
# Source: keystone/templates/job-credential-cleanup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "keystone-credential-cleanup"
  labels:
    release_group: release-name
    application: keystone
    component: credential-cleanup
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded, hook-failed
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: credential-cleanup
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
        configmap-bin-hash: "f8134da01fd3fa82780666f71b58ddde83436047b0fff810e455546ceedd6b4b"
        configmap-etc-hash: "a0e9c21bd15c793e02ef36c9da3f6d1dc912667e6cb23034f4d7549643d8ce6b"
        
    spec:
      serviceAccountName: keystone
      restartPolicy: Never

      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:mariadb"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            []
      containers:

        - name: "keystone-credential-cleanup"
          image: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
          imagePullPolicy: IfNotPresent
          
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: "keystone-db-admin"
                  key: DB_CONNECTION
            - name: OPENSTACK_CONFIG_FILE
              value: "/etc/keystone/keystone.conf"
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: "database"
            - name: OPENSTACK_CONFIG_DB_KEY
              value: "connection"
          command:
            - python
            - /tmp/cred-clean.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: cred-clean-sh
              mountPath: /tmp/cred-clean.py
              subPath: cred-clean.py
              readOnly: true
            - name: etc-service
              mountPath: "/etc/keystone"
            - name: cred-clean-conf
              mountPath: "/etc/keystone/keystone.conf"
              subPath: "keystone.conf"
              readOnly: true
            - name: cred-clean-conf
              mountPath: "/etc/keystone/logging.conf"
              subPath: "logging.conf"
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: cred-clean-sh
          configMap:
            name: "keystone-bin"
            defaultMode: 0555
        - name: etc-service
          emptyDir: {}
        - name: cred-clean-conf
          secret:
            secretName: "keystone-etc"
            defaultMode: 0444
---
# Source: keystone/templates/job-credential-setup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: keystone-credential-setup
  labels:
    release_group: release-name
    application: keystone
    component: credential-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
    "openstackhelm.openstack.org/release_uuid": ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: credential-setup
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
        configmap-bin-hash: "f8134da01fd3fa82780666f71b58ddde83436047b0fff810e455546ceedd6b4b"
        configmap-etc-hash: "a0e9c21bd15c793e02ef36c9da3f6d1dc912667e6cb23034f4d7549643d8ce6b"
        
    spec:
      serviceAccountName: keystone-credential-setup
      securityContext:
        runAsUser: 42424
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            null
      restartPolicy: OnFailure

      nodeSelector:
        openstack-control-plane: enabled
      containers:
        - name: keystone-credential-setup
          image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
          imagePullPolicy: IfNotPresent
          
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: KEYSTONE_USER
              value: "keystone"
            - name: KEYSTONE_GROUP
              value: "keystone"
            - name: KUBERNETES_NAMESPACE
              value: "default"
            - name: KEYSTONE_KEYS_REPOSITORY
              value: "/etc/keystone/credential-keys/"
          command:
            - python
            - /tmp/fernet-manage.py
            - credential_setup
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etckeystone
              mountPath: /etc/keystone
            - name: credential-keys
              mountPath: "/etc/keystone/credential-keys/"
            - name: keystone-etc
              mountPath: /etc/keystone/keystone.conf
              subPath: keystone.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: keystone-bin
              mountPath: /tmp/fernet-manage.py
              subPath: fernet-manage.py
              readOnly: true

      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: etckeystone
          emptyDir: {}
        - name: credential-keys
          emptyDir: {}
        - name: keystone-etc
          secret:
            secretName: keystone-etc
            defaultMode: 0444
        - name: keystone-bin
          configMap:
            name: keystone-bin
            defaultMode: 0555
---
# Source: keystone/templates/job-db-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "keystone-db-init"
  labels:
    release_group: release-name
    application: keystone
    component: db-init
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-5"
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: db-init
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
    spec:
      serviceAccountName: keystone-db-init
      restartPolicy: OnFailure
            
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:mariadb"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            []
      containers:

        - name: "keystone-db-init-0"
          image: docker.io/openstackhelm/heat:wallaby-ubuntu_focal
          imagePullPolicy: IfNotPresent
          
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: "keystone-db-admin"
                  key: DB_CONNECTION
            - name: OPENSTACK_CONFIG_FILE
              value: "/etc/keystone/keystone.conf"
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: "database"
            - name: OPENSTACK_CONFIG_DB_KEY
              value: "connection"
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-init-sh
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
            - name: etc-service
              mountPath: "/etc/keystone"
            - name: db-init-conf
              mountPath: "/etc/keystone/keystone.conf"
              subPath: "keystone.conf"
              readOnly: true
            - name: db-init-conf
              mountPath: "/etc/keystone/logging.conf"
              subPath: "logging.conf"
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-init-sh
          configMap:
            name: "keystone-bin"
            defaultMode: 0555
        - name: etc-service
          emptyDir: {}
        - name: db-init-conf
          secret:
            secretName: "keystone-etc"
            defaultMode: 0444
---
# Source: keystone/templates/job-db-sync.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "keystone-db-sync"
  labels:
    release_group: release-name
    application: keystone
    component: db-sync
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-4"
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: db-sync
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
    spec:
      serviceAccountName: keystone-db-sync
      restartPolicy: OnFailure
            
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:mariadb"
            - name: DEPENDENCY_JOBS
              value: "keystone-db-init,keystone-credential-setup,keystone-fernet-setup"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            []
      containers:
        - name: "keystone-db-sync"
          image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
          imagePullPolicy: "IfNotPresent"
          
          env:
            - name: OS_BOOTSTRAP_ADMIN_URL
              value: http://keystone.default.svc.cluster.local/v3
            - name: OS_BOOTSTRAP_INTERNAL_URL
              value: http://keystone-api.default.svc.cluster.local:5000/v3
            - name: OS_BOOTSTRAP_PUBLIC_URL
              value: http://keystone.default.svc.cluster.local/v3
            - name: OPENSTACK_CONFIG_FILE
              value: /etc/keystone/keystone.conf
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: database
            - name: OPENSTACK_CONFIG_DB_KEY
              value: connection
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  key: OS_AUTH_URL
                  name: keystone-keystone-admin
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  key: OS_REGION_NAME
                  name: keystone-keystone-admin
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  key: OS_INTERFACE
                  name: keystone-keystone-admin
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  key: OS_INTERFACE
                  name: keystone-keystone-admin
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  key: OS_PROJECT_DOMAIN_NAME
                  name: keystone-keystone-admin
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  key: OS_PROJECT_NAME
                  name: keystone-keystone-admin
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  key: OS_USER_DOMAIN_NAME
                  name: keystone-keystone-admin
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: OS_USERNAME
                  name: keystone-keystone-admin
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: OS_PASSWORD
                  name: keystone-keystone-admin
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  key: OS_DEFAULT_DOMAIN
                  name: keystone-keystone-admin
          command:
            - /bin/bash
            - -c
            - /tmp/db-sync.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-sync-sh
              mountPath: /tmp/db-sync.sh
              subPath: db-sync.sh
              readOnly: true
            - name: etc-service
              mountPath: "/etc/keystone"
            - name: db-sync-conf
              mountPath: "/etc/keystone/keystone.conf"
              subPath: "keystone.conf"
              readOnly: true
            - name: db-sync-conf
              mountPath: "/etc/keystone/logging.conf"
              subPath: "logging.conf"
              readOnly: true            
            - mountPath: /tmp/endpoint-update.py
              name: db-sync-sh
              readOnly: true
              subPath: endpoint-update.py
            - mountPath: /etc/keystone/fernet-keys/
              name: keystone-fernet-keys
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-sync-sh
          configMap:
            name: "keystone-bin"
            defaultMode: 0555
        - name: etc-service
          emptyDir: {}
        - name: db-sync-conf
          secret:
            secretName: "keystone-etc"
            defaultMode: 0444        
        - name: keystone-fernet-keys
          secret:
            secretName: keystone-fernet-keys
---
# Source: keystone/templates/job-domain-manage.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: keystone-domain-manage
  labels:
    release_group: release-name
    application: keystone
    component: domain-manage
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: domain-manage
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
        configmap-bin-hash: "f8134da01fd3fa82780666f71b58ddde83436047b0fff810e455546ceedd6b4b"
        configmap-etc-hash: "a0e9c21bd15c793e02ef36c9da3f6d1dc912667e6cb23034f4d7549643d8ce6b"
        
    spec:
      serviceAccountName: keystone-domain-manage
      securityContext:
        runAsUser: 42424
      restartPolicy: OnFailure

      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: "default:keystone-api"
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            null
        - name: keystone-domain-manage-init
          image: "docker.io/openstackhelm/heat:wallaby-ubuntu_focal"
          imagePullPolicy: IfNotPresent
          
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:            
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_DEFAULT_DOMAIN
          command:
            - /tmp/domain-manage-init.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: keystone-bin
              mountPath: /tmp/domain-manage-init.sh
              subPath: domain-manage-init.sh
              readOnly: true
      containers:
        - name: keystone-domain-manage
          image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
          imagePullPolicy: IfNotPresent
          
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:            
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: keystone-keystone-admin
                  key: OS_DEFAULT_DOMAIN
          command:
            - /tmp/domain-manage.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etckeystonedomains
              mountPath: /etc/keystone/domains
            - name: etckeystone
              mountPath: /etc/keystone
            - name: keystone-bin
              mountPath: /tmp/domain-manage.sh
              subPath: domain-manage.sh
              readOnly: true
            - name: keystone-bin
              mountPath: /tmp/domain-manage.py
              subPath: domain-manage.py
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/keystone.conf
              subPath: keystone.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: keystone-fernet-keys
              mountPath: /etc/keystone/fernet-keys/
            - name: keystone-credential-keys
              mountPath: /etc/keystone/credential-keys/

      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: etckeystone
          emptyDir: {}
        - name: etckeystonedomains
          emptyDir: {}
        - name: keystone-etc
          secret:
            secretName: keystone-etc
            defaultMode: 0444
        - name: keystone-bin
          configMap:
            name: keystone-bin
            defaultMode: 0555
        - name: keystone-fernet-keys
          secret:
            secretName: keystone-fernet-keys
        - name: keystone-credential-keys
          secret:
            secretName: keystone-credential-keys
---
# Source: keystone/templates/job-fernet-setup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: keystone-fernet-setup
  labels:
    release_group: release-name
    application: keystone
    component: fernet-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: fernet-setup
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
        configmap-bin-hash: "f8134da01fd3fa82780666f71b58ddde83436047b0fff810e455546ceedd6b4b"
        configmap-etc-hash: "a0e9c21bd15c793e02ef36c9da3f6d1dc912667e6cb23034f4d7549643d8ce6b"
        
    spec:
      serviceAccountName: keystone-fernet-setup
      securityContext:
        runAsUser: 42424
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            null
      restartPolicy: OnFailure

      nodeSelector:
        openstack-control-plane: enabled
      containers:
        - name: keystone-fernet-setup
          image: "docker.io/openstackhelm/keystone:wallaby-ubuntu_focal"
          imagePullPolicy: IfNotPresent
          
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: KEYSTONE_USER
              value: "keystone"
            - name: KEYSTONE_GROUP
              value: "keystone"
            - name: KUBERNETES_NAMESPACE
              value: "default"
            - name: KEYSTONE_KEYS_REPOSITORY
              value: "/etc/keystone/fernet-keys/"
          command:
            - python
            - /tmp/fernet-manage.py
            - fernet_setup
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etckeystone
              mountPath: /etc/keystone
            - name: fernet-keys
              mountPath: "/etc/keystone/fernet-keys/"
            - name: keystone-etc
              mountPath: /etc/keystone/keystone.conf
              subPath: keystone.conf
              readOnly: true
            - name: keystone-etc
              mountPath: /etc/keystone/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: keystone-bin
              mountPath: /tmp/fernet-manage.py
              subPath: fernet-manage.py
              readOnly: true

      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: etckeystone
          emptyDir: {}
        - name: fernet-keys
          emptyDir: {}
        - name: keystone-etc
          secret:
            secretName: keystone-etc
            defaultMode: 0444
        - name: keystone-bin
          configMap:
            name: keystone-bin
            defaultMode: 0555
---
# Source: keystone/templates/job-rabbit-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "keystone-rabbit-init"
  labels:
    release_group: release-name
    application: keystone
    component: rabbit-init
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-4"
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: keystone
        component: rabbit-init
      annotations:
        "openstackhelm.openstack.org/release_uuid": ""
    spec:
      serviceAccountName: "keystone-rabbit-init"
      restartPolicy: OnFailure
            
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        
        - name: init
          image: "quay.io/airshipit/kubernetes-entrypoint:v1.0.0"
          imagePullPolicy: IfNotPresent  
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts:
            []
      containers:
        - name: rabbit-init
          image: "docker.io/rabbitmq:3.7-management"
          imagePullPolicy: "IfNotPresent"
          
          command:
            - /bin/bash
            - -c
            - /tmp/rabbit-init.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbit-init-sh
              mountPath: /tmp/rabbit-init.sh
              subPath: rabbit-init.sh
              readOnly: true
          env:
          - name: RABBITMQ_ADMIN_CONNECTION
            valueFrom:
              secretKeyRef:
                name: keystone-rabbitmq-admin
                key: RABBITMQ_CONNECTION
          - name: RABBITMQ_USER_CONNECTION
            valueFrom:
              secretKeyRef:
                name: keystone-rabbitmq-user
                key: RABBITMQ_CONNECTION
          - name: RABBITMQ_AUXILIARY_CONFIGURATION
            value: "{\"policies\":[{\"apply-to\":\"all\",\"definition\":{\"ha-mode\":\"all\",\"ha-sync-mode\":\"automatic\",\"message-ttl\":70000},\"name\":\"ha_ttl_keystone\",\"pattern\":\"^(?!(amq\\\\.|reply_)).*\",\"priority\":0,\"vhost\":\"keystone\"}]}"
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: rabbit-init-sh
          configMap:
            name: "keystone-bin"
            defaultMode: 0555
