---
# Source: mautic/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.9"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  mysql-root-password:  "dGVzdDEyMw=="
  
  
  
  mysql-password: "UVptaGlvYTBqcQ=="
---
# Source: mautic/charts/mysql/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-test
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.9"
    heritage: "Helm"
    release: "release-name"
data:
  run.sh: |-
    @test "Testing MySQL Connection" {
      mysql --host=release-name-mysql --port=3306 -u root -ptest123
    }
---
# Source: mautic/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mautic-var-www-html
  namespace: default
  labels:
    app.kubernetes.io/name: mautic
    app.kubernetes.io/instance: release-name
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
  storageClassName: ""
---
# Source: mautic/charts/mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.9"
    release: "release-name"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: release-name-mysql
---
# Source: mautic/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mautic
  labels:
    app.kubernetes.io/name: mautic
    helm.sh/chart: mautic-0.1.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mautic
    app.kubernetes.io/instance: release-name
---
# Source: mautic/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.9"
    release: "release-name"
    heritage: "Helm"

spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: release-name-mysql
      release: release-name
  template:
    metadata:
      labels:
        app: release-name-mysql
        release: release-name
    spec:
      serviceAccountName: default
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.29.3"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
      
      containers:
      - name: release-name-mysql
        image: "mysql:5.6"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-password
              optional: true
        - name: MYSQL_USER
          value: ""
        - name: MYSQL_DATABASE
          value: ""
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        # - name: extras
        #   mountPath: /usr/share/extras
        #   readOnly: true
        
      volumes:
      - name: data
        emptyDir: {}
      # - name: extras
      #   emptyDir: {}
---
# Source: mautic/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mautic
  labels:
    app.kubernetes.io/name: mautic
    helm.sh/chart: mautic-0.1.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mautic
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mautic
        app.kubernetes.io/instance: release-name
    spec:
      volumes:
        - name: var-www-html
          persistentVolumeClaim:
            claimName: mautic-var-www-html
      containers:
        - name: mautic
          image: "mautic/mautic:2.13-apache"
          imagePullPolicy: IfNotPresent
          env:
          - name: MAUTIC_DB_HOST
            value: release-name-mautic-mysql:3306
          - name: MAUTIC_DB_PASSWORD
            value: test123
          - name: MAUTIC_URL
            value: http://mautic2.example.com
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: var-www-html
              mountPath: /var/www/html
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
---
# Source: mautic/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: release-name-mautic
  labels:
    app.kubernetes.io/name: mautic
    helm.sh/chart: mautic-0.1.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/tls-acme: "true"
spec:
  rules:
    - host: "mautic.example.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: release-name-mautic
              servicePort: http
---
# Source: mautic/charts/mysql/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-mysql-test
  namespace: default
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.9"
    heritage: "Helm"
    release: "release-name"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: release-name-test
      image: "bats/bats:1.2.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
  volumes:
  - name: tests
    configMap:
      name: release-name-mysql-test
  restartPolicy: Never
