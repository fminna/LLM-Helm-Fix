---
# Source: radar-upload-connect-backend/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-radar-upload-connect-backend
  labels:
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: radar-upload-connect-backend-0.3.2
      app.kubernetes.io/name: radar-upload-connect-backend
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/version: "0.5.10"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'radar-upload-postgresql'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
---
# Source: radar-upload-connect-backend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-radar-upload-connect-backend
  labels:
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.5.10"
    app.kubernetes.io/managed-by: Helm
data:
  upload.yml: |
    baseUri: "http://0.0.0.0:8085/upload/api/"
    advertisedBaseUri: https://localhost/upload/api/
    enableCors: yes
    clientId: radar_upload_backend
    clientSecret: secret
    managementPortalUrl: http://management-portal:8080/managementportal
    jdbcDriver: org.postgresql.Driver
    jdbcUrl: jdbc:postgresql://radar-upload-postgresql:5432/uploadconnector
    jdbcUser: postgres
    jdbcPassword: password
    additionalPersistenceConfig:
      "hibernate.dialect": "org.hibernate.dialect.PostgreSQL95Dialect"
    sourceTypes:
      - name: "altoida"
        topics:
          - "connect_upload_altoida_acceleration"
        contentTypes:
          - "application/zip"
        timeRequired: false
        sourceIdRequired: false
      - name: "axivity"
        topics:
          - "connect_upload_axivity_acceleration"
          - "connect_upload_axivity_metadata"
        contentTypes:
          - "application/zip"
        timeRequired: false
        sourceIdRequired: false
      - name: "physilog5"
        topics:
          - "connect_upload_physilog_acceleration"
        contentTypes:
          - "application/zip"
          - "application/json"
        timeRequired: false
        sourceIdRequired: false
      - name: "oxford-wearable-camera"
        topics:
          - "connect_upload_oxford_camera_data"
          - "connect_upload_oxford_camera_image"
        contentTypes:
          - "application/zip"
        timeRequired: false
        sourceIdRequired: false
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%date{yyyy-MM-dd HH:mm:ss,UTC} UTC [%.2thread] %-5level - %msg [%logger:%line] %n</pattern>
            </encoder>
        </appender>

        <logger name="org.radarbase" level="INFO" additivity="false">
            <appender-ref ref="STDOUT" />
        </logger>

        <logger name="org.hibernate" level="WARN" additivity="false">
            <appender-ref ref="STDOUT" />
        </logger>

        <root level="INFO">
            <appender-ref ref="STDOUT" />
        </root>
    </configuration>
---
# Source: radar-upload-connect-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-radar-upload-connect-backend
  labels:
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8085
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
---
# Source: radar-upload-connect-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-radar-upload-connect-backend
  labels:
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: radar-upload-connect-backend
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: radar-upload-connect-backend
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - radar-upload-connect-backend
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: radar-upload-connect-backend
          securityContext:
            {}
          image: "radarbase/radar-upload-connect-backend:0.5.10"
          imagePullPolicy: IfNotPresent
          command:
            - radar-upload-backend
            - /etc/upload-backend/upload.yml
          env:
          - name: JAVA_OPTS
            value: "-Dlogback.configurationFile=/etc/upload-backend/logback.xml"
          ports:
            - name: http
              containerPort: 8085
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /upload/api/health
              port: 8085
            initialDelaySeconds: 3
            periodSeconds: 300
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /upload/api/health
              port: 8085
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 2Gi
          volumeMounts:
            - name: config
              mountPath: /etc/upload-backend/
      volumes:
        - name: config
          configMap:
            name: release-name-radar-upload-connect-backend
---
# Source: radar-upload-connect-backend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-radar-upload-connect-backend
  labels:
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/name: radar-upload-connect-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.5.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: "nginx"
  tls:
    - hosts:
        - "localhost"
      secretName: radar-base-tls-radar-upload-connect-backend
  rules:
    - host: "localhost"
      http:
        paths:
          - path: "/upload/api/?(.*)"
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-radar-upload-connect-backend
                port:
                  number: 8085
---
# Source: radar-upload-connect-backend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-radar-upload-connect-backend-test-connection"
  labels:
    app.kubernetes.io/name: radar-upload-connect-backend
    helm.sh/chart: radar-upload-connect-backend-0.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['release-name-radar-upload-connect-backend:8085']
  restartPolicy: Never
