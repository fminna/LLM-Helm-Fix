---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: default
  labels:
    linkerd.io/extension: viz
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU1WcmtPeUFhQWdUNGMrU2MzenlLQ1F3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRFV4TlRFdwpNak15TTFvWERUSTFNRFV4TlRFd01qTXlNMW93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd3NWelY2eHUKeVo4K0I1cFVRWHljUDVyVkxIdm1CVU85d24vRjBla29Gam1uWjF1KzVodmx2ODdVcEtHSXZXQ1BySlZPMUxzQwpLS0xwV0JjaHBKL3lEZEQrem95aFZRQ1NqaHNIcjNYbjNDb2FWam13OFRPKzN3bmUvYkxzY2JMa2h6aTJLbWprCnl2anNkcCtXT3NYeE1aTTNuUHV6MUJMQ0ZrUTduamlJZ0h5YUkrUjlyd1J2d0RFV3pxazR0QXJWV1hhVmxxWEMKNmJjdGdEcDAxb1NuL1U1ODdYUU1CdUhCTjV6N3RvYlloSSt3KzdGY2EydUd4bmxwNVN5SExqYjlURmFzZUwrWQpaU2RVS2NrWlpqZHdGNWVPMGJoSGd2U2hzRWNJdFI3c09rdWVsa3VTQnVLUGNrcEpERVZhQUZYS1AvZHBTNUtnCjFsdmltTndzRWdvOUtRSURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDR0twOS9QcjNUCmxacG5KVFYxVmkwdHBINjVNWTZJTWYyU0hXYUdFNXh6aTk5K3FPelhWVXRlL2QzdlY2V2tNN0UwY0JxVm01bkQKNUgrYUpFVkZOT3hSK0NiYlFKTGpNR1pGVFdTK0o5aDQ3UUpVTGovakdUV0xRcmczL0xQV3hxN09lSEZCUlU3UQovL3hzVG85UXRVNEhzMzNlZmY1NVZoL3NMaFdJWFB3N0R3MjJVcFZtTzdUTDF1bzlhY25MazA1WG4zdzljZkhOCmhDOFRuM1FGdHpEcXFWSzZMVm54ck4wamJGVFNuQkpYMnhTWC9PNHA2aU54Yjl3V1hndWxZU0pCdVJ6aHlBMkQKWGdheWdiN2RsN1R6eUhCZTcvQmhwQVJLb2tVc1dxanJwc2dLb1RYVjBBelF2UXRaT1puWGVUN0hVOGRJeHJFZQpTUFBUWnJ3aWdOT2IKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBd3NWelY2eHV5WjgrQjVwVVFYeWNQNXJWTEh2bUJVTzl3bi9GMGVrb0ZqbW5aMXUrCjVodmx2ODdVcEtHSXZXQ1BySlZPMUxzQ0tLTHBXQmNocEoveURkRCt6b3loVlFDU2poc0hyM1huM0NvYVZqbXcKOFRPKzN3bmUvYkxzY2JMa2h6aTJLbWpreXZqc2RwK1dPc1h4TVpNM25QdXoxQkxDRmtRN25qaUlnSHlhSStSOQpyd1J2d0RFV3pxazR0QXJWV1hhVmxxWEM2YmN0Z0RwMDFvU24vVTU4N1hRTUJ1SEJONXo3dG9iWWhJK3crN0ZjCmEydUd4bmxwNVN5SExqYjlURmFzZUwrWVpTZFVLY2taWmpkd0Y1ZU8wYmhIZ3ZTaHNFY0l0UjdzT2t1ZWxrdVMKQnVLUGNrcEpERVZhQUZYS1AvZHBTNUtnMWx2aW1Od3NFZ285S1FJREFRQUJBb0lCQVFDd2Z6VHljZk5EQ2VhdwpCUTNzK2ZxdE9LV01WZ292SXgvR0xQc2FLT3FHbVdBMXJWSGtPOHVLY09jSStNaHN0Qi8rQ0o4Uzd4UVp0dWMxClNHRFlTWWlUTkp4eWw4VnF2Y1lRdURYU3JrbVpuUjJZblZiV2ZFbXUyOGNTcHh6VU80UVRkVFMrWWFkU3R4ZXcKdHhUdjFZZW5vUHg0YVM2Z013OW1GaGJnWGVKMGF0KzhxaVk2Q3hLUDNMT1VJcTZZUkQyWjJjMmxSVEFSVGZGMQpoMjN1anRhYUNEWmNkeWhESjgwQnlFaVZ1NUpxZ0tJK3RkaGNzOU45ZDFtVWJQRVZUKzhZR2h2MWp5MkJ3cmxFClN4WkJMejRmUVU5SDh2ODNTMlBpbVl2bnhnQ245TEdqVWFpZ2xGWUxQZy9uOWtNUWdkUWVHeVlRSit3dlp0SEgKR2xTU0tmUHhBb0dCQU5ENFlYNjR0bDNNSGRUWjJHR0JGdFFZeXdaK0hNZVpHN1FleHVJd0pGaThnengxRXl2bApKWTFaRkFibmwzWXNmWjRWMmJERzMvOXd5VUpaKy9sbHFQUit0b1FIazZDOW5UaURsZ1BmczRJMFhNTEpLYkNuCnBYTDM5NHVGT3I4RnBMTURCYnBhZThGTVQ5K3dpay81SE04NVZkVzV4Q0RrbFc0dEZJVmpoRDJyQW9HQkFPNmIKQXRaQWJNK2IxTUYrNnpXK2tpNE9sVWlsbFlkTDIyRmROTG5pcHg2a2d6N0xkck9STEdZdEdvckdkK1NJay9WcQplTUVaUnJaOHpKZHVlRStRQjRZSkg5c2d3Wm9wVGt3K01PYUowY2hGVjVrdUErVFZ0aVFvc1BOR2lpK1lES2xkCkpzbjB1dG54cmx1K3g1aVBjN2trZHNNeVNxbHUwb2xsbTBtV1RkUjdBb0dCQUtEWGZOczN1dzVKREhFSFY5ZjgKcnlDREVNbW5pZWxMZkpwUDBnN0l0VUVqbi9PSnZUN2MrZUZvdmRSdXJ4TERQZERPeXFhWS9GSTFjb05DbFlJcApjRGozeXUybWswZDJpcXUwQkdSbzYxYjlqS1JVaDJVME5GRmdjTVdQdjE3R0xqV216dUxYd0VkUXdHM1JDVFJ5CjdtekZtYjZPWkZwWTluYzk5WHlSMDNoUEFvR0FjWnhEWklxMmhML1pOT3pleCs5ZW9TbDJjV25PWWVaL3BjT0EKaUlYZ054bjBHQ0UrK3M5RUNiNnVKYWZNakhkdm8rbzNaeEpHOWp0RUcxS1JYS2ppdkRKNkJaZDZONUkxWXQ0MQo0SDk4OE5QN21zY3JPWGw4eVlqS2dIdDA3cWFDV040dXl2aUpRNTdzKzJoQ2wyU3VvRmc1YUVYNUFPWHd2MVV1CjlJSHB1eU1DZ1lFQXl1Mzk4YnVWTTlQN2YwVkxOZFJPbCtBN3U4U1EwaEtuZVUwMDVXZUZCRnV0Nis5bmxMYSsKM0RIUTEyNm9sVDl5UTVFcjFMNm1XdUNiK05FczBxTnRoMTdnWWRXL0dUM0FhZStXbFdBOVczdmZMS2R5anNIdgpMblpqWEVPUTg3bWJZdnJFckhZeTNLR05lVFpNdk5tU1FJUUJ5MktNOFhONlNPVmJSazd1Z3BBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRTlp5T1BYem0xRE5scHlJRHBUeTNkakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5MFlYQXVaR1ZtWVhWc2RDNXpkbU13SGhjTk1qUXdOVEUxTVRBeU16SXlXaGNOTWpVdwpOVEUxTVRBeU16SXlXakFhTVJnd0ZnWURWUVFERXc5MFlYQXVaR1ZtWVhWc2RDNXpkbU13Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURPM0dycDY3cHdZb01IUitIVkUwQ0VIdU44YXZQTmI4OEoKUU42cW1ZT1FiUitLdDlsMEEzUm0xWWIxRENHN2JnWmticTQyTktPQTlNUFV6dm9FMVp1MzBtaURGT2RWaEQ0cgpFU3R5c0Z6S1hwZ3MrQkRuaGltSkU3NmJFQTFvV1RDa2JKblM0RlBOdG95cENsalVxaHM1MEpBU0NTWUhnTmRTCkcxK1NWMlZGNk54Y1JCdEJDdFQ2Yk5jbmxwZXF3cE9mRXZGaDVnTFFuY1VqYTNCQlc4ZFd5YW1GUVkxanZHUDQKQVhuOUR0ZGg5cktTcEc2dnZ6U2YvWStScXZyZlh6Q25BaTNIbGxqOXJyUkxxUUdaSE5HNFNEYmh0M1BsYW95TApRNlk5M0JkS3JJc2tCdFMxTWRzNUNmWElOSTVjTzRJU0RrY2k3a2Rwdnp5N3VnMUJ0ZG94QWdNQkFBR2pXekJaCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWFCZ05WSFJFRUV6QVJnZzkwWVhBdVpHVm1ZWFZzZEM1emRtTXdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUllMVM4cm96NlIvY0ZycFF4V2Y0bTQ2eUVwNUFGcVlOcWVmclZjdDFCRkdnVEhvCk9NRC9tUU9NU29abU1lQ1RSM1JMTWFrZWRUZXFYdDZpc20zVWRYZ0hyS1N1VzBIbUx0N0JjTUhSNEx2a2M1dU4KS2UrL2dKL0w4WTE1RDVGYTBUVmIzMTFnUnhIRFJvVVNkY204SlViYWkydFVXckFQOUVnTUVzTjF1dlJpNGxncwpEVlVpWnlRbHMvaHJwb2p4UllQOVdPWDFmVHkydTQ3R2pHcTBlYTArK1A1TElTY0FNTk1YTG1mbHY1T2VUdmtSCjF5K3RYWVlLMWc5V2xGM1poZVljREg5eFpzekNXSHYvTWxGeVZjZ0k0cEorTTIxUitDZHAyUm5iall6anJxRFkKeWwvdER0TFBKc0tYMWpCSDJ3c1lYWGlReTF5MjNYT2NCTXZ6OTJrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBenR4cTZldTZjR0tEQjBmaDFSTkFoQjdqZkdyenpXL1BDVURlcXBtRGtHMGZpcmZaCmRBTjBadFdHOVF3aHUyNEdaRzZ1TmpTamdQVEQxTTc2Qk5XYnQ5Sm9neFRuVllRK0t4RXJjckJjeWw2WUxQZ1EKNTRZcGlSTytteEFOYUZrd3BHeVowdUJUemJhTXFRcFkxS29iT2RDUUVna21CNERYVWh0ZmtsZGxSZWpjWEVRYgpRUXJVK216WEo1YVhxc0tUbnhMeFllWUMwSjNGSTJ0d1FWdkhWc21waFVHTlk3eGorQUY1L1E3WFlmYXlrcVJ1CnI3ODBuLzJQa2FyNjMxOHdwd0l0eDVaWS9hNjBTNmtCbVJ6UnVFZzI0YmR6NVdxTWkwT21QZHdYU3F5TEpBYlUKdFRIYk9RbjF5RFNPWER1Q0VnNUhJdTVIYWI4OHU3b05RYlhhTVFJREFRQUJBb0lCQVFDUUNHbG85dm1aeHYzMAowOWdxeEh6bmdacGp4eFI2dHA4eGtqbDREK3ZMWkMvU0pyRUNWbVYyTkxjRGFLOFVFa2ZoSmkrbkRuL0tDcU5RClNjMU1FRytjVHFUMm9GZHk4K0ZWbTE3bFBHZGZnUDMwVWNWemI3Yjcrd044ZEhEaGR6aW5RL2JYSGRzOElSOVAKbENURjdxdUdWZkg2bk9RZDFWZ1hrM2U0TGFJV1NneFhOaFdIYWR4TVVHTHh2ZmIvRlBML1A3S0FMSGdtUzZGSgo4MGtQb0ljZmhJeGhvYm1GRDE0NHpNdU5SVzU2dmlGTmZwTjlZV0dRK3htS0JXNlNvRmZkZW02WjB4amJGZ29LCk12Q3JUSjBOTjUzL0cwZjVEdzQ4RkJRa2FyVkkvMWMrRWNjNXBSNm1YVE1zMGZRWW9TV2U0R1hzV2xOQnRTcDAKcFU1YVlWQUJBb0dCQU52QUFGY2ZpZzhRU3NlNkRyMnhlQ0FpeE5LRUorOTFRdG1Ga0JrQUJJT3FhU0FkWEdYeApLRG9uditEaW1VZFlRU2U2TzRjR3N3VGI0UU1DT05zZGRaNGlyWDk5dVpuc3o3WFBLekdkS1J0b3VOTVMyL0ViCm9GdUt3Yk95a2o1QW9ya214M2hwZE9jYm5VVnVNOUJSUHlPSDZEV0w2VGpiTDVGcG9vaWNjNE5KQW9HQkFQRDgKSGRDMkpzK3ArTjBtUVQvMW9pTHlKYURYZHdjTFJFSUdsVGhjWlNPM3pSVGNVNWFJeWk1dmJuUlZtMGxPQ1diZwpJVVVJK2JPYzBJMC83RDNJU3FLdnJEaG9YeWVsK0tNYmtON2svUUFoSUkrcDZkVkJPUmlHUFVkU05PRUIyQmRNCnVjUC9BekM2dGNxQmVCNi9HNTI3VGVWYkRzRFllanpiNEpFMnc3ZXBBb0dBVUJrY0JxV29YUFZEVEttMDFjL3EKU1V4akVaaTZOYjQ0TDdGUFpNMXMxOUUxb0U4VGJ0VUlKS3A0ZGpBaVRxOE1rTDZCRkNhTStpaHJTLzF6VytyUgpCR0wvZW9rSkxlSHpsQUYvYlFZc0JhR1dQTm1TOGI5d0krM2Z6UEE1L2hieE9TdTVhVnFIRWZZdXpTL3VFdkNLCll4a1d1dTNVaExUZ0VkQy9QYXhKTG9FQ2dZRUF2YytYSEdHY3lFeTAvRnU1WVV0MFhkb2swVDlsUFdNZWJITUsKN2MyNHpCMWxwMXl6YWdwc1ZZN25qVEl3a2RpcGh5SmFraW16cEVtTDZ2WENlaGRjMGk5VWswbUNTWlJzOXV3cgplNlVac2hSbHRVSzhMNENrSERELzYwRlE3VG1xbncrTDhsaldobmRKNFN1QkZaYXBoZCtXUjJVbGhiZjg4QnF3CkV6RHpqNkVDZ1lFQWhZcXFzdmoxeWFEQzZTdC9jb0lvNStoUlNHTEtCMzQvcE5VTGVzbWoxSlozNklDTGp1UjcKd1dOcElrOXFTWkVOV1NMQmlsUUh0d3g2NHVIekRCaUE5QUo1TG5yK0hPcHZNUzNQOEdveUFDSzJabGZ1VkliRApOeXZlcVlqNUdYYk4yM3pyTEp0TjZiand5Tis3bTFIanBrdnBGaWNHb3EyelNhbFJ6eElTYXlNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-viz/templates/prometheus.yaml
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'default'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: default
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: default
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-default-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: default
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: default
---
# Source: linkerd-viz/templates/metrics-api.yaml
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
# Source: linkerd-viz/templates/prometheus.yaml
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
# Source: linkerd-viz/templates/tap-injector.yaml
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
# Source: linkerd-viz/templates/tap.yaml
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
# Source: linkerd-viz/templates/web.yaml
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: default
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
# Source: linkerd-viz/templates/metrics-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
    component: metrics-api
  name: metrics-api
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: c7b62ca668afea406bccbd1c2a66d99d9151d3da9b95f745c035c39119aa13ea
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.default.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:edge-24.5.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
# Source: linkerd-viz/templates/prometheus.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
    component: prometheus
    namespace: default
  name: prometheus
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.48.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
# Source: linkerd-viz/templates/tap-injector.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: e5069ef193c674cda9cc1fbbf3a53e10683c9b7dfe3606aa71f6bde02c1e4eb1
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.default.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-24.5.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
# Source: linkerd-viz/templates/tap.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
    component: tap
    namespace: default
  name: tap
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: default
  template:
    metadata:
      annotations:
        checksum/config: d06857204a3d2f29ca69e6b9f951f1e0d0520acfef3b1714d6f3514907c801b4
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:edge-24.5.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
# Source: linkerd-viz/templates/web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
    component: web
    namespace: default
  name: web
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.default.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.default\.svc\.cluster\.local|web\.default\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:edge-24.5.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: default
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRTlp5T1BYem0xRE5scHlJRHBUeTNkakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5MFlYQXVaR1ZtWVhWc2RDNXpkbU13SGhjTk1qUXdOVEUxTVRBeU16SXlXaGNOTWpVdwpOVEUxTVRBeU16SXlXakFhTVJnd0ZnWURWUVFERXc5MFlYQXVaR1ZtWVhWc2RDNXpkbU13Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURPM0dycDY3cHdZb01IUitIVkUwQ0VIdU44YXZQTmI4OEoKUU42cW1ZT1FiUitLdDlsMEEzUm0xWWIxRENHN2JnWmticTQyTktPQTlNUFV6dm9FMVp1MzBtaURGT2RWaEQ0cgpFU3R5c0Z6S1hwZ3MrQkRuaGltSkU3NmJFQTFvV1RDa2JKblM0RlBOdG95cENsalVxaHM1MEpBU0NTWUhnTmRTCkcxK1NWMlZGNk54Y1JCdEJDdFQ2Yk5jbmxwZXF3cE9mRXZGaDVnTFFuY1VqYTNCQlc4ZFd5YW1GUVkxanZHUDQKQVhuOUR0ZGg5cktTcEc2dnZ6U2YvWStScXZyZlh6Q25BaTNIbGxqOXJyUkxxUUdaSE5HNFNEYmh0M1BsYW95TApRNlk5M0JkS3JJc2tCdFMxTWRzNUNmWElOSTVjTzRJU0RrY2k3a2Rwdnp5N3VnMUJ0ZG94QWdNQkFBR2pXekJaCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWFCZ05WSFJFRUV6QVJnZzkwWVhBdVpHVm1ZWFZzZEM1emRtTXdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUllMVM4cm96NlIvY0ZycFF4V2Y0bTQ2eUVwNUFGcVlOcWVmclZjdDFCRkdnVEhvCk9NRC9tUU9NU29abU1lQ1RSM1JMTWFrZWRUZXFYdDZpc20zVWRYZ0hyS1N1VzBIbUx0N0JjTUhSNEx2a2M1dU4KS2UrL2dKL0w4WTE1RDVGYTBUVmIzMTFnUnhIRFJvVVNkY204SlViYWkydFVXckFQOUVnTUVzTjF1dlJpNGxncwpEVlVpWnlRbHMvaHJwb2p4UllQOVdPWDFmVHkydTQ3R2pHcTBlYTArK1A1TElTY0FNTk1YTG1mbHY1T2VUdmtSCjF5K3RYWVlLMWc5V2xGM1poZVljREg5eFpzekNXSHYvTWxGeVZjZ0k0cEorTTIxUitDZHAyUm5iall6anJxRFkKeWwvdER0TFBKc0tYMWpCSDJ3c1lYWGlReTF5MjNYT2NCTXZ6OTJrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: default
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: default
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: default
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
  clientConfig:
    service:
      name: tap-injector
      namespace: default
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU1WcmtPeUFhQWdUNGMrU2MzenlLQ1F3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSTBNRFV4TlRFdwpNak15TTFvWERUSTFNRFV4TlRFd01qTXlNMW93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd3NWelY2eHUKeVo4K0I1cFVRWHljUDVyVkxIdm1CVU85d24vRjBla29Gam1uWjF1KzVodmx2ODdVcEtHSXZXQ1BySlZPMUxzQwpLS0xwV0JjaHBKL3lEZEQrem95aFZRQ1NqaHNIcjNYbjNDb2FWam13OFRPKzN3bmUvYkxzY2JMa2h6aTJLbWprCnl2anNkcCtXT3NYeE1aTTNuUHV6MUJMQ0ZrUTduamlJZ0h5YUkrUjlyd1J2d0RFV3pxazR0QXJWV1hhVmxxWEMKNmJjdGdEcDAxb1NuL1U1ODdYUU1CdUhCTjV6N3RvYlloSSt3KzdGY2EydUd4bmxwNVN5SExqYjlURmFzZUwrWQpaU2RVS2NrWlpqZHdGNWVPMGJoSGd2U2hzRWNJdFI3c09rdWVsa3VTQnVLUGNrcEpERVZhQUZYS1AvZHBTNUtnCjFsdmltTndzRWdvOUtRSURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDR0twOS9QcjNUCmxacG5KVFYxVmkwdHBINjVNWTZJTWYyU0hXYUdFNXh6aTk5K3FPelhWVXRlL2QzdlY2V2tNN0UwY0JxVm01bkQKNUgrYUpFVkZOT3hSK0NiYlFKTGpNR1pGVFdTK0o5aDQ3UUpVTGovakdUV0xRcmczL0xQV3hxN09lSEZCUlU3UQovL3hzVG85UXRVNEhzMzNlZmY1NVZoL3NMaFdJWFB3N0R3MjJVcFZtTzdUTDF1bzlhY25MazA1WG4zdzljZkhOCmhDOFRuM1FGdHpEcXFWSzZMVm54ck4wamJGVFNuQkpYMnhTWC9PNHA2aU54Yjl3V1hndWxZU0pCdVJ6aHlBMkQKWGdheWdiN2RsN1R6eUhCZTcvQmhwQVJLb2tVc1dxanJwc2dLb1RYVjBBelF2UXRaT1puWGVUN0hVOGRJeHJFZQpTUFBUWnJ3aWdOT2IKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    scope: "Namespaced"
  sideEffects: None
---
# Source: linkerd-viz/templates/admin-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: default
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: default
  port: admin-http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: default
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.default.svc.cluster.local
  namespace: default
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.default.svc.cluster.local
  namespace: default
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["default"]
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: default
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: viz-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: default
---
# Source: linkerd-viz/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.5.1
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.5.1
  name: namespace-metadata
  namespace: default
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-24.5.1
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: viz
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: edge-24.5.1
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --log-format
        - plain
        - --log-level
        - info
        - --extension
        - viz
        - --namespace
        - default
        - --linkerd-namespace
        - linkerd
