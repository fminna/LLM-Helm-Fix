---
# Source: resurface/charts/kubernetes-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kubernetes-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
automountServiceAccountToken: true
---
# Source: resurface/templates/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-resurface-sa
  namespace: default
---
# Source: resurface/templates/config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: trino-iss
  namespace: default
type: Opaque
data:
  iss: KWZFbF1dKmFeOlomZmdfYEt+Jlg9b3s0LicrY05XUWc=
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kubernetes-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
data:
---
# Source: resurface/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-coordinator-config
  namespace: default
data:
  config.properties: |
    coordinator=true
    discovery.uri=http://localhost:7700
    node-scheduler.include-coordinator=true
    
    http-server.http.port=7700
    
    query.max-history=20
    query.max-length=1000000
    query.max-memory=4000MB
    query.max-memory-per-node=4000MB
    query.max-total-memory=4000MB
    query.min-expire-age=60s
    sql.forced-session-time-zone=UTC
    internal-communication.shared-secret=KWZFbF1dKmFeOlomZmdfYEt+Jlg9b3s0LicrY05XUWc=
---
# Source: resurface/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-worker-config
  namespace: default
data:
  config.properties: |
    coordinator=false
    discovery.uri=http://coordinator:7700
    http-server.http.port=7700
    
    query.max-history=20
    query.max-length=1000000
    query.max-memory=4000MB
    query.max-memory-per-node=4000MB
    query.max-total-memory=4000MB
    query.min-expire-age=60s
    sql.forced-session-time-zone=UTC
    internal-communication.shared-secret=KWZFbF1dKmFeOlomZmdfYEt+Jlg9b3s0LicrY05XUWc=
---
# Source: resurface/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-errorfiles
data:
  503: |-
    HTTP/1.0 503 Service Unavailable
    Cache-Control: must-revalidate,no-cache,no-store
    Connection: close
    Content-Type: text/html;charset=utf-8

    <html>
      <title>503 Service Unavailable</title>
      <style>
        body { background-color: rgba(48,48,48); font-family: Arial, sans-serif; text-align: center; }
        div { color: white; margin-top:100px; font-size: 120%; }
        h1 { font-weight: 500; }
        p { color: rgba(230,230,230); }
        a { color: inherit; }
        #contact { margin-top: 25px; }
      </style>
      <body>
        <div>
          <h1>No available nodes üòÆ‚Äçüí®</h1>
          <p>
            Sorry, there are no Graylog API Security nodes available to handle your request just yet.
            Please, try again in a few minutes.
          </p>
          <p id="contact">
            If this issue persists, please contact support at <a href="mailto:api-support@graylog.com">api-support@graylog.com</a>.
          </p>
        <div>
      </body>
    </html>
---
# Source: resurface/charts/kubernetes-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-kubernetes-ingress
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - services
  - namespaces
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - core.haproxy.org
  resources:
     - '*'
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ingress.v1.haproxy.org
  - ingress.v1.haproxy.com
  resources:
    - "*"
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - "apps"
  resources:
  - replicasets
  - deployments
  - daemonsets
  verbs:
  - get
  - list
  - watch
---
# Source: resurface/charts/kubernetes-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-kubernetes-ingress
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-kubernetes-ingress
subjects:
- kind: ServiceAccount
  name: release-name-kubernetes-ingress
  namespace: default
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kubernetes-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
  annotations:
spec:
  
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      appProtocol: http
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      appProtocol: https
      targetPort: https
    - name: minioc-tcp
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app.kubernetes.io/name: kubernetes-ingress
    app.kubernetes.io/instance: release-name
  externalIPs:
---
# Source: resurface/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: coordinator
  labels:
    helm.sh/chart: resurface-3.7.0
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.6.102"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: db-svcport
      port: 7700
      targetPort: db
  selector:
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
    db.resurface.io/role: coordinator
---
# Source: resurface/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: worker
  labels:
    helm.sh/chart: resurface-3.7.0
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.6.102"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: fluke-svcport
      port: 7701
      targetPort: fluke
  selector:
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kubernetes-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
spec:
  replicas: 2
  minReadySeconds: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-ingress
      app.kubernetes.io/instance: release-name
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-ingress
        app.kubernetes.io/instance: release-name
    spec:
      enableServiceLinks: true
      serviceAccountName: release-name-kubernetes-ingress
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      securityContext:
        runAsNonRoot: true
        runAsUser:  1000
        runAsGroup: 1000
      containers:
        - name: kubernetes-ingress-controller
          image: "haproxytech/kubernetes-ingress:1.11.3"
          imagePullPolicy: IfNotPresent
          args:
          - --default-ssl-certificate=default/release-name-kubernetes-ingress-default-cert
          - --configmap=default/release-name-kubernetes-ingress
          - --http-bind-port=8080
          - --https-bind-port=8443
          - --ingress.class=haproxy
          - --publish-service=default/release-name-kubernetes-ingress
          - --log=info
          - --configmap-tcp-services=resurface/haproxy-extra-ports
          - --configmap-errorfiles=resurface/haproxy-errorfiles
          securityContext:
            runAsNonRoot: true
            runAsUser:  1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: stat
              containerPort: 1024
              protocol: TCP
            - name: minioc-tcp
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          resources:
            requests:
              cpu: 250m
              memory: 400Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              subPath: tmp
            - name: tmp
              mountPath: /run
              subPath: run
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 64Mi
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Equal
          value: arm64
---
# Source: resurface/templates/stateful-coordinator.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-resurface-coordinator
  labels:
    helm.sh/chart: resurface-3.7.0
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.6.102"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: coordinator
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: resurface
      app.kubernetes.io/instance: release-name
      db.resurface.io/role: coordinator
  template:
    metadata:
      annotations:
        checksum/config: a507f5b913f48f414b578f3b4e99ef868b1268bb0fbb6c12d9293b5c4b6cefdf
      labels:
        app.kubernetes.io/name: resurface
        app.kubernetes.io/instance: release-name
        db.resurface.io/role: coordinator
    spec:
      serviceAccountName: resurface-sa
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      volumes:
        - name: config-volume
          configMap:
            name: trino-coordinator-config
            items:
              - key: config.properties
                path: config.properties
        
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Equal
          value: arm64
      containers:
        - name: coordinator
          image: resurfaceio/resurface:3.6.102
          ports:
            - name: db
              containerPort: 7700
            - name: fluke
              containerPort: 7701
          volumeMounts:
            - name: config-volume
              mountPath: /opt/trino/etc/config.properties
              subPath: config.properties
            
            - name: release-name-resurface-pvc
              mountPath: /db

          resources:
            requests:
              cpu: 6
              memory: 18Gi
          env:
            - name: DB_SIZE
              value: 4g
            - name: DB_HEAP
              value: 12g
            - name: DB_SLABS
              value: "3"
            - name: SHARD_SIZE
              value: 1331200k
            - name: POLLING_CYCLE
              value: "default"
            - name: TZ
              value: "UTC"
  volumeClaimTemplates:
    - metadata:
        name: release-name-resurface-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 20Gi
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-crdjob.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-kubernetes-ingress-crdjob-1
  namespace: default
  labels:
    app.kubernetes.io/name: release-name-kubernetes-ingress-crdjob-1
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name-kubernetes-ingress-crdjob-1
        app.kubernetes.io/instance: release-name
    spec:
      restartPolicy: Never
      serviceAccountName: release-name-kubernetes-ingress
      securityContext:
        runAsNonRoot: true
        runAsUser:  1000
        runAsGroup: 1000
      containers:
        - name: crd
          image: "haproxytech/kubernetes-ingress:1.11.3"
          imagePullPolicy: IfNotPresent
          command:
            - /haproxy-ingress-controller
            - --job-check-crd
          securityContext:
            runAsNonRoot: true
            runAsUser:  1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              cpu: 250m
              memory: 400Mi
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Equal
          value: arm64
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
spec:
  controller: haproxy.org/ingress-controller/haproxy
---
# Source: resurface/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-resurface-ingress
  annotations:
    haproxy.org/load-balance: "roundrobin"
    haproxy.org/backend-config-snippet: |
      acl no_trailing_slash path -m str /fluke
      http-request redirect code 301 location /fluke/ if no_trailing_slash
    haproxy.org/path-rewrite: /fluke/(.*) /\1
spec:
  ingressClassName: haproxy
  rules:
    - http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: coordinator
                port:
                  name: db-svcport
          - path: "/fluke"
            pathType: Prefix
            backend:
              service:
                name: worker
                port:
                  name: fluke-svcport
---
# Source: resurface/charts/kubernetes-ingress/templates/controller-defaultcertsecret.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: release-name-kubernetes-ingress-default-cert
  namespace: default
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.39.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.11.3
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lSQU1NNnprR3lvTnpJYUdlZnFWV2JTQXN3RFFZSktvWklodmNOQVFFTEJRQXcKSURFZU1Cd0dBMVVFQXhNVmEzVmlaWEp1WlhSbGN5MXBibWR5WlhOekxXTmhNQjRYRFRJME1EVXhOVEV3TURVMQpOVm9YRFRJMU1EVXhOVEV3TURVMU5Wb3dIekVkTUJzR0ExVUVBeE1VY21Wc1pXRnpaUzF1WVcxbExtUmxabUYxCmJIUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDckE4OCtyVE9KNnpOZ3ptckoKQkxCSVBYTmZCWlBKblpGZ3VtTWhmd1I2eFdpOVVGMHN0Rmw3WkYrOVlwQ3RQOXQ5QzBDckZOV3pnMjBIUEpQMQppbWRXTzEvQ2hqNk1LT3VoenFwNExaZDNrRXVWWGtyVldaR0svdVJwQitkcVcyTWtSRys4dWxZOTRocFlOYXhWCjlnU1NISzlGYklHUW42d21GQkFhWm9YUVBtWlZaUjFabi90NDJyYzRrR1JKcWlBT0d5VkNyY1NhTEpiZGl5bTIKa25zSGFVTUJnb0xZS25idTY3SXQ3QkNlZG5CbjVmeFNYbHl2aDIxb0x6QngrOFBiUndTZGU3UWQzVGpRbTA3ZwphSUhRQW1yZ0p6WlVQekdPNTFEUWNVZnp1QXhBQWlNQzdpd25vbVpqTFJiczJ0WEVqakcxVHhQWWRlRi9FTGFyClRZTnBBZ01CQUFHallEQmVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUdHR0cklkY2hzaXRyOQpoYjFZS1pNbms3ZUhzVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBYnhXNWVQNjQxZzhocVRqdWM3YXZwMHNlCnk4WVR1VHpOb1Y0VXF3dEZUdnBQR0QrdzF1QVh3Q0ZRTVlLcmxvNFhtNWtTQXFIK1FPUG5YZ1IxZlYyMUxpb3oKWEFsZE96VHZhY2VJYVZZellPWUhCdVYvcEFCbkFRT2gxWWZLbE5BVlp6K0dCakFxbnpzbGZQOEZoYUtDczgzNApWOGNIeTlIK1hPSTRMNk5yQUs4QkZMUG5XUlU5THpYeGNTS0xHVTBRNXRtTmhWN3N6dTcwOXVSSEwyS2VNU1FICmZ4NHR4em9aMjUxSWZCdUFIZ3Yxdkw5UlBPdGZjYkhwMFFmcHh6Qk5OdWVFRlFLRTl0QmlCUjZKS1B1WkVZaTcKUmdzUzFIUktrZ1FwbXgxbW1Gc0RSK0ZhTWhxVSszQmN0K01IWVNXUEp2cm9iYkRvTGRzVjRuYkk1U0s5VXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcXdQUFBxMHppZXN6WU01cXlRU3dTRDF6WHdXVHlaMlJZTHBqSVg4RWVzVm92VkJkCkxMUlplMlJmdldLUXJUL2JmUXRBcXhUVnM0TnRCenlUOVlwblZqdGZ3b1krakNqcm9jNnFlQzJYZDVCTGxWNUsKMVZtUml2N2thUWZuYWx0akpFUnZ2THBXUGVJYVdEV3NWZllFa2h5dlJXeUJrSitzSmhRUUdtYUYwRDVtVldVZApXWi83ZU5xM09KQmtTYW9nRGhzbFFxM0VtaXlXM1lzcHRwSjdCMmxEQVlLQzJDcDI3dXV5TGV3UW5uWndaK1g4ClVsNWNyNGR0YUM4d2NmdkQyMGNFblh1MEhkMDQwSnRPNEdpQjBBSnE0Q2MyVkQ4eGp1ZFEwSEZIODdnTVFBSWoKQXU0c0o2Sm1ZeTBXN05yVnhJNHh0VThUMkhYaGZ4QzJxMDJEYVFJREFRQUJBb0lCQUg3RVFDZXhzL2FVUm0ySQpGVmdWQmFkSEJmSjE2K3NUeGVQeHhmSGFlYk9ZQ2QvclptWHcrak9oWCthKzNZZlBRaUFhNjBEbUhOTUlwUlVzCkxuRmd1dUVNK2hyejhBRnRnOTFabUx1azhCWk0rL29vLzBmUE1UZmJZZTBKVXQxZ0NNbWxnVDVnMGZUbFdhbngKZjJIcEQ5SlBPUTA1TllIREdwVFBZbkJ2ZHRtNWNTa1F6eTQvSEgxaURROE5CUzVnNVplZk9KcDM1KzdtRWVBLwpHWDMvVUtoOFE3anZnb202VnJ5Q1RlSEIvbUxnQnl4clEyYUFaL253VlV4UWFGT1VXcUVDWEdSdEJ4cFFiM2hHCnZGdm40SkNoNCtnOE5MWmo0VkVNWlIwZ2dKQS9tdXNiOVlENStSNTgyWEpFZjZkdVYvN0I5UHNxa2VoUkwwNk4KK1VpUTBCRUNnWUVBeVM2VlFiakxyMGk0MlNVYklnL1dpVWxpUjJBSEwvNnRQTGNCODNoTlNEKzc1VElKREVkRgpMZlMzYkhVeVFqTlFwWXEvS1lYeXoxMWd5SjZGd3NlbVA2UE0yNnorSk5SelFWd2hwTUkwMG9DY21FN2ZwdU5ECkZtaEVGMzEzZnd0Z3lMRDY2TnJtYXdRaW1IeWtwR2JHY0Y1NUFteFEraFdKSjZtV2JpRFIvY01DZ1lFQTJaenQKSFIvaEUvS1hJdG1MU041ckttRWZEZ1VoOWxBc1J2VHV6VDZxb3NXVjU2TW1iK3R4NEludkZHV3luaVRXY1JFSQp6dlB4anBMQlhXbDkrMkNJdnpyTmFjTTZKeGs3Q1VNK3VhNWc1Vi9Jc3hYOWNWNlo0WlNOdThBczlHNVdQRVd6Cm11R2IvVXR1MExWbzF5SG5TblJYdXpoaWprVFdUTnZXTCtMN0MyTUNnWUVBeG5sMWVKd21IaXhoYUtCcHowWE8Kd2l3cWovM1Z1V3pJWGNDeVpROEhOMExoVExEN0tpalp3QWZRT1dpNWg0UDJpUXFEb3lScHNsZ09GbjRGdW02YQp2ZWdNUDZEQUxYZUdxVEdLWTIvUkN1Y2xGa0doOVpQNWFJNit0bW5xVE9UZHU4Q1dHTWwwVHBtS3crTWJ6ckV5CkRrTzFvRVZaOGc3eSs3VWNHbE80dDE4Q2dZRUF5L3FyekV3UWw3a2ljRGxJdFNJL2c3Y0wvQUZWcDJQWlRSM1UKSmpGaWt6YndYL052V1NOeVdBNFRPNlJrUEphOUo3alc3OTU4QTYrT2J6Z3VMZzU3di95bmhVYkpZTkxtb3JVVQp1OG8zNjJuUVlBWHh6bTNsZ2l6VWVqUVdMM3lwZXMrL0hpUHlLd2lsTkIrSHlYaHZMRHhIN0NkYlFvNUY3ajkyCjB1WkplWThDZ1lBczZHdnhqcCs4UXkwb0ZLWVlyTStkcFdqYnl0T0F4YlpRTFVoYnFvTjFGa1BJUDNSVFk0cUMKM01ObVVZUTc0V3RJY2YwWUdaNlpmdzZ6OXJZSWFiTnJjZFlDWnNWL2h4TCtwQ2hTbnRjVHgxUWRjcEMwakVCawpCN09nVmcwWW16eno3aXZBSGlNUnlPUmVBYnQxQkdGSTdBSHRma0JzSEdDZGtiZEl6cnY5WFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: resurface/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-resurface-test-connection"
  labels:
    helm.sh/chart: resurface-3.7.0
    app.kubernetes.io/name: resurface
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.6.102"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:
        - 'http://coordinator.default:7700/'
        - 'http://worker.default:7701/'
  restartPolicy: Never
