---
# Source: librenms/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mariadb-root-password: "bGlicmVubXM="
  mariadb-password: "bGlicmVubXM="
---
# Source: librenms/templates/secret-env.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-librenms-env
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
data:
  DB_PASSWORD: bGlicmVubXM=
  APP_KEY: YmFzZTY0OmNISkVWM002WlVBdGJFaG9jWGtyWlZaYmUxQmdiaUV5U2tBL1FDdE1iQ2M9
---
# Source: librenms/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=::
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: librenms/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: librenms/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: librenms/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: librenms/templates/configmap-app.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-librenms-config
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
data:
  config.php: |
    <?php
    $config["own_hostname"] = 'release-name-librenms';
    $config["base_url"] = '/';
    $config["rrdcached"] = 'release-name-librenms-rrdcached:42217';
    $config['rrdtool_version'] = '1.7.2';
    $config["rrd_dir"] = '/data/rrd';
    $config["distributed_poller"] = true;
    $config["enable_syslog"] = true;
    if (strpos(php_uname('n'), '-poller-') !== false) {
      $config["distributed_poller_name"] = php_uname('n');
      $config["distributed_poller_group"] = '0';
      $config["distributed_poller_memcached_host"] = 'release-name-librenms-memcached';
      $config["distributed_poller_memcached_port"] = 11211;
    }
---
# Source: librenms/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-librenms-env
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
data:
  TZ: Europe/Madrid
  PUID: "1000"
  PGID: "1000"
  DB_HOST: librenms-mysql
  DB_USER: librenms
  DB_NAME: librenms
  REDIS_HOST: librenms-redis-headless
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  MEMCACHED_HOST: librenms-memcached
  MEMCACHED_PORT: "11211"
  RRDCACHED_SERVER: librenms-rrdcached:42217
---
# Source: librenms/templates/configmap-rrdcached.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-librenms-rrdcached
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: rrdcached
data:
  TZ: Europe/Madrid
  LOG_LEVEL: "LOG_INFO"
  WRITE_TIMEOUT: "1800"
  WRITE_JITTER: "900"
  WRITE_THREADS: "4"
  FLUSH_DEAD_DATA_INTERVAL: "3600"
---
# Source: librenms/charts/memcached/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached
  namespace: default
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-6.0.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcached
    app.kubernetes.io/instance: release-name
---
# Source: librenms/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: librenms/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
# Source: librenms/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  internalTrafficPolicy: Cluster
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
# Source: librenms/templates/service-app.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-librenms
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: app
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: app
---
# Source: librenms/templates/service-rrdcached.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-librenms-rrdcached
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: app
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: rrd
      port: 42217
      protocol: TCP
  selector:
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: app
---
# Source: librenms/templates/service-syslog.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-librenms-syslog
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: syslog
spec:
  type: ClusterIP
  # add source IP address
  externalTrafficPolicy: Local
  ports:
    - name: syslog-tcp
      port: 514
      targetPort: syslog-tcp
      protocol: TCP
      nodePort: null
    - name: syslog
      port: 514
      targetPort: syslog-udp
      protocol: UDP
      nodePort: null
  selector:
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: syslog
---
# Source: librenms/charts/memcached/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-memcached
  namespace: default
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-6.0.16
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached
      app.kubernetes.io/instance: release-name
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcached
        helm.sh/chart: memcached-6.0.16
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcached
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.15-debian-10-r20
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 250m
              memory: 10Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: librenms/templates/deployment-poller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-librenms-poller
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: poller
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: librenms
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: poller
  template:
    metadata:
      labels:
        helm.sh/chart: librenms-0.3.0
        app.kubernetes.io/version: "22.4.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: librenms
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: poller
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: librenms
              app.kubernetes.io/instance: release-name
              app.kubernetes.io/component: poller
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: wait-app
          image: "librenms/librenms:22.4.1"
          command:
            - sh
            - '-c'
            - >-
                until nc -z release-name-librenms 80; do
                  echo waiting for librenms;
                  sleep 2;
                done
        - name: init-env
          image: "librenms/librenms:22.4.1"
          command:
            - sh
            - '-c'
            - >-
                export | cut -d' ' -f2 | tr -d "'"  > /data/.env
          envFrom:
            - secretRef:
                name: release-name-librenms-env
            - configMapRef:
                name: release-name-librenms-env
          env:
            
            - name: SIDECAR_DISPATCHER
              value: "1"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DISPATCHER_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CACHE_DRIVER
              value: "redis"
            - name: DISPATCHER_ARGS
              value: ""
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: poller
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          image: "librenms/librenms:22.4.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: release-name-librenms-env
            - configMapRef:
                name: release-name-librenms-env
          env:
            
            - name: SIDECAR_DISPATCHER
              value: "1"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DISPATCHER_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CACHE_DRIVER
              value: "redis"
            - name: DISPATCHER_ARGS
              value: ""
          resources:
            {}
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - '-c'
                  - >-
                      mysql -h ${DB_HOST} -u ${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} -e
                      "DELETE FROM poller_cluster WHERE node_id = '${DISPATCHER_NODE_ID}';" ;
                      s6-svscanctl -q /var/run/s6/services ;
                      killall -9 s6-supervise
          livenessProbe:
            exec:
              command:
                - pgrep
                - python3
            periodSeconds: 10
            failureThreshold: 2
            timeoutSeconds: 5
          volumeMounts:
            - name: data
              mountPath: /data
            - name: nagios
              mountPath: /usr/lib/nagios
            - name: config
              mountPath: /opt/librenms/config.php
              subPath: config.php
      volumes:
        - name: data
        - name: nagios
        - name: config
          configMap:
            name: release-name-librenms-config
---
# Source: librenms/templates/deployment-syslog.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-librenms-syslog
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: syslog
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: librenms
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: syslog
  template:
    metadata:
      labels:
        helm.sh/chart: librenms-0.3.0
        app.kubernetes.io/version: "22.4.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: librenms
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: syslog
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: syslog
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          image: "librenms/librenms:22.4.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            
            - secretRef:
                name: release-name-librenms-env
            - configMapRef:
                name: release-name-librenms-env
          env:
            - name: SIDECAR_SYSLOGNG
              value: "1"
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - '-c'
                  - >-
                      s6-svscanctl -q /var/run/s6/services; killall -9 s6-supervise
          ports:
            - name: syslog-tcp
              containerPort: 514
              protocol: TCP
            - name: syslog-udp
              containerPort: 514
              protocol: UDP
          livenessProbe:
            tcpSocket:
              port: syslog-tcp
            periodSeconds: 20
          readinessProbe:
            tcpSocket:
              port: syslog-tcp
            periodSeconds: 20
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /opt/librenms/config.d
      volumes:
        - name: data
        - name: config
          configMap:
            name: release-name-librenms-config
---
# Source: librenms/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: release-name-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: e7b5ea2de4945f04fc46ec445e08446e41b3a55ed089d403cc1cd69a6fc1418e
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-10.5.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: default
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r399
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /bitnami/mariadb
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.5.15-debian-10-r62
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mysql
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: "librenms"
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mysql
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: "librenms"
            - name: TZ
              value: Europe/Madrid
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: release-name-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
---
# Source: librenms/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.8.9
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 390a40b18d6f138d02e0195abafd71d06aa1cfb1add8c1eeb631337fa6e9a267
        checksum/health: bcae915e1ce02221fbddc2026c3348dbee15910b3e949d13efc59c4c4cf99825
        checksum/scripts: afce38598b2b1bb6e06eb5c22d60b2ca3edd20ace2f7c1221f6604931030d3f5
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: librenms/templates/statefulset-app.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-librenms
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: app
spec:
  replicas: 1
  serviceName: release-name-librenms
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: librenms
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "22.4.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: librenms
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: app
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: init-env
          image: "librenms/librenms:22.4.1"
          command:
            - sh
            - '-c'
            - >-
                export | cut -d' ' -f2 | tr -d "'"  > /data/.env
          envFrom:
            - secretRef:
                name: release-name-librenms-env
            - configMapRef:
                name: release-name-librenms-env
          env:
            
            - name: SIDECAR_DISPATCHER
              value: "1"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DISPATCHER_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CACHE_DRIVER
              value: "redis"
            - name: DISPATCHER_ARGS
              value: ""
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: app
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          image: "librenms/librenms:22.4.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            
            - secretRef:
                name: release-name-librenms-env
            - configMapRef:
                name: release-name-librenms-env
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - '-c'
                  - >-
                      s6-svscanctl -q /var/run/s6/services; killall -9 s6-supervise
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /login
              port: http
            periodSeconds: 15
            failureThreshold: 4
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /login
              port: http
            periodSeconds: 10
            failureThreshold: 4
          startupProbe:
            httpGet:
              path: /login
              port: http
            periodSeconds: 5
            failureThreshold: 120
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 200Mi
          volumeMounts:
            - name: data
              mountPath: /data
            - name: rrd-journal
              mountPath: /var/lib/rrdcached/journal
            - name: config
              mountPath: /opt/librenms/config.d
            - name: nagios
              mountPath: /usr/lib/nagios
        - name: rrdcached
          securityContext:
            allowPrivilegeEscalation: false
          image: crazymax/rrdcached:1.7.2-r4
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-librenms-rrdcached
          ports:
            - name: rrd
              containerPort: 42217
              protocol: TCP
          livenessProbe: &rrd_tcpProbe
            tcpSocket:
              port: rrd
          readinessProbe: *rrd_tcpProbe
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /data/db
              subPath: rrd
            - name: rrd-journal
              mountPath: /data/journal
      volumes:
        - name: config
          configMap:
            name: release-name-librenms-config
        - name: rrd-journal
          emptyDir: {}
        - name: nagios
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: librenms
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: app
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "4Gi"
        storageClass:
---
# Source: librenms/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-librenms-test-connection"
  labels:
    helm.sh/chart: librenms-0.3.0
    app.kubernetes.io/version: "22.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: librenms
    app.kubernetes.io/instance: release-name
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['-O', '/dev/null', 'release-name-librenms:80']
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        readOnlyRootFilesystem: true
      resources:
        limits:
          memory: 60Mi
          cpu: 200m
        requests:
          memory: 10Mi
          cpu: 10m
  restartPolicy: Never
