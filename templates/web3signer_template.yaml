---
# Source: web3signer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-web3signer
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: web3signer/charts/slashingprotectiondb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-slashingprotectiondb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: slashingprotectiondb-12.12.10
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: web3signer/charts/slashingprotectiondb/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-slashingprotectiondb-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: slashingprotectiondb-12.12.10
data:
  init_01_db.sh: |
    #!/bin/sh
    export PGPASSWORD=postgres
  
    DB_EXISTS=$(psql -U postgres -h 127.0.0.1 -t -c "SELECT 1 FROM pg_database WHERE datname='web3signer'")
    if [ -z "$DB_EXISTS" ]; then
        psql -U postgres -h 127.0.0.1 -c "CREATE DATABASE web3signer;"
    fi
  init_02_db.sh: |
    #!/bin/sh
    export PGPASSWORD=postgres
    cd /sql-scripts
    for FILE in *.sql; do
      COMPLETED_FILE="${FILE}.completed"
      if [ ! -f "$COMPLETED_FILE" ]; then
        psql -U postgres -h 127.0.0.1 -d web3signer -f $FILE && touch "$COMPLETED_FILE"
      fi
    done
---
# Source: web3signer/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-web3signer
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    data-path: "/data"
    http-listen-port: 9000
    http-listen-host: 0.0.0.0
    http-host-allowlist: "*"
    eth2.slashing-protection-db-url: "jdbc:postgresql://release-name-slashingprotectiondb/web3signer"
    eth2.slashing-protection-db-username: postgres
    eth2.slashing-protection-db-password: postgres
    eth2.slashing-protection-pruning-enabled: true
---
# Source: web3signer/charts/slashingprotectiondb/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-slashingprotectiondb-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: slashingprotectiondb-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/component: primary
---
# Source: web3signer/charts/slashingprotectiondb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-slashingprotectiondb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: slashingprotectiondb-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/component: primary
---
# Source: web3signer/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-web3signer-headless
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
    - port: 9001
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
---
# Source: web3signer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-web3signer
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
---
# Source: web3signer/charts/slashingprotectiondb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-slashingprotectiondb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slashingprotectiondb
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: slashingprotectiondb-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-slashingprotectiondb-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: slashingprotectiondb
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-slashingprotectiondb
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: slashingprotectiondb
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: slashingprotectiondb-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: slashingprotectiondb
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
        - command:
          - bash
          - -cex
          - |
            cd /sql-scripts
            BASE_URL="https://raw.githubusercontent.com/ConsenSys/web3signer/master/slashing-protection/src/main/resources/migrations/postgresql"
            MIGRATIONS=(
                "V00001__initial.sql"
                "V00002__removeUniqueConstraints.sql"
                "V00003__addLowWatermark.sql"
                "V00004__addGenesisValidatorsRoot.sql"
                "V00005__xnor_source_target_low_watermark.sql"
                "V00006__signed_data_indexes.sql"
                "V00007__add_db_version.sql"
                "V00008__signed_data_unique_constraints.sql"
                "V00009__upsert_validators.sql"
                "V00010__validator_enabled_status.sql"
                "V00011__bigint_indexes.sql"
                "V00012__add_highwatermark_metadata.sql"
            )
            for MIGRATION in "${MIGRATIONS[@]}"; do
                if [ ! -f "/sql-scripts/$MIGRATION" ]; then
                    wget "$BASE_URL/$MIGRATION"
                fi
            done
          image: bash:latest
          imagePullPolicy: IfNotPresent
          name: init-sql-migration-scripts
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
          - mountPath: /sql-scripts
            name: sql-scripts
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-slashingprotectiondb
                  key: postgres-password
            # Replication
            # Initdb
            - name: POSTGRES_INITSCRIPTS_USERNAME
              value: postgres
            - name: POSTGRES_INITSCRIPTS_PASSWORD
              value: "postgres"
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /sql-scripts
              name: sql-scripts
      volumes:
        - name: custom-init-scripts
          configMap:
            name: release-name-slashingprotectiondb-init-scripts
        - emptyDir: {}
          name: sql-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: web3signer/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-web3signer
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: web3signer
      app.kubernetes.io/instance: release-name
  serviceName: release-name-web3signer-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: web3signer
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/config: 75584bfb4bbfa7d5671e0b52c6675c32ead075f312572141adeed5d30d9d0023
    spec:
      serviceAccountName: release-name-web3signer
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        - name: init-chown-data
          image: "busybox:1.34.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - sh
            - -c
            - >
              chown -R 10001:10001 /data;
          resources:
      
            {}
          volumeMounts:
            - name: storage
              mountPath: "/data"
      containers:
        - name: web3signer
          image: "consensys/web3signer:latest"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -ac
            - >
              /opt/web3signer/bin/web3signer
              --config-file=/data/config.yaml
              eth2
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: metrics
              containerPort: 9001
              protocol: TCP
          securityContext:
            {}
          volumeMounts:
            - name: storage
              mountPath: "/data"
            - name: config
              mountPath: "/data/config.yaml"
              subPath: config.yaml
              readOnly: true
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 120
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: http
          resources:
            {}
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      topologySpreadConstraints:
        []
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config
          configMap:
            name: release-name-web3signer
  volumeClaimTemplates:
  - metadata:
      name: storage
      annotations:
        {}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "1Gi"
      storageClassName:
---
# Source: web3signer/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-web3signer-test-connection"
  labels:
    helm.sh/chart: web3signer-1.0.5
    app.kubernetes.io/name: web3signer
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-web3signer:9000/upcheck']
  restartPolicy: Never
