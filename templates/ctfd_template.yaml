---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-ctfd-ctfd-secrets
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
stringData:
  SECRET_KEY: YxexxB34McqoMeBn8WTk81pqTtMKYZP4
---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-mariadbcreds
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
stringData:
  jdbc: jdbc:sqlserver://release-name-mariadb:3306/ctfd
  jdbc-mariadb: jdbc:mariadb://release-name-mariadb:3306/ctfd
  jdbc-mysql: jdbc:mysql://release-name-mariadb:3306/ctfd
  mariadb-password: PLACEHOLDERPASSWORD
  mariadb-root-password: PLACEHOLDERROOTPASSWORD
  plainhost: release-name-mariadb
  plainporthost: release-name-mariadb:3306
  url: sql://ctfd:PLACEHOLDERPASSWORD@release-name-mariadb:3306/ctfd
  urlnossl: sql://ctfd:PLACEHOLDERPASSWORD@release-name-mariadb:3306/ctfd?sslmode=disable
---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-rediscreds
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
stringData:
  plain: release-name-redis
  plainhost: release-name-redis
  plainhostpass: default:PLACEHOLDERPASSWORD@release-name-redis
  plainporthost: release-name-redis:6379
  redis-password: PLACEHOLDERPASSWORD
  url: redis://default:PLACEHOLDERPASSWORD@release-name-redis:6379/0
---
# Source: ctfd/charts/mariadb/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mariadb-passinit
  namespace: default
  labels:
    app: "mariadb-14.0.6"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "mariadb"
    app.kubernetes.io/version: "11.3.2"
    helm-revision: "1"
    helm.sh/chart: "mariadb-14.0.6"
    release: "release-name"
data:
  passinit.sql: |
    ALTER USER root@'%' IDENTIFIED VIA mysql_native_password USING PASSWORD("PLACEHOLDERROOTPASSWORD");
    ALTER USER ctfd@'%' IDENTIFIED VIA mysql_native_password USING PASSWORD("PLACEHOLDERPASSWORD");
    FLUSH PRIVILEGES;
---
# Source: ctfd/charts/redis/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: default
  labels:
    app: "redis-14.0.5"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "redis"
    app.kubernetes.io/version: "7.2.4"
    helm-revision: "1"
    helm.sh/chart: "redis-14.0.5"
    release: "release-name"
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
# Source: ctfd/charts/mariadb/templates/common.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-mariadb-data
  namespace: default
  labels:
    app: "mariadb-14.0.6"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "mariadb"
    app.kubernetes.io/version: "11.3.2"
    helm-revision: "1"
    helm.sh/chart: "mariadb-14.0.6"
    release: "release-name"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-ctfd-logs
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-ctfd-uploads
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
# Source: ctfd/charts/mariadb/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mariadb
  namespace: default
  labels:
    app: "mariadb-14.0.6"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "mariadb"
    app.kubernetes.io/version: "11.3.2"
    helm-revision: "1"
    helm.sh/chart: "mariadb-14.0.6"
    release: "release-name"
    service.name: "main"
spec:
  type: ClusterIP
  publishNotReadyAddresses: false
  ports:
    - name: main
      port: 3306
      protocol: TCP
      targetPort: 3306
  selector:
    pod.name: main
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
---
# Source: ctfd/charts/redis/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis
  namespace: default
  labels:
    app: "redis-14.0.5"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "redis"
    app.kubernetes.io/version: "7.2.4"
    helm-revision: "1"
    helm.sh/chart: "redis-14.0.5"
    release: "release-name"
    service.name: "main"
spec:
  type: ClusterIP
  publishNotReadyAddresses: false
  ports:
    - name: main
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    pod.name: main
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
# Source: ctfd/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-ctfd
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
    service.name: "main"
spec:
  type: ClusterIP
  publishNotReadyAddresses: false
  ports:
    - name: main
      port: 10613
      protocol: TCP
      targetPort: 8000
  selector:
    pod.name: main
    app.kubernetes.io/name: ctfd
    app.kubernetes.io/instance: release-name
---
# Source: ctfd/charts/mariadb/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mariadb
  namespace: default
  labels:
    app: "mariadb-14.0.6"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "mariadb"
    app.kubernetes.io/version: "11.3.2"
    helm-revision: "1"
    helm.sh/chart: "mariadb-14.0.6"
    release: "release-name"
spec:  
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      pod.name: main
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app: "mariadb-14.0.6"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "mariadb"
        app.kubernetes.io/version: "11.3.2"
        helm-revision: "1"
        helm.sh/chart: "mariadb-14.0.6"
        pod.lifecycle: "permanent"
        pod.name: "main"
        release: "release-name"
      annotations:
        checksum/cnpg: "b7a79f687bb19d52c4f5fca7e1b1ca0e25ad8b8a53d284062a1b786264472d0f"
        checksum/configmaps: "2f70d6807f093247fad96153a9c6c0d57b4aa02789e19be1b9c088c65f4e2d07"
        checksum/mariadb: "09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52"
        checksum/mongodb: "09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52"
        checksum/persistence: "8ffd0e1ed704294dee132aa12aa878607a18e34eb50683c4740e2587a5b9361b"
        checksum/redis: "013343a028cbb3f7e08f4ba7522702dd98e52632c688641074b0b1db3df29894"
        checksum/secrets: "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
        checksum/services: "3c1dd612ec74ee9e0f9d1999416f52f56037e0b49ff3a1234059de4203563ec5"
        checksum/solr: "29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347"
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      runtimeClassName: 
      hostNetwork: false
      hostPID: false
      hostIPC: false
      shareProcessNamespace: false
      enableServiceLinks: false
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/arch: amd64
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels:      
              pod.name: main
              app.kubernetes.io/name: mariadb
              app.kubernetes.io/instance: release-name
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
          - 568
        sysctls: []
      hostUsers: true
      containers:
        - name: release-name-mariadb
          image: bitnami/mariadb:11.3.2@sha256:6cf603083de0c6aef77f0db37466478ab67b9efd7c55e049e4a838cea9bf6534
          imagePullPolicy: IfNotPresent
          tty: false
          stdin: false
          ports:
            - name: main
              containerPort: 3306
              protocol: TCP
              hostPort: null
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
              readOnly: false
            - name: devshm
              mountPath: /dev/shm
              readOnly: false
            - name: passinit
              mountPath: /init/passinit.sql
              readOnly: false
              subPath: passinit.sql
            - name: shared
              mountPath: /shared
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: varlogs
              mountPath: /var/logs
              readOnly: false
            - name: varrun
              mountPath: /var/run
              readOnly: false
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-ec"
                - "until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done"
            initialDelaySeconds: 12
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-ec"
                - "until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done"
            initialDelaySeconds: 10
            failureThreshold: 4
            successThreshold: 2
            timeoutSeconds: 5
            periodSeconds: 12
          startupProbe:
            exec:
              command:
                - "/bin/bash"
                - "-ec"
                - "until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done"
            initialDelaySeconds: 10
            failureThreshold: 60
            successThreshold: 1
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits: 
              cpu: 4000m 
              memory: 8Gi
          securityContext:
            runAsNonRoot: false
            runAsUser: 568
            runAsGroup: 0
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            privileged: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add: []
              drop:
                - ALL
          env:
            - name: "TZ"
              value: "UTC"
            - name: "UMASK"
              value: "0022"
            - name: "UMASK_SET"
              value: "0022"
            - name: "NVIDIA_VISIBLE_DEVICES"
              value: "void"
            - name: "PUID"
              value: "568"
            - name: "USER_ID"
              value: "568"
            - name: "UID"
              value: "568"
            - name: "PGID"
              value: "568"
            - name: "GROUP_ID"
              value: "568"
            - name: "GID"
              value: "568"
            - name: "MARIADB_DATABASE"
              value: "ctfd"
            - name: "MARIADB_EXTRA_FLAGS"
              value: "--init-file=/init/passinit.sql"
            - name: "MARIADB_PASSWORD"
              value: "PLACEHOLDERPASSWORD"
            - name: "MARIADB_ROOT_PASSWORD"
              value: "PLACEHOLDERROOTPASSWORD"
            - name: "MARIADB_USER"
              value: "ctfd"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-mariadb-data
        - name: devshm
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: passinit
          configMap:
            name: release-name-mariadb-passinit
            optional: false
            items:
            - key: passinit.sql
              path: passinit.sql
        - name: shared
          emptyDir: {}
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: varlogs
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: varrun
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
---
# Source: ctfd/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-ctfd
  namespace: default
  labels:
    app: "ctfd-5.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "ctfd"
    app.kubernetes.io/version: "3.7.0"
    helm-revision: "1"
    helm.sh/chart: "ctfd-5.2.0"
    release: "release-name"
spec:  
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      pod.name: main
      app.kubernetes.io/name: ctfd
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app: "ctfd-5.2.0"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "ctfd"
        app.kubernetes.io/version: "3.7.0"
        helm-revision: "1"
        helm.sh/chart: "ctfd-5.2.0"
        pod.lifecycle: "permanent"
        pod.name: "main"
        release: "release-name"
      annotations:
        checksum/cnpg: "ffd338b55cc50a8b366097eec597eeb134dee46563555614453e28233d208d00"
        checksum/configmaps: "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
        checksum/mariadb: "ba3d1d34940ddc4b0e728d51c220cb8d65678f06c9df259830c32a3b871fd167"
        checksum/mongodb: "09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52"
        checksum/persistence: "abe56749ee2bb8081e6f4509bf1787fec4dabf8a8f500e13ea49f36c7d5796dc"
        checksum/redis: "b96e34c0b19e4735fe72bd803949d8d89e41a52e207c88eda8b385e6fc3d9bf6"
        checksum/secrets: "b95027600a039dc3973dde9de0ec4103582fd7eb743aa1e8bbd38b61b30185f4"
        checksum/services: "e91d3d5efecddd921e44e31ba2e55fbf608aaf28a2ae1a069a9033d7925188cd"
        checksum/solr: "29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347"
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      runtimeClassName: 
      hostNetwork: false
      hostPID: false
      hostIPC: false
      shareProcessNamespace: false
      enableServiceLinks: false
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/arch: amd64
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels:      
              pod.name: main
              app.kubernetes.io/name: ctfd
              app.kubernetes.io/instance: release-name
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
          - 568
        sysctls: []
      hostUsers: true
      containers:
        - name: release-name-ctfd
          image: ghcr.io/ctfd/ctfd:3.7.0@sha256:8dcf820b92f25cdb4dee400ca0b88b8ca4396c79b9a801f5b2f9304f2bb056de
          imagePullPolicy: IfNotPresent
          tty: false
          stdin: false
          ports:
            - name: main
              containerPort: 8000
              protocol: TCP
              hostPort: null
          volumeMounts:
            - name: devshm
              mountPath: /dev/shm
              readOnly: false
            - name: logs
              mountPath: /logs
              readOnly: false
            - name: shared
              mountPath: /shared
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: uploads
              mountPath: /uploads
              readOnly: false
            - name: varlogs
              mountPath: /var/logs
              readOnly: false
            - name: varrun
              mountPath: /var/run
              readOnly: false
          livenessProbe:
            httpGet:
              port: 8000
              path: /
              scheme: HTTP
            initialDelaySeconds: 12
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            httpGet:
              port: 8000
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 4
            successThreshold: 2
            timeoutSeconds: 5
            periodSeconds: 12
          startupProbe:
            httpGet:
              port: 8000
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 60
            successThreshold: 1
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits: 
              cpu: 4000m 
              memory: 8Gi
          securityContext:
            runAsNonRoot: true
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add: []
              drop:
                - ALL
          env:
            - name: "TZ"
              value: "UTC"
            - name: "UMASK"
              value: "0022"
            - name: "UMASK_SET"
              value: "0022"
            - name: "NVIDIA_VISIBLE_DEVICES"
              value: "void"
            - name: "S6_READ_ONLY_ROOT"
              value: "1"
            - name: "DATABASE_HOST"
              valueFrom:
                secretKeyRef:
                  key: "plainhost"
                  name: "release-name-mariadbcreds"
            - name: "DATABASE_NAME"
              value: "ctfd"
            - name: "DATABASE_PASSWORD"
              value: "PLACEHOLDERPASSWORD"
            - name: "DATABASE_PORT"
              value: "3306"
            - name: "DATABASE_USER"
              value: "ctfd"
            - name: "LOG_FOLDER"
              value: "/logs"
            - name: "MAILFROM_ADDR"
              value: ""
            - name: "MAIL_PASSWORD"
              value: ""
            - name: "MAIL_PORT"
              value: "587"
            - name: "MAIL_SERVER"
              value: ""
            - name: "MAIL_SSL"
              value: "false"
            - name: "MAIL_TLS"
              value: "false"
            - name: "MAIL_USEAUTH"
              value: "false"
            - name: "MAIL_USERNAME"
              value: ""
            - name: "OAUTH_CLIENT_ID"
              value: ""
            - name: "OAUTH_CLIENT_SECRET"
              value: ""
            - name: "REDIS_URL"
              valueFrom:
                secretKeyRef:
                  key: "url"
                  name: "release-name-rediscreds"
            - name: "REVERSE_PROXY"
              value: "false"
            - name: "SAFE_MODE"
              value: "true"
            - name: "SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  key: "SECRET_KEY"
                  name: "release-name-ctfd-ctfd-secrets"
            - name: "UPLOAD_FOLDER"
              value: "/uploads"
            - name: "UPLOAD_PROVIDER"
              value: "filesystem"
      initContainers:
        - name: release-name-ctfd-system-mariadb-wait
          image: tccr.io/tccr/db-wait-mariadb:v1.1.0@sha256:62858b8191b662716d84840f8d9b3c86654f175686159c5267a1c860d75f398d
          imagePullPolicy: IfNotPresent
          tty: false
          stdin: false
          command:
            - "/bin/sh"
            - "-c"
            - "/bin/bash <<'EOF'\necho \"Executing DB waits...\"\nuntil\n  mysqladmin -uroot -h\"${MARIADB_HOST}\" -p\"${MARIADB_ROOT_PASSWORD}\" ping \\\n  && mysqladmin -uroot -h\"${MARIADB_HOST}\" -p\"${MARIADB_ROOT_PASSWORD}\" status;\n  do sleep 2;\ndone\nEOF"
          volumeMounts:
            - name: devshm
              mountPath: /dev/shm
              readOnly: false
            - name: shared
              mountPath: /shared
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: varlogs
              mountPath: /var/logs
              readOnly: false
            - name: varrun
              mountPath: /var/run
              readOnly: false
          
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits: 
              cpu: 500m 
              memory: 512Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add: []
              drop:
                - ALL
          env:
            - name: "TZ"
              value: "UTC"
            - name: "UMASK"
              value: "0022"
            - name: "UMASK_SET"
              value: "0022"
            - name: "NVIDIA_VISIBLE_DEVICES"
              value: "void"
            - name: "S6_READ_ONLY_ROOT"
              value: "1"
            - name: "MARIADB_HOST"
              valueFrom:
                secretKeyRef:
                  key: "plainhost"
                  name: "release-name-mariadbcreds"
            - name: "MARIADB_ROOT_PASSWORD"
              value: "PLACEHOLDERROOTPASSWORD"
            
        - name: release-name-ctfd-system-redis-wait
          image: tccr.io/tccr/db-wait-redis:v1.1.0@sha256:e9412891c9b6c96f11143cd88f5d19df352bf7b5570f1825f67b5e1a2ddec176
          imagePullPolicy: IfNotPresent
          tty: false
          stdin: false
          command:
            - "/bin/sh"
            - "-c"
            - "/bin/bash <<'EOF'\necho \"Executing DB waits...\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\";\nexport LIVE=false;\nuntil \"$LIVE\";\ndo\n  response=$(\n      timeout -s 3 2 \\\n      redis-cli \\\n        -h \"$REDIS_HOST\" \\\n        -p \"$REDIS_PORT\" \\\n        ping\n    )\n  if [ \"$response\" == \"PONG\" ] || [ \"$response\" == \"LOADING Redis is loading the dataset in memory\" ]; then\n    LIVE=true\n    echo \"$response\"\n    echo \"Redis Responded, ending initcontainer and starting main container(s)...\"\n  else\n    echo \"$response\"\n    echo \"Redis not responding... Sleeping for 10 sec...\"\n    sleep 10\n  fi;\ndone\nEOF"
          volumeMounts:
            - name: devshm
              mountPath: /dev/shm
              readOnly: false
            - name: shared
              mountPath: /shared
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: varlogs
              mountPath: /var/logs
              readOnly: false
            - name: varrun
              mountPath: /var/run
              readOnly: false
          
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits: 
              cpu: 500m 
              memory: 512Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add: []
              drop:
                - ALL
          env:
            - name: "TZ"
              value: "UTC"
            - name: "UMASK"
              value: "0022"
            - name: "UMASK_SET"
              value: "0022"
            - name: "NVIDIA_VISIBLE_DEVICES"
              value: "void"
            - name: "S6_READ_ONLY_ROOT"
              value: "1"
            - name: "REDIS_HOST"
              valueFrom:
                secretKeyRef:
                  key: "plainhost"
                  name: "release-name-rediscreds"
            - name: "REDIS_PASSWORD"
              value: "PLACEHOLDERPASSWORD"
            - name: "REDIS_PORT"
              value: "6379"
      volumes:
        - name: devshm
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: logs
          persistentVolumeClaim:
            claimName: release-name-ctfd-logs
        - name: shared
          emptyDir: {}
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: uploads
          persistentVolumeClaim:
            claimName: release-name-ctfd-uploads
        - name: varlogs
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: varrun
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
---
# Source: ctfd/charts/redis/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis
  namespace: default
  labels:
    app: "redis-14.0.5"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "redis"
    app.kubernetes.io/version: "7.2.4"
    helm-revision: "1"
    helm.sh/chart: "redis-14.0.5"
    release: "release-name"
spec:  
  replicas: 1
  revisionHistoryLimit: 3
  serviceName: release-name-redis
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      pod.name: main
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app: "redis-14.0.5"
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "redis"
        app.kubernetes.io/version: "7.2.4"
        helm-revision: "1"
        helm.sh/chart: "redis-14.0.5"
        pod.lifecycle: "permanent"
        pod.name: "main"
        release: "release-name"
      annotations:
        checksum/cnpg: "b7a79f687bb19d52c4f5fca7e1b1ca0e25ad8b8a53d284062a1b786264472d0f"
        checksum/configmaps: "e4ff2990e1b108efb5fc391e633d1bb258a621411ef64149c58626f3a7451ff6"
        checksum/mariadb: "09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52"
        checksum/mongodb: "09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52"
        checksum/persistence: "596e0b956bd4bdfb4d70ff2e7dde67dc31cb5475cc00cf96d97522d423c74376"
        checksum/redis: "013343a028cbb3f7e08f4ba7522702dd98e52632c688641074b0b1db3df29894"
        checksum/secrets: "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
        checksum/services: "1fbe77c7cddc2e9997579990c10c46e0224ee9bc92911122de33093d0550ad9f"
        checksum/solr: "29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347"
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      runtimeClassName: 
      hostNetwork: false
      hostPID: false
      hostIPC: false
      shareProcessNamespace: false
      enableServiceLinks: false
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/arch: amd64
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels:      
              pod.name: main
              app.kubernetes.io/name: redis
              app.kubernetes.io/instance: release-name
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
          - 568
        sysctls: []
      hostUsers: true
      containers:
        - name: release-name-redis
          image: bitnami/redis:7.2.4@sha256:c33cfe5511a443bc0a986f25c411e152b29244bdf9b676b7d4c56992467b857c
          imagePullPolicy: IfNotPresent
          tty: false
          stdin: false
          ports:
            - name: main
              containerPort: 6379
              protocol: TCP
              hostPort: null
          volumeMounts:
            - name: devshm
              mountPath: /dev/shm
              readOnly: false
            - name: redis-health
              mountPath: /health
              readOnly: false
            - name: shared
              mountPath: /shared
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: varlogs
              mountPath: /var/logs
              readOnly: false
            - name: varrun
              mountPath: /var/run
              readOnly: false
          livenessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "/health/ping_liveness_local.sh 2"
            initialDelaySeconds: 12
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "/health/ping_readiness_local.sh 2"
            initialDelaySeconds: 10
            failureThreshold: 4
            successThreshold: 2
            timeoutSeconds: 5
            periodSeconds: 12
          startupProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "/health/ping_readiness_local.sh 2"
            initialDelaySeconds: 10
            failureThreshold: 60
            successThreshold: 1
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits: 
              cpu: 4000m 
              memory: 8Gi
          securityContext:
            runAsNonRoot: false
            runAsUser: 568
            runAsGroup: 0
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            privileged: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add: []
              drop:
                - ALL
          env:
            - name: "TZ"
              value: "UTC"
            - name: "UMASK"
              value: "0022"
            - name: "UMASK_SET"
              value: "0022"
            - name: "NVIDIA_VISIBLE_DEVICES"
              value: "void"
            - name: "PUID"
              value: "568"
            - name: "USER_ID"
              value: "568"
            - name: "UID"
              value: "568"
            - name: "PGID"
              value: "568"
            - name: "GROUP_ID"
              value: "568"
            - name: "GID"
              value: "568"
            - name: "ALLOW_EMPTY_PASSWORD"
              value: "yes"
            - name: "REDIS_PASSWORD"
              value: "PLACEHOLDERPASSWORD"
            - name: "REDIS_PORT"
              value: "6379"
            - name: "REDIS_REPLICATION_MODE"
              value: "master"
      volumes:
        - name: devshm
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: redis-health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
            optional: false
            items:
            - key: ping_readiness_local.sh
              path: ping_readiness_local.sh
            - key: ping_liveness_local.sh
              path: ping_liveness_local.sh
            - key: ping_readiness_master.sh
              path: ping_readiness_master.sh
            - key: ping_liveness_master.sh
              path: ping_liveness_master.sh
            - key: ping_liveness_local_and_master.sh
              path: ping_liveness_local_and_master.sh
            - key: ping_readiness_local_and_master.sh
              path: ping_readiness_local_and_master.sh
        - name: shared
          emptyDir: {}
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: varlogs
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
        - name: varrun
          emptyDir:
            medium: Memory
            sizeLimit: 8Gi
