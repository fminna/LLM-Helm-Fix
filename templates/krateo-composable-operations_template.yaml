---
# Source: krateo-composable-operations/charts/core-provider/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: core-provider
---
# Source: krateo-composable-operations/charts/eventrouter/templates/base.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-eventrouter
  labels:
    helm.sh/chart: eventrouter-0.3.1
    app.kubernetes.io/name: eventrouter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: krateo-composable-operations/charts/patch-provider/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: patch-provider
---
# Source: krateo-composable-operations/charts/core-provider/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: core-provider
rules:
- apiGroups:
  - core.krateo.io
  resources:
  - definitions
  - definitions/status
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
# Source: krateo-composable-operations/charts/eventrouter/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-eventrouter
  labels:
        helm.sh/chart: eventrouter-0.3.1
        app.kubernetes.io/name: eventrouter
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.3.1"
        app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "watch", "list", "patch"]
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["get", "list"]
  - nonResourceURLs: ["*"]
    verbs:  ["get", "list"]
---
# Source: krateo-composable-operations/charts/patch-provider/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: patch-provider
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
---
# Source: krateo-composable-operations/charts/core-provider/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: core-provider
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name:  core-provider
subjects:
- kind: ServiceAccount
  name: core-provider
  namespace: default
---
# Source: krateo-composable-operations/charts/eventrouter/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-eventrouter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-eventrouter
subjects:
- kind: ServiceAccount
  name: release-name-eventrouter
  namespace: default
---
# Source: krateo-composable-operations/charts/patch-provider/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: patch-provider
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name:  patch-provider
subjects:
- kind: ServiceAccount
  name: patch-provider
  namespace: default
---
# Source: krateo-composable-operations/charts/core-provider/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-provider
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: core-provider
      app.kubernetes.io/instance: release-name
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      name: core-provider
      namespace: default
      labels:
        app.kubernetes.io/name: core-provider
        app.kubernetes.io/instance: release-name
    spec:
      containers:
      - name: core-provider
        image: ghcr.io/krateoplatformops/core-provider:0.10.2
        imagePullPolicy: IfNotPresent
        env:
          - name: CORE_PROVIDER_DEBUG
            value: "true"
          - name: CDC_IMAGE_TAG
            value: 0.5.2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
        resources: {}
        volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      serviceAccount: core-provider
      serviceAccountName: core-provider
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: tmp-dir
---
# Source: krateo-composable-operations/charts/eventrouter/templates/base.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  eventrouter
  namespace: default
  labels:
    helm.sh/chart: eventrouter-0.3.1
    app.kubernetes.io/name: eventrouter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: eventrouter
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        helm.sh/chart: eventrouter-0.3.1
        app.kubernetes.io/name: eventrouter
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.3.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      terminationGracePeriodSeconds: 60
      serviceAccountName: release-name-eventrouter
      securityContext:
        {}
      containers:
        - name: eventrouter
          securityContext:
            {}
          image: "ghcr.io/krateoplatformops/eventrouter:0.3.1"
          imagePullPolicy: IfNotPresent
          ports:
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          env:
            - name: EVENT_ROUTER_INSECURE
              value: "false"
            - name: EVENT_ROUTER_DEBUG
              value: "false"
---
# Source: krateo-composable-operations/charts/patch-provider/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: patch-provider
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: patch-provider
      app.kubernetes.io/instance: release-name
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      name: patch-provider
      namespace: default
      labels:
        app.kubernetes.io/name: patch-provider
        app.kubernetes.io/instance: release-name
    spec:
      containers:
      - name: patch-provider
        image: ghcr.io/krateoplatformops/patch-provider:0.1.3
        imagePullPolicy: IfNotPresent
        env:
        - name: PATCH_PROVIDER_DEBUG
          value: "true"
        - name: PATCH_PROVIDER_POLL_INTERVAL
          value: "3m"
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 2000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccount: patch-provider
      serviceAccountName: patch-provider
      terminationGracePeriodSeconds: 30
