---
# Source: irods-csi-driver/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: irods-csi-controller-sa
  namespace: default
  labels:
    helm.sh/chart: irods-csi-driver-0.10.1
    app.kubernetes.io/name: irods-csi-driver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: irods-csi-driver/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-irods-csi-driver-global-secret
  namespace: default
type: Opaque
stringData: {}
---
# Source: irods-csi-driver/templates/serviceaccount.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: irods-csi-external-provisioner-role
  labels:
    helm.sh/chart: irods-csi-driver-0.10.1
    app.kubernetes.io/name: irods-csi-driver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
# Source: irods-csi-driver/templates/serviceaccount.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: irods-csi-external-provisioner-binding
  labels:
    helm.sh/chart: irods-csi-driver-0.10.1
    app.kubernetes.io/name: irods-csi-driver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: irods-csi-controller-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: irods-csi-external-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: irods-csi-driver/templates/node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: release-name-irods-csi-driver-node
  namespace: default
  labels:
    helm.sh/chart: irods-csi-driver-0.10.1
    app.kubernetes.io/name: irods-csi-driver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: irods-csi-driver
      app.kubernetes.io/instance: release-name-node
  template:
    metadata:
      labels:
        app.kubernetes.io/name: irods-csi-driver
        app.kubernetes.io/instance: release-name-node
    spec:
      securityContext:
        {}
      hostNetwork: true
      priorityClassName: system-node-critical
      tolerations:
        - operator: Exists
      containers:
        - name: irods-plugin
          securityContext:
            privileged: true
          image: "cyverse/irods-csi-driver:v0.10.1"
          imagePullPolicy: Always
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --nodeid=$(NODE_ID)
            - --secretpath=$(SECRET_VOLUME_PATH)
            - --poolservice=$(IRODSFS_POOL_ENDPOINT)
            - --prometheus_exporter_port=$(PROMETHEUS_EXPORTER_PORT)
            - --storagepath=$(STORAGE_VOLUME_PATH)
            - --logtostderr
            - --v=5
          env:
            - name: CSI_ENDPOINT
              value: unix:/csi/csi.sock
            - name: IRODSFS_POOL_ENDPOINT
              value: unix:/csi/pool.sock
            - name: SECRET_VOLUME_PATH
              value: /secrets
            - name: STORAGE_VOLUME_PATH
              value: /storage
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PROMETHEUS_EXPORTER_PORT
              value: "12023"
          volumeMounts:
            - name: mountpoint-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
            - name: plugin-dir
              mountPath: /var/lib/kubelet/plugins
              mountPropagation: Bidirectional
            - name: socket-dir
              mountPath: /csi
            - name: secret-volume
              mountPath: /secrets
            - name: storage-volume
              mountPath: /storage
          ports:
            - containerPort: 9810
              name: healthz
              protocol: TCP
            - containerPort: 12023
              name: prom-metrics
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
            failureThreshold: 5
          resources:
            {}
        - name: irods-pool
          securityContext:
            {}
          image: "cyverse/irods-csi-driver-pool:v0.10.1"
          imagePullPolicy: Always
          args:
            - --data_root=$(IRODSFS_POOL_DATA)
            - --endpoint=$(IRODSFS_POOL_ENDPOINT)
            - --prometheus_exporter_port=$(PROMETHEUS_EXPORTER_PORT)
            - --cache_size_max=32212254720
          env:
            - name: IRODSFS_POOL_DATA
              value: /irodsfs_pool_data
            - name: IRODSFS_POOL_ENDPOINT
              value: unix:///csi/pool.sock
            - name: PROMETHEUS_EXPORTER_PORT
              value: "12022"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          ports:
            - containerPort: 12022
              name: prom-metrics
              protocol: TCP
          resources:
            {}
        - name: csi-driver-registrar
          securityContext:
            {}
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.9.1"
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
            - --v=5
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/irods.csi.cyverse.org/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources:
            {}
        - name: liveness-probe
          imagePullPolicy: IfNotPresent
          image: "registry.k8s.io/sig-storage/livenessprobe:v2.11.0"
          args:
            - --csi-address=/csi/csi.sock
            - --health-port=9810
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
      volumes:
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/irods.csi.cyverse.org
            type: DirectoryOrCreate
        - name: secret-volume
          secret:
            secretName: release-name-irods-csi-driver-global-secret
        - name: storage-volume
          hostPath:
            path: /var/lib/kubelet/plugins/irods.csi.cyverse.org/storage
            type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: irods-csi-driver/templates/controller.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: release-name-irods-csi-driver-controller
  namespace: default
  labels:
    helm.sh/chart: irods-csi-driver-0.10.1
    app.kubernetes.io/name: irods-csi-driver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: irods-csi-driver
      app.kubernetes.io/instance: release-name-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: irods-csi-driver
        app.kubernetes.io/instance: release-name-controller
    spec:
      serviceAccount: irods-csi-controller-sa
      securityContext:
        {}
      priorityClassName: system-cluster-critical
      tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
      containers:
        - name: irods-plugin
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
            privileged: true
          image: "cyverse/irods-csi-driver:v0.10.1"
          imagePullPolicy: Always
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --nodeid=$(NODE_ID)
            - --secretpath=$(SECRET_VOLUME_PATH)
            - --storagepath=$(STORAGE_VOLUME_PATH)
            - --logtostderr
            - --v=5
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: SECRET_VOLUME_PATH
              value: /secrets
            - name: STORAGE_VOLUME_PATH
              value: /storage
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
            - name: secret-volume
              mountPath: /secrets
            - name: storage-volume
              mountPath: /storage
          resources:
            {}
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v3.1.0"
          args:
            - --csi-address=$(ADDRESS)
            - --timeout=5m
            - --v=5
            - --leader-election
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: plugin-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
          resources:
            {}

      volumes:
        - name: plugin-dir
          emptyDir: {}
        - name: secret-volume
          secret:
            secretName: release-name-irods-csi-driver-global-secret
        - name: storage-volume
          hostPath:
            path: /var/lib/kubelet/plugins/irods.csi.cyverse.org/storage
            type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: irods-csi-driver/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: irods.csi.cyverse.org
spec:
  attachRequired: false
