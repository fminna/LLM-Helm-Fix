---
# Source: sonarqube/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.8.3"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  postgres-password:  "c29uYXJQYXNz"
---
# Source: sonarqube/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-config
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
data:
---
# Source: sonarqube/templates/install-plugins.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-install-plugins
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
data:
  install_plugins.sh: |-
    cd /opt/sonarqube/extensions/plugins
---
# Source: sonarqube/templates/startup-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-startup
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
data:
  startup.sh: |-
    #! /bin/sh
    if [ -e /tmp/conf/sonar.properties ]; then
      cp /tmp/conf/sonar.properties /opt/sonarqube/conf/sonar.properties
    fi
    /opt/sonarqube/bin/run.sh
---
# Source: sonarqube/templates/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-tests
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
data:
  run.sh: |-
    @test "Testing Sonarqube UI is accessible" {
      curl --connect-timeout 5 --retry 12 --retry-delay 1 --retry-max-time 60 release-name-sonarqube:9000/sessions/new
    }
---
# Source: sonarqube/charts/postgresql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.8.3"
    release: "release-name"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: sonarqube/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.8.3"
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: release-name-postgresql
---
# Source: sonarqube/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
  annotations:
spec:
  type: LoadBalancer
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: sonarqube
  selector:
    app: sonarqube
    release: release-name
  loadBalancerSourceRanges: [0.0.0.0/0]
---
# Source: sonarqube/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-postgresql
  labels:
    app: release-name-postgresql
    chart: "postgresql-0.8.3"
    release: "release-name"
    heritage: "Helm"
spec:
  template:
    metadata:
      labels:
        app: release-name-postgresql
    spec:
      containers:
      - name: release-name-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        env:
        - name: POSTGRES_USER
          value: "sonarUser"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "sonarUser"
        - name: POSTGRES_DB
          value: "sonarDB"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: release-name-postgresql
---
# Source: sonarqube/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
        release: release-name
    spec:
      containers:
        - name: sonarqube
          image: "sonarqube:6.7.6-community"
          imagePullPolicy: 
          ports:
            - containerPort: 9000
          env:
            - name: SONARQUBE_JDBC_USERNAME
              value: "sonarUser"
            - name: SONARQUBE_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: SONARQUBE_JDBC_URL
              value: "jdbc:postgresql://release-name-postgresql:5432/sonarDB"
          livenessProbe:
            httpGet:
              path: /sessions/new
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /sessions/new
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
            failureThreshold: 6
          volumeMounts:
            - mountPath: /opt/sonarqube/conf
              name: sonarqube
              subPath: conf
            - mountPath: /tmp-script/
              name: startup
            - mountPath: /opt/sonarqube/data
              name: sonarqube
              subPath: data
            - mountPath: /opt/sonarqube/extensions
              name: sonarqube
              subPath: extensions
          resources:
            {}
      volumes:
      - name: install-plugins
        configMap:
          name: release-name-sonarqube-install-plugins
          items:
            - key: install_plugins.sh
              path: install_plugins.sh
      - name: startup
        configMap:
          name: release-name-sonarqube-startup
          items:
            - key: startup.sh
              path: startup.sh
      - name: sonarqube
        emptyDir: {}
---
# Source: sonarqube/templates/sonarqube-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-ui-test-7z5zs"
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: sonarqube
    chart: sonarqube-0.10.3
    release: release-name
    heritage: Helm
spec:
  initContainers:
    - name: "test-framework"
      image: "dduportal/bats:0.4.0"
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: release-name-ui-test
      image: sonarqube:6.7.6-community
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: release-name-sonarqube-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
