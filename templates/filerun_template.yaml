---
# Source: filerun/charts/mariadb/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mariadb-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.11.2
    helm-revision: "1"
    helm.sh/chart: mariadb-5.0.35
stringData:
  mariadb-password: 'testpass'
  mariadb-root-password: 'testroot'
---
# Source: filerun/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: filerun-8.0.0
    app.kubernetes.io/name: filerun
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  name: mariadbcreds
data:
  mariadb-password: "dVpkU2dPdnZTTHAxanRXa243dVRzWTNlU001MGRScWJpUGlXSFIySzM1Qnh5bnZIRDI="
  mariadb-root-password: "QXdyNkszSG44SVRMTnhzWHI3ZWMwQ0c5Z0NwSDA0ME1pM3BhNlBXNEMycXlVS3o3akM="
  url: "c3FsOi8vZmlsZXJ1bjp1WmRTZ092dlNMcDFqdFdrbjd1VHNZM2VTTTUwZFJxYmlQaVdIUjJLMzVCeHludkhEMkByZWxlYXNlLW5hbWUtbWFyaWFkYjozMzA2L2ZpbGVydW4="
  urlnossl: "c3FsOi8vZmlsZXJ1bjp1WmRTZ092dlNMcDFqdFdrbjd1VHNZM2VTTTUwZFJxYmlQaVdIUjJLMzVCeHludkhEMkByZWxlYXNlLW5hbWUtbWFyaWFkYjozMzA2L2ZpbGVydW4/c3NsbW9kZT1kaXNhYmxl"
  plainporthost: "cmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNg=="
  plainhost: "cmVsZWFzZS1uYW1lLW1hcmlhZGI="
  jdbc: "amRiYzpzcWxzZXJ2ZXI6Ly9yZWxlYXNlLW5hbWUtbWFyaWFkYjozMzA2L2ZpbGVydW4="
  jdbc-mysql: "amRiYzpteXNxbDovL3JlbGVhc2UtbmFtZS1tYXJpYWRiOjMzMDYvZmlsZXJ1bg=="
  jdbc-mariadb: "amRiYzptYXJpYWRiOi8vcmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNi9maWxlcnVu"
type: Opaque
---
# Source: filerun/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-filerun-config
  labels:
    helm.sh/chart: filerun-8.0.0
    app.kubernetes.io/name: filerun
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: filerun/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-filerun-userfile
  labels:
    helm.sh/chart: filerun-8.0.0
    app.kubernetes.io/name: filerun
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: filerun/charts/mariadb/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mariadb
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.11.2
    helm-revision: "1"
    helm.sh/chart: mariadb-5.0.35
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
---
# Source: filerun/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-filerun
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: filerun
    app.kubernetes.io/version: latest
    helm-revision: "1"
    helm.sh/chart: filerun-8.0.0
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 10199
    targetPort: 80
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: filerun
    app.kubernetes.io/instance: release-name
---
# Source: filerun/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-filerun
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: filerun
    app.kubernetes.io/version: latest
    helm-revision: "1"
    helm.sh/chart: filerun-8.0.0
  annotations:
    rollme: tJ7yM
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: filerun
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        
      labels:
        app.kubernetes.io/name: filerun
        app.kubernetes.io/instance: release-name
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 0
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
        - name: db-wait
          image: tccr.io/truecharts/ubuntu:jammy-20221101@sha256:4b9475e08c5180d4e7417dc6a18a26dcce7691e4311e5353dbb952645c5ff43f
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          env:
            - name: MARIADB_HOST
              valueFrom:
                secretKeyRef:
                  name: mariadbcreds
                  key: plainhost
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadbcreds
                  key: mariadb-root-password
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Executing DB waits..."
              until
                mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" ping \
                && mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" status;
                do sleep 2;
              done
              EOF
      containers:
        - name: release-name-filerun
          image: tccr.io/truecharts/filerun:latest@sha256:8d0fb96cc91db060d912a3986dbecc0275f2e5d600b7731e7320e20e11e90f8b
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
        
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "APACHE_RUN_GROUP"
              value: "apps"
            - name: "APACHE_RUN_GROUP_ID"
              value: "568"
            - name: "APACHE_RUN_USER"
              value: "apps"
            - name: "APACHE_RUN_USER_ID"
              value: "568"
            - name: "FR_DB_HOST"
              valueFrom:
                secretKeyRef:
                  key: plainporthost
                  name: mariadbcreds
            - name: "FR_DB_NAME"
              value: "filerun"
            - name: "FR_DB_PASS"
              valueFrom:
                secretKeyRef:
                  key: mariadb-password
                  name: mariadbcreds
            - name: "FR_DB_PORT"
              value: "3306"
            - name: "FR_DB_USER"
              value: "filerun"
          envFrom:
          ports:
            - name: main
              containerPort: 80
              protocol: TCP
          volumeMounts:
            
            - mountPath: /var/www/html
              name: config
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /user-files
              name: userfile
            - mountPath: /var/logs
              name: varlogs
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: release-name-filerun-config
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: userfile
          persistentVolumeClaim:
            claimName: release-name-filerun-userfile
        - name: varlogs
          emptyDir:
            {}
---
# Source: filerun/charts/mariadb/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mariadb
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.11.2
    helm-revision: "1"
    helm.sh/chart: mariadb-5.0.35
  annotations:
    rollme: M4AXG
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: release-name
  serviceName: release-name-mariadb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/instance: release-name
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
      containers:
        - name: release-name-mariadb
          image: tccr.io/truecharts/mariadb:10.11.2@sha256:fc01102eef1de92155b5097636ef738700c8bef1735f52a397b1505cbf455c0f
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
        
          env:
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "MARIADB_DATABASE"
              value: "filerun"
            - name: "MARIADB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: mariadb-password
                  name: 'mariadbcreds'
            - name: "MARIADB_ROOT_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: mariadb-root-password
                  name: 'mariadbcreds'
            - name: "MARIADB_USER"
              value: "filerun"
          envFrom:
          ports:
            - name: main
              containerPort: 3306
              protocol: TCP
          volumeMounts:
            
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/mariadb
              name: data
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "999Gi"
---
# Source: filerun/templates/common.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-filerun-manifests
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: filerun/templates/common.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-filerun-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups:  ["*"]
    resources:  ["*"]
    verbs:  ["*"]
---
# Source: filerun/templates/common.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-filerun-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-filerun-manifests
subjects:
  - kind: ServiceAccount
    name: release-name-filerun-manifests
    namespace: default
---
# Source: filerun/templates/common.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: release-name-filerun-manifests
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: release-name-filerun-manifests
      containers:
        - name: release-name-filerun-manifests
          image: tccr.io/truecharts/kubectl:v1.26.0@sha256:6d6e0e50f28b961ed1c1c6a9c140553238641591fbdc9ac7c1a348636f78c552
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/sh <<'EOF'
              echo "installing manifests..."
              kubectl apply --server-side --force-conflicts -k https://github.com/truecharts/manifests/manifests  || echo "Manifest application failed..."
              EOF
          volumeMounts:
            - name: release-name-filerun-manifests-temp
              mountPath: /tmp
      restartPolicy: Never
      volumes:
        - name: release-name-filerun-manifests-temp
          emptyDir: {}
