---
# Source: semantic-translation/templates/semtrans/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-semantic-translation-semtrans-headless
  namespace: "default"
  labels:
    helm.sh/chart: semantic-translation-1.0.1
    app.kubernetes.io/name: semantic-translation
    app.kubernetes.io/instance: release-name
    enabler: semantic-translation
    app.kubernetes.io/component: semtrans
    isMainInterface: "yes"
    tier: external
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: semantic-translation
    app.kubernetes.io/instance: release-name
    enabler: semantic-translation
    app.kubernetes.io/component: semtrans
    isMainInterface: "yes"
    tier: external
---
# Source: semantic-translation/templates/semtrans/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-semantic-translation-semtrans
  namespace: "default"
  labels:
    helm.sh/chart: semantic-translation-1.0.1
    app.kubernetes.io/name: semantic-translation
    app.kubernetes.io/instance: release-name
    enabler: semantic-translation
    app.kubernetes.io/component: semtrans
    isMainInterface: "yes"
    tier: external
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: semantic-translation
    app.kubernetes.io/instance: release-name
    enabler: semantic-translation
    app.kubernetes.io/component: semtrans
    isMainInterface: "yes"
    tier: external
---
# Source: semantic-translation/templates/semtrans/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-semantic-translation-semtrans
  namespace: "default"
  labels:
    helm.sh/chart: semantic-translation-1.0.1
    app.kubernetes.io/name: semantic-translation
    app.kubernetes.io/instance: release-name
    enabler: semantic-translation
    app.kubernetes.io/component: semtrans
    isMainInterface: "yes"
    tier: external
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-semantic-translation-semtrans-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: semantic-translation
      app.kubernetes.io/instance: release-name
      enabler: semantic-translation
      app.kubernetes.io/component: semtrans
      isMainInterface: "yes"
      tier: external
  template:
    metadata:
      labels:
        helm.sh/chart: semantic-translation-1.0.1
        app.kubernetes.io/name: semantic-translation
        app.kubernetes.io/instance: release-name
        enabler: semantic-translation
        app.kubernetes.io/component: semtrans
        isMainInterface: "yes"
        tier: external
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: semtrans
          securityContext:
            {}
          image: "assistiot/semantic_translation:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          env:
            - name: IPSM_MQTT_SRC_HOST
              value: "host.docker.internal"
            - name: IPSM_MQTT_SRC_PORT
              value: "1883"
            - name: IPSM_MQTT_TRG_HOST
              value: "host.docker.internal"
            - name: IPSM_MQTT_TRG_PORT
              value: "1883"
            - name: IPSM_KAFKA_HOST
              value: "host.docker.internal"
            - name: IPSM_KAFKA_PORT
              value: "29092"
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Mi"
