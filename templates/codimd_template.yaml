---
# Source: codimd/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "azk5TUhETDVIVA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: codimd/templates/auth-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-codimd-auth-env
stringData:
  CMD_EMAIL: "true"
  CMD_ALLOW_EMAIL_REGISTER: "true"
---
# Source: codimd/templates/db-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-codimd-db-secret
stringData:
  
  connection: "postgres://codimd:changeme@release-name-postgresql/codimd"
---
# Source: codimd/templates/session-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-codimd-session
  labels:
    app.kubernetes.io/component: sessionSecret
    
    app.kubernetes.io/name: codimd
    helm.sh/chart: codimd-0.1.12
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.4.3
stringData:
  CMD_SESSION_SECRET: "changeit"
---
# Source: codimd/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-codimd
  labels:
    app.kubernetes.io/component: pvc
    app.kubernetes.io/name: codimd
    helm.sh/chart: codimd-0.1.12
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.4.3
spec:
  accessModes:
    
    - "ReadWriteOnce"
    
  volumeMode: Filesystem
  resources:
    requests:
      storage: "10Gi"
  storageClassName: ""
---
# Source: codimd/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: codimd/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: codimd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-codimd
  labels:
    app.kubernetes.io/component: Service
    
    app.kubernetes.io/name: codimd
    helm.sh/chart: codimd-0.1.12
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.4.3
  
spec:
  type: LoadBalancer
  
  
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: codimd
    helm.sh/chart: codimd-0.1.12
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.4.3
  ports:
    - port: 80
      targetPort: 3000
---
# Source: codimd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-codimd
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: codimd
    helm.sh/chart: codimd-0.1.12
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.4.3
spec:
  replicas: 1
  strategy:
    
    type: Recreate
    
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: codimd
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      name: release-name-codimd
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/name: codimd
        helm.sh/chart: codimd-0.1.12
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 2.4.3
      annotations:
        checksum/db-secret: "aa0c62a029f9177d871a3764789a94bb98ce3806114afcf81b1fea34335f74ba"
        checksum/auth-secret: "5ea527c1873400e78d4d5dfcdf109cc8bd41fae16ea315306f416352af95c959"
        
        checksum/session-secret: "ce02174277f1c00ab350d3563719bab5fd90da5193850664c1fc031394c20852"
        
        
        
    spec:
      
      securityContext:
        
        fsGroup: 1500
        runAsGroup: 1500
        runAsNonRoot: true
        runAsUser: 1500
      
      
      
      
      
      containers:
        - name: codimd
          image: phntom/codimd:2.4.3@sha256:1b9aafbb62e6713e6a39b5a54d2d93253ab6f0f39bb3b63d44295460a092cca0
          imagePullPolicy: "IfNotPresent"
          env:
            
            - name: CMD_URL_ADDPORT
              value: "false"
            - name: CMD_PROTOCOL_USESSL
              value: "false"
            - name: CMD_USECDN
              value: "false"
            - name: CMD_DB_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-codimd-db-secret
                  key: connection
            - name: CMD_SESSION_LIFE
              value: "1209600000"
            - name: CMD_HSTS_ENABLE
              value: "true"
            - name: CMD_HSTS_MAX_AGE
              value: "31536000"
            - name: CMD_HSTS_INCLUDE_SUBDOMAINS
              value: "false"
            - name: CMD_HSTS_PRELOAD
              value: "true"
            - name: CMD_CSP_ENABLE
              value: "true"
            
            
            - name: CMD_ALLOW_GRAVATAR
              value: "true"
            - name: CMD_RESPONSE_MAX_LAG
              value: "70"
            - name: CMD_IMAGE_UPLOAD_TYPE
              value: "filesystem"
            - name: CMD_ALLOW_FREEURL
              value: "false"
            - name: CMD_FORBIDDEN_NOTE_IDS
              value: "robots.txt,favicon.ico,api"
            - name: CMD_DEFAULT_PERMISSION
              value: "editable"
            - name: CMD_ALLOW_ANONYMOUS_EDITS
              value: "true"
            - name: CMD_ALLOW_ANONYMOUS_VIEWS
              value: "true"
            - name: CMD_ALLOW_PDF_EXPORT
              value: "false"
            
            - name: CMD_DEFAULT_USE_HARD_BREAK
              value: "true"
            - name: CMD_LINKIFY_HEADER_STYLE
              value: "keep-case"
            - name: CMD_AUTO_VERSION_CHECK
              value: "true"
          
          envFrom:
            - secretRef:
                name: release-name-codimd-auth-env
            
            - secretRef:
                name: release-name-codimd-session
            
            
          ports:
            - name: http
              containerPort: 3000
          
          volumeMounts:
            - mountPath: /home/hackmd/app/public/uploads
              name: image-store
          
          readinessProbe:
            httpGet:
              port: 3000
              path: /status
            initialDelaySeconds: 3
            failureThreshold: 2
            successThreshold: 3
            timeoutSeconds: 2
            periodSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
      restartPolicy: Always
      
      volumes:
        - name: image-store
          persistentVolumeClaim:
            claimName: release-name-codimd
---
# Source: codimd/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:11-debian-11-r46
          imagePullPolicy: "IfNotPresent"
          resources:
            limits: {}
            requests: {}
          command:
            - /bin/sh
            - -ec
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs -r chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.0.0-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
