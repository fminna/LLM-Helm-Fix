---
# Source: sk8l/templates/Namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: 
  labels:
    {}
---
# Source: sk8l/templates/NetworkPolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: 
  name: sk8l-default-deny
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-api
  ingress: []
---
# Source: sk8l/templates/NetworkPolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: 
  name: sk8l-egress-allow-internal-only
spec:
  policyTypes:
  - Egress
  podSelector: {}
  egress:
  - to:
    - namespaceSelector: {}
---
# Source: sk8l/templates/NetworkPolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: 
  name: sk8l-api-allow-apiserver
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-api
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/8
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/8
---
# Source: sk8l/templates/NetworkPolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: 
  name: sk8l-api-ui
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-api
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/pod: sk8l-ui
      ports:
        - protocol: TCP
          port: 8585
  egress:
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/pod: sk8l-ui
      ports:
        - protocol: TCP
          port: 8585
---
# Source: sk8l/templates/NetworkPolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: 
  name: sk8l-ui-allow-ingress-egress-local
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-ui
  ingress:
    - {}
  egress:
    - {}
  policyTypes:
    - Ingress
    - Egress
---
# Source: sk8l/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
create: true
metadata:
  annotations: {}
  labels:
    name: sk8l
  name: sk8l
  namespace: sk8l
---
# Source: sk8l/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sk8l-api-configmap
  namespace: 
data:
  K8_NAMESPACE:
---
# Source: sk8l/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sk8l-ui-configmap
  namespace: 
data:
  NODE_EXTRA_CA_CERTS: "/etc/sk8l-certs/ca-cert.pem"
  VITE_SK8L_API_URL: https://localhost:9080
  VITE_SK8L_K8_NAMESPACE:
---
# Source: sk8l/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-configmap
  namespace: 
data:
  envoy.yaml: |-
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 9080 }
          filter_chains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  codec_type: auto
                  stat_prefix: ingress_http
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: local_service
                        domains: ["*"]
                        routes:
                          - match: { prefix: "/" }
                            route:
                              cluster: sk8l_service
                              timeout: 0s
                              max_stream_duration:
                                grpc_timeout_header_max: 0s
                        cors:
                          allow_origin_string_match:
                            - prefix: "*"
                          allow_methods: GET, PUT, DELETE, POST, OPTIONS
                          allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                          max_age: "1728000"
                          expose_headers: custom-header-1,grpc-status,grpc-message
                  http_filters:
                    - name: envoy.filters.http.grpc_web
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                    - name: envoy.filters.http.cors
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              transport_socket:
                name: envoy.transport_sockets.tls
                typed_config:
                # https://www.envoyproxy.io/docs/envoy/v1.27.0/api-v3/extensions/transport_sockets/tls/v3/tls.proto#extensions-transport-sockets-tls-v3-downstreamtlscontext
                  "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                  common_tls_context:
                    tls_params:
                      tls_minimum_protocol_version: TLSv1_2
                      tls_maximum_protocol_version: TLSv1_3
                    tls_certificates:
                      - certificate_chain:
                          # Certificate must be PEM-encoded
                          filename: /etc/sk8l-certs/server-cert.pem
                        private_key:
                          filename: /etc/sk8l-certs/server-key.pem
                    validation_context:
                      only_verify_leaf_cert_crl: true
                      trusted_ca:
                        filename: /etc/sk8l-certs/ca-cert.pem
      clusters:
        - name: sk8l_service
          connect_timeout: 0.25s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          # win/mac hosts: Use address: host.docker.internal instead of address: localhost in the line below
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: sk8l
                        port_value: 8585
          # http2_protocol_options: {} # Force HTTP/2
          # Your grpc server communicates over TLS. You must configure the transport
          # socket. If you care about the overhead, you should configure the grpc
          # server to listen without TLS. If you need to listen to grpc-web and grpc
          # over HTTP/2 both you can also proxy your TCP traffic with the envoy.
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
---
# Source: sk8l/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
  namespace: 
data:
  nginx.conf: |-
    user  nginx;
    worker_processes 1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    worker_rlimit_nofile 512;

    events {
        worker_connections  256;
    }

    http {
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;
        open_file_cache max=256 inactive=10s;
        open_file_cache_valid 120s;

        upstream sk8l_upstream {
            server sk8l:1337;
            keepalive 70;
        }

        server {
            listen 8080;
            listen 8001 ssl;

            server_name  localhost;
            keepalive_timeout   70;
            # root   /usr/share/nginx/html;
            ssl_certificate     /etc/sk8l-certs/server-cert.pem;
            ssl_certificate_key /etc/sk8l-certs/server-key.pem;
            ssl_protocols       TLSv1.2 TLSv1.3;
            # ssl_ciphers         HIGH:!aNULL:!MD5;

            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

            location / {
              root   /app;
              index  index.html;
              try_files $uri $uri/ /index.html;
            }
        }
    }
---
# Source: sk8l/templates/ClusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    name: sk8l
  name: sk8l
  namespace: 
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
---
# Source: sk8l/templates/ClusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sk8l
  labels:
    name: sk8l
  namespace: 
roleRef:
  kind: ClusterRole
  name: sk8l
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: sk8l
    namespace:
---
# Source: sk8l/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "sk8l"
  namespace: 
  annotations:
  labels:
    app.kubernetes.io/name: sk8l
    
spec:
  type: LoadBalancer
  
  ports:
    - name: sk8l-api
      port: 8585
      protocol: TCP
      targetPort: api-port
    - name: sk8l-api-health
      port: 8588
      protocol: TCP
      targetPort: api-health-port
    - name: sk8l-api-metrics
      port: 8590
      protocol: TCP
      targetPort: metrics-port
  
  selector:
    app.kubernetes.io/pod: sk8l-api
---
# Source: sk8l/templates/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "sk8l-ui"
  namespace: 
  annotations:
  labels:
    app.kubernetes.io/name: sk8l
    
spec:
  type: LoadBalancer
  
  ports:
    - name: sk8l-ui
      port: 8001
      protocol: TCP
      targetPort: sk8l-ui-port
    - name: envoy
      port: 9080
      protocol: TCP
      targetPort: envoy-port
    - name: envoy-admin
      port: 9901
      protocol: TCP
      targetPort: envoy-adm-port
  
  selector:
    app.kubernetes.io/pod: sk8l-ui
---
# Source: sk8l/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sk8l-api
  labels:
    app: sk8l
  namespace: "sk8l"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-api
  template:
    metadata:
      labels:
        app.kubernetes.io/pod: sk8l-api
        app.kubernetes.io/name: sk8l
      annotations:
        sk8l.io/api-scrape-port: "8590"
        checksum/config: 6eee53241066d5ea2b3aa3dbc2e9cab0fcf8f3e5d07fe1c24bd9c6280954432f
        # checksum/config: 
    spec:
      hostname: sk8l-api
      subdomain: sk8l
      automountServiceAccountToken: true
      serviceAccountName: sk8l
      securityContext:
        runAsNonRoot: true
      containers:
        - name: sk8l-api
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: danroux/sk8l-api:v0.13.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: api-port
              protocol: TCP
              containerPort: 8585
            - name: api-health-port
              protocol: TCP
              containerPort: 8588
            - name: metrics-port
              protocol: TCP
              containerPort: 8590
          livenessProbe:
            grpc:
              port: 8588
            initialDelaySeconds: 10
            periodSeconds: 30
          envFrom:
            - configMapRef:
                name: sk8l-api-configmap
          volumeMounts:
            - name: badger-storage
              mountPath: /tmp/badger
            - name: tls-certs
              mountPath: /etc/sk8l-certs
              readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
        - name: badger-storage
          emptyDir: {}
        - name: tls-certs
          projected:
            sources:
            - secret:
                name: sk8l-server-cert-secret
                items:
                  - key: tls.crt
                    path: server-cert.pem
                  - key: tls.key
                    path: server-key.pem
            - secret:
                name: sk8l-ca-root-cert-secret
                items:
                  - key: tls.crt
                    path: ca-cert.pem
        - emptyDir: {}
          name: app-dir
        - emptyDir: {}
          name: nginx-cache
        - emptyDir: {}
          name: var-run
        - emptyDir: {}
          name: tmp
---
# Source: sk8l/templates/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sk8l-ui
  labels:
    app: sk8l
  namespace: "sk8l"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/pod: sk8l-ui
  template:
    metadata:
      labels:
        app.kubernetes.io/pod: sk8l-ui
        app.kubernetes.io/name: sk8l
      annotations:
        checksum/config: 6eee53241066d5ea2b3aa3dbc2e9cab0fcf8f3e5d07fe1c24bd9c6280954432f
    spec:
      hostname: sk8l-ui
      subdomain: sk8l
      automountServiceAccountToken: false
      serviceAccountName: sk8l
      securityContext:
        runAsNonRoot: true
        runAsGroup: 101
        runAsUser: 101
      initContainers:
        - name: replace-env-vars
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              drop: ['ALL']
            seccompProfile:
              type: RuntimeDefault
          image: danroux/sk8l-ui:v0.12.0
          imagePullPolicy: "IfNotPresent"
          command:
            - /app_tmp/replace-env-vars.sh
          envFrom:
            - configMapRef:
                name: sk8l-ui-configmap
          volumeMounts:
            - name: app-dir
              mountPath: /app
      containers:
        - name: envoy
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "envoyproxy/envoy:v1.30-latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: envoy-port
              protocol: TCP
              containerPort: 9080
            - name: envoy-adm-port
              protocol: TCP
              containerPort: 9901
          resources:
            {}
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
              readOnly: true
            - name: tls-certs
              mountPath: /etc/sk8l-certs
              readOnly: true
            # - mountPath: /etc/ssl/certs/
            #   name: ca-certificate
              readOnly: true
            - mountPath: /tmp
              name: tmp
        - name: sk8l-ui
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: danroux/sk8l-ui:v0.12.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: sk8l-ui-port
              protocol: TCP
              containerPort: 8001
          resources:
            {}
          readinessProbe:
            httpGet:
              path: /
              port: 8001
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 120
          envFrom:
            - configMapRef:
                name: sk8l-ui-configmap
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: tls-certs
              mountPath: /etc/sk8l-certs
              readOnly: true
            # - mountPath: /etc/ssl/certs/
            #   name: ca-certificate
              readOnly: true
            - mountPath: /var/cache/nginx/
              name: nginx-cache
            - mountPath: /var/run
              name: var-run
            - mountPath: /app
              name: app-dir
            
      terminationGracePeriodSeconds: 30
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-configmap
        - name: nginx-config
          projected:
            sources:
              - configMap:
                  name: nginx-configmap
        - name: tls-certs
          projected:
            sources:
            - secret:
                name: sk8l-server-cert-secret
                items:
                  - key: tls.crt
                    path: server-cert.pem
                  - key: tls.key
                    path: server-key.pem
            - secret:
                name: sk8l-ca-root-cert-secret
                items:
                  - key: tls.crt
                    path: ca-cert.pem
        - emptyDir: {}
          name: app-dir
        - emptyDir: {}
          name: nginx-cache
        - emptyDir: {}
          name: var-run
        - emptyDir: {}
          name: tmp
