---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-grpc-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuRENDQW9TZ0F3SUJBZ0lRTGNXc1dXeWtUSDcrOWVBbG9NVUY4akFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkdGFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdOVEUxTURnME56TTJXaGNOTXpRd05URXpNRGcwTnpNMldqQXlNVEF3TGdZRFZRUURFeWR0CmFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzFSWkFnOXlxRDhia0JsUXNzU0grdEpHeHRub213UDdidApsZG9FRmhoRDdhcmxKVjZXWTZYUEhKTDlPZTNjODg5cFJ2UVMyU3VWTTlTRVRPZnQvejNvTFliaG1EUEl6bWd5CjBaT2Z0cUpWeHdIcFh5c3NJRFBtWWhGVkV4QndjRi81SnFjbi9uRzE5NE9CWThvZ1lxSnBtVytCTVNzRHpJQTUKQ2VSS0o3SmRUR3Z4K2xmS3dUYmtRN01GaUNCTnRTeHk1ZnZzRVJHVHEvZ0YrVFZ3dE1FMUdzRkovMkNhT2hnTwp2cy84a1BsM2p1ZVdEUGM0Mk12eG9PV0tITjI4TUJVbE9qL0VxYzhkRVV3U2JyM1FKdHdtMTNUU01iQVppSXBhCk1ndjZNU2tUSHlTMm1MeTVLN0dmYUFsR2RmalA1QVAxdWdhMWJLZm8wdk9NVnhBS1Y5TTNBZ01CQUFHamdhMHcKZ2Fvd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjRApBakFNQmdOVkhSTUJBZjhFQWpBQU1Hc0dBMVVkRVFSa01HS0NMRzFwWTNKdlkydHpMV2R5Y0dNdGJXbGpjbTlqCmEzTXVNVGt5TGpFMk9DNDVPUzR4TURBdWJtbHdMbWx2Z2lkdGFXTnliMk5yY3kxbmNuQmpMbVJsWm1GMWJIUXUKYzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDQ1d4dlkyRnNhRzl6ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpYbzNwL0hBMEV4ODNpaDM4K3loaktDWXRIME5pRUtBY1RoN1VONkZ6cThFbWZDTUpQOU54NFdLVGZyTVVLWkJjCmRRZ1lxancwbkIwUnZlK2hyaGVyUWNMUFVHU3JLYjVyVG5kRjEya1ZmSEUxYitINWVJcU04ZHBWdWZsQ1BhUlcKaXBGK1B1NkxpckR2Q0JnMWdmWkFtZXMxYnVvSFByQW14U2d0RzZaSmZmL1RzMFRKeTZqTkZ1VnZROVBFQVJsQwpJU2ZueVg0U0NIT241bHIyVUMxTExFSFFoaVhKdEZ4OUVVQm04RDU5ZGJrcUlMUForUXpWTHM3ZGhFeWpRdmlmCkxwV29KT3hGSVFsMDVYd1h5V1doRCtIV29xYUJ4c3JuMU5rN1dZZUUxSmZnL2wxb2pYNDVLT3JaRTd0SlJjcUEKZVdJbEhVL1lmVHBJdHVieEZxeXpLdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb1FJQkFBS0NBUUVBdFVXUUlQY3FnL0c1QVpVTExFaC9yU1JzYlo2SnNEKzI3WlhhQkJZWVErMnE1U1ZlCmxtT2x6eHlTL1RudDNQUFBhVWIwRXRrcmxUUFVoRXpuN2Y4OTZDMkc0Wmd6eU01b010R1RuN2FpVmNjQjZWOHIKTENBejVtSVJWUk1RY0hCZitTYW5KLzV4dGZlRGdXUEtJR0tpYVpsdmdURXJBOHlBT1Fua1NpZXlYVXhyOGZwWAp5c0UyNUVPekJZZ2dUYlVzY3VYNzdCRVJrNnY0QmZrMWNMVEJOUnJCU2Y5Z21qb1lEcjdQL0pENWQ0N25sZ3ozCk9Oakw4YURsaWh6ZHZEQVZKVG8veEtuUEhSRk1FbTY5MENiY0p0ZDAwakd3R1lpS1dqSUwrakVwRXg4a3RwaTgKdVN1eG4yZ0pSblg0eitRRDlib0d0V3luNk5MempGY1FDbGZUTndJREFRQUJBb0lCQUREWFQyQXllSGdZbHhxQQpDQVNrZkJJd3NDNVEreFJMOW9QSlRuYXZaVlpZSVNXZ2pmM0RWNWVZUVZxTlV6T25WWWt1SHZFOUptc0xEZ1dmCm14WWJJWmovTzBwcGNmcDI4c2hPZzVJUzZXWm5PbktndThjbDNoWUM4bHlUeUdnalB4aW9lMzFoSjA0NkpHcW0KY24yTFZldFI5aU0vRmpIdDFkYUlmY1FsTWYvRTlOUXNxaG9Iek02bWtCcXEwVVpMVmhrZzlVL2VuZkhGTks3cgp0MzdDQS9ESmxJeDhodzdGWjdGZzh4T0lQTTNhT0YzUDJpU2hVZ3NiOVRMTEZFMisrMzJCdFY3SzUyakIwWnV0CkFwZVJpQ2Z2eTZYVWRqaXdCcDh4QWlyQlYxOG96K3Jjamk4Y0tPcDArVXEvaWI2SHVvTUhpRjdQbythUFdzQmoKc0lyUFA0RUNnWUVBN3Q0WEtlQVIrNDRWTWp5bGY1d2g0Yk1ScnpRQXdRWmVRUjRoemFjTy9OT21DRHNaVzZxbwp5dUVONzBGNERQTDJaYUJTQldQTjVzaWdFQVljVzJLR2ROTFQ5TmZmNXBoZDh0QUZpYjQrMUhzaWY5eGJ4V1phCk5uejVBaWhkM1dVWXhnQ2sxM1hPN0tXTjhFWWtId0IyNnQ3T1F4b0x3QlE0Mk9ZRlFnSStHRmNDZ1lFQXdrWHcKMVFrd1pObjVoSUhjdmhRdUFXblFVaWg2MFRwTlhDWDVBVWcvazgxRWcyTUhCY2x1bGxuMUlGYjFGS3phL2FkUwoyaHRrb0VMUElhendmT01jWnFTYzc2dFhtd3cxQXJjeC9nc1B5VjRPMlRlWWNpWkorRjI4VDBSVnpVZ2g3YzY4CnBPMWkyNnVmd3p5dEVDV0ZZWW0yZ2lGbEdYOGlhOWNrTG4zdzBDRUNnWUF1VitKd21tdUN2YmM1RHZFaEIvNisKMWtvcER0TFNvRlNyRjVpQldOY2NrRWVYTXpnaFE4UUowSTR1akNvcGdQM3pDNTYrTXZYZ3Y2M21UZmswZGJJVwpla3pySlBMb3Ywa0M4ZjhSRVZzSlNIYVNEZ08wRWI2UThjQXgvZmp3R2t3ckpqYlZJcU1wNEpqZ05BdVFCRHdPCkozb25KS2VBOWF0dDBYclZxcSszY3dKL0lpWXBMMGx1T0V3WWtESkRteVh3OEU2cFQ4Zk56dmx3bjhJTkF5eXcKQUVzVXdBT29PRnd3RkQyNzJQTndJVEpCVEZVZE96bVZkcFpIMHFPVG9tQkpuY0ZSMU05Smx2ZU9XZXZaM2M0VAorRkdRU3A1N0xaV05heHNPL3VBRU5SRjQ1VlJ4MUl2bDFMZFdYZnRNY0lvbjUvMU5GNUxITXJRbVdNNTRqYk9WCm9RS0JnUURRWllpUHFPczFKN2U2YTFqQlEzZERmS21EZmhGRThxblduVkcwTk1TY2RyN0hMQW5zSmNxcnBCMjMKclZTekZ2UVAwdEdJdkdRV1FuNUVxVTRFUlp6anIzZHJtUkYySDZpNjN2QSs4M0Ura1dGK2c1cVpSemRESTlrcgp0SXI1N0I3R01ZQ2kxUlgvTFdqcTFOaVVhK2p1ZGtTK290ZU05MFBCRTc4WnFyeXJ1QT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhhZ0F3SUJBZ0lSQU5ZTDE3amtsR01jNVBRdDFvWUgwWll3RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRFV4TlRBNE5EY3pObG9YRFRJMU1EVXhOVEE0TkRjek5sb3dNakV3TUM0R0ExVUVBeE1uCmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6QzJLUTRBKzRoblBvMFBxMENRNEhmL2lVem5YNDEwagp6aUE3b0M2YjZqOVdpbW9vMWxLUzI4QmhoUENldXJNenhNWWVRT1JyMDRodkk1UThLL1VuYTlEcG42bVY2QUJzCjlka3RtbytZSEZnY2dNeTd5TWdpNHpRU3JXeWZlOUprejZYSk5GRUs2Z3hoTjlDd2pHVGdkTXZ3R09NdjVpWnAKTnlUbFRyMU9UZTVGcnJNN2VMbWI2Q3hqQ04vdzdSQUZ6MlZleCtkQWZJK3dmMFhTQXU2cFh0Z0MxeVE2aEIzWQpWVHNoRHFHSjdmUVlkZlFWT3pVbVlkaFFOd1RlOTMzRXNDNmtXbVNIZ2RTNk1YUlNpSmltcDg2OGZnaVE3K3pzCnlDSXNFd2dZTjR5SjVNODFpSXVTR2d1bnVkb21DSm5sR1lucnNhN2w1UFNOanFtTTloVW5xUUlEQVFBQm96OHcKUFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFETmpKMGNXNmMzWmJOcEN5N3JsCk5BRm44RlhkSCt5K3djQUFlc0NuSWd5akFvbktnTWorUkcvQVYyNjBlNU54bVJOZmg4VGFjelRwUytpTjhySWgKOFFHbGNGU2RoYjdHRjgrZmNWSzlqVTRrY3NhTFR5b3BDaGYzWS9VZS8xWU1XVkliM25ZdWR0bDM1UEdUc0xjVApKeG84UmZKdEtLVXhDK0pHMk9VaVc2R2xRK0hYUGdNUkszVkN1eFQwOGFlZDdUL1EydzZmS1hGcU5KcXUwYU9sCnhCaWZLQlhTdXpxMDVSeUlpdFV4aG9xaC9FUGR0aThtUWhRS08walVNR2d0dXpISkQ1TFVyM1p4T2xzTThWczkKNHNxTTdtbFIvZWlpK2NnUnBpam1xbllyaDRRaVl5Y05CWE9zTS9RUjkxUmFLK0xjdnVacHdKWUVGK2VvSGJsUQp1ZGM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBekMyS1E0QSs0aG5QbzBQcTBDUTRIZi9pVXpuWDQxMGp6aUE3b0M2YjZqOVdpbW9vCjFsS1MyOEJoaFBDZXVyTXp4TVllUU9ScjA0aHZJNVE4Sy9VbmE5RHBuNm1WNkFCczlka3RtbytZSEZnY2dNeTcKeU1naTR6UVNyV3lmZTlKa3o2WEpORkVLNmd4aE45Q3dqR1RnZE12d0dPTXY1aVpwTnlUbFRyMU9UZTVGcnJNNwplTG1iNkN4akNOL3c3UkFGejJWZXgrZEFmSSt3ZjBYU0F1NnBYdGdDMXlRNmhCM1lWVHNoRHFHSjdmUVlkZlFWCk96VW1ZZGhRTndUZTkzM0VzQzZrV21TSGdkUzZNWFJTaUppbXA4NjhmZ2lRNyt6c3lDSXNFd2dZTjR5SjVNODEKaUl1U0dndW51ZG9tQ0pubEdZbnJzYTdsNVBTTmpxbU05aFVucVFJREFRQUJBb0lCQUJzT3llenFHT3REdW1XTApnWm0xd3c0T3RBS05mdE90cXlvTTBYb0gwemUyenhRbXYyU3ZxckNlalEzZUNWcjZscGkwSEp4QzZSc3VVSFFwCmw5UEhlRUxzZTVsaUV2Q2M1ZE9xeFVWZlZDd2xiUm1RaUM0eWY1VVdlSWN0QnZHVXp6RkphaUdadjlXR2NIZkMKR3pOdnh1TVRoNnowcG90Y2VjTUtDNjFrbnZUcXF0UXRiV21KVFQvQTlML3Q0bUkvd3NFYy9kWTU2MTNmQ1ZENApOa2FjaFBLMzcySmZZb3Zhb1NwbXpoaVNYNDJoSlgxc2FxcVcyYVBRcWRYRkFub2JuY0hadllpL0pXVmV6eFNWCktVUDZYcnBMdEVYSXA3am9tQUt0TGJaZEc1eFZUUzVNU2I3dTVnZG1PSDdnMEkyS05qUytNZjhiSnVPOHBLQTMKMzJDOFgzVUNnWUVBK1dGR1NuRHg2SkNPdi9MUkN2dFdNdkxuaUtwYitWY3hEdkxQZm91eFhrNG9CTHozZk92YgpYcXJzR3dXUEFMOWtaT0FxdFhlN1BkQjZXbkU4YXFMeXpwdmp0bkp4Yy8rYS9TTTBJbVVPcXNiNEpiOFpRbnRYCndRYVY3eVVoaDV2cW9lek01YWRIYVF5MlgzTGhIOWo0MVlGUGxydU1FTyszbWV4blNWYytyWk1DZ1lFQTBaa1YKU3FzV0RldXltL1RSNXlZWnhLL2ZTUzhIMDVPS0drL25HQ3BBL1ovYk95Tmd6RHpDdWFndjhPdGdTa2VmK0FNSApIN1k1NkxtZldTN0lFRitRYXhYdHZuYnlraWI5cnJCelhQQTdXYTVjeHQydU5WTThaQ3BVYmFNbmozbVBod0VTCjUrRzRDRFQ0bk0vU09JemVkNVp5ak8xK3hKb2Ntdy9zdklOMk8xTUNnWUVBaEVpQlRNT1V6dFMvcERwZGdRSEoKdThUMTVKelpwTzRIYS9LSTlvdUxUb2NPMjFTUnc0WXBHNUozSSs1UzZRYWRicFVxa3BBc2xxR2NCWlhEZ3AxbApSd3VTUXhsNTdScE5VTEgzMmJiWmpPVjJoQzlXYXRtYXR4MlRNd1B6UVVnSHNsVTJheXZNeVlDZ3pRalhPbG1SCnhVK090RnBQOWp2eW5JZTJVa1VoVGxrQ2dZRUF1TERSSHpPMHdsMS96SWNsY3k2U3BFdHBVTjZkWWVWdld4SXYKaTQ2b0tCVDFwSjNmRFBrNWlVbFh2VTViVWZqZFVEaXl6VkhRbzI3MXFDdGQ1WGVnRll5RUswSTdLMmdxUUFXQwpFbElwcWpQSDB3RENJb0VQQlNCN3R3Uit0cUdpUkk5QXJvMnFrYWpEcmNJKzlzL0N0TlFnYW1oWVBUdWptMHVrCkN0VTRtTHNDZ1lFQTR6bjVlYkh6eWlvNkFseVZlamtnK1FiQ0Y0bCtiWlIwM1hxaVJzdWtUazM4QTdYUysrbjUKdzh4aVNqdmdqNDR2cjFHWkRXMG05UEo1V25kaEJVQ3ZXOTVBckJlM0lIQ3NQdFR2a3ZnVnBmZXR0S2JnUWNNSwp2dWRTQnIwWHJKaktuZzNGUXRXUUNjSUVKVjBZVjV6Z0xhOWpLZEpWUnB0RE9oeUZqMm1VdmJNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-mongodb-connection"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
type: kubernetes.io/basic-auth
stringData:
  username: "userM"
data:
  password: "UGxMdEZ4b2hpbkUzaGh3a1gxSkE3TEtYR0tNY3pCbDI="
  adminPassword: "UkxISlg5WGlwUEViZ3BJTmxVcmNpbGNXY2NKZWdSRmRieTdLZEFJbQ=="
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhhZ0F3SUJBZ0lSQVA2QXRXYmM1SiszWmdIaWNpUFVDNE13RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmEyVjVZMnh2WVdzdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRFV4TlRBNE5EY3pObG9YRFRJMU1EVXhOVEE0TkRjek5sb3dNakV3TUM0R0ExVUVBeE1uCmEyVjVZMnh2WVdzdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvdEhUZ0pnbFgzaWhURkE5aXRDWnNJYzNOUHZTTXI0Rgo2WW9ybS9CcG1CVlJxQkVTUUtTTUZ1Sk92ZXo0cVpJUFBqQS9GRFZFRE1zTTVnU1U2UUlUelZmN3BFNHdqWGRnCmE1T09EaThHS01paXIrUS9WdUZkZXNWeklGTmJzRm5MZUg2MzdQNnh6VjRXdHBRUWNHaS9GNjBMUnd3UFQwUlcKM3Bra0QvQWZwYnZ4TjU3V2VJVGJhMEZ4RGxKL2grR2toWUdyelcyam0zSGJnZHpUV2xkSXd0dXA1VmJPRU5oNwozVzAzS1ArSGQwTXNNTHJiRVMxVkVXZ3pKRE0rMCtieFhYRHhnOVYvTkxwaFFSSlFKVkJIckNEVGdpZmMwOEtYCmk5TUIrMVB2UUFCTXRDZ0dmQlFUUFRwb2daZUttdE44Z3ByS2xLOVRDY2NNdWp2NVJNLytzd0lEQVFBQm96OHcKUFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCMWtTN21Zcm9nS2J1MUhITVBRCmZhUUd4UEo5cHdGT2RSVXZlNEVPcUZPejhlTnhwQ09YV2w0dXpHbG00czFFQlVibEM1NmRudTZ1STF3cnBXY0QKR01nNy95c05XeVZPM1hnM3FlVTZYTzJkcHRwZjRHVFdUNmZjSXpGYjB6RGdzRUlwUnRkbXVsQkJ4Nkl2cHNaKwpOWkJUR3h6Rytva3lxcGg4K3E3b2Q4dnVyR3RyUld0ZHBMc0dMdUlyaHBQMmlKQUFva3p2QnBvMXZ5Qk9jMWQwCnI4c0dNWnF2aWFsN3p6bmFGNXpXNVhVYmlnVFppK3RGeC9WQ3Fndm9ZcTdSakc0cTNGcDE4dkg0SGhBME5WaUIKVFZUbjVsUGVmOXFhenZidVN1eE5WZGo3L3Jma0xNV2VJaEVicU85d1ZpNGRVRmw5OEhJYUNHYnZiYnkvTTNqTwptQlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBb3RIVGdKZ2xYM2loVEZBOWl0Q1pzSWMzTlB2U01yNEY2WW9ybS9CcG1CVlJxQkVTClFLU01GdUpPdmV6NHFaSVBQakEvRkRWRURNc001Z1NVNlFJVHpWZjdwRTR3alhkZ2E1T09EaThHS01paXIrUS8KVnVGZGVzVnpJRk5ic0ZuTGVINjM3UDZ4elY0V3RwUVFjR2kvRjYwTFJ3d1BUMFJXM3Bra0QvQWZwYnZ4TjU3VwplSVRiYTBGeERsSi9oK0draFlHcnpXMmptM0hiZ2R6VFdsZEl3dHVwNVZiT0VOaDczVzAzS1ArSGQwTXNNTHJiCkVTMVZFV2d6SkRNKzArYnhYWER4ZzlWL05McGhRUkpRSlZCSHJDRFRnaWZjMDhLWGk5TUIrMVB2UUFCTXRDZ0cKZkJRVFBUcG9nWmVLbXROOGdwcktsSzlUQ2NjTXVqdjVSTS8rc3dJREFRQUJBb0lCQUJmQU0vSVdQNTFsbzJIVwpjcVBGT2lZZUUxZVBSR0pTaGRwRFpZa2gwTVYybHFyRmtyd0xSTVF4enZxMWpyQnR0ZnVFWGk4OGRlakgxZUhYCjJVRUVKSTlYdmtXQmdtT2dmbGd5OWczcm5pSms0aFoyWFNiM1NRT1h1ZXVGUFdMRU5vSWxPZjlBUi8rRk1oc0EKRGtYWGdjaWFYWUxIcDVRUWkvdDhxMTRIMFJZRDBOYjFjaHdMYTJkL0hPLzJMdlJhWCtvSXViSk54OW9FTEVIVgpJci9VNWRUS093ekFZNWpMY0t5WSt1ZklyVWtBdEZTbXhqcEpudk51MGMxdHg1UlMrUGU1WG11OU0zSkl0clRtCnpIUjlEczJzOGJ0bjhzd1lrRkw3VzBEZFcyWmFxeHNPVHliSGtmK1RmMmhhQlVYZ3BlbVBQdzhYbUpDWE9BQkYKNm1LWGJBRUNnWUVBMUxxL25nNzBYUG1HR3RYSW5pdXdLenNkeExQbmtFakg3bkUwMzU5R09vT2RHa1dZeG5oSgpiME5nZlNSWEJOaGtXcGwrSmQ2K01BWTJ2dUNBRXdTdkZBcFlZbWFKYVVZeGhQU2l2NzY3MEh2a2cwODE3SCtyCjEvdUxDV1crTnAyTVhDOEpQeFNrWk5OTGF2WkxQaklIdEREaE1hcnZBWmNmTHpVUmttaXBSa0VDZ1lFQXcvQXIKNG5mRS9ua3BpMStvaXl4aW9hbEdkREdIOGgrUitwMWRmak92Ym1PcFAvV09DS0tuTjZrQVVKazhNTDNGMDJBWgpFYmJVY0w2UFcvRnl4T3kyaTJzRzAvVmFyTUs0bXp6ZE5oK2hjZmxMSEZqUmJLOTVMSUo0M0o4MWEybnk3N2xhCmZTVkdVSnNPNy9IZnYrRS9KaGRSUUxKTmdKS1V5SW9tQzh6a2ovTUNnWUVBd2huYnVVWi81VTJ2OVZCWGl5cmwKeGF4ZER4dndFQkM0akhJekFrLzc3bXdrcnRJT0FobkRONGhNeENLaVc4TnVYZFJyNi9YL3B5WWtVYW5hY24vMQpsOTJRbzhoWFhQMDFOZEZacG9kTUs0REFFcWYxMWVMd1UxUXJtdG1BNDZpQlo2TnJWbWxwVHE0VXhIWVNWWitrCnM5OWR1c255NW9xVFk2bVNiUHFlYVlFQ2dZQlh2Nm1IcEtlK1p6aXB5RTlNOUxXL1BIWG05Myt3ZVY4QTQ1VEoKUGhCazJaRWtxYTNRUkRlcS82NjZhY1hBOWx3d0M2dHVlWGl1ZlVqcW5qa041QXprWnl3SnBLblZFT2RuN2x3TApMeU00VGJMTG9TTTVEMlN2QUVkc1ZvaXY4Q1R5SXdwWlhXWWVGek1iVmpFa1Y1WFdVejc2UUYvaElzUXJBMk9DCmlXSWE3UUtCZ0VFL0cvYWZtZU9LeGx3UkYyWUM3MXd3bnBjcU9hQnFDMG42ZXdrQllDTENOZFQwZUw3b0lrOCsKS0tCNVRTc0xPZlF4c0llam91NGhPRWFPVVg4bnlOWWM0aWFwejVxQ1lZUE5sSDgreTFRWXNwMGhobEhRYUJnKwowdDl2NXI4dk9INkNtYWlLUWRTTDZhWXJFeVM4SnY2WkpJaWdhRDVNRkJJK1Bjcmk0Tjh3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-admin"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
type: kubernetes.io/basic-auth
stringData:
  username: "admin"
  postgresUsername: "userP"
data:
  password: "TWVOUFNWbWFIWFlCNXdUYWZ5SFlhV1I1elFyampJUU9ZQmtzM2UxYg=="
  postgresPassword: "RUdyZWdTZGM0M2FJQlQ3a2FKcUY0VUdpVjQwMDNpSEc="
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-config"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
data:
  features.properties: |-
    features.feature.microcks-hub.enabled=true
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles=admin,manager,manager-any

    features.feature.repository-filter.enabled=false
    features.feature.repository-filter.label-key=app
    features.feature.repository-filter.label-label=Application
    features.feature.repository-filter.label-list=app,status

    features.feature.repository-tenancy.enabled=false
    features.feature.repository-tenancy.artifact-import-allowed-roles=admin,manager,manager-any

    features.feature.async-api.enabled=false
    features.feature.async-api.default-binding=KAFKA
    features.feature.async-api.endpoint-WS=microcks-ws-microcks.192.168.99.100.nip.io
    features.feature.async-api.endpoint-KAFKA=microcks-kafka.192.168.99.100.nip.io:443

    features.feature.ai-copilot.enabled=false
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://microcks-microcks.192.168.99.100.nip.io/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm=microcks
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled=false
    async-api.default-binding=KAFKA
    async-api.default-frequency=10

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}

    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key

    # AI Copilot configuration properties
    ai-copilot.enabled=false
    ai-copilot.implementation=openai
    ai-copilot.openai.api-key=sk-my-openai-api-token
    ai-copilot.openai.timeout=20
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="INFO"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-keycloak-config"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "users" : [
        {
          "username" : "user",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user" ]
          }
        },
        {
          "username" : "manager",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user", "manager" ]
          }
        },
        {
          "username" : "admin",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "realm-management": [ "manage-users", "manage-clients" ],
            "account": [ "manage-account" ],
            "microcks-app": [ "user", "manager", "admin" ]
          }
        }
      ],
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "groups": [
        {
          "name": "microcks",
          "path": "/microcks",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": [
            {
              "name": "manager",
              "path": "/microcks/manager",
              "attributes": {},
              "realmRoles": [],
              "clientRoles": {},
              "subGroups": []
            }
          ]
        }
      ],
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ],
        "realm-management": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manage-users",
              "manage-clients"
            ]
          }
        ]
      },
      "clients": [
        {
          "clientId": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "redirectUris": [
            "https://microcks-microcks.192.168.99.100.nip.io/*"
          ],
          "webOrigins": [
            "+"
          ],
          "fullScopeAllowed": false,
          "protocolMappers": [
            {
              "name": "microcks-group-mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "microcks-groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "microcks-serviceaccount",
          "secret": "ab54d329-e435-41ae-a900-ec6b3fe15c54",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "keycloakVersion": "10.0.1"
    }
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    

spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: spring
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: spring-grpc
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
    name: postman-runtime
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: postman-runtime
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: mongodb
    protocol: TCP
    port: 27017
    targetPort: 27017
    nodePort: 0
  selector:
    app: "microcks"
    container: mongodb
    group: microcks
  type: ClusterIP
  sessionAffinity: None
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: keycloak
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks"
        container: spring
        group: microcks
        
      annotations:
        checksum/config: 5c722b2436b9e8cb4ee071bef6cc1b1379aab4f410a352745b6704ad0cdb2336
        
    spec:
      containers:
      - name: spring
        image: quay.io/microcks/microcks:1.9.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@microcks-mongodb:27017/${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_DATABASE
            value: microcks
          - name: POSTMAN_RUNNER_URL
            value: http://microcks-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://microcks:8080
          - name: KEYCLOAK_ENABLED
            value: "true"
          - name: KEYCLOAK_URL
            value: https://keycloak-microcks.192.168.99.100.nip.io
          - name: KAFKA_BOOTSTRAP_SERVER
            value: "microcks-kafka-kafka-bootstrap:9092"
          - name: SERVICES_UPDATE_INTERVAL
            value: 0 0 0/2 * * *
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "microcks-config"
            mountPath: "/deployments/config"
          - name: "microcks-grpc-certs"
            mountPath: "/deployments/config/grpc"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "microcks-config"
          configMap:
            name: "microcks-config"
        - name: "microcks-grpc-certs"
          secret:
            secretName: "microcks-microcks-grpc-secret"
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks-postman-runtime"
        container: postman-runtime
        group: microcks
        
      annotations:
        checksum/config: 5c722b2436b9e8cb4ee071bef6cc1b1379aab4f410a352745b6704ad0cdb2336
        
    spec:
      containers:
      - name: postman-runtime
        image: quay.io/microcks/microcks-postman-runtime:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      containers:
      - name: mongodb
        image: centos/mongodb-36-centos7:latest
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-mongodb-connection"
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "microcks-mongodb-connection"
        - name: MONGODB_DATABASE
          value: "microcks"
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 512Mi
        volumeMounts:
        - name: "microcks-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "microcks-mongodb-data"
        persistentVolumeClaim:
          claimName: "microcks-mongodb"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
        
      annotations:
        checksum/config: 5c722b2436b9e8cb4ee071bef6cc1b1379aab4f410a352745b6704ad0cdb2336
        
    spec:
      containers:
      - name: keycloak-server
        image: quay.io/keycloak/keycloak:22.0.3
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 400m
            memory: 512Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        - '--hostname=keycloak-microcks.192.168.99.100.nip.io'
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-keycloak-admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "microcks-keycloak-postgresql"
        - name: KC_PROXY
          value: "edge"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: microcks-keycloak-config
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "microcks-keycloak-config"
        configMap:
          name: "microcks-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 26
        runAsGroup: 26
        fsGroup: 26
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: centos/postgresql-95-centos7:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
              -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_DATABASE
          value: root
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: '100'
        - name: POSTGRESQL_SHARED_BUFFERS
          value: 12MB
        volumeMounts:
          - name: "microcks-keycloak-postgresql-data"
            mountPath: "/var/lib/pgsql/data"
      volumes:
      - name: "microcks-keycloak-postgresql-data"
        persistentVolumeClaim:
          claimName: "microcks-keycloak-postgresql"
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "microcks-microcks.192.168.99.100.nip.io"
    secretName: microcks-microcks-ingress-secret
  rules:
  - host: "microcks-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks"
            port:
              number: 8080
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  tls:
  - hosts:
     - "microcks-grpc-microcks.192.168.99.100.nip.io"
  rules:
  - host: "microcks-grpc-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-grpc"
            port:
              number: 9090
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "keycloak-microcks.192.168.99.100.nip.io"
    secretName: microcks-keycloak-ingress-secret
  rules:
  - host: "keycloak-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-keycloak"
            port:
              number: 8080
