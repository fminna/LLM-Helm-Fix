---
# Source: nas-nfs/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: release-name-nas-nfs
---
# Source: nas-nfs/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: nfs-client
  annotations:
provisioner: cluster.local/release-name-nas-nfs
allowVolumeExpansion: true
reclaimPolicy: Delete
parameters:
  archiveOnDelete: "true"
---
# Source: nas-nfs/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: release-name-nas-nfs-runner
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
# Source: nas-nfs/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: run-release-name-nas-nfs
subjects:
  - kind: ServiceAccount
    name: release-name-nas-nfs
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-nas-nfs-runner
  apiGroup: rbac.authorization.k8s.io
---
# Source: nas-nfs/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: leader-locking-release-name-nas-nfs
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Source: nas-nfs/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
  name: leader-locking-release-name-nas-nfs
subjects:
  - kind: ServiceAccount
    name: release-name-nas-nfs
    namespace: default
roleRef:
  kind: Role
  name: leader-locking-release-name-nas-nfs
  apiGroup: rbac.authorization.k8s.io
---
# Source: nas-nfs/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-nas-nfs
  labels:
    chart: nas-nfs-1.0.1
    heritage: Helm
    app: nas-nfs
    release: release-name
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nas-nfs
      release: release-name
  template:
    metadata:
      annotations:
      labels:
        app: nas-nfs
        release: release-name
    spec:
      serviceAccountName: release-name-nas-nfs
      securityContext:
        {}
      containers:
        - name: nas-nfs
          image: "k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          volumeMounts:
            - name: nfs-subdir-external-provisioner-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: cluster.local/release-name-nas-nfs
            - name: NFS_SERVER
              value: 
            - name: NFS_PATH
              value: /nfs-storage
      volumes:
        - name: nfs-subdir-external-provisioner-root
          nfs:
            server: 
            path: /nfs-storage
