---
# Source: taiga/charts/async-rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-async-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: release-name-async-rabbitmq
---
# Source: taiga/charts/events-rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-events-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: release-name-events-rabbitmq
---
# Source: taiga/charts/async-rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-async-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IHRhaWdhCiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCiMgcXVldWUgbWFzdGVyIGxvY2F0b3IKcXVldWVfbWFzdGVyX2xvY2F0b3IgPSBtaW4tbWFzdGVycwojIGVuYWJsZSBsb29wYmFjayB1c2VyCmxvb3BiYWNrX3VzZXJzLnRhaWdhID0gZmFsc2UKZGVmYXVsdF92aG9zdCA9IHRhaWdhCmRlZmF1bHRfcGVybWlzc2lvbnMuY29uZmlndXJlID0gLioKZGVmYXVsdF9wZXJtaXNzaW9ucy5yZWFkID0gLioKZGVmYXVsdF9wZXJtaXNzaW9ucy53cml0ZSA9IC4q
---
# Source: taiga/charts/async-rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-async-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "dGFpZ2E="
  
  rabbitmq-erlang-cookie: "aDJTTnF2c0pSSkFlU1JVbGt1YlpUbGtSQjBPSmdZU3U="
---
# Source: taiga/charts/events-rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-events-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IHRhaWdhCiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCiMgcXVldWUgbWFzdGVyIGxvY2F0b3IKcXVldWVfbWFzdGVyX2xvY2F0b3IgPSBtaW4tbWFzdGVycwojIGVuYWJsZSBsb29wYmFjayB1c2VyCmxvb3BiYWNrX3VzZXJzLnRhaWdhID0gZmFsc2UKZGVmYXVsdF92aG9zdCA9IHRhaWdhCmRlZmF1bHRfcGVybWlzc2lvbnMuY29uZmlndXJlID0gLioKZGVmYXVsdF9wZXJtaXNzaW9ucy5yZWFkID0gLioKZGVmYXVsdF9wZXJtaXNzaW9ucy53cml0ZSA9IC4q
---
# Source: taiga/charts/events-rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-events-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "dGFpZ2E="
  
  rabbitmq-erlang-cookie: "aDJTTnF2c0pSSkFlU1JVbGt1YlpUbGtSQjBPSmdZU3U="
---
# Source: taiga/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "dGFpZ2E="
  password: "dGFpZ2E="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: taiga/templates/gateway-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-taiga-gateway
data:
  default.conf: |-
    server {
        listen 80 default_server;

        client_max_body_size 100M;
        charset utf-8;

        # Frontend
        location / {
            proxy_pass http://release-name-taiga-front/;
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
        }

        # Api
        location /api {
            proxy_pass http://release-name-taiga-back:8000/api;
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
        }

        # Admin
        location /admin {
            proxy_pass http://release-name-taiga-back:8000/admin;
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
        }

        # Static
        location /static {
            root /taiga;
        }

        # Media
        location /_protected {
            internal;
            alias /taiga/media/;
            add_header Content-disposition "attachment";
        }

        # Unprotected section
        location /media/exports {
            alias /taiga/media/exports/;
            add_header Content-disposition "attachment";
        }

        location /media {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://release-name-taiga-protected:8003/;
            proxy_redirect off;
        }

        # Events
        location /events {
            proxy_pass http://release-name-taiga-events:8888/events;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
    }
---
# Source: taiga/templates/job-createinitialuser-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-taiga-createinitialuser
  labels:
    app.kubernetes.io/name: taiga
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  createinitialuser.sh: |
    #!/bin/sh
    echo """
    import time
    import requests
    import subprocess

    print('Waiting for backend ...')
    while requests.get('http://release-name-taiga-back/api/v1/').status_code != 200:
        print('...')
        time.sleep(2)

    if str(subprocess.check_output(['python', 'manage.py', 'dumpdata', 'users.user'], cwd='/taiga-back')).find('\"is_superuser\": true') == -1:
        print(subprocess.check_output(['python', 'manage.py', 'loaddata', 'initial_user'], cwd='/taiga-back'))
    else:
        print('Admin user yet created.')
        """ > /tmp/create_superuser.py
        python /tmp/create_superuser.py
---
# Source: taiga/templates/media-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-taiga-media
  labels:
    app.kubernetes.io/name: taiga
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: taiga/templates/static-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-taiga-static
  labels:
    app.kubernetes.io/name: taiga
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: taiga/charts/async-rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-async-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: taiga/charts/events-rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-events-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: taiga/charts/async-rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-async-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-async-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-async-rabbitmq-endpoint-reader
---
# Source: taiga/charts/events-rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-events-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-events-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-events-rabbitmq-endpoint-reader
---
# Source: taiga/charts/async-rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-async-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: async-rabbitmq
    app.kubernetes.io/instance: release-name
  publishNotReadyAddresses: true
---
# Source: taiga/charts/async-rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-async-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: async-rabbitmq
    app.kubernetes.io/instance: release-name
---
# Source: taiga/charts/events-rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-events-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: events-rabbitmq
    app.kubernetes.io/instance: release-name
  publishNotReadyAddresses: true
---
# Source: taiga/charts/events-rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-events-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: events-rabbitmq
    app.kubernetes.io/instance: release-name
---
# Source: taiga/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: taiga/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: taiga/templates/back-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-taiga-back
  labels:
    app.kubernetes.io/name: taiga-back
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: taiga-back
      port: 8000
      targetPort: taiga-back
    
    - name: taiga-gateway
      port: 80
      targetPort: taiga-gateway
    
  selector:
    app.kubernetes.io/name: taiga-back
    app.kubernetes.io/instance: release-name
---
# Source: taiga/templates/events-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-taiga-events
  labels:
    app.kubernetes.io/name: taiga-events
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: taiga-events
      port: 8888
      targetPort: taiga-events
  selector:
    app.kubernetes.io/name: taiga-events
    app.kubernetes.io/instance: release-name
---
# Source: taiga/templates/front-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-taiga-front
  labels:
    app.kubernetes.io/name: taiga-front
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: taiga-front
      port: 80
      targetPort: taiga-front
  selector:
    app.kubernetes.io/name: taiga-front
    app.kubernetes.io/instance: release-name
---
# Source: taiga/templates/gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-taiga-gateway
  labels:
    app.kubernetes.io/name: taiga-gateway
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: taiga-gateway
      port: 80
      targetPort: taiga-gateway
  selector:
    app.kubernetes.io/name: taiga-back
    app.kubernetes.io/instance: release-name
---
# Source: taiga/templates/protected-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-taiga-protected
  labels:
    app.kubernetes.io/name: taiga-protected
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  
  ports:
    - name: taiga-protected
      port: 8003
      targetPort: taiga-protected
  selector:
    app.kubernetes.io/name: taiga-protected
    app.kubernetes.io/instance: release-name
---
# Source: taiga/templates/back-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-taiga-back
  labels:
    app.kubernetes.io/name: taiga-back
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: taiga-back
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: taiga-back
        helm.sh/chart: taiga-0.0.11
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: taiga-back
    spec:      
      serviceAccountName: default
      containers:
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: release-name-taiga-back
        image: docker.io/taigaio/taiga-back:latest
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        env:
          - name: POSTGRES_DB
            value: "taiga"
          - name: POSTGRES_USER
            value: "taiga"
          - name: POSTGRES_PASSWORD
            value: "taiga"
          - name: POSTGRES_HOST
            value: "release-name-taiga-postgresql"
          - name: TAIGA_SECRET_KEY
            value: "9%pno@m688el28@2+^y4v^&6wluqk-g#j#d7$dsjtht)o30dn1"
          
          - name: TAIGA_SITES_DOMAIN
            value: "taiga.127-0-0-1.nip.io"
          - name: TAIGA_SITES_SCHEME
            value: "http"
          - name: SESSION_COOKIE_SECURE
            value: "False"
          - name: CSRF_COOKIE_SECURE
            value: "False"
          
          
          - name: RABBITMQ_USER
            value: taiga
          - name: RABBITMQ_PASS
            value: taiga
          - name: ENABLE_TELEMETRY
            value: "True"
          - name: PUBLIC_REGISTER_ENABLED
            value: "True"
          
          - name: ENABLE_GITHUB_AUTH
            value: "False"
          
          
          - name: ENABLE_GITLAB_AUTH
            value: "False"
          
          - name: ENABLE_SLACK
            
            value: "False"
            
          
          - name: ENABLE_GITHUB_IMPORTER
            value: "False"
          
          
          - name: ENABLE_JIRA_IMPORTER
            value: "False"
          
          
          - name: ENABLE_TRELLO_IMPORTER
            value: "True"
          - name: TRELLO_IMPORTER_API_KEY
            value: "api-key-from-trello"
          - name: TRELLO_IMPORTER_SECRET_KEY
            value: "secret-key-from-trello"
          
        ports:
          - name: taiga-back
            containerPort: 8000
        # Original check: wget -q -t 1 --spider http://localhost:8080/api/v1/
        # but it does not work so change localhost to 127.0.0.1
        volumeMounts:
          - name: taiga-static
            mountPath: /taiga-back/static
          - name: taiga-media
            mountPath: /taiga-back/media
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: release-name-taiga-async
        image: docker.io/taigaio/taiga-back:latest
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        command:
        - /taiga-back/docker/async_entrypoint.sh
        env:
          - name: POSTGRES_DB
            value: ""
          - name: POSTGRES_USER
            value: ""
          - name: POSTGRES_PASSWORD
            value: ""
          - name: POSTGRES_HOST
            value: "release-name-taiga-postgresql"
          - name: TAIGA_SECRET_KEY
            value: "9%pno@m688el28@2+^y4v^&6wluqk-g#j#d7$dsjtht)o30dn1"
          
          - name: TAIGA_SITES_DOMAIN
            value: "taiga.127-0-0-1.nip.io"
          - name: TAIGA_SITES_SCHEME
            value: "http"
          
          
          - name: RABBITMQ_USER
            value: taiga
          - name: RABBITMQ_PASS
            value: taiga
          - name: ENABLE_TELEMETRY
            value: "True"
          - name: PUBLIC_REGISTER_ENABLED
            value: "True"
          
          - name: ENABLE_GITHUB_AUTH
            value: "False"
          
          
          - name: ENABLE_GITLAB_AUTH
            value: "False"
          
          - name: ENABLE_SLACK
            
            value: "False"
            
          
          - name: ENABLE_GITHUB_IMPORTER
            value: "False"
          
          
          - name: ENABLE_JIRA_IMPORTER
            value: "False"
          
          
          - name: ENABLE_TRELLO_IMPORTER
            value: "True"
          - name: TRELLO_IMPORTER_API_KEY
            value: "api-key-from-trello"
          - name: TRELLO_IMPORTER_SECRET_KEY
            value: "secret-key-from-trello"
          
        volumeMounts:
          - name: taiga-static
            mountPath: /taiga-back/static
          - name: taiga-media
            mountPath: /taiga-back/media
      
      - name: release-name-taiga-gateway
        image: docker.io/nginx:1.19-alpine
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        ports:
          - name: taiga-gateway
            containerPort: 80
        volumeMounts:
          - name: taiga-static
            mountPath: /taiga/static
          - name: taiga-media
            mountPath: /taiga/media
          - name: taiga-conf
            mountPath: /etc/nginx/conf.d/
      
      volumes:
        - name: taiga-static
          persistentVolumeClaim:
            claimName: release-name-taiga-static
        - name: taiga-media
          persistentVolumeClaim:
            claimName: release-name-taiga-media
        
        - name: taiga-conf
          configMap:
            name: release-name-taiga-gateway
---
# Source: taiga/templates/events-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-taiga-events
  labels:
    app.kubernetes.io/name: taiga-events
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: taiga-events
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: taiga-events
        helm.sh/chart: taiga-0.0.11
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: taiga-events
    spec:      
      serviceAccountName: default
      containers:
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: release-name-taiga-events
        image: docker.io/taigaio/taiga-events:latest
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        env:
          - name: TAIGA_SECRET_KEY
            value: "9%pno@m688el28@2+^y4v^&6wluqk-g#j#d7$dsjtht)o30dn1"
          - name: RABBITMQ_USER
            value: taiga
          - name: RABBITMQ_PASS
            value: taiga
        # Original check: wget -q -t 1 --spider http://localhost:8080/api/v1/
        # but it does not work so change localhost to 127.0.0.1
        ports:
          - name: taiga-events
            containerPort: 8888
---
# Source: taiga/templates/front-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-taiga-front
  labels:
    app.kubernetes.io/name: taiga-front
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: taiga-front
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: taiga-front
        helm.sh/chart: taiga-0.0.11
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: taiga-front
    spec:      
      serviceAccountName: default
      containers:
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: release-name-taiga-front
        image: docker.io/taigaio/taiga-front:latest
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        env:
          
          - name: TAIGA_URL
            value: "http://taiga.127-0-0-1.nip.io"
          
          - name: PUBLIC_REGISTER_ENABLED
            value: "true"
          
          - name: ENABLE_GITHUB_AUTH
            value: "false"
          
          
          - name: ENABLE_GITLAB_AUTH
            value: "false"
          
          - name: ENABLE_SLACK
            
            value: "false"
            
          
          - name: ENABLE_GITHUB_IMPORTER
            value: "false"
          
          
          - name: ENABLE_JIRA_IMPORTER
            value: "false"
          
          
          - name: ENABLE_TRELLO_IMPORTER
            value: "true"
          
        ports:
          - name: taiga-front
            containerPort: 80
        # Original check: wget -q -t 1 --spider http://localhost:8080/api/v1/
        # but it does not work so change localhost to 127.0.0.1
---
# Source: taiga/templates/protected-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-taiga-protected
  labels:
    app.kubernetes.io/name: taiga-protected
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: taiga-protected
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: taiga-protected
        helm.sh/chart: taiga-0.0.11
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: taiga-protected
    spec:      
      serviceAccountName: default
      containers:
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: release-name-taiga-protected
        image: docker.io/taigaio/taiga-protected:latest
        imagePullPolicy: "IfNotPresent"
        resources: 
            limits: {}
            requests: {}
        env:
          - name: SECRET_KEY
            value: "9%pno@m688el28@2+^y4v^&6wluqk-g#j#d7$dsjtht)o30dn1"
          - name: MAX_AGE
            value: "360"
        ports:
          - name: taiga-protected
            containerPort: 8003
        # Original check: wget -q -t 1 --spider http://localhost:8080/api/v1/
        # but it does not work so change localhost to 127.0.0.1
---
# Source: taiga/charts/async-rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-async-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: async-rabbitmq
    helm.sh/chart: async-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-async-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: async-rabbitmq
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: async-rabbitmq
        helm.sh/chart: async-rabbitmq-11.9.3
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 0ad252f197ae9a4286d5ab2caf132e8974fd970fd6ed1de648b1c8ab426d3147
        checksum/secret: b25a3b2baba9cafa09548156cdc46e8e77efc19f6035f0cd7167de23758a77e1
    spec:
      
      serviceAccountName: release-name-async-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: async-rabbitmq
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.11.9-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-async-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FEATURE_FLAGS
              value: 
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: release-name-async-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "taiga"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-async-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: release-name-async-rabbitmq-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: async-rabbitmq
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: taiga/charts/events-rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-events-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: events-rabbitmq
    helm.sh/chart: events-rabbitmq-11.9.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-events-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: events-rabbitmq
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: events-rabbitmq
        helm.sh/chart: events-rabbitmq-11.9.3
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 0990e95f15bbf24b9ff403983e255a54f568c0f5e81c529e5a62bd82e22f9158
        checksum/secret: 0c567b1d32980ba2b5283013b2ee0df1f7802aeb6f0862814507eb0372a27ee9
    spec:
      
      serviceAccountName: release-name-events-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: events-rabbitmq
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.11.9-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-events-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FEATURE_FLAGS
              value: 
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: release-name-events-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "taiga"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-events-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: release-name-events-rabbitmq-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: events-rabbitmq
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: taiga/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.26
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13.10.0-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "taiga"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "taiga"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "taiga" -d "dbname=taiga" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "taiga" -d "dbname=taiga" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: taiga/templates/job-createinitialuser.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-taiga-createinitialuser
spec:
  template:
    spec:
      containers:
      - name: createinitialuser
        image: docker.io/taigaio/taiga-back:latest
        command:
          - sh
          - /scripts/createinitialuser.sh
        volumeMounts:
          - name: createinitialuser
            mountPath: /scripts
        env:
          - name: POSTGRES_DB
            value: "taiga"
          - name: POSTGRES_USER
            value: "taiga"
          - name: POSTGRES_PASSWORD
            value: "taiga"
          - name: POSTGRES_HOST
            value: "release-name-taiga-postgresql"
          - name: TAIGA_SECRET_KEY
            value: "9%pno@m688el28@2+^y4v^&6wluqk-g#j#d7$dsjtht)o30dn1"
      restartPolicy: Never
      volumes:
        - name: createinitialuser
          configMap:
            name: release-name-taiga-createinitialuser
            defaultMode: 0744
  backoffLimit: 4
---
# Source: taiga/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-taiga
  labels:
    app.kubernetes.io/name: taiga
    helm.sh/chart: taiga-0.0.11
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: 16m
spec:
  ingressClassName: nginx
  rules:
    - host: taiga.127-0-0-1.nip.io
      http:
        paths:
        - path: /
          backend:
            service:
              name: "release-name-taiga-back"
              port:
                name: taiga-gateway
          pathType: ImplementationSpecific
