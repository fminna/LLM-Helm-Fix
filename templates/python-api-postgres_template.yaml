---
# Source: python-api-postgres/templates/flaskapi-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flaskapi-secrets
type: Opaque
data:
  db_root_password: bWlsdG9uZg==
  database: cG9zdGdyZXM=
  db_user: YWRtaW4=
---
# Source: python-api-postgres/templates/postgres-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
type: Opaque
data:
  db_root_password: bWlsdG9uZg==
  database: cG9zdGdyZXM=
  db_user: YWRtaW4=
---
# Source: python-api-postgres/templates/flaskapi-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flaskapi-config
  labels:
    app: flaskapi
data:
  FLASK_APP: run.py
  FLASK_DEBUG: "0"
  FLASK_ENV: production
  TESTING: "False"
  DATABASE_URL: postgresql://postgresadmin:admin123@postgres:5432/postgresdb
  SK: yS6xsprA0gTuBWO_vV2JVQ
  SEND_FILE_MAX_AGE_DEFAULT: "31556926"
  BCRYPT_LOG_ROUNDS: "13"
  DEBUG_TB_ENABLED: "False"
  DEBUG_TB_INTERCEPT_REDIRECTS: "False"
  CACHE_TYPE: simple
  SQLALCHEMY_TRACK_MODIFICATIONS: "False"
  CSRF_ENABLED: "True"
  RESTPLUS_MASK_SWAGGER: "False"
---
# Source: python-api-postgres/templates/postgres-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: postgresadmin
  POSTGRES_PASSWORD: admin123
---
# Source: python-api-postgres/templates/postgres-storage.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
# Source: python-api-postgres/templates/postgres-storage.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Source: python-api-postgres/templates/flaskapi-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: flaskapi
  type: NodePort
---
# Source: python-api-postgres/templates/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres
---
# Source: python-api-postgres/templates/flaskapi-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapi-deployment
  labels:
    app: flaskapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flaskapi
  template:
    metadata:
      labels:
        app: flaskapi
    spec:
      containers:
        - name: flaskapi
          image: miltex/python-api:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: flaskapi-config
---
# Source: python-api-postgres/templates/postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:12.2
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
