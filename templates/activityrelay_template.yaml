---
# Source: activityrelay/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: activityrelay/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
---
# Source: activityrelay/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-activityrelay
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
---
# Source: activityrelay/templates/secrets-actor-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-activityrelay-actor-key
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
data:
  actor.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBejZLZ0t3UUFkN2VaQ3BnZERGZ1BGSUY3b2tZZVo0Y1A1dWd1bnU0TDZnazJRZkJsCnNNVyt1dkVxYXpwZGdCV1FiQ1ltM0JCM0hNTDRORS9ubnZWYmtiNklHTTBzMTFvSy9ZRVJ5SERLQUl3cTJ4clUKSXF4Q252YUlXbFVDWlAyV2dCVkhzKzM2ZXlEV2JLNHF2V1UyY2dSdkNCeWwyWG1MN1pQUUhGWjhVTHlpSGhVYgpwaUM4SFFSUC9Xc2xyWFRuMFA1bEF1NFlyN2ROMGZUc1FPWEdheWxxOG82anZKSDI5SzU2b2U2OE5kWXRSTHdnCkY4blhJTmh6THN6UlRRWDFMSHlENE1mK3grZlJvSUpnNVZwRjFRdS82dHY1blN4U25jLzgrb2xObEhTeU02WXkKUUdyekNPQVRxcElzaVFPWHNLUnFiNUpuV3lLSGFhUE9Zc3V2RFBrbGdGa3BXRjFaZkpSWFp0cXV1MGdjVnJldApsM0RMOFdHZWd0c2FEa21qbWJXVXBwUHdSTXI3VnpqZXc4YXI3c0d3MENORHhNU3dDZGl3K3B5K0RabzdJcDBwCnNiR2QyN1M2bUQ4R2RKeGpvMER6eTIramRhUkFNZUI5c0JZR2RDV0NjV0xPN2ZLWE9wQ0RIWHp0RVJoMy9rd04KVDZFcGgrU0NETmhpL1I0aUliL3E0aUNyKzQ1Q1RZZHg1MUN3MklheitrK3oveElXREgvNG51MisrSXNpZkNIMwp3bWhRVHR0KzZnZWFZY3NhWENMSjRkaWtYZy9PUmEwYmp2dzNEQ0xYWDVWdExZSWE0bVJjaTA4U1oxdjRhdGZCClQ2V0RyZWV0RnNBRHZ2cjFnMWt4V1BOTVkxNm9kcHpNK0Y0M1hvdzIrOVRYV0VEcGVibHBRQWY2YlZjQ0F3RUEKQVFLQ0FnQnpvdnVXMlZTMVY5LzQ0WHlVQ2xyanJiVkFTOUxWRDRoUXJoQ0EzTXh2M0ErR3E2N0d3MnFVeklrMgpUTHdVQUc1OWZNWDVtNFhxMDc3Tnk0NlFuYzhRblU5SW1NUVhiNE5kYWN1UW1SZzNNOWtPUzZQSFo2NTJ2NUJ5CjFwTk4wVmxISGhMZjUzS3ZyanNkTGVhSnNsdWZKazc3OHBCL1RNMGNWRXo3NjBLeTZFdFZlNlg1WUpQRGlVcFAKTmFRM05UdUJ6cHhOQkhObE1TNDY5eSs0ZVArSFlQcTUrYXpBOFgzYkNXMHMwRHVydEF0a0UyM0FNZDRJNGVOTQpOaTkrdVFteGErczZmY2VzWjdQOHMzL3BXOXcyYWFQSjFoYnZiT2JhRXlLdUdWZkdqVE5OeG9xSUM4Z3NzamJoCnNTVHliYmpHWE5zV0pqQS90anc2SGt0c0JFb0phNm8yMHAyV2Z4THUrbmpNRlI3c2Q4Q2Fha0xUNVViWjExQkoKMlJ1dURPSnVFaWNGeHlJTnhjbE05RlBZSXJtY3lQZXVZUFhTR2lMbW8wYUdHeE5QL2V4RXFrR3o2a1NZUkhhawpDOXZta3ZRWEtCeHV6VTlIalVPdmV6VnZ0ZTBvTDh4VWYrNWJ5US9HbUZIT1lxOG5JYlNyQndNdWJpbnVXcUE5CnRObE95WW9yY2hzU3RDaWJLSXYzdWZLNkFMemZrL3JVMEgyWjdpeUpGL2VEVk94RDhSa2l3U3Z3RTRLVGRDWDcKSDB4R2dCVytOWmxvbUNlMkFRR2trdUFXcExreFhkbDZ3WmNNam8wcklrRVd3R1d1L0hxMVA4clR4VERvMEIxSgpITDFhd2I4RXIraDNWWjR3eitNc21DbWxreEN1VDZQZnFoNmxRaUJIcm50ODd2MHV5UUtDQVFFQTdsdXdUaTczCjdTNllMbGFGY1lhWkpoOGp4SWJRbk5ZbTg0Sjlxb2ZBVjVpczI5TUJUODEzUk40VEdBajJQTDN5TXBud0FnT04Kb2JmMTlkNk5sMTRkNDZpcDcrOC9QVEs1SXZIc1kzNHJURWd2T20rT1QyU0c0U2Z4bWxFdWw3dGg1aUt4LzRURgp6WTd4Wk5pYjI2S3BvcUVHaDVNRkJQNWVJbkh6K1l3VCtPdUlnNUJyWHhSNDJrWmtYb25CSk1hZE1qOERoaCtTCmpBdTFoRFBoRnZPaEk0dUtiV1o5QkQycXl5cmVlNnp6eElNQUE2ZkNzQUMraC9oY3ZUSktLT2dFTFRISWRGRWgKWVlodFN2Z0xEUDA1blVTd1hNY1BoN2ljODNMMDJXNzdtbWlLT3ZlQTdvSTF0Y1ExbVNENkVxRDRmS1NXSU1WQgpER3h1cGhJcHVybElMUUtDQVFFQTN3RFA2dmE0d0o3eGt5QVliM0R3dmtQYkZLdE5rLzdHVTJubXdQRVZBb0E3Cm13SnU4VVpuNzVGUjNUT2VFSldHRnh0QnV3NmJEb21lRkZpT2pOb2xYRnVRQWhuUGJKRCtCUWxwdUZaSUJERDEKQUtLQkd6ekNZMjQ4YzhrbmxqUmNDTFJCZ2ZuNEQ3M0VBUkZmeU5vclRad0VtUitWcnk1RVFuZ1JtSys3MHBxZAo1QnVrVFlSTUd4bnpDVE5zS3JzQlNMTGdoN1BRclRCTURXUGllRE5taEZ3dEFYRWVIZk5MeWZSemJXaEFYcXVFCkJXL2o3NzlSNVZWT1lCdVhBaTA3QTJ4V3Rwa1ZQYmQ4WjVwWXUwQnNkSG5vWjJGVVpMYUNMQXpKT1ZJWmhXT2oKSU5kUG5LbzB2a05XZ0thU3pXbXV0eWtVNGVQbXlpelZjU1pZUEd1YUV3S0NBUUVBd3dNckhOeGFwYWZ3aEVEdgpqckZUelplK21NVEFHd0V1L3gzdEdMOVdRNVM3SUdMamVOb2UwYTVycXNkeVJzSVZUUWNiRVZxODN1bjJoMEdkClVKR0ZITVRhdkY1ZXZBQXE3b2RHSXlTUDRpcFEwWnVCc0QwTUNWeTMwOHpGdFFodkVXMmplZTIwTS9qV1VPN1QKblgvWkVDQjBpaWxqK3ZEdUxYcFQ1UUNST3AvaG9kcGZybnUrWUw4azBTQWRjS3c2NG1naHh2TS8zK3FZaU9BMQpNYVVFV21PSlR2YUNKQjBjQm5zOWFheFlDSmd4UTh4V2djOHFFMjdFMlZveXlJTURIOExTUVRBN2dtT3ZINTRPCjFJSzlSNGx5VFlYamsrUWNMU1lKWTNma3pERHBuMUx1SHJWVG9qSTBzK01DRm9teW82KzQwSGp5UG1yY29Hek4KeldKWHhRS0NBUUF2b1k3SFV2ZFhQUnZBSHdUWkdMaHpDeTlLRk9TM0RaM3l4eFhnZEIzV3NPa0tUTlRCZUJaUApGeXp6SUVsTXBZTkVnQy9qOGxTd0lEakJnOEMrMlFGTjNzaTlpaUhCd0o1aEdRZVp0ZVFmOFEwRG03SVR6VUIvCjJGWFZMVXZsU3oyMUpqc3Z0ZUtFQ2paSlBCckhYY0lPQzVyMzBjVTQ2NXJzejVTQ2xsWjV2MGltSmpsTHpVd3MKSmJqQmFGaGNNQ0V3RS9UZFIwejFFUEhOa2w0VzZuT2xKY0wvSWRnYThaSm9pbXYxSEdWVFV6TVpyakp6VE53RApMZHRWcjg3clNobm11MGN5TFRSYVFFeTBIRVdEaVZrZzc4RHlBOW53d1FMQXdlSmcrZVkxbFhpTVZURE45NVRZClpxMmRRUGJ1SlBxS2FKM3JPYkJiMG9Pc2JWSS9aWVE5QW9JQkFHMVp4VUZndkR6TFp6a0IybzgrSk5CRWh4YVUKdWZhK3NrKzJVcFZ3WjlZK2V0WndDR0RZdU9PeExBeUdpVXV5dXBxdEVXMVNybVJrUEhVN0F1ZFZmR1hyTWxCYQpSMmlhSEtHdGg4TzFuYUw5eTZxNWVweGs1UUNCRS9GRWVHNWxzSStRSkxXVTlnekx0dUhPNU1FQ2Q4a3Zlb3N4CkVOSUF5QWFTWDA0NzlCWnR4UVlJd3NHdnE3UW04WVMxeWRoMVNONVZ0OC8yQWludEJkL1liY3RXMTYvc3lHaW0KN3NYUHZMYVpyZ2VlRnljSUxyandNV0I2L3JLb3ZNQ2k2blNSa2pqUDNyUjV1NFMva2ZJblo4MndWZXIwblZqegpvZ0VqSGpwTm15UmsvbGdoc1UySUhwOVlWUytFVHdiQzl0NGNpclBOWWMyUFBROW5ISUZNbUpPZHZPZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: activityrelay/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: activityrelay/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: activityrelay/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: activityrelay/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-activityrelay-config
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
data:
  ACTOR_PEM: "/var/lib/relay/actor.pem"
  REDIS_URL: "redis://release-name-redis-master:6379"
  RELAY_BIND: "0.0.0.0:8080"
  RELAY_DOMAIN: "relay.example.com"
  RELAY_SERVICENAME: "Example ActivityPub Relay Service"
  JOB_CONCURRENCY: "50"
---
# Source: activityrelay/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
---
# Source: activityrelay/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: activityrelay/templates/service-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-activityrelay-server
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: server
---
# Source: activityrelay/templates/deployment-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-activityrelay-server
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: activityrelay
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: activityrelay
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: release-name-activityrelay
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsNonRoot: true
        runAsUser: 991
      containers:
        - name: activityrelay-server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: false
          image: "docker.io/yukimochi/activity-relay:v2.0.5"
          imagePullPolicy: IfNotPresent
          command: [ "/usr/bin/relay" ]
          args:
            - server
            - --verbose
          envFrom:
            - configMapRef:
                name: release-name-activityrelay-config
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /nodeinfo/2.1
              port: 8080
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 6
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /nodeinfo/2.1
              port: 8080
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 1
          volumeMounts:
            - name: actor-key
              mountPath: /var/lib/relay
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: actor-key
          secret:
            secretName: release-name-activityrelay-actor-key
        - name: tmp
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: workers
            topologyKey: kubernetes.io/hostname
---
# Source: activityrelay/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-activityrelay-worker
  labels:
    helm.sh/chart: activityrelay-1.0.40
    app.kubernetes.io/name: activityrelay
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: activityrelay
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: activityrelay
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: release-name-activityrelay
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsNonRoot: true
        runAsUser: 991
      containers:
        - name: activityrelay-worker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: false
          image: "docker.io/yukimochi/activity-relay:v2.0.5"
          imagePullPolicy: IfNotPresent
          command: [ "/usr/bin/relay" ]
          args:
            - worker
            - --verbose
          envFrom:
            - configMapRef:
                name: release-name-activityrelay-config
          volumeMounts:
            - name: actor-key
              mountPath: /var/lib/relay
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: actor-key
          secret:
            secretName: release-name-activityrelay-actor-key
        - name: tmp
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: workers
            topologyKey: kubernetes.io/hostname
---
# Source: activityrelay/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.3.0
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.3.0
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: release-name-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
