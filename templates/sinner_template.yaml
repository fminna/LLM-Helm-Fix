---
# Source: sinner/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
  ingress:
    # Allow inbound connections
    - ports:
        - port: 3306
    # Allow prometheus scrapes
    - ports:
        - port: 9104
---
# Source: sinner/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: sinner-mysql
---
# Source: sinner/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sinner
  labels:
    helm.sh/chart: sinner-0.1.0
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: sinner/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "TXlzcWxQYXNzd29yZA=="
  mysql-password: "TGpGRHlRSlg4Ng=="
---
# Source: sinner/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: sinner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sinner-release-name
  labels:
    app: release-name-sinner
    chart: "sinner"
    release: release-name
    heritage: Helm
data:
  config.yaml: |-
    default_refresh_rate: 1
    scribe_url: "http://scribe.interop-staging.com/graphql"
    db_path: "root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true"
    db_type: mysql
    skip_migrations: false
    chains:
      - chain_id: 444
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
      - chain_id: 421614
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
      - chain_id: 11155111
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
  serverConfig.yaml: |-
    http_port: 5080
    db_path: "root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true"
    db_type: mysql
    skip_migrations: true
---
# Source: sinner/charts/mysql/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sinner-mysql-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9104'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 9104
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
---
# Source: sinner/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: sinner-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: sinner/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: sinner/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sinner
  labels:
    helm.sh/chart: sinner-0.1.0
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 5080
  selector:
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    sinner-type: server
---
# Source: sinner/templates/indexer_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sinner-indexer
  labels:
    helm.sh/chart: sinner-0.1.0
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sinner
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 788aa6ed2c9f417c838ef27ab9aabb4d63b4663fb949e7c86e8f2ce4fdc4c369
      labels:
        app.kubernetes.io/name: sinner
        app.kubernetes.io/instance: release-name
        
        sinner-type: indexer
    spec:
      serviceAccountName: release-name-sinner
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp -v /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: sinner-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: sinner-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - bash
          - -c
          - until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute="CREATE
            DATABASE IF NOT EXISTS sinner"; do 'echo waiting for db'; sleep 10; done
          env:
          - name: POD_NAME
            value: sinner-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: mysql/mysql-server:latest
          imagePullPolicy: IfNotPresent
          name: create-database-sinner
      containers:
        - name: sinner
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/sinner:latest"
          imagePullPolicy: Always
          args:
            - indexer
            - --config=/config/config.yaml
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
          env:
            - name: GOLOG_LOG_FMT
              value: json
          volumeMounts:
            - name: configmap
              mountPath: /config
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: release-name-sinner-release-name
---
# Source: sinner/templates/server_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sinner-server
  labels:
    helm.sh/chart: sinner-0.1.0
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sinner
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 788aa6ed2c9f417c838ef27ab9aabb4d63b4663fb949e7c86e8f2ce4fdc4c369
      labels:
        app.kubernetes.io/name: sinner
        app.kubernetes.io/instance: release-name
        
        sinner-type: server
    spec:
      serviceAccountName: release-name-sinner
      securityContext:
        {}
      initContainers:
        - name: copy-release-name-config
          image: busybox
          command: ['sh', '-c', 'cp -v /configmap/* /config/']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: release-name-config
              mountPath: /config
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: sinner-omnirpc
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-omnirpc
        - command:
          - sh
          - -c
          - until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql...";
            sleep 1; done;
          env:
          - name: POD_NAME
            value: sinner-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-mysql
        - command:
          - bash
          - -c
          - until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute="CREATE
            DATABASE IF NOT EXISTS sinner"; do 'echo waiting for db'; sleep 10; done
          env:
          - name: POD_NAME
            value: sinner-mysql
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: mysql/mysql-server:latest
          imagePullPolicy: IfNotPresent
          name: create-database-sinner
      containers:
        - name: sinner
          securityContext:
            {}
          image: "ghcr.io/synapsecns/sanguine/sinner:latest"
          imagePullPolicy: Always
          args:
            - server
            - --config=/config/config.yaml
          ports:
            - containerPort: 5080
              name: http
          env:
            - name: GOLOG_LOG_FMT
              value: json
          livenessProbe:
            httpGet:
              path: /health-check
              port: http
          readinessProbe:
            httpGet:
              path: /health-check
              port: http
          volumeMounts:
            - name: configmap
              mountPath: /config
          resources:
            {}
      volumes:
        - name: release-name-config
          emptyDir: {}
        - name: configmap
          configMap:
            name: release-name-sinner-release-name
---
# Source: sinner/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sinner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.3.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: sinner-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 9fb3d8c2d0f960d6d251b183c92c0ba08e29f3a289d9802cca793809308675b8
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.3.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: sinner-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.30-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sinner-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "sinner"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
        - name: metrics
          image: docker.io/bitnami/mysqld-exporter:0.14.0-debian-11-r33
          imagePullPolicy: "IfNotPresent"
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sinner-mysql
                  key: mysql-root-password
          command:
            - /bin/bash
            - -ec
            - |
              password_aux="${MYSQL_ROOT_PASSWORD:-}"
              if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                  password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
              fi
              DATA_SOURCE_NAME="root:${password_aux}@(localhost:3306)/" /bin/mysqld_exporter
          ports:
            - name: metrics
              containerPort: 9104
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /metrics
              port: metrics
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: config
          configMap:
            name: sinner-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: sinner/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-sinner-test-connection"
  labels:
    helm.sh/chart: sinner-0.1.0
    app.kubernetes.io/name: sinner
    app.kubernetes.io/instance: release-name
    
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-sinner:80/health-check']
  restartPolicy: Never
