---
# Source: iotagent-ul/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-iotagent-ul
  labels:
    app.kubernetes.io/name: iotagent-ul
    helm.sh/chart: iotagent-ul-0.1.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
data:
  config.js: |-
    let config = {};

    /**
     * Configuration for the HTTP transport binding.
     */
    config.http = {
        /**
         * South Port where the Ultralight transport binding for HTTP will be listening for device requests.
         */
        port: 7896,
        /**
         * HTTP Timeout for the http command endpoint (in milliseconds).
         */
        timeout: 1000
        /**
         * Path to your private key for HTTPS binding
         */
        // key: <path_to_private_key>
        /**
         * Path to your certificate for HTTPS binding
         */
        // cert: <path_to_cert>
    };

    config.iota = {
        /**
         * Configures the log level. Appropriate values are: FATAL, ERROR, INFO, WARN and DEBUG.
         */
        logLevel: 'DEBUG',

        /**
         * When this flag is active, the IoTAgent will add the TimeInstant attribute to every entity created, as well
         * as a TimeInstant metadata to each attribute, with the current timestamp.
         */
        timestamp: true,

        /**
         * Context Broker configuration. Defines the connection information to the instance of the Context Broker where
         * the IoT Agent will send the device data.
         */
        contextBroker: {
            /**
             * Host where the Context Broker is located.
             */
            host: 'orion',

            /**
             * Port where the Context Broker is listening.
             */
            port: '1026'
        },

        /**
         * Configuration of the North Port of the IoT Agent.
         */
        server: {
            /**
             * Port where the IoT Agent will be listening for NGSI and Provisioning requests.
             */
            port: 4061
        },

        /**
         * Configuration for secured access to instances of the Context Broker secured with a PEP Proxy.
         * For the authentication mechanism to work, the authentication attribute in the configuration has to be fully
         * configured, and the authentication.enabled subattribute should have the value `true`.
         *
         * The Username and password should be considered as sensitive data and should not be stored in plaintext.
         * Either encrypt the config and decrypt when initializing the instance or use environment variables secured by
         * docker secrets.
         */

        /**
         * Configuration for the IoT Manager. If the IoT Agent is part of a configuration composed of multiple IoTAgents
         * coordinated by an IoT Manager, this section defines the information that will be used to connect with that
         * manager.
         */
        /**
         * Defines the configuration for the Device Registry, where all the information about devices and configuration
         * groups will be stored. There are currently just two types of registries allowed:
         *
         * - 'memory': transient memory-based repository for testing purposes. All the information in the repository is
         *             wiped out when the process is restarted.
         *
         * - 'mongodb': persistent MongoDB storage repository. All the details for the MongoDB configuration will be read
         *             from the 'mongoDb' configuration property.
         */
        deviceRegistry: {
            type: 'memory'
        },

        /**
         * Mongo DB configuration section. This section will only be used if the deviceRegistry property has the type
         * 'mongodb'.
         */
        /**
         *  Types array for static configuration of services. Check documentation in the IoT Agent Library for Node.js for
         *  further details:
         *
         *      https://github.com/telefonicaid/iotagent-node-lib#type-configuration
         */
        types: {},

        /**
         * Default service, for IoT Agent installations that won't require preregistration.
         */
        service: 'howtoService',

        /**
         * Default subservice, for IoT Agent installations that won't require preregistration.
         */
        subservice: '/howto',

        /**
         * URL Where the IoT Agent Will listen for incoming updateContext and queryContext requests (for commands and
         * passive attributes). This URL will be sent in the Context Registration requests.
         */
        providerUrl: 'http://localhost:4061',

        /**
         * Default maximum expire date for device registrations.
         */
        deviceRegistrationDuration: 'P20Y',

        /**
         * Default type, for IoT Agent installations that won't require preregistration.
         */
        defaultType: 'Thing',

        /**
         * flag indicating whether the incoming measures to the IoTAgent should be processed as per the "attributes" field.
         */
        explicitAttrs: false
    };

    /**
     * flag indicating whether the incoming notifications to the IoTAgent should be processed using the bidirectionality
     * plugin from the latest versions of the library or the UL-specific configuration retrieval mechanism.
     */
    config.configRetrieval = false;

    /**
     * Default API Key, to use with device that have been provisioned without a Configuration Group.
     */
    config.defaultKey = 'TEF';

    /**
     * Default transport protocol when no transport is provisioned through the Device Provisioning API.
     */
    config.defaultTransport = 'HTTP';

    module.exports = config;
---
# Source: iotagent-ul/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-iotagent-ul
  labels:
    
    app.kubernetes.io/name: iotagent-ul
    helm.sh/chart: iotagent-ul-0.1.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http-north
      port: 4061
      protocol: TCP
      targetPort: 4061
    - name: http-south
      port: 7896
      protocol: TCP
      targetPort: 7896
    - name: mqtt
      port: 1883
      protocol: TCP
      targetPort: 1883
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
  selector:
    app.kubernetes.io/name: iotagent-ul
    app.kubernetes.io/instance: release-name
---
# Source: iotagent-ul/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-iotagent-ul
  labels:
    
    app.kubernetes.io/name: iotagent-ul
    helm.sh/chart: iotagent-ul-0.1.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  
  revisionHistoryLimit: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: iotagent-ul
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: iotagent-ul
        helm.sh/chart: iotagent-ul-0.1.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.14.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      containers:
        - name: iotagent-ul
          imagePullPolicy: IfNotPresent
          image: "fiware/iotagent-ul:1.14.0"
          ports:
            - name: http-north
              containerPort: 4061
              protocol: TCP
            - name: http-south
              containerPort: 7896
              protocol: TCP
            - name: mqtt
              containerPort: 1883
              protocol: TCP
            - name: amqp
              containerPort: 5672
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /iot/about
              port: http-north
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /iot/about
              port: http-north
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 31
          env:
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /opt/iotaul/config.js
              subPath: config.js
      volumes:
        - name: config-volume
          configMap:
            name: release-name-iotagent-ul
            items:
              - key: config.js
                path: config.js
