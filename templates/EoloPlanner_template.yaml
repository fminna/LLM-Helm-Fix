---
# Source: EoloPlanner/templates/network-policies/np-allow-dns.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-k8s-dns
spec:
  podSelector: {}
  egress:
    - to:
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            k8s-app: kube-dns
      ports:
        - port: 53
          protocol: UDP
---
# Source: EoloPlanner/templates/network-policies/np-deny-all.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []
---
# Source: EoloPlanner/templates/network-policies/np-planner-rabbitmq.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: planner-to-rabbitmq
spec:
  podSelector:
    matchLabels:
      app: planner
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: rabbitmq
      ports:
      - port: 5672
        protocol: TCP
---
# Source: EoloPlanner/templates/network-policies/np-planner-rabbitmq.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rabbitmq-from-planner
spec:
  podSelector:
    matchLabels:
      app: rabbitmq
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: planner
      ports:
      - protocol: TCP
        port: 5672
---
# Source: EoloPlanner/templates/network-policies/np-planner-weather.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: planner-to-weather
spec:
  podSelector:
    matchLabels:
      app: planner
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: weatherservice
      ports:
      - port: 9090
        protocol: TCP
---
# Source: EoloPlanner/templates/network-policies/np-planner-weather.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: weather-from-planner
spec:
  podSelector:
    matchLabels:
      app: weatherservice
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: planner
      ports:
      - protocol: TCP
        port: 9090
---
# Source: EoloPlanner/templates/network-policies/np-server-internet.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: server-external-ingress
spec:
  podSelector:
    matchLabels:
      app: serverservice
  ingress:
    - from: []
      ports:
      - protocol: TCP
        port: 8080
---
# Source: EoloPlanner/templates/network-policies/np-server-mysql.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: server-to-mysql
spec:
  podSelector:
    matchLabels:
      app: serverservice
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: mysql
      ports:
      - port: 3306
        protocol: TCP
---
# Source: EoloPlanner/templates/network-policies/np-server-mysql.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mysql-from-server
spec:
  podSelector:
    matchLabels:
      app: mysql
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: serverservice
      ports:
      - protocol: TCP
        port: 3306
---
# Source: EoloPlanner/templates/network-policies/np-server-rabbitmq.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: server-to-rabbitmq
spec:
  podSelector:
    matchLabels:
      app: serverservice
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: rabbitmq
      ports:
      - port: 5672
        protocol: TCP
---
# Source: EoloPlanner/templates/network-policies/np-server-rabbitmq.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rabbitmq-from-server
spec:
  podSelector:
    matchLabels:
      app: rabbitmq
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: serverservice
      ports:
      - protocol: TCP
        port: 5672
---
# Source: EoloPlanner/templates/network-policies/np-topo-mongo.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: topo-to-mongo
spec:
  podSelector:
    matchLabels:
      app: toposervice
  egress:
    - to:
      - podSelector:
          matchLabels:
            app: mongodb
      ports:
      - port: 27017
        protocol: TCP
---
# Source: EoloPlanner/templates/network-policies/np-topo-mongo.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mongo-from-topo
spec:
  podSelector:
    matchLabels:
      app: mongodb
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: toposervice
      ports:
      - protocol: TCP
        port: 27017
---
# Source: EoloPlanner/templates/volumes/mongodb-pv.yml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mongodb-pv
spec:
  storageClassName: mongodb-class
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/db/mongo"
---
# Source: EoloPlanner/templates/volumes/mysql-pv.yml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: mysql-class
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/db/mysql"
---
# Source: EoloPlanner/templates/volumes/mongodb-pv.yml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongodb-pvc
spec:
  storageClassName: mongodb-class
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
# Source: EoloPlanner/templates/volumes/mysql-pv.yml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
spec:
  storageClassName: mysql-class
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
# Source: EoloPlanner/templates/services/mongodb-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb-port-27017
    protocol: TCP
  - port: 27018
    targetPort: 27018
    name: mongodb-port-27018
    protocol: TCP
  - port: 27019
    targetPort: 27019
    name: mongodb-port-27019
    protocol: TCP
  type: ClusterIP
---
# Source: EoloPlanner/templates/services/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
    name: mysql-port
    protocol: TCP
  type: ClusterIP
---
# Source: EoloPlanner/templates/services/planner-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: planner
  labels:
    app: planner
spec:
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: planner-port
  selector:
    app: planner
  type: ClusterIP
---
# Source: EoloPlanner/templates/services/rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
  - port: 5672
    targetPort: 5672
    name: rabbit-port-5672
    protocol: TCP
  - port: 15672
    targetPort: 15672
    name: rabbit-port-15672
    protocol: TCP
  type: ClusterIP
---
# Source: EoloPlanner/templates/services/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: serverservice
  labels:
    app: serverservice
spec:
  selector:
    app: serverservice
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: serverservice-port
  type: NodePort
---
# Source: EoloPlanner/templates/services/toposervice-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: toposervice
  labels:
    app: toposervice
spec:
  selector:
    app: toposervice
  ports:
  - port: 8181
    targetPort: 8181
    protocol: TCP
    name: toposervice-port
  type: NodePort
---
# Source: EoloPlanner/templates/services/weatherservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: weatherservice
  labels:
    app: weatherservice
spec:
  selector:
    app: weatherservice
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
# Source: EoloPlanner/templates/deployments/mongodb-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0-focal        
        ports:
        - containerPort: 27017
          name: mongodb-27017
        - containerPort: 27018
          name: mongodb-27018
        - containerPort: 27019
          name: mongodb-27019
        env:
        - name: MONGO_PORT
          value: "27017"
        - name: MONGO_HOST
          value: mongodb
        - name: MONGO_INITDB_DATABASE
          value: topoDB
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: password
        volumeMounts:
        - name: mongodb-persistent-storage
          mountPath: /data/db
      volumes:
      - name: mongodb-persistent-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
# Source: EoloPlanner/templates/deployments/mysql-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8        
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: MYSQL_HOST
          value: mysql
        - name: MYSQL_DATABASE
          value: eoloplantsDB
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# Source: EoloPlanner/templates/deployments/planner-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planner
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: planner
  template:
    metadata:
      labels:
        app: planner
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 3000
        fsGroup: 2000
      restartPolicy: Always
      containers:
      - name: planner
        image: mastercloudapps/planner:v1.23
        command: ["bash"]
        args:
        - "-c"
        - "./wait-for-it.sh weatherservice:9090 -t 500 && ./wait-for-it.sh toposervice:8181 -t 500 && ./wait-for-it.sh rabbitmq:5672 -t 500 && java -jar planner.jar"
        env:
        - name: TOPO_HOST
          value: toposervice
        - name: TOPO_PORT
          value: "8181"
        - name: GRPC_CLIENT_WEATHERSERVER_ADDRESS
          value: static://weatherservice:9090
        - name: SPRING_CLOUD_STREAM_RABBIT_BINDER_NODES
          value: rabbitmq:5672
        - name: SPRING_RABBITMQ_HOST
          value: rabbitmq
        - name: SPRING_RABBITMQ_PORT
          value: "5672"
        - name: SPRING_RABBITMQ_USERNAME
          value: root
        - name: SPRING_RABBITMQ_PASSWORD
          value: password        
  replicas: 1
---
# Source: EoloPlanner/templates/deployments/rabbitmq--deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.11-management        
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_HOST
          value: rabbitmq
        - name: RABBITMQ_DEFAULT_USER
          value: root
        - name: RABBITMQ_DEFAULT_PASS
          value: password
  replicas: 1
---
# Source: EoloPlanner/templates/deployments/server-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: serverservice
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: serverservice
  template:
    metadata:
      labels:
        app: serverservice
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 3000
        fsGroup: 2000
      restartPolicy: Always
      containers:
      - name: serverservice
        image: mastercloudapps/server:v1.23
        securityContext:
          allowPrivilegeEscalation: false        
        ports:
        - containerPort: 8080
        env:
        - name: QUARKUS_DATASOURCE_DB_KIND
          value: mysql
        - name: QUARKUS_DATASOURCE_JDBC_URL
          value: jdbc:mysql://mysql/eoloplantsDB
        - name: QUARKUS_DATASOURCE_USERNAME
          value: root
        - name: QUARKUS_DATASOURCE_PASSWORD
          value: password      
        - name: RABBITMQ_HOST
          value: rabbitmq
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_USERNAME
          value: root
        - name: RABBITMQ_PASSWORD
          value: password
        - name: RABBITMQ_URL
          value: amqp://root:password@rabbitmq
  replicas: 1
---
# Source: EoloPlanner/templates/deployments/toposervice-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: toposervice
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: toposervice
  template:
    metadata:
      labels:
        app: toposervice
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 3000
        fsGroup: 2000
      restartPolicy: Always
      containers:
      - name: toposervice
        image: mastercloudapps/toposervice:v1.23        
        env:
        - name: TOPO_PORT
          value: "8181"
        - name: SPRING_DATA_MONGODB_HOST
          value: mongodb
        - name: SPRING_DATA_MONGODB_PORT
          value: "27017"
        - name: SPRING_DATA_MONGODB_DATABASE
          value: topoDB
        - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
          value: admin
        - name: SPRING_DATA_MONGODB_USERNAME
          value: root
        - name: SPRING_DATA_MONGODB_PASSWORD
          value: password
        ports:
        - containerPort: 8181
  replicas: 1
---
# Source: EoloPlanner/templates/deployments/weatherservice-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weatherservice
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: weatherservice
  template:
    metadata:
      labels:
        app: weatherservice
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 3000
        fsGroup: 2000
      restartPolicy: Always
      containers:
      - name: weather
        image: mastercloudapps/weatherservice:v1.23
        securityContext:
          allowPrivilegeEscalation: false        
        env:
        - name: QUARKUS_GRPC_SERVER_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: QUARKUS_GRPC_SERVER_PORT
          value: "9090"
        ports:
        - containerPort: 9090
  replicas: 1
---
# Source: EoloPlanner/templates/ingresses/server-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: server-ingress
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: serverservice
            port:
              number: 8080
    host: mastercloudapps
