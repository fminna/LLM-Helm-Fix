---
# Source: rt/templates/svcaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: rt
  name: rt
---
# Source: rt/charts/nginx/templates/secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-nginx-certs
  labels:
    name: nginx
    instance: nginx
    chart: nginx-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  priv.pem: |
    
  pub.pem: |
---
# Source: rt/charts/nginx/templates/secret-conf.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-nginx-conf
  labels:
    name: nginx
    instance: nginx
    chart: nginx-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  default.conf: c2VydmVyIHsKICBsaXN0ZW4gODA7CiAgbGlzdGVuIFs6Ol06ODA7CgogIHNlcnZlcl9uYW1lIGxvY2FsaG9zdDsKCiAgYWNjZXNzX2xvZyAvdmFyL2xvZy9uZ2lueC9hY2Nlc3MubG9nIG1haW47CiAgZXJyb3JfbG9nIC92YXIvbG9nL25naW54L2Vycm9yLmxvZzsKCiAgcm9vdCAvdXNyL3NoYXJlL25naW54L2h0bWw7CgogICMgZGlzYWJsZSBzaXplIGNoZWNrcwogIGNsaWVudF9tYXhfYm9keV9zaXplIDA7CgogIGVycm9yX3BhZ2UgICA1MDAgNTAyIDUwMyA1MDQgIC81MHguaHRtbDsKICBsb2NhdGlvbiA9IC81MHguaHRtbCB7CiAgICByb290ICAgL3Vzci9zaGFyZS9uZ2lueC9odG1sOwogIH0gCgogIHRyeV9maWxlcyAkdXJpIEBydDsKCiAgIyB0aGlzIGNhbiBiZSByZXBsYWNlZCBieSBtb3VudGluZyBzb21lIG5naW54IHN0YXJ0dXAgc2NyaXB0cwogICMgX19TRVJWRVJfUkVQTEFDRV9fCgogICMgaHR0cHM6Ly9kb2NzLmJlc3RwcmFjdGljYWwuY29tL3J0LzUuMC4xL3dlYl9kZXBsb3ltZW50Lmh0bWwjbmdpbngKICBsb2NhdGlvbiBAcnQgewogICAgIyB0aGlzIGNhbiBiZSByZXBsYWNlZCBieSBtb3VudGluZyBzb21lIG5naW54IHN0YXJ0dXAgc2NyaXB0cwogICAgIyBfX0xPQ0FUSU9OX1JFUExBQ0VfXwoKICAgIGZhc3RjZ2lfcGFyYW0gIFFVRVJZX1NUUklORyAgICAgICAkcXVlcnlfc3RyaW5nOwogICAgZmFzdGNnaV9wYXJhbSAgUkVRVUVTVF9NRVRIT0QgICAgICRyZXF1ZXN0X21ldGhvZDsKICAgIGZhc3RjZ2lfcGFyYW0gIENPTlRFTlRfVFlQRSAgICAgICAkY29udGVudF90eXBlOwogICAgZmFzdGNnaV9wYXJhbSAgQ09OVEVOVF9MRU5HVEggICAgICRjb250ZW50X2xlbmd0aDsKCiAgICBmYXN0Y2dpX3BhcmFtICBTQ1JJUFRfTkFNRSAgICAgICAgIiI7CiAgICBmYXN0Y2dpX3BhcmFtICBQQVRIX0lORk8gICAgICAgICAgJHVyaTsKICAgIGZhc3RjZ2lfcGFyYW0gIFJFUVVFU1RfVVJJICAgICAgICAkcmVxdWVzdF91cmk7CiAgICBmYXN0Y2dpX3BhcmFtICBET0NVTUVOVF9VUkkgICAgICAgJGRvY3VtZW50X3VyaTsKICAgIGZhc3RjZ2lfcGFyYW0gIERPQ1VNRU5UX1JPT1QgICAgICAkZG9jdW1lbnRfcm9vdDsKICAgIGZhc3RjZ2lfcGFyYW0gIFNFUlZFUl9QUk9UT0NPTCAgICAkc2VydmVyX3Byb3RvY29sOwoKICAgIGZhc3RjZ2lfcGFyYW0gIEdBVEVXQVlfSU5URVJGQUNFICBDR0kvMS4xOwogICAgZmFzdGNnaV9wYXJhbSAgU0VSVkVSX1NPRlRXQVJFICAgIG5naW54LyRuZ2lueF92ZXJzaW9uOwoKICAgIGZhc3RjZ2lfcGFyYW0gIFJFTU9URV9BRERSICAgICAgICAkcmVtb3RlX2FkZHI7CiAgICBmYXN0Y2dpX3BhcmFtICBSRU1PVEVfUE9SVCAgICAgICAgJHJlbW90ZV9wb3J0OwogICAgZmFzdGNnaV9wYXJhbSAgU0VSVkVSX0FERFIgICAgICAgICRzZXJ2ZXJfYWRkcjsKICAgIGZhc3RjZ2lfcGFyYW0gIFNFUlZFUl9QT1JUICAgICAgICAkc2VydmVyX3BvcnQ7CiAgICBmYXN0Y2dpX3BhcmFtICBTRVJWRVJfTkFNRSAgICAgICAgJHNlcnZlcl9uYW1lOwoKICAgIGZhc3RjZ2lfcGFzcyBydDo5MDAwOwogIH0KfQ==
  mailgate.conf: c2VydmVyIHsKICAjIHNlcGFyYXRlIGNvbmZpZyBmaWxlIGZvciBtYWlsZ2F0ZSB0aGF0IG9ubHkgbGlzdGVucyBsb2NhbGx5CiAgIyBhbmQgaXMgbm90IGV4cG9zZWQuIFRoYXQgd2F5IHlvdSBjYW4gYWRkIGNsaWVudCBjZXJ0aWZpY2F0ZSBjaGVja3MKICAjIHRvIHRoZSBtYWluIGNvbmZpZyB3aXRob3V0IGJyZWFraW5nIHJ0LW1haWxnYXRlCgogIGxpc3RlbiA4MDgwOwogIGxpc3RlbiBbOjpdOjgwODA7CgogIHNlcnZlcl9uYW1lIGxvY2FsaG9zdDsKCiAgYWNjZXNzX2xvZyAvdmFyL2xvZy9uZ2lueC9hY2Nlc3MubG9nIG1haW47CiAgZXJyb3JfbG9nIC92YXIvbG9nL25naW54L2Vycm9yLmxvZzsKCiAgcm9vdCAvdXNyL3NoYXJlL25naW54L2h0bWw7CgogICMgZGlzYWJsZSBzaXplIGNoZWNrcwogIGNsaWVudF9tYXhfYm9keV9zaXplIDA7CgogIGVycm9yX3BhZ2UgICA1MDAgNTAyIDUwMyA1MDQgIC81MHguaHRtbDsKICBsb2NhdGlvbiA9IC81MHguaHRtbCB7CiAgICByb290ICAgL3Vzci9zaGFyZS9uZ2lueC9odG1sOwogIH0KCiAgdHJ5X2ZpbGVzICR1cmkgQHJ0OwoKICAjIHRoaXMgY2FuIGJlIHJlcGxhY2VkIGJ5IG1vdW50aW5nIHNvbWUgbmdpbnggc3RhcnR1cCBzY3JpcHRzCiAgIyBfX1NFUlZFUl9SRVBMQUNFX18KCiAgIyBodHRwczovL2RvY3MuYmVzdHByYWN0aWNhbC5jb20vcnQvNS4wLjEvd2ViX2RlcGxveW1lbnQuaHRtbCNuZ2lueAogIGxvY2F0aW9uIEBydCB7CiAgICAjIHRoaXMgY2FuIGJlIHJlcGxhY2VkIGJ5IG1vdW50aW5nIHNvbWUgbmdpbnggc3RhcnR1cCBzY3JpcHRzCiAgICAjIF9fTE9DQVRJT05fUkVQTEFDRV9fCgogICAgZmFzdGNnaV9wYXJhbSAgUVVFUllfU1RSSU5HICAgICAgICRxdWVyeV9zdHJpbmc7CiAgICBmYXN0Y2dpX3BhcmFtICBSRVFVRVNUX01FVEhPRCAgICAgJHJlcXVlc3RfbWV0aG9kOwogICAgZmFzdGNnaV9wYXJhbSAgQ09OVEVOVF9UWVBFICAgICAgICRjb250ZW50X3R5cGU7CiAgICBmYXN0Y2dpX3BhcmFtICBDT05URU5UX0xFTkdUSCAgICAgJGNvbnRlbnRfbGVuZ3RoOwoKICAgIGZhc3RjZ2lfcGFyYW0gIFNDUklQVF9OQU1FICAgICAgICAiIjsKICAgIGZhc3RjZ2lfcGFyYW0gIFBBVEhfSU5GTyAgICAgICAgICAkdXJpOwogICAgZmFzdGNnaV9wYXJhbSAgUkVRVUVTVF9VUkkgICAgICAgICRyZXF1ZXN0X3VyaTsKICAgIGZhc3RjZ2lfcGFyYW0gIERPQ1VNRU5UX1VSSSAgICAgICAkZG9jdW1lbnRfdXJpOwogICAgZmFzdGNnaV9wYXJhbSAgRE9DVU1FTlRfUk9PVCAgICAgICRkb2N1bWVudF9yb290OwogICAgZmFzdGNnaV9wYXJhbSAgU0VSVkVSX1BST1RPQ09MICAgICRzZXJ2ZXJfcHJvdG9jb2w7CgogICAgZmFzdGNnaV9wYXJhbSAgR0FURVdBWV9JTlRFUkZBQ0UgIENHSS8xLjE7CiAgICBmYXN0Y2dpX3BhcmFtICBTRVJWRVJfU09GVFdBUkUgICAgbmdpbngvJG5naW54X3ZlcnNpb247CgogICAgZmFzdGNnaV9wYXJhbSAgUkVNT1RFX0FERFIgICAgICAgICRyZW1vdGVfYWRkcjsKICAgIGZhc3RjZ2lfcGFyYW0gIFJFTU9URV9QT1JUICAgICAgICAkcmVtb3RlX3BvcnQ7CiAgICBmYXN0Y2dpX3BhcmFtICBTRVJWRVJfQUREUiAgICAgICAgJHNlcnZlcl9hZGRyOwogICAgZmFzdGNnaV9wYXJhbSAgU0VSVkVSX1BPUlQgICAgICAgICRzZXJ2ZXJfcG9ydDsKICAgIGZhc3RjZ2lfcGFyYW0gIFNFUlZFUl9OQU1FICAgICAgICAkc2VydmVyX25hbWU7CgogICAgZmFzdGNnaV9wYXNzIHJ0OjkwMDA7CiAgfQp9Cg==
---
# Source: rt/templates/secret-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-certs
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  pub.pem: |
---
# Source: rt/templates/secret-getmail.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-getmail
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  {}
---
# Source: rt/templates/secret-gpg.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-gpg
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  pubring.kbx: |-
    e30=
  random_seed: |-
    e30=
  trustdb.gpg: |-
    e30=
...
---
# Source: rt/templates/secret-kubeconfig.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeconfig
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  {}
---
# Source: rt/templates/secret-msmtp.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-msmtp
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  {}
---
# Source: rt/templates/secret-scripts.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-scripts
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  init.sh: |
    cGVybCAvb3B0L3J0NS9zYmluL3J0LXNldHVwLWRhdGFiYXNlIC0tYWN0aW9uIGluaXQgLS1kYmEtcGFzc3dvcmQ9ZzNudGwzbUBuLnBAc3M=
  drop.sh: |
    cGVybCAvb3B0L3J0NS9zYmluL3J0LXNldHVwLWRhdGFiYXNlIC0tYWN0aW9uIGRyb3AgLS1kYmEtcGFzc3dvcmQ9ZzNudGwzbUBuLnBAc3M=
  create.sh: |
    cGVybCAvb3B0L3J0NS9zYmluL3J0LXNldHVwLWRhdGFiYXNlIC0tYWN0aW9uIGNyZWF0ZSAtLWRiYS1wYXNzd29yZD1nM250bDNtQG4ucEBzcw==
  clone.sh: |
    cGVybCAvb3B0L3J0NS9zYmluL3J0LXNldHVwLWRhdGFiYXNlIC0tYWN0aW9uIGNyZWF0ZSxzY2hlbWEsYWNsIC0tZGJhLXBhc3N3b3JkPWczbnRsM21Abi5wQHNz
  import.sh: |
    cGVybCAvb3B0L3J0NS9zYmluL3J0LWltcG9ydGVyIC9yb290L2RhdGE=
  ldap.sh: |
    cnQtbGRhcGltcG9ydCAtLWltcG9ydCAtLXZlcmJvc2U=
---
# Source: rt/templates/secret-shredder.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-shredder
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  {}
---
# Source: rt/templates/secret-siteconfig.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rt-siteconfig
  labels:
    name: rt
    instance: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
    managed-by: helm
type: Opaque
data:
  {}
---
# Source: rt/charts/nginx/templates/cm-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-nginx-scripts
  labels:
    app: nginx
    chart: nginx-0.1.1
    release: release-name
    heritage: Helm

data:
  .keep: ""
  script.txt: nothing
...
---
# Source: rt/templates/cm-crls.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rt-crls
  labels:
    app: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm

data:
  {}
...
---
# Source: rt/templates/cm-cron.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cron
  labels:
    app: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm

data:
  {}
...
---
# Source: rt/charts/postgresql/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
...
---
# Source: rt/templates/pvc-cron.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cron
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
...
---
# Source: rt/templates/pvc-shredder.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shredder
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
...
---
# Source: rt/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-rt
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
...
---
# Source: rt/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: rt
  name: admin
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
# Source: rt/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: rt
  name: rtadmin
subjects:
  - kind: ServiceAccount
    name: rt
roleRef:
  kind: Role
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: rt/charts/nginx/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-nginx
  labels:
    app: nginx
    chart: nginx-0.1.1
    release: release-name
    heritage: Helm
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
    - name: https
      protocol: TCP
      port: 443
      targetPort: https
  selector:
    app: nginx
    release: release-name
  type: ClusterIP
---
# Source: rt/charts/postgresql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.2.3
    release: "release-name"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "release-name"
---
# Source: rt/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-rt
  labels:
    app: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
spec:
  ports:
    - name: request-tracker
      port: 9000
      targetPort: request-tracker
  selector:
    app: rt
    release: release-name
  type: ClusterIP
---
# Source: rt/charts/nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  release-name-nginx
  labels:
    app: nginx
    chart: nginx-0.1.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nginx
      release: release-name
  template:
    metadata: #todo: add cm checksums as annotation
      labels:
        app: nginx
        release: release-name
    spec:
      initContainers:
      - name: nginx-init-certs
        image: busybox
        command: ['sh', '-c', 'cp /certs/* /certsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: certs
          mountPath: /certs
        - name: certsworkingdir
          mountPath: /certsworkingdir
      - name: nginx-init-scripts
        image: busybox
        command: ['sh', '-c', 'cp /scripts/* /scriptsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: scriptsworkingdir
          mountPath: /scriptsworkingdir
      - name: nginx-init-conf
        image: busybox
        command: ['sh', '-c', 'cp /conf/* /confworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: conf
          mountPath: /conf
        - name: confworkingdir
          mountPath: /confworkingdir
      containers:
        - name: nginx
          image: "firefart/requesttracker:nginx-nightly-20230710"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: certsworkingdir
              mountPath: /certs/
            - name: scriptsworkingdir
              mountPath: /docker-entrypoint.d/
            - name: confworkingdir
              mountPath: /etc/nginx/conf.d/
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
      restartPolicy: Always
      volumes:
        - name: certs
          secret:
            secretName: release-name-nginx-certs
        - name: certsworkingdir
          emptyDir: {}
        - name: scripts
          configMap:
            name: release-name-nginx-scripts
        - name: scriptsworkingdir
          emptyDir: {}
        - name: conf
          secret:
            secretName: release-name-nginx-conf
        - name: confworkingdir
          emptyDir: {}
---
# Source: rt/templates/cron-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cron
  labels:
    app: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: rt
      release: release-name
  template:
    metadata: #todo: add cm checksums as annotation
      labels:
        app: rt
        release: release-name
    spec:
      initContainers:
      - name: rt-init-siteconfig
        image: busybox
        command: ['sh', '-c', 'cp /siteconfig/* /siteconfigworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: siteconfig
          mountPath: /siteconfig
        - name: siteconfigworkingdir
          mountPath: /siteconfigworkingdir
      - name: rt-init-msmtprc
        image: busybox
        command: ['sh', '-c', 'cp /msmtprc/* /msmtprcworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: msmtprc
          mountPath: /msmtprc
        - name: msmtprcworkingdir
          mountPath: /msmtprcworkingdir
      - name: rt-init-msmtp
        image: busybox
        command: ['sh', '-c', 'cp /msmtp/* /msmtpworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: msmtp
          mountPath: /msmtp
        - name: msmtpworkingdir
          mountPath: /msmtpworkingdir
      - name: rt-init-getmail
        image: busybox
        command: ['sh', '-c', 'cp /getmail/* /getmailworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: getmail
          mountPath: /getmail
        - name: getmailworkingdir
          mountPath: /getmailworkingdir
      - name: rt-init-certs
        image: busybox
        command: ['sh', '-c', 'cp /certs/* /certsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: certs
          mountPath: /certs
        - name: certsworkingdir
          mountPath: /certsworkingdir
      - name: rt-init-gpg
        image: busybox
        command: ['sh', '-c', 'cp /gpg/* /gpgworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: gpg
          mountPath: /gpg
        - name: gpgworkingdir
          mountPath: /gpgworkingdir
      - name: rt-init-crls
        image: busybox
        command: ['sh', '-c', 'cp /crls/* /crlsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: crls
          mountPath: /crls
        - name: crlsworkingdir
          mountPath: /crlsworkingdir
      - name: rt-init-shredder
        image: busybox
        command: ['sh', '-c', 'cp /shredder/* /shredderworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: shredder
          mountPath: /shredder
        - name: shredderworkingdir
          mountPath: /shredderworkingdir
      - name: rt-init-crontab
        image: busybox
        command: ['sh', '-c', 'cp /crontab/* /crontabworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: crontab
          mountPath: /crontab
        - name: crontabworkingdir
          mountPath: /crontabworkingdir
      containers:
        - name: rt
          image: "firefart/requesttracker:5.0.4"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /opt/rt5/var/data/RT-Shredder/
              subPath: shredder
            - name: data
              mountPath: /cron
              subPath: cron
            - name: data
              mountPath: /getmail
              subPath: getmail
            - name: siteconfigworkingdir
              mountPath: /custom/siteconfig
            - name: msmtprcworkingdir
              mountPath: /custom/msmtp
            - name: msmtpworkingdir
              mountPath: /msmtp/
            - name: getmailworkingdir
              mountPath: /getmail/config
            - name: certsworkingdir
              mountPath: /getmail/certs
            - name: gpgworkingdir
              mountPath: /opt/rt5/var/data/gpg/
            - name: crlsworkingdir
              mountPath: /opt/rt5/var/data/gpg/crls.d
            - name: crontabworkingdir
              mountPath: /etc/cron.d/
            - name: shredderworkingdir
              mountPath: /custom/shredder
          securityContext:
            runAsUser: 0
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "cp /custom/siteconfig/RT_SiteConfig.pm /opt/rt5/etc/ ; cp /custom/msmtp/msmtp.conf /etc/msmtprc ; cp /custom/shredder/* /opt/rt5/var/data/RT-Shredder/ ; chmod -R rt 0600 /opt/rt5/var/data/gpg/ ; cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime ; chmod 777 -R /getmail"]
      restartPolicy: Always
      volumes:
        - name: siteconfig
          secret:
            secretName: release-name-rt-siteconfig
        - name: siteconfigworkingdir
          emptyDir: {}
        - name: msmtprc
          secret:
            secretName: release-name-rt-msmtp
        - name: msmtprcworkingdir
          emptyDir: {}
        - name: msmtp
          secret:
            secretName: release-name-rt-msmtp
        - name: msmtpworkingdir
          emptyDir: {}
        - name: getmail
          secret:
            secretName: release-name-rt-getmail
        - name: getmailworkingdir
          emptyDir: {}
        - name: certs
          secret:
            secretName: tls-rt-ingress
        - name: certsworkingdir
          emptyDir: {}
        - name: gpg
          secret:
            secretName: release-name-rt-gpg
        - name: gpgworkingdir
          emptyDir: {}
        - name: crls
          configMap:
            name: release-name-rt-crls
        - name: crlsworkingdir
          emptyDir: {}
        - name: shredder
          secret:
            secretName: release-name-rt-shredder
        - name: shredderworkingdir
          emptyDir: {}
        - name: scripts
          secret:
            secretName: release-name-rt-scripts
        - name: scriptsworkingdir
          emptyDir: {}
        - name: crontab
          configMap:
            name: cron
        - name: crontabworkingdir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: cron
---
# Source: rt/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  release-name-rt-rt
  labels:
    app: rt
    chart: rt-0.1.1
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: rt
      release: release-name
  template:
    metadata: #todo: add cm checksums as annotation
      labels:
        app: rt
        release: release-name
    spec:
      initContainers:
      - name: rt-init-siteconfig
        image: busybox
        command: ['sh', '-c', 'cp /siteconfig/* /siteconfigworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: siteconfig
          mountPath: /siteconfig
        - name: siteconfigworkingdir
          mountPath: /siteconfigworkingdir
      - name: rt-init-msmtprc
        image: busybox
        command: ['sh', '-c', 'cp /msmtprc/* /msmtprcworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: msmtprc
          mountPath: /msmtprc
        - name: msmtprcworkingdir
          mountPath: /msmtprcworkingdir
      - name: rt-init-msmtp
        image: busybox
        command: ['sh', '-c', 'cp /msmtp/* /msmtpworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: msmtp
          mountPath: /msmtp
        - name: msmtpworkingdir
          mountPath: /msmtpworkingdir
      - name: rt-init-getmail
        image: busybox
        command: ['sh', '-c', 'cp /getmail/* /getmailworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: getmail
          mountPath: /getmail
        - name: getmailworkingdir
          mountPath: /getmailworkingdir
      - name: rt-init-certs
        image: busybox
        command: ['sh', '-c', 'cp /certs/* /certsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: certs
          mountPath: /certs
        - name: certsworkingdir
          mountPath: /certsworkingdir
      - name: rt-init-gpg
        image: busybox
        command: ['sh', '-c', 'cp /gpg/* /gpgworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: gpg
          mountPath: /gpg
        - name: gpgworkingdir
          mountPath: /gpgworkingdir
      - name: rt-init-crls
        image: busybox
        command: ['sh', '-c', 'cp /crls/* /crlsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: crls
          mountPath: /crls
        - name: crlsworkingdir
          mountPath: /crlsworkingdir
      - name: rt-init-shredder
        image: busybox
        command: ['sh', '-c', 'cp /shredder/* /shredderworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: shredder
          mountPath: /shredder
        - name: shredderworkingdir
          mountPath: /shredderworkingdir
      - name: rt-init-scripts
        image: busybox
        command: ['sh', '-c', 'cp /scripts/* /scriptsworkingdir']
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: scriptsworkingdir
          mountPath: /scriptsworkingdir
      nodeName: node5
      containers:
        - name: rt
          image: "firefart/requesttracker:5.0.4"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /opt/rt5/var/data/RT-Shredder/
            - name: siteconfigworkingdir
              mountPath: /custom/siteconfig/
            - name: msmtprcworkingdir
              mountPath: /custom/msmtp/
            - name: msmtpworkingdir
              mountPath: /msmtp/
            - name: getmailworkingdir
              mountPath: /getmail/
            - name: certsworkingdir
              mountPath: /getmail/certs
            - name: gpgworkingdir
              mountPath: /opt/rt5/var/data/gpg/
            - name: crlsworkingdir
              mountPath: /opt/rt5/var/data/gpg/crls.d/
            - name: shredderworkingdir
              mountPath: /custom/shredder/
            - name: scriptsworkingdir
              mountPath: /custom/postgres/
          ports:
            - name: request-tracker
              containerPort: 9000
          securityContext:
            runAsUser: 0
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "cp /custom/siteconfig/RT_SiteConfig.pm /opt/rt5/etc/ ; cp /custom/msmtp/msmtp.conf /etc/msmtprc ; cp /custom/shredder/* /opt/rt5/var/data/RT-Shredder/ ; chmod -R rt 0600 /opt/rt5/var/data/gpg/ ; cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime"]
      restartPolicy: Always
      volumes:
        - name: siteconfig
          secret:
            secretName: release-name-rt-siteconfig
        - name: siteconfigworkingdir
          emptyDir: {}
        - name: msmtprc
          secret:
            secretName: release-name-rt-msmtp
        - name: msmtprcworkingdir
          emptyDir: {}
        - name: msmtp
          secret:
            secretName: release-name-rt-msmtp
        - name: msmtpworkingdir
          emptyDir: {}
        - name: getmail
          secret:
            secretName: release-name-rt-getmail
        - name: getmailworkingdir
          emptyDir: {}
        - name: certs
          secret:
            secretName: tls-rt-ingress
        - name: certsworkingdir
          emptyDir: {}
        - name: gpg
          secret:
            secretName: release-name-rt-gpg
        - name: gpgworkingdir
          emptyDir: {}
        - name: crls
          configMap:
            name: release-name-rt-crls
        - name: crlsworkingdir
          emptyDir: {}
        - name: shredder
          secret:
            secretName: release-name-rt-shredder
        - name: shredderworkingdir
          emptyDir: {}
        - name: scripts
          secret:
            secretName: release-name-rt-scripts
        - name: scriptsworkingdir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: release-name-rt
---
# Source: rt/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.2.3
    release: "release-name"
    heritage: "Helm"
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      release: "release-name"
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: "postgresql"
        chart: postgresql-0.2.3
        release: "release-name"
        heritage: "Helm"
    spec:
      containers:
        - name: release-name-postgresql
          image: "postgres:13.11-bullseye"
          imagePullPolicy: "IfNotPresent"
          env: 
            - name: POSTGRES_PASSWORD
              value: "g3ntl3m@n.p@ss"
            - name: POSTGRES_USER
              value: "rtuser"
            - name: POSTGRES_DB
              value: 
            - name: PGDATA
              value: "/var/lib/postgresql/data"
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            null
          readinessProbe:
            null
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-postgresql
---
# Source: rt/templates/cronjobs/cj-clean.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: clean-cronjob
spec:
  schedule: "0 0 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 10
      template:
        spec:
          serviceAccountName: rt
          containers:
          - name: getmail-cronjob
            image: dtzar/helm-kubectl:3.11.2
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - kubectl exec -n rt `kubectl get pods -o=name -n rt | grep cron` -- su rt -c '/opt/rt5/sbin/rt-clean-sessions'
          restartPolicy: Never
      backoffLimit: 0
---
# Source: rt/templates/cronjobs/cj-dashboards.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dashboard-cronjob
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 10
      template:
        spec:
          serviceAccountName: rt
          containers:
          - name: getmail-cronjob
            image: dtzar/helm-kubectl:3.11.2
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - kubectl exec -n rt `kubectl get pods -o=name -n rt | grep cron` -- su rt -c '/opt/rt5/sbin/rt-email-dashboards'
          restartPolicy: Never
      backoffLimit: 0
---
# Source: rt/templates/cronjobs/cj-getmail.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: getmail-cronjob
spec:
  schedule: "* * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 10
      template:
        spec:
          serviceAccountName: rt
          containers:
          - name: getmail-cronjob
            image: dtzar/helm-kubectl:3.11.2
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - kubectl exec -n rt `kubectl get pods -o=name -n rt | grep cron` -- su rt -c '/usr/bin/getmail --rcfile=getmailrc -g /getmail/config'
          restartPolicy: Never
      backoffLimit: 0
---
# Source: rt/templates/cronjobs/cj-refresh.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: refresh-cronjob
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 10
      template:
        spec:
          serviceAccountName: rt
          containers:
          - name: getmail-cronjob
            image: dtzar/helm-kubectl:3.11.2
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - kubectl exec -n rt `kubectl get pods -o=name -n rt | grep cron` -- su rt -c '/opt/rt5/sbin/rt-fulltext-indexer --quiet 2>&1 | grep -v "Words longer than 2047 characters are ignored" | grep -v "word is too long to be indexed"'
          restartPolicy: Never
      backoffLimit: 0
---
# Source: rt/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rt
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
spec:
  ingressClassName: nginx
  tls:
  - hosts: 
    - rt.csic.ufpa.br
    secretName: tls-rt-ingress
  rules:
    - host: rt.csic.ufpa.br
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: rt-nginx
              port: 
                number: 80
---
# Source: rt/charts/postgresql/templates/configmap.yaml
#
# A ConfigMap spec for pgldap-config.yaml 
# /var/lib/pglda-config.yaml
#
