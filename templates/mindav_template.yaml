---
# Source: mindav/charts/oauth2proxy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    release: release-name
    heritage: Helm
  name: release-name-oauth2proxy
---
# Source: mindav/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mindav
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
---
# Source: mindav/charts/oauth2proxy/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    heritage: Helm
    release: release-name
  name: release-name-oauth2proxy
type: Opaque
data:
  cookie-secret: "eHh4"
  client-secret: "eHh4"
  client-id: "eHh4"
---
# Source: mindav/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-mindav
data:
  WEBDAV_USER: "eHh4"
  WEBDAV_PASSWORD: "eHh4"
  MINIO_ACCESS_KEY_ID: "eHh4"
  MINIO_SECRET_ACCESS_KEY: "eHh4"
---
# Source: mindav/charts/oauth2proxy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    heritage: Helm
    release: release-name
  name: release-name-oauth2proxy
data:
  oauth2_proxy.cfg: "email_domains = [ \"*\" ]\nupstreams = [ \"file:///dev/null\" ]"
---
# Source: mindav/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-mindav"
  namespace: default
data:
  .env.json: |
    {
      "WEBDAV_DRIVER": "minio",
      "WEBDAV_USER": "xxx",
      "WEBDAV_PASSWORD": "xxx",
      "MINIO_ENDPOINT": "minio.db.svc.cluster.local:9000",
      "MINIO_ACCESS_KEY_ID": "xxx",
      "MINIO_SECRET_ACCESS_KEY": "xxx",
      "MINIO_BUCKET": "minio-prod",
      "MINIO_USE_SSL": false,
      "MEMORY_UPLOAD_MODE": false,
      "APP_DEBUG": true,
      "APP_PORT": 8080
    }
---
# Source: mindav/charts/oauth2proxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    release: release-name
    heritage: Helm
  name: release-name-oauth2proxy
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: oauth2proxy
    release: release-name
---
# Source: mindav/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mindav
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
---
# Source: mindav/charts/oauth2proxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    heritage: Helm
    release: release-name
  name: release-name-oauth2proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oauth2proxy
      release: release-name
  template:
    metadata:
      annotations:
        checksum/config: b577d1e0e43911c2ab6cdba0fc81c350b909cc582be55e0c386d69ec8f0bef53
        checksum/config-emails: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: ed45f28a3b54524b48d0ca84c90f39b97441713b416c950ddf856f8fb3fea750
        checksum/google-secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: oauth2proxy
        release: "release-name"
    spec:
      serviceAccountName: release-name-oauth2proxy
      containers:
      - name: oauth2proxy
        image: "bitnami/oauth2-proxy:7.0.1"
        imagePullPolicy: IfNotPresent
        args:
          - --http-address=0.0.0.0:4180
          - --cookie-domain=.chart-example.local
          - --login-url=https://kix.co.il/oauth/authorize
          - --profile-url=https://kix.co.il/api/v4/users/me
          - --provider=facebook
          - --provider-display-name=kix.co.il chat
          - --redeem-url=https://kix.co.il/oauth/access_token
          - --redirect-url=https://pwd.kix.co.il/oauth2/callback
          - --set-authorization-header
          - --set-xauthrequest
          - --config=/etc/oauth2_proxy/oauth2_proxy.cfg
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name:  release-name-oauth2proxy
              key: client-id
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name:  release-name-oauth2proxy
              key: client-secret
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name:  release-name-oauth2proxy
              key: cookie-secret
        ports:
          - containerPort: 4180
            name: http
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          timeoutSeconds: 1
          successThreshold: 1
          periodSeconds: 10
        resources:
          {}
        volumeMounts:
        - mountPath: /etc/oauth2_proxy
          name: configmain
      volumes:
      - configMap:
          defaultMode: 420
          name: release-name-oauth2proxy
        name: configmain
      tolerations:
        []
---
# Source: mindav/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mindav
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mindav
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mindav
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-mindav
      securityContext:
        {}
      containers:
        - name: mindav
          securityContext:
            {}
          image: "phntom/mindav:0.1.7-kix3"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/webdav/healthz
              port: http
              httpHeaders:
              - name: Authorization
                value: Basic eHh4Onh4eA==
              - name: X-Auth-Request-User
                value: healthz@
          readinessProbe:
            httpGet:
              path: /v1/webdav/healthz
              port: http
              httpHeaders:
                - name: Authorization
                  value: Basic eHh4Onh4eA==
                - name: X-Auth-Request-User
                  value: healthz@
          resources:
            {}
          volumeMounts:
            - mountPath: /etc/configmap
              name: configmap
      volumes:
        - name: configmap
          configMap:
            name: "release-name-mindav"
---
# Source: mindav/charts/oauth2proxy/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  labels:
    app: oauth2proxy
    chart: oauth2proxy-3.2.6
    heritage: Helm
    release: release-name
  name: release-name-oauth2proxy
spec:
  rules:
    - host: "chart-example.local"
      http:
        paths:

          - path: /oauth2
            backend:
              serviceName: release-name-oauth2proxy
              servicePort: 80
---
# Source: mindav/templates/ingress-mobile.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-mindav-mobile
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /v1/webdav/$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-URI-Prefix "https://pwd.kix.co.il//m";
      proxy_set_header X-Auth-Request-User "kixtoken@";
      set $testauth x$http_authorization;
      if ($testauth = x) {
        more_set_headers "WWW-Authenticate: Basic realm=\"Authentication Required - Personl Access Token from kix.co.il\"";
        return 401 Unauthorized;
      }
    acme.kubernetes.io/dns: dns_linode_v4
    acme.kubernetes.io/enable: "true"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/client-body-buffer-size: 32m
    nginx.ingress.kubernetes.io/cors-allow-headers: Origin, Content-Type, Cache-Control,
      Accept, Authorization, If-Match, Destination, Overwrite
    nginx.ingress.kubernetes.io/cors-allow-methods: GET, HEAD, POST, PUT, OPTIONS, MOVE,
      DELETE, COPY, LOCK, UNLOCK
    nginx.ingress.kubernetes.io/cors-allow-origin: https://pwd.kix.co.il
    nginx.ingress.kubernetes.io/cors-expose-headers: ETag
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 4m
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
spec:
  tls:
    - hosts:
        - "pwd.kix.co.il"
      secretName: pwd-kix-co-il-tls
  rules:
    - host: "pwd.kix.co.il"
      http:
        paths:
          - path: "/m/(.*)"
            pathType: Exact
            backend:
              service:
                name: release-name-mindav
                port:
                  number: 80
---
# Source: mindav/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-mindav
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /v1/webdav/$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-URI-Prefix "https://pwd.kix.co.il//webdav";
    nginx.ingress.kubernetes.io/auth-url: "https://chart-example.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://chart-example.local/oauth2/start?rd=$escaped_request_uri"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-Auth-Request-User"
    acme.kubernetes.io/dns: dns_linode_v4
    acme.kubernetes.io/enable: "true"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/client-body-buffer-size: 32m
    nginx.ingress.kubernetes.io/cors-allow-headers: Origin, Content-Type, Cache-Control,
      Accept, Authorization, If-Match, Destination, Overwrite
    nginx.ingress.kubernetes.io/cors-allow-methods: GET, HEAD, POST, PUT, OPTIONS, MOVE,
      DELETE, COPY, LOCK, UNLOCK
    nginx.ingress.kubernetes.io/cors-allow-origin: https://pwd.kix.co.il
    nginx.ingress.kubernetes.io/cors-expose-headers: ETag
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 4m
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
spec:
  tls:
    - hosts:
        - "pwd.kix.co.il"
      secretName: pwd-kix-co-il-tls
  rules:
    - host: "pwd.kix.co.il"
      http:
        paths:
          - path: "/webdav/(.*)"
            pathType: Exact
            backend:
              service:
                name: release-name-mindav
                port:
                  number: 80
---
# Source: mindav/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-mindav-test-connection"
  labels:
    helm.sh/chart: mindav-0.1.6
    app.kubernetes.io/name: mindav
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.7-kix3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-mindav:80']
  restartPolicy: Never
