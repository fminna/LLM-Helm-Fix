---
# Source: testkube-api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-testkube-api
  labels:
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
---
# Source: testkube-api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-testkube-api-tests-job
  labels:
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
---
# Source: testkube-api/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-testkube-api
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
data:
  executors.json: |-
    [
      {
        "name": "tracetest-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-tracetest-executor:1.17.29",
          "command": [
            "tracetest"
          ],
          "args": [
            "test",
            "run",
            "--server-url",
            "<tracetestServer>",
            "--definition",
            "<filePath>",
            "--wait-for-result",
            "--output",
            "pretty"
          ],
          "types": [
            "tracetest/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "tracetest",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-tracetest"
          }
        }
      },
      {
        "name": "zap-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-zap-executor:1.17.29",
          "command": [
            "<pythonScriptPath>"
          ],
          "args": [
            "<fileArgs>"
          ],
          "types": [
            "zap/api",
            "zap/baseline",
            "zap/full"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "zap",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-zap"
          }
        }
      },
      {
        "name": "playwright-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-playwright-executor:1.17.29",
          "command": [
            "<depManager>"
          ],
          "args": [
            "<depCommand>",
            "playwright",
            "test"
          ],
          "types": [
            "playwright/test"
          ],
          "contentTypes": [
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "playwright",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-playwright"
          }
        }
      },
      {
        "name": "jmeter-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-jmeter-executor:1.17.29",
          "command": [
            "<entryPoint>"
          ],
          "args": [
            "-n",
            "-j",
            "<logFile>",
            "-t",
            "<runPath>",
            "-l",
            "<jtlFile>",
            "-o",
            "<reportFile>",
            "-e",
            "<envVars>"
          ],
          "types": [
            "jmeter/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "jmeter",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-jmeter"
          }
        }
      },
      {
        "name": "jmeterd-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-jmeterd-executor:1.17.29",
          "command": [
            "<entryPoint>"
          ],
          "slaves": {
            "image": "kubeshop/testkube-jmeterd-slave:1.17.29"
          },
          "args": [
            "-n",
            "-j",
            "<logFile>",
            "-t",
            "<runPath>",
            "-l",
            "<jtlFile>",
            "-o",
            "<reportFile>",
            "-e",
            "<envVars>"
          ],
          "types": [
            "jmeterd/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "jmeter",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-jmeter"
          }
        }
      },
      {
        "name": "ginkgo-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-ginkgo-executor:1.17.29",
          "command": [
            "ginkgo"
          ],
          "args": [
            "-r",
            "-p",
            "--randomize-all",
            "--randomize-suites",
            "--keep-going",
            "--trace",
            "--junit-report",
            "<reportFile>",
            "<envVars>",
            "<runPath>"
          ],
          "types": [
            "ginkgo/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts",
            "junit-report"
          ],
          "meta": {
            "iconURI": "ginkgo",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-ginkgo"
          }
        }
      },
      {
        "name": "maven-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-maven-executor:1.17.29",
          "command": [
            "mvn"
          ],
          "args": [
            "--settings",
            "<settingsFile>",
            "<goalName>",
            "-Duser.home",
            "<mavenHome>"
          ],
          "types": [
            "maven/project",
            "maven/test",
            "maven/integration-test"
          ],
          "contentTypes": [
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "maven",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-maven"
          }
        }
      },
      {
        "name": "gradle-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-gradle-executor:1.17.29",
          "command": [
            "gradle"
          ],
          "args": [
            "--no-daemon",
            "<taskName>",
            "-p",
            "<projectDir>"
          ],
          "types": [
            "gradle/project",
            "gradle/test",
            "gradle/integrationTest"
          ],
          "contentTypes": [
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "gradle",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-gradle"
          }
        }
      },
      {
        "name": "kubepug-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-kubepug-executor:1.17.29",
          "command": [
            "kubepug"
          ],
          "args": [
            "--format=json",
            "--input-file",
            "<runPath>"
          ],
          "types": [
            "kubepug/yaml",
            "kubepug/json"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "kubepug",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-kubepug"
          }
        }
      },
      {
        "name": "soapui-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-soapui-executor:1.17.29",
          "command": [
            "/bin/sh",
            "/usr/local/SmartBear/EntryPoint.sh"
          ],
          "args": [
            "<runPath>"
          ],
          "types": [
            "soapui/xml"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "soapui",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-soapui"
          }
        }
      },
      {
        "name": "k6-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-k6-executor:1.17.29",
          "command": [
            "k6"
          ],
          "args": [
            "<k6Command>",
            "<envVars>",
            "<runPath>"
          ],
          "types": [
            "k6/script"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "k6",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-k6"
          }
        }
      },
      {
        "name": "cypress-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-cypress-executor:1.17.29",
          "command": [
            "./node_modules/cypress/bin/cypress"
          ],
          "args": [
            "run",
            "--reporter",
            "junit",
            "--reporter-options",
            "mochaFile=<reportFile>,toConsole=false",
            "--project",
            "<projectPath>",
            "--env",
            "<envVars>"
          ],
          "types": [
            "cypress/project"
          ],
          "contentTypes": [
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts",
            "junit-report"
          ],
          "meta": {
            "iconURI": "cypress",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-cypress"
          }
        }
      },
      {
        "name": "curl-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-curl-executor:1.17.29",
          "command": [
            "curl"
          ],
          "args": [
            "-is"
          ],
          "types": [
            "curl/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "curl",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-curl"
          }
        }
      },
      {
        "name": "postman-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-postman-executor:1.17.29",
          "command": [
            "newman"
          ],
          "args": [
            "run",
            "<runPath>",
            "-e",
            "<envFile>",
            "--reporters",
            "cli,json",
            "--reporter-json-export",
            "<reportFile>"
          ],
          "types": [
            "postman/collection"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "postman",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-postman"
          }
        }
      },
      {
        "name": "artillery-executor",
        "executor": {
          "executorType": "job",
          "image": "kubeshop/testkube-artillery-executor:1.17.29",
          "command": [
            "artillery"
          ],
          "args": [
            "run",
            "<runPath>",
            "--dotenv",
            "<envFile>",
            "-o",
            "<reportFile>"
          ],
          "types": [
            "artillery/test"
          ],
          "contentTypes": [
            "string",
            "file-uri",
            "git-file",
            "git-dir",
            "git"
          ],
          "features": [
            "artifacts"
          ],
          "meta": {
            "iconURI": "artillery",
            "docsURI": "https://kubeshop.github.io/testkube/test-types/executor-artillery"
          }
        }
      },
      {
        "name": "scraper-executor",
        "executor": {
          "executorType": "scraper",
          "image": "kubeshop/testkube-scraper-executor:1.17.29",
          "types": []
        }
      },
      {
        "name": "init-executor",
        "executor": {
          "executorType": "init",
          "image": "kubeshop/testkube-init-executor:1.17.29",
          "types": []
        }
      },
      {
        "name": "logs-sidecar",
        "executor": {
          "executorType": "sidecar",
          "image": "kubeshop/testkube-logs-sidecar:1.17.29",
          "types": []
        }
      },
      {
        "name": "logs-sidecar",
        "executor": {
          "executorType": "sidecar",
          "image": "kubeshop/testkube-logs-sidecar:1.17.29",
          "types": []
        }
      }
    ]
  job-container-template.yml: |-
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Name }}"
      namespace: {{ .Namespace }}
    spec:
      {{- if gt .ActiveDeadlineSeconds 0 }}
      activeDeadlineSeconds: {{ .ActiveDeadlineSeconds }}
      {{- end }}
      template:
        spec:
          {{- if ne .InitImage "" }}
          initContainers:
          - name: {{ .Name }}-init
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .InitImage }}
            {{- else }}
            image: {{ .InitImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            command:
              - "/bin/runner"
              - '{{ .Jsn }}'
            volumeMounts:
            {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
            - name: data-volume
              mountPath: /data
            {{ end }}
            {{- if .CertificateSecret }}
            - name: {{ .CertificateSecret }}
              mountPath: /etc/certs
            {{- end }}
            {{- if .ArtifactRequest }}
              {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
            - name: artifact-volume
              mountPath: {{ .ArtifactRequest.VolumeMountPath }}
              {{- end }}
            {{- end }}
            {{- range $configmap := .EnvConfigMaps }}
            {{- if and $configmap.Mount $configmap.Reference }}
            - name: {{ $configmap.Reference.Name }}
              mountPath: {{ $configmap.MountPath }}
            {{- end }}
            {{- end }}
            {{- range $secret := .EnvSecrets }}
            {{- if and $secret.Mount $secret.Reference }}
            - name: {{ $secret.Reference.Name }}
              mountPath: {{ $secret.MountPath }}
            {{- end }}
            {{- end }}
          {{- end }}
          containers:
          {{ if .Features.LogsV2 -}}
          - name: "{{ .Name }}-logs"
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .LogSidecarImage }}
            {{- else }}
            image: {{ .LogSidecarImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DEBUG
              value: {{ if .Debug }}"true"{{ else }}"false"{{ end }}
            - name: NAMESPACE
              value: {{ .Namespace }}
            - name: NATS_URI
              value: {{ .NatsUri }}
            - name: GROUP
              value: test
            - name: SOURCE
              value: "job-pod:{{ .Name }}"
            - name: ID
              value: "{{ .Name }}"
          {{- end }}
          - name: "{{ .Name }}"
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .Image }}
            {{- else }}
            image: {{ .Image }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            {{- if gt (len .Command) 0 }}
            command:
            {{- range $cmd := .Command }}
            - {{ $cmd -}}
            {{- end }}
            {{- end -}}
            {{- if gt (len .Args) 0 }}
            args:
            {{- range $arg := .Args }}
            - {{ $arg -}}
            {{- end }}
            {{- end }}
            {{- if .WorkingDir }}
            workingDir: {{ .WorkingDir }}
            {{- end }}
            volumeMounts:
            {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
            - name: data-volume
              mountPath: /data
            {{ end }}
            {{- if .CertificateSecret }}
            - name: {{ .CertificateSecret }}
              mountPath: /etc/certs
            {{- end }}
            {{- if .AgentAPITLSSecret }}
            - mountPath: /tmp/agent-cert
              readOnly: true
              name: {{ .AgentAPITLSSecret }}
            {{- end }}
            {{- if .ArtifactRequest }}
              {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
            - name: artifact-volume
              mountPath: {{ .ArtifactRequest.VolumeMountPath }}
              {{- end }}
            {{- end }}
            {{- range $configmap := .EnvConfigMaps }}
            {{- if and $configmap.Mount $configmap.Reference }}
            - name: {{ $configmap.Reference.Name }}
              mountPath: {{ $configmap.MountPath }}
            {{- end }}
            {{- end }}
            {{- range $secret := .EnvSecrets }}
            {{- if and $secret.Mount $secret.Reference }}
            - name: {{ $secret.Reference.Name }}
              mountPath: {{ $secret.MountPath }}
            {{- end }}
            {{- end }}
          volumes:
          {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
          - name: data-volume
            emptyDir: {}
          {{ end }}
          {{- if .CertificateSecret }}
          - name: {{ .CertificateSecret }}
            secret:
              secretName: {{ .CertificateSecret }}
          {{- end }}
          {{- if .AgentAPITLSSecret }}
          - name: { { .AgentAPITLSSecret } }
            secret:
              secretName: {{ .AgentAPITLSSecret }}
          {{- end }}
          {{- if .ArtifactRequest }}
            {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
          - name: artifact-volume
            persistentVolumeClaim:
              claimName: {{ .Name }}-pvc
            {{- end }}
          {{- end }}
          {{- range $configmap := .EnvConfigMaps }}
          {{- if and $configmap.Mount $configmap.Reference }}
          - name: {{ $configmap.Reference.Name }}
            configmap:
              name: {{ $configmap.Reference.Name }}
          {{- end }}
          {{- end }}
          {{- range $secret := .EnvSecrets }}
          {{- if and $secret.Mount $secret.Reference }}
          - name: {{ $secret.Reference.Name }}
            secret:
              secretName: {{ $secret.Reference.Name }}
          {{- end }}
          {{- end }}
          restartPolicy: Never
          {{- if .ServiceAccountName }}
          serviceAccountName: {{ .ServiceAccountName }}
          {{- end }}
          {{- if gt (len .ImagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $secret := .ImagePullSecrets }}
          - name: {{ $secret -}}
          {{- end }}
          {{- end }}
      backoffLimit: 0
      ttlSecondsAfterFinished: {{ .DelaySeconds }}
    
  job-scraper-template.yml: |-
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ .Name }}-scraper
      namespace: {{ .Namespace }}
    spec:
      {{- if gt .ActiveDeadlineSeconds 0 }}
      activeDeadlineSeconds: {{ .ActiveDeadlineSeconds }}
      {{- end }}
      template:
        spec:
          containers:
          {{ if .Features.LogsV2 -}}
          - name: "{{ .Name }}-logs"
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .LogSidecarImage }}
            {{- else }}
            image: {{ .LogSidecarImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DEBUG
              value: {{ if .Debug }}"true"{{ else }}"false"{{ end }}
            - name: NAMESPACE
              value: {{ .Namespace }}
            - name: NATS_URI
              value: {{ .NatsUri }}
            - name: ID
              value: {{ .Name }}
            - name: GROUP
              value: scraper
            - name: SOURCE
              value: "scraper-pod:{{ .Name }}"
          {{- end }}
          - name: {{ .Name }}-scraper
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .ScraperImage }}
            {{- else }}
            image: {{ .ScraperImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            command:
              - "/bin/runner"
              - '{{ .Jsn }}'
            {{- if .RunnerCustomCASecret }}
            env:
              - name: SSL_CERT_DIR
                value: /etc/testkube/certs
            {{- end }}
            volumeMounts:
            {{- if .RunnerCustomCASecret }}
              - name: {{ .RunnerCustomCASecret }}
                mountPath: /etc/testkube/certs/testkube-custom-ca.pem
                readOnly: true
                subPath: ca.crt
            {{- end }}
            {{- if or .ArtifactRequest .AgentAPITLSSecret }}
              {{- if .ArtifactRequest.VolumeMountPath }}
              - name: artifact-volume
                mountPath: {{ .ArtifactRequest.VolumeMountPath }}
              {{- end }}
              {{- if .AgentAPITLSSecret }}
              - mountPath: /tmp/agent-cert
                readOnly: true
                name: {{ .AgentAPITLSSecret }}
              {{- end }}
            {{- end }}
          volumes:
          {{- if .RunnerCustomCASecret }}
            - name: {{ .RunnerCustomCASecret }}
              secret:
                secretName: {{ .RunnerCustomCASecret }}
                defaultMode: 420
          {{- end }}
          {{- if or .ArtifactRequest .AgentAPITLSSecret }}
            {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
            - name: artifact-volume
              persistentVolumeClaim:
                claimName: {{ .Name }}-pvc
            {{- end }}
            {{- if .AgentAPITLSSecret }}
            - name: { { .AgentAPITLSSecret } }
              secret:
                secretName: {{ .AgentAPITLSSecret }}
            {{- end }}
          {{- end }}
          restartPolicy: Never
          {{- if .ServiceAccountName }}
          serviceAccountName: {{ .ServiceAccountName }}
          {{- end }}
          {{- if gt (len .ImagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $secret := .ImagePullSecrets }}
          - name: {{ $secret -}}
          {{- end }}
          {{- end }}
      backoffLimit: 0
      ttlSecondsAfterFinished: {{ .DelaySeconds }}
    
  job-template.yml: |-
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Name }}"
      namespace: {{ .Namespace }}
    spec:
      {{- if gt .ActiveDeadlineSeconds 0 }}
      activeDeadlineSeconds: {{ .ActiveDeadlineSeconds }}
      {{- end }}
      template:
        spec:
          initContainers:
          - name: {{ .Name }}-init
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .InitImage }}
            {{- else }}
            image: {{ .InitImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            command:
              - "/bin/runner"
              - '{{ .Jsn }}'
            {{- if .RunnerCustomCASecret }}
            env:
              - name: SSL_CERT_DIR
                value: /etc/testkube/certs
            {{- end }}
            volumeMounts:
            {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
            - name: data-volume
              mountPath: /data
            {{ end }}
            {{- if .CertificateSecret }}
            - name: {{ .CertificateSecret }}
              mountPath: /etc/certs
            {{- end }}
            {{- if .RunnerCustomCASecret }}
            - name: {{ .RunnerCustomCASecret }}
              mountPath: /etc/testkube/certs/testkube-custom-ca.pem
              readOnly: true
              subPath: ca.crt
            {{- end }}
            {{- if .ArtifactRequest }}
              {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
            - name: artifact-volume
              mountPath: {{ .ArtifactRequest.VolumeMountPath }}
              {{- end }}
            {{- end }}
            {{- range $configmap := .EnvConfigMaps }}
            {{- if and $configmap.Mount $configmap.Reference }}
            - name: {{ $configmap.Reference.Name }}
              mountPath: {{ $configmap.MountPath }}
            {{- end }}
            {{- end }}
            {{- range $secret := .EnvSecrets }}
            {{- if and $secret.Mount $secret.Reference }}
            - name: {{ $secret.Reference.Name }}
              mountPath: {{ $secret.MountPath }}
            {{- end }}
            {{- end }}
          containers:
          {{ if .Features.LogsV2 -}}
          - name: "{{ .Name }}-logs"
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .LogSidecarImage }}
            {{- else }}
            image: {{ .LogSidecarImage }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DEBUG
              value: {{ if .Debug }}"true"{{ else }}"false"{{ end }}
            - name: NAMESPACE
              value: {{ .Namespace }}
            - name: NATS_URI
              value: {{ .NatsUri }}
            - name: ID
              value: {{ .Name }}
            - name: GROUP
              value: test
            - name: SOURCE
              value: "job-pod:{{ .Name }}"
          {{- end }}
          - name: "{{ .Name }}"
            {{- if .Registry }}
            image: {{ .Registry }}/{{ .Image }}
            {{- else }}
            image: {{ .Image }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            command:
              - "/bin/runner"
              - '{{ .Jsn }}'
            {{- if .RunnerCustomCASecret }}
            env:
              - name: SSL_CERT_DIR
                value: /etc/testkube/certs
            {{- end }}
            volumeMounts:
            {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
            - name: data-volume
              mountPath: /data
            {{ end }}
            {{- if .CertificateSecret }}
            - name: {{ .CertificateSecret }}
              mountPath: /etc/certs
            {{- end }}
            {{- if .RunnerCustomCASecret }}
            - name: {{ .RunnerCustomCASecret }}
              mountPath: /etc/testkube/certs/testkube-custom-ca.pem
              readOnly: true
              subPath: ca.crt
            {{- end }}
            {{- if .AgentAPITLSSecret }}
            - mountPath: /tmp/agent-cert
              readOnly: true
              name: {{ .AgentAPITLSSecret }}
            {{- end }}
            {{- if .ArtifactRequest }}
              {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
            - name: artifact-volume
              mountPath: {{ .ArtifactRequest.VolumeMountPath }}
              {{- end }}
            {{- end }}
            {{- range $configmap := .EnvConfigMaps }}
            {{- if and $configmap.Mount $configmap.Reference }}
            - name: {{ $configmap.Reference.Name }}
              mountPath: {{ $configmap.MountPath }}
            {{- end }}
            {{- end }}
            {{- range $secret := .EnvSecrets }}
            {{- if and $secret.Mount $secret.Reference }}
            - name: {{ $secret.Reference.Name }}
              mountPath: {{ $secret.MountPath }}
            {{- end }}
            {{- end }}
          volumes:
          {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
          - name: data-volume
            emptyDir: {}
          {{ end }} 
          {{- if .CertificateSecret }}
          - name: {{ .CertificateSecret }}
            secret:
              secretName: {{ .CertificateSecret }}
          {{- end }}
          {{- if .RunnerCustomCASecret }}
          - name: {{ .RunnerCustomCASecret }}
            secret:
              secretName: {{ .RunnerCustomCASecret }}
              defaultMode: 420
          {{- end }}
          {{- if .AgentAPITLSSecret }}
          - name: {{ .AgentAPITLSSecret }}
            secret:
              secretName: {{ .AgentAPITLSSecret }}
          {{- end }}
          {{- if .ArtifactRequest }}
            {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
          - name: artifact-volume
            persistentVolumeClaim:
              claimName: {{ .Name }}-pvc
            {{- end }}
          {{- end }}
          {{- range $configmap := .EnvConfigMaps }}
          {{- if and $configmap.Mount $configmap.Reference }}
          - name: {{ $configmap.Reference.Name }}
            configmap:
              name: {{ $configmap.Reference.Name }}
          {{- end }}
          {{- end }}
          {{- range $secret := .EnvSecrets }}
          {{- if and $secret.Mount $secret.Reference }}
          - name: {{ $secret.Reference.Name }}
            secret:
              secretName: {{ $secret.Reference.Name }}
          {{- end }}
          {{- end }}
          restartPolicy: Never
          {{- if .ServiceAccountName }}
          serviceAccountName: {{ .ServiceAccountName }}
          {{- end }}
          {{- if gt (len .ImagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $secret := .ImagePullSecrets }}
          - name: {{ $secret -}}
          {{- end }}
          {{- end }}
      backoffLimit: 0
      ttlSecondsAfterFinished: 180
    
  pvc-template.yml: |-
    {{ if .ArtifactRequest }}
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: {{ .Name }}-pvc
      namespace: {{ .Namespace }}
    spec:
      {{- if .ArtifactRequest.StorageClassName }}
      storageClassName: {{ .ArtifactRequest.StorageClassName }}
      {{- else if .ArtifactRequest.UseDefaultStorageClassName }}
      storageClassName: {{ .DefaultStorageClassName }}
      {{- end }}
      accessModes:
      {{- if .ArtifactRequest.SharedBetweenPods }}
        - ReadWriteMany
      {{- else }}
        - ReadWriteOnce
      {{- end }}
      resources:
        requests:
          storage: 1Gi
    {{ end }}
  slack-config.json: |-
    [
      {
        "ChannelID": "",
        "selector": {},
        "testName": [],
        "testSuiteName": [],
        "events": [
          "start-test",
          "end-test-success",
          "end-test-failed",
          "end-test-aborted",
          "end-test-timeout",
          "start-testsuite",
          "end-testsuite-success",
          "end-testsuite-failed",
          "end-testsuite-aborted",
          "end-testsuite-timeout"
        ]
      }
    ]
    
  slack-template.json: |-
    {
      "blocks": [
        {
          "type": "section",
          "text": {
            "type": "plain_text",
            "emoji": true,
            "text": "Execution {{ .ExecutionName }} of {{ .TestName }} status {{ .Status }}"
          }
        },
        {
          "type": "context",
          "elements": [
            {
              "type": "image",
                "image_url": "{{ if eq .Status "failed" }}https://raw.githubusercontent.com/kubeshop/testkube/d3380bc4bf4534ef1fb88cdce5d346dca8898986/assets/imageFailed.png{{ else if eq .Status "passed" }}https://raw.githubusercontent.com/kubeshop/testkube/d3380bc4bf4534ef1fb88cdce5d346dca8898986/assets/imagePassed.png{{ else }}https://raw.githubusercontent.com/kubeshop/testkube/d3380bc4bf4534ef1fb88cdce5d346dca8898986/assets/imagePending.png{{ end }}",
              "alt_text": "notifications warning icon"
            }
            {{ if (gt .TotalSteps 0 )}}
            ,
            {
              "type": "mrkdwn",
              "text": "*   {{ .FailedSteps }}/{{ .TotalSteps }} STEPS FAILED*"
            }
            {{ end }}
          ]
        },
        {
          "type": "divider"
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Test Name*"
            },
            {
              "type": "mrkdwn",
              "text": "*Type*"
            },
            {
              "type": "plain_text",
              "text": "{{ .TestName }}",
              "emoji": true
            },
            {
              "type": "plain_text",
              "text": "{{ .TestType }}",
              "emoji": true
            }
          ]
        },
        {{ if .Namespace}}
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Namespace*"
            },
            {
              "type": "mrkdwn",
              "text": "*Labels*"
            },
            {
              "type": "plain_text",
              "text": "{{ .Namespace }} ",
              "emoji": true
            },
            {
              "type": "plain_text",
              "text": "{{ .Labels }} ",
              "emoji": true
            }
          ]
        },
        {{ end }}
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Start Time*"
            },
            {
              "type": "mrkdwn",
              "text": "*End Time*"
            },
            {
              "type": "plain_text",
              "text": "{{ .StartTime }}",
              "emoji": true
            },
            {
              "type": "plain_text",
              "text": "{{ .EndTime }}",
              "emoji": true
            }
          ]
        },
        {{ if .Duration }}
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Duration*"
            },
            {
              "type": "mrkdwn",
              "text": " "
            },
            {
              "type": "plain_text",
              "text": "{{ .Duration }}",
              "emoji": true
            }
          ]
        },
        {{ end }}
        {
          "type": "divider"
        },
        {{ if .ClusterName }}
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Cluster Name: {{ .ClusterName }}"
          }
        },
        {{ end }}
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "*Test Execution CLI*"
          }
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "`kubectl testkube get execution {{ .ExecutionName }} `\n"
          }
        },
        {{ if eq .TestType "Test Suite" }}
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Test Suite URI: {{ .DashboardURI }}/test-suites/{{ .TestName }}"
          }
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Test Suite Execution URI: {{ .DashboardURI }}/test-suites/{{ .TestName }}/executions/{{ .ExecutionID }}"
          }
        },
        {{ else }}
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Test URI: {{ .DashboardURI }}/tests/{{ .TestName }}"
          }
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Test Execution URI: {{ .DashboardURI }}/tests/{{ .TestName }}/executions/{{ .ExecutionID }}"
          }
        },
        {{ end }}
        {
          "type": "divider"
        }
      ]
    }
    
  slave-pod-template.yml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: "{{ .Name }}"
      namespace: {{ .Namespace }}
      ownerReferences:
      - apiVersion: batch/v1
        kind: job
        name: {{ .JobName }}
        uid: {{ .JobUID }}
    spec:
      {{- if gt .ActiveDeadlineSeconds 0 }}
      activeDeadlineSeconds: {{ .ActiveDeadlineSeconds }}
      {{- end }}
      {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
      initContainers:
      - name: init
        {{- if .Registry }}
        image: {{ .Registry }}/{{ .InitImage }}
        {{- else }}
        image: {{ .InitImage }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        command: 
          - "/bin/runner"
          - '{{ .Jsn }}'
        {{- if .RunnerCustomCASecret }}
        env:
          - name: SSL_CERT_DIR
            value: /etc/testkube/certs
        {{- end }}
        volumeMounts:
        - name: data-volume
          mountPath: /data
        {{- if .CertificateSecret }}
        - name: {{ .CertificateSecret }}
          mountPath: /etc/certs
        {{- end }}
        {{- if .RunnerCustomCASecret }}
        - name: {{ .RunnerCustomCASecret }}
          mountPath: /etc/testkube/certs/testkube-custom-ca.pem
          readOnly: true
          subPath: ca.crt
        {{- end }}
        {{- if .ArtifactRequest }}
          {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
        - name: artifact-volume
          mountPath: {{ .ArtifactRequest.VolumeMountPath }}
          {{- end }}
        {{- end }}
        {{- range $configmap := .EnvConfigMaps }}
        {{- if and $configmap.Mount $configmap.Reference }}
        - name: {{ $configmap.Reference.Name }}
          mountPath: {{ $configmap.MountPath }}
        {{- end }}
        {{- end }}
        {{- range $secret := .EnvSecrets }}
        {{- if and $secret.Mount $secret.Reference }}
        - name: {{ $secret.Reference.Name }}
          mountPath: {{ $secret.MountPath }}
        {{- end }}
        {{- end }}
      {{ end }}
      containers:
      {{ if .Features.LogsV2 -}}
      - name: "main-logs"
        {{- if .Registry }}
        image: {{ .Registry }}/{{ .LogSidecarImage }}
        {{- else }}
        image: {{ .LogSidecarImage }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          value: {{ .Namespace }}
        - name: NATS_URI
          value: {{ .NatsUri }}
        - name: ID
          value: {{ .JobName }}
        - name: GROUP
          value: test-slave
        - name: SOURCE
          value: "job-slave-pod:{{ .Name }}"
      {{- end }}
      - name: main
        {{- if .Registry }}
        image: {{ .Registry }}/{{ .Image }}
        {{- else }}
        image: {{ .Image }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        ports:
        {{- range $port := .Ports }}
        - name: {{ $port.Name }}
          containerPort: {{ $port.ContainerPort }}
        {{- end}}
        {{- range $port := .Ports }}
        {{- if eq $port.Name "server-port" }}  
        livenessProbe:
          tcpSocket:
            port: {{ $port.ContainerPort }}
          failureThreshold: 3
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          tcpSocket:
            port: {{ $port.ContainerPort }}
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 1
        {{- end }}
        {{- end }}
        {{- if .Resources }}
        resources:
          {{- if .Resources.Limits }}
          limits:
            {{- if .Resources.Limits.Cpu }}
            cpu: {{ .Resources.Limits.Cpu }}
            {{- end }}
            {{- if .Resources.Limits.Memory }}
            memory: {{ .Resources.Limits.Memory }}
            {{- end }}
          {{- end }}
          {{- if .Resources.Requests }}
          requests:
            {{- if .Resources.Requests.Cpu }}
            cpu: {{ .Resources.Requests.Cpu }}
            {{- end }}
            {{- if .Resources.Requests.Memory }}
            memory: {{ .Resources.Requests.Memory }}
            {{- end }}
          {{- end }}
        {{- end }}
        volumeMounts:
        {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
        - name: data-volume
          mountPath: /data
        {{ end }}
        {{- if .CertificateSecret }}
        - name: {{ .CertificateSecret }}
          mountPath: /etc/certs
        {{- end }}
        {{- if .ArtifactRequest }}
          {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
        - name: artifact-volume
          mountPath: {{ .ArtifactRequest.VolumeMountPath }}
          {{- end }}
        {{- end }}
        {{- range $configmap := .EnvConfigMaps }}
        {{- if and $configmap.Mount $configmap.Reference }}
        - name: {{ $configmap.Reference.Name }}
          mountPath: {{ $configmap.MountPath }}
        {{- end }}
        {{- end }}
        {{- range $secret := .EnvSecrets }}
        {{- if and $secret.Mount $secret.Reference }}
        - name: {{ $secret.Reference.Name }}
          mountPath: {{ $secret.MountPath }}
        {{- end }}
        {{- end }}
      volumes:
      {{- if not (and  .ArtifactRequest (eq .ArtifactRequest.VolumeMountPath "/data")) }}
      - name: data-volume
        emptyDir: {}
      {{ end }}
      {{- if .CertificateSecret }}
      - name: {{ .CertificateSecret }}
        secret:
          secretName: {{ .CertificateSecret }}
      {{- end }}
      {{- if .RunnerCustomCASecret }}
      - name: {{ .RunnerCustomCASecret }}
        secret:
          secretName: {{ .RunnerCustomCASecret }}
          defaultMode: 420
      {{- end }}
      {{- if .ArtifactRequest }}
        {{- if and .ArtifactRequest.VolumeMountPath (or .ArtifactRequest.StorageClassName .ArtifactRequest.UseDefaultStorageClassName) }}
      - name: artifact-volume
        persistentVolumeClaim:
          claimName: {{ .JobName }}-pvc
        {{- end }}
      {{- end }}
      {{- range $configmap := .EnvConfigMaps }}
      {{- if and $configmap.Mount $configmap.Reference }}
      - name: {{ $configmap.Reference.Name }}
        configmap:
          name: {{ $configmap.Reference.Name }}
      {{- end }}
      {{- end }}
      {{- range $secret := .EnvSecrets }}
      {{- if and $secret.Mount $secret.Reference }}
      - name: {{ $secret.Reference.Name }}
        secret:
          secretName: {{ $secret.Reference.Name }}
      {{- end }}
      {{- end }}
      restartPolicy: Always
      {{- if .ServiceAccountName }}
      serviceAccountName: {{ .ServiceAccountName }}
      {{- end }}
      {{- if gt (len .ImagePullSecrets) 0 }}
      imagePullSecrets:
      {{- range $secret := .ImagePullSecrets }}
      - name: {{ $secret -}}
      {{- end }}
      {{- end }}
    
  enabledExecutors: ""
---
# Source: testkube-api/templates/minio.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. This is used in deployment.
  name: testkube-minio-pv-claim-default
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: 10Gi
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: watchers-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - events
      - namespaces
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - daemonsets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "networking.k8s.io"
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: watchers-rb-release-name
  namespace: default
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name:  watchers-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: executors-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - executor.testkube.io
    resources:
      - executors
    verbs:
      - get
      - watch
      - list
      - create
      - update
      - patch
      - delete
      - deletecollection
  - apiGroups:
      - executor.testkube.io
    resources:
      - executors/status
    verbs:
      - get
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jobs-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
    - batch
    resources:
      - jobs
    verbs:
      - get
      - watch
      - list
      - create
      - delete
      - deletecollection
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
      - watch
      - list
      - create
      - delete
      - deletecollection
---
# Source: testkube-api/templates/role.yaml
# permissions for end users to edit tests.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: script-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - scripts
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - scripts/status
    verbs:
      - get
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - tests
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - tests/status
    verbs:
      - get
      - patch
      - update
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testsuite-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsuites
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsuites/status
    verbs:
      - get
      - patch
      - update
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: webhook-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - executor.testkube.io
    resources:
      - webhooks
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - executor.testkube.io
    resources:
      - webhooks/status
    verbs:
      - get
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmaps-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - patch
      - update
      - deletecollection
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testsource-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsources
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsources/status
    verbs:
      - get
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testtriggers-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - testtriggers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - testtriggers/status
    verbs:
      - get
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: persistentvolumeclaims-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - get
      - delete
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testexecution-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - testexecutions
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - testexecutions/status
    verbs:
      - get
      - patch
      - update
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testsuiteexecution-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsuiteexecutions
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - testsuiteexecutions/status
    verbs:
      - get
      - patch
      - update
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: template-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - tests.testkube.io
    resources:
      - templates
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - tests.testkube.io
    resources:
      - templates/status
    verbs:
      - get
      - patch
      - update
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tests-job-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - watch
      - list
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
      - watch
      - list
      - create
      - delete
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
---
# Source: testkube-api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: testworkflows-role-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
rules:
  - apiGroups:
      - testworkflows.testkube.io
    resources:
      - testworkflows
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
  - apiGroups:
      - testworkflows.testkube.io
    resources:
      - testworkflowtemplates
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
      - deletecollection
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: executors-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: executors-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jobs-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jobs-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scripts-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: script-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tests-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: test-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secrets-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secrets-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testsuites-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testsuite-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: webhooks-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: webhook-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: configmaps-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: configmaps-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testsources-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testsource-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tests-job-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tests-job-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api-tests-job
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testtriggers-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testtriggers-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: persistentvolumeclaims-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: persistentvolumeclaims-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testworkflows-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testworkflows-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testexecutions-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testexecution-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: testsuiteexecutions-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: testsuiteexecution-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: templates-crb-release-name
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: template-role-release-name
subjects:
  - kind: ServiceAccount
    name: release-name-testkube-api
    namespace: default
---
# Source: testkube-api/templates/minio.yaml
apiVersion: v1
kind: Service
metadata:
  # This name uniquely identifies the service
  name: testkube-minio-service-default
  labels:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
    - name: web
      port: 9090
      protocol: TCP
    - name: https
      port: 9443
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: testkube-minio-default
---
# Source: testkube-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-testkube-api
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
---
# Source: testkube-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-testkube-api
  labels:
    app.kubernetes.io/version: "1.17.29"
    helm.sh/chart: testkube-api-1.17.29
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: testkube-api
    app.kubernetes.io/instance: release-name
  annotations:
    checksum/config: 876d63e4a9b699d9a2e72528c37fcde9d98099bdca4a8a8833b0cfce0c5edfc1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: testkube-api
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 876d63e4a9b699d9a2e72528c37fcde9d98099bdca4a8a8833b0cfce0c5edfc1
      labels:
        app.kubernetes.io/name: testkube-api
        app.kubernetes.io/instance: release-name
    spec:
      
      serviceAccountName: release-name-testkube-api
      containers:
        - name: testkube-api
          env:
            - name: APISERVER_PORT
              value: "8088"
            - name: API_MONGO_DSN
              value: "mongodb://testkube-mongodb:27017"
            - name: API_MONGO_ALLOW_DISK_USE
              value: "true"
            - name: NATS_URI
              value: "nats://release-name-nats"
            - name: "NATS_SECURE"
              value: "false"
            - name: POSTMANEXECUTOR_URI
              value: ""
            - name: TESTKUBE_ANALYTICS_ENABLED
              value: "true"
            - name: SLACK_TOKEN
              value: ""
            - name: "STORAGE_ENDPOINT"
              value:  "testkube-minio-service-default:9000"
            - name: "STORAGE_BUCKET"
              value:  "testkube-artifacts"
            - name: "STORAGE_EXPIRATION"
              value:  "0"
            - name: "STORAGE_ACCESSKEYID"
              value: ""
            - name: "STORAGE_SECRETACCESSKEY"
              value: ""
            - name: "STORAGE_REGION"
              value: ""
            - name: "STORAGE_TOKEN"
              value: ""
            - name: "STORAGE_SSL"
              value:  "false"
            - name: "STORAGE_SKIP_VERIFY"
              value:  "false"
            - name: "SCRAPPERENABLED"
              value:  "true"
            - name: "COMPRESSARTIFACTS"
              value:  "true"
            - name: "LOGS_BUCKET"
              value:  "testkube-logs"
            - name: "LOGS_STORAGE"
              value:  "minio"
            - name: TESTKUBE_NAMESPACE
              value: "default"
            - name: JOB_SERVICE_ACCOUNT_NAME
              value: release-name-testkube-api-tests-job
            - name: APISERVER_FULLNAME
              value: "release-name-testkube-api"
            - name: APISERVER_CONFIG
              value: "testkube-api-server-config-default"
            - name: APISERVER_HTTP_READBUFFERSIZE
              value: "8192"
            - name: TESTKUBE_OAUTH_CLIENTID
              value:  ""
            - name: TESTKUBE_OAUTH_CLIENTSECRET
              value:  ""
            - name: TESTKUBE_OAUTH_PROVIDER
              value:  "github"
            - name: TESTKUBE_OAUTH_SCOPES
              value:  ""
            - name: TESTKUBE_CLOUD_URL
              value:  "agent.testkube.io:443"
            - name: TESTKUBE_WATCHER_NAMESPACES
              value: ""
            - name: TESTKUBE_CONFIG_DIR
              value: /app/config
            - name: TESTKUBE_REGISTRY
              value:  
            - name: TESTKUBE_POD_START_TIMEOUT
              value:  "30m"
            - name: CDEVENTS_TARGET
              value: ""
            - name: TESTKUBE_DASHBOARD_URI
              value: ""
            - name: TESTKUBE_CLUSTER_NAME
              value: ""
            - name: TESTKUBE_HELMCHART_VERSION
              valueFrom:
                configMapKeyRef:
                  name: testkube-global-config
                  key: helmchartVersion
            - name: ENABLE_SECRETS_ENDPOINT
              value: "false"
            - name: DISABLE_MONGO_MIGRATIONS
              value: "false"
            - name: DISABLE_SECRET_CREATION
              value: "false"
            - name: TESTKUBE_DEFAULT_STORAGE_CLASS_NAME
              value: ""
            - name: TESTKUBE_TW_TOOLKIT_IMAGE
              value: "docker.io/kubeshop/testkube-tw-toolkit:1.17.29"
            - name: TESTKUBE_TW_INIT_IMAGE
              value: "docker.io/kubeshop/testkube-tw-init:1.17.29"
          image: docker.io/kubeshop/testkube-api-server:1.17.29
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /health
              port: 8088
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 45
            httpGet:
              path: /health
              port: 8088
              scheme: HTTP
          resources:
            {}
          volumeMounts:
            - mountPath: /app/config
              name: testkube-config
          securityContext:
            {}
      securityContext:
        {}
      volumes:
        - name: testkube-config
          configMap:
            name: release-name-testkube-api
---
# Source: testkube-api/templates/minio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: testkube-minio-default
  labels:
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testkube-minio-default # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
      # This label is used as a selector in Service definition
        app: testkube-minio-default
    spec:
      
      # Volumes used by this deployment
      volumes:
        - name: data
          # This volume is based on PVC
          persistentVolumeClaim:
            # Name of the PVC created earlier
            claimName: testkube-minio-pv-claim-default
      containers:
        - name: testkube-minio
          # Volume mounts for this container
          volumeMounts:
            # Volume 'data' is mounted to path '/data'
            - name: data
              mountPath: "/data"
          # Pulls the lastest Minio image from Docker Hub
          image: docker.io/minio/minio:2023.2.27
          imagePullPolicy: IfNotPresent
          args:
            - server
            - /data
            - --console-address
            - ":9090"
          env:
            # MinIO access key and secret key
            - name: MINIO_ROOT_USER
              value: 
            - name: MINIO_ROOT_PASSWORD
              value: 
            - name: CONSOLE_PORT
              value: "9090"
            - name: CONSOLE_TLS_PORT
              value: "9443"
          ports:
            - containerPort: 9000
              name: http
            - containerPort: 9090
              name: web
            - containerPort: 9443
              name: https
          # Readiness probe detects situations when MinIO server instance
          # is not ready to accept traffic. Kubernetes doesn't forward
          # traffic to the pod while readiness checks fail.
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 3
            periodSeconds: 10
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 3
            periodSeconds: 10
          securityContext:
            {}
      securityContext:
        {}
---
# Source: testkube-api/templates/role.yaml
---
---
# Source: testkube-api/templates/rolebinding.yaml
---
---
# Source: testkube-api/templates/testworkflows/builtin-templates/artillery.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--artillery--beta
  labels:
    testkube.io/name: Artillery
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: Load & Performance
    testkube.io/description: Run Artillery tests
    testkube.io/icon: artillery
    testkube.io/example: |
      config:
        target: "https://testkube.kubeshop.io/"
        phases:
        - duration: 1
          arrivalRate: 1
      scenarios:
      - flow:
          - get:
              url: "/"
          - think: 0.1
spec:
  config:
    version:
      description: Artillery version to use
      type: string
      default: 2.0.9
    artillery_binary:
      description: Artillery binary path
      type: string
      default: "/home/node/artillery/bin/run" # "run", or "artillery" (for older images)
    run:
      description: Run command
      type: string
      default: "artillery run"
  steps:
  - name: Run Artillery tests
    run:
      image: "artilleryio/artillery:{{ config.version }}"
      shell: |
        artillery() { {{ config.artillery_binary }} $@; }
        {{ config.run }}
---
# Source: testkube-api/templates/testworkflows/builtin-templates/cypress.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--cypress--beta
  labels:
    testkube.io/name: Cypress
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: E2E
    testkube.io/description: Run Cypress tests
    testkube.io/icon: cypress
spec:
  config:
    dependencies_command:
      description: Command to install dependencies
      type: string
      default: npm install
    version:
      description: Cypress version to use
      type: string
      default: 13.6.4
    run:
      description: Run command
      type: string
      default: "npx cypress run"
  container:
    image: "cypress/included:{{ config.version }}"
  steps:
  - name: Install dependencies
    shell: "{{ config.dependencies_command }}"
  - name: Run Cypress tests
    shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/gradle.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--gradle--beta
  labels:
    testkube.io/name: Gradle
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: Other
    testkube.io/description: Gradle
    testkube.io/icon: gradle
spec:
  config:
    version:
      description: Gradle version to use
      type: string
      default: 8.7.0-jdk21-alpine
    run:
      description: Run command
      type: string
      default: "gradle --no-daemon test"
  steps:
  - name: Run Gradle command
    run:
      image: "gradle:{{ config.version }}"
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/jmeter.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--jmeter--beta
  labels:
    testkube.io/name: JMeter
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: Load & Performance
    testkube.io/description: Run JMeter Plan
    testkube.io/icon: jmeter
spec:
  config:
    version:
      description: JMeter version to use
      type: string
      default: "5.5"
    run:
      description: Run command
      type: string
      default: "jmeter -n"
  steps:
  - name: Run k6 tests
    run:
      image: "justb4/jmeter:{{ config.version }}"
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/k6.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--k6--beta
  labels:
    testkube.io/name: k6
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: Load & Performance
    testkube.io/description: Run k6 tests
    testkube.io/icon: k6
    testkube.io/example: |
      import http from 'k6/http';
      import { sleep } from 'k6';
      export default function () {
          http.get('https://test.k6.io');
          sleep(1);
      };
spec:
  config:
    version:
      description: k6 version to use
      type: string
      default: 0.49.0
    run:
      description: Run command
      type: string
      default: "k6 run"
  steps:
  - name: Run k6 tests
    run:
      image: "grafana/k6:{{ config.version }}"
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/maven.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--maven--beta
  labels:
    testkube.io/name: Maven
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: Other
    testkube.io/description: Maven
    testkube.io/icon: maven
spec:
  config:
    version:
      description: Maven version to use
      type: string
      default: 3.9.6-eclipse-temurin-22-alpine
    run:
      description: Run command
      type: string
      default: "mvn test"
  steps:
  - name: Run Maven command
    run:
      image: "maven:{{ config.version }}"
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/playwright.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--playwright--beta
  labels:
    testkube.io/name: Playwright
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: E2E
    testkube.io/description: Run Playwright tests
    testkube.io/icon: playwright
spec:
  config:
    dependencies_command:
      description: Command to install dependencies
      type: string
      default: npm ci
    version:
      description: Playwright version to use
      type: string
      default: 1.43.0
    run:
      description: Run command
      type: string
      default: "npx playwright test"
  container:
    image: "mcr.microsoft.com/playwright:v{{ config.version }}"
  steps:
  - name: Install dependencies
    shell: "{{ config.dependencies_command }}"
  - name: Run Playwright tests
    run:
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/postman.yaml
kind: TestWorkflowTemplate
apiVersion: testworkflows.testkube.io/v1
metadata:
  name: official--postman--beta
  labels:
    testkube.io/name: Postman
    testkube.io/wizard: enabled
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
    testkube.io/categories: API
    testkube.io/description: Run Postman tests
    testkube.io/icon: postman
spec:
  config:
    version:
      description: Postman version to use
      type: string
      default: 6-alpine
    run:
      description: Run command
      type: string
      default: "newman run"
  steps:
  - name: Run Postman tests
    run:
      image: "postman/newman:{{ config.version }}"
      shell: "{{ config.run }}"
---
# Source: testkube-api/templates/testworkflows/builtin-templates/serviceaccount.yaml
apiVersion: testworkflows.testkube.io/v1
kind: TestWorkflowTemplate
metadata:
  name: serviceaccount--fullaccess
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "19"
    helm.sh/hook-delete-policy: hook-failed,before-hook-creation
spec:
  pod:
    serviceAccountName: release-name-testkube-api
