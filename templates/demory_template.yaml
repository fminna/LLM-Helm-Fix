---
# Source: demory/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-demory
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
---
# Source: demory/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-demory
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - list
---
# Source: demory/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-demory
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-demory
subjects:
  - kind: ServiceAccount
    name: release-name-demory
    namespace: default
---
# Source: demory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-demory
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
---
# Source: demory/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-demory
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-demory
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: demory
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: demory
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-demory
      securityContext:
        {}
      containers:
        - name: demory
          securityContext:
            {}
          image: "huseyinbabal/demory:0.0.0-rc.20"
          imagePullPolicy: IfNotPresent
          env:
            - name: DEMORY_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DEMORY_NODE_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DEMORY_PORT
              value: "8080"
            - name: DEMORY_DISCOVERY_STRATEGY
              value: kubernetes
            - name: DEMORY_KUBERNETES_SERVICE
              value: release-name-demory
            - name: DEMORY_KUBERNETES_NAMESPACE
              value: default
          ports:
            - name: tcp
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp
          readinessProbe:
            tcpSocket:
              port: tcp
          resources:
            {}
---
# Source: demory/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-demory-test-connection"
  labels:
    helm.sh/chart: demory-0.7.0
    app.kubernetes.io/name: demory
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-rc.20"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-demory:80']
  restartPolicy: Never
