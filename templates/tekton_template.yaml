---
# Source: tekton/templates/podsecuritypolicies.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: tekton-pipelines
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - emptyDir
    - configMap
    - secret
---
# Source: tekton/templates/servicceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-pipelines-controller
  namespace: default
---
# Source: tekton/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-artifact-bucket
  namespace: default
  labels:
    dispatch.d2iq.io/catalog: "true"
data:
  {}
---
# Source: tekton/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-artifact-pvc
  namespace: default
data: null
---
# Source: tekton/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-defaults
  namespace: default
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # default-timeout-minutes contains the default number of
    # minutes to use for TaskRun and PipelineRun, if none is specified.
    default-timeout-minutes: "60"  # 60 minutes
---
# Source: tekton/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-logging
  namespace: default
data:
  loglevel.controller: info
  loglevel.webhook: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "sampling": {
        "initial": 100,
        "thereafter": 100
      },
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
---
# Source: tekton/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability
  namespace: default
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using stackdriver will incur additional charges
    metrics.backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used if this field is not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
    # Stackdriver using "global" resource type and custom metric type if the
    # metrics are not supported by "knative_revision" resource type. Setting this
    # flag to "true" could cause extra Stackdriver charge.
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    metrics.allow-stackdriver-custom-metrics: "false"
---
# Source: tekton/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-pipelines-admin
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
      - secrets
      - events
      - serviceaccounts
      - configmaps
      - persistentvolumeclaims
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments/finalizers
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - tekton.dev
    resources:
      - tasks
      - clustertasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      - conditions
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - tekton.dev
    resources:
      - taskruns/finalizers
      - pipelineruns/finalizers
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - tekton.dev
    resources:
      - tasks/status
      - clustertasks/status
      - taskruns/status
      - pipelines/status
      - pipelineruns/status
      - pipelineresources/status
    verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
  - apiGroups:
      - policy
    resourceNames:
      - tekton-pipelines
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# Source: tekton/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-aggregate-edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  - apiGroups:
      - tekton.dev
    resources:
      - tasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      - conditions
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
# Source: tekton/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-aggregate-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - tekton.dev
    resources:
      - tasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      - conditions
    verbs:
      - get
      - list
      - watch
---
# Source: tekton/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-pipelines-controller-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-pipelines-admin
subjects:
  - kind: ServiceAccount
    name: release-name-pipelines-controller
    namespace: default
---
# Source: tekton/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pipelines-controller
  namespace: default
  labels:
    app: release-name-pipelines-controller
spec:
  ports:
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app: release-name-pipelines-controller
---
# Source: tekton/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pipelines-webhook
  namespace: default
  labels:
    app: tekton-pipelines-webhook
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    app: tekton-pipelines-webhook
---
# Source: tekton/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pipelines-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-pipelines-controller
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app: release-name-pipelines-controller
    spec:
      containers:
        - args:
            - -logtostderr
            - -stderrthreshold
            - INFO
            - -kubeconfig-writer-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter@sha256:43050320e994156a2683ab5d30551a52a4a59fe20b0ee50161af5d524b9aa5c6
            - -creds-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/creds-init@sha256:c8544b7182b53608f7b71f42c31295d8bf534ceeed14be735977c7e289fd37b7
            - -git-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init@sha256:2aaaecd06986c7705f68f19435b8a913ef6701ac6b961df16d1535f45503cea5
            - -nop-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop@sha256:02a909a050553e520b0b832e20fa5117271aee2f0b23db0d3c5d36f4bcd33dc0
            - -bash-noop-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/bash@sha256:b183305a486aafbf207cf4dd969b38645b04e6fd18470f32fc7927d0a8035581
            - -gsutil-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/gsutil@sha256:f31d4c9504b27b1d7b88b5be17e7cfa8e21227a481c826a7db07251fb899f919
            - -entrypoint-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint@sha256:989288cf9939fe7b098a47192d1a9ce6551e5bd1d2c5b4ddf57cc8e7d9f0d1ef
            - -imagedigest-exporter-image
            - docker.io/chhsiao/imagedigestexporter-6e7c518e6125f31761ebe0b96cc63971@sha256:1b4a211441f307ce3a848287a208cf568182ce731930e97259319e3954cf6780
            - -pr-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init@sha256:1f259ed235466ca2a584dbc61f1734d91a5eeb9c5bd998fafc5a4731a5c8fb18
            - -build-gcs-fetcher-image
            - gcr.io/tekton-releases/github.com/tektoncd/pipeline/vendor/github.com/googlecloudplatform/cloud-builders/gcs-fetcher/cmd/gcs-fetcher@sha256:8f15ebccb4fb3bc723db10bddddd13c43d464c71a4edddec578ab2477822a1c5
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: config-logging
            - name: CONFIG_OBSERVABILITY_NAME
              value: config-observability
            - name: METRICS_DOMAIN
              value: tekton.dev/pipeline
          image: index.docker.io/jbarrickmesosphere/controller-10a3e32792f33651396d02b6855a6e36@sha256:74036b1da9e1383c60de0ca03ccb71e29c880977a78707a39862812df74e1cbc
          name: release-name-pipelines-controller
          resources:
            limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 512Mi
          volumeMounts:
            - mountPath: /etc/config-logging
              name: config-logging
      serviceAccountName: release-name-pipelines-controller
      volumes:
        - configMap:
            name: config-logging
          name: config-logging
---
# Source: tekton/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-pipelines-webhook
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tekton-pipelines-webhook
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app: tekton-pipelines-webhook
    spec:
      containers:
        - env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook@sha256:48cfcc0ec4898143a79e6b014f8011781cfffb543a845c4d138886d362d71492
          name: webhook
          resources:
            limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
          volumeMounts:
            - mountPath: /etc/config-logging
              name: config-logging
      serviceAccountName: release-name-pipelines-controller
      volumes:
        - configMap:
            name: config-logging
          name: config-logging
---
# Source: tekton/templates/crds.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: tekton/templates/crds.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  crd-clustertask.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: clustertasks.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: ClusterTask
          plural: clustertasks
        scope: Cluster
        subresources:
          status: {}
        version: v1alpha1
  crd-condition.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: conditions.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: Condition
          plural: conditions
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-pipeline.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: pipelines.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: Pipeline
          plural: pipelines
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-pipelineresource.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: pipelineresources.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: PipelineResource
          plural: pipelineresources
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-pipelinerun.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: pipelineruns.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        additionalPrinterColumns:
        - JSONPath: .status.conditions[?(@.type=="Succeeded")].status
          name: Succeeded
          type: string
        - JSONPath: .status.conditions[?(@.type=="Succeeded")].reason
          name: Reason
          type: string
        - JSONPath: .status.startTime
          name: StartTime
          type: date
        - JSONPath: .status.completionTime
          name: CompletionTime
          type: date
        group: tekton.dev
        names:
          categories:
          - all
          - tekton-pipelines
          kind: PipelineRun
          plural: pipelineruns
          shortNames:
          - pr
          - prs
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-task.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: tasks.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: Task
          plural: tasks
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-taskrun.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: taskruns.tekton.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        additionalPrinterColumns:
          - JSONPath: .status.conditions[?(@.type=="Succeeded")].status
            name: Succeeded
            type: string
          - JSONPath: .status.conditions[?(@.type=="Succeeded")].reason
            name: Reason
            type: string
          - JSONPath: .status.startTime
            name: StartTime
            type: date
          - JSONPath: .status.completionTime
            name: CompletionTime
            type: date
        group: tekton.dev
        names:
          categories:
            - all
            - tekton-pipelines
          kind: TaskRun
          plural: taskruns
          shortNames:
            - tr
            - trs
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
  crd-image.yaml: |
      ---
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        labels:
          knative.dev/crd-install: "true"
        name: images.caching.internal.knative.dev
        annotations:
          helm.sh/hook: crd-install
      spec:
        group: caching.internal.knative.dev
        names:
          categories:
            - knative-internal
            - caching
          kind: Image
          plural: images
          shortNames:
            - img
          singular: image
        scope: Namespaced
        subresources:
          status: {}
        version: v1alpha1
---
# Source: tekton/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "get", "list", "watch", "patch"]
---
# Source: tekton/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-crds
  namespace: default
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-crds
subjects:
  - kind: ServiceAccount
    name: tekton-crds
    namespace: default
---
# Source: tekton/templates/crds.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: default
  name: tekton-crds
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: tekton-crds
      containers:
        - name: tekton-crds
          image: "bitnami/kubectl:1.16.2"
          volumeMounts:
            - name: tekton-crds
              mountPath: /etc/tekton-crds
              readOnly: true
          command: ["kubectl", "apply", "-f", "/etc/tekton-crds"]
      volumes:
        - name: tekton-crds
          configMap:
            name: tekton-crds
      restartPolicy: OnFailure
