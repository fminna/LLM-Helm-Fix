---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kazarma-postgres-password
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "UEVpMnVkeTN1bg=="
  password: "aFQ2cmlsZVlCWg=="
---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kazarma-secret-key-base
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  key-base: "QEhYOEdAVktUMFlAM1NVQGlAZkBoeUNabUA5cmxQQG1AYkBfX1hARW9AcmVJQFh6ZmdATUUyWEBMQEBAQEAxdw=="
---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kazarma-homeserver-token
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  token: "Ukh3TVpoZUBKUFhAQEBEQEBuUk9AcXhWQERJQEt6OXpFUkBhQ1JATUBGQElAOXV3QDRIX0BSQGY2OXZCQFZpREBAQEBANUBQQGl6WUBAV1NHOVlwQEBSVzg1ZUFAZnZWQEBAWWJAOUBAMG1oQEBAQG5AQFlCZEBiU2tQQF9AQU1Aemp5QHhOb0BASmpAakhtQHhAaEBVSHA3OVNATmhAVjhARmRQQGlAckA1RkBFYUlAQHQxQEBAR0BfQFAwclBAMU5AQEBHakBPQEBAR0xYQEphcGhASWJQQEA2QEAxQWhWVUBRQGZzSUZAQF9JQDVBdHcyaUBAUjFqZ2hZWTFlXw=="
---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kazarma-access-token
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  token: "Nk1AQEA4OUx3akZaWkBWX2tZQ0AxQHZANVlITkBsWFZDYUBWQEo1bWtAa0BfQEBAN0gyWHFhQEBAaXFAQEBAQEBzQEBDQEBAQHN4eDhAcDhDSmNAb0toYWdNRnNANkBmZU9PYVNrQFdAM0BZRjhAdVdAQEB2NXRKQEc2N0AyQEdaV1hAaVJrQGJAZUBwM0BAQlBAQG9GWlJkQFhAeDVOOXNAX3VzT0A2QFVAX0B0RkYzQExAc1FhV0BPcEBkUFhAQHRrTGV1WEBfQHVAQERAR3JAX1hAQURWSmdVXzhtQE5AMmVuWUBAQEBmbElAQGJAQFliSG5Ad2JuQDlAQFNDQA=="
---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kazarma-registration
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  registration.yaml: | 
    as_token: 6M@@@89LwjFZZ@V_kYC@1@v@5YHN@lXVCa@V@J5mk@k@_@@@7H2Xqa@@@iq@@@@@@s@@C@@@@sxx8@p8CJc@oKhagMFs@6@feOOaSk@W@3@YF8@uW@@@v5tJ@G67@2@GZWX@iRk@b@e@p3@@BP@@oFZRd@X@x5N9s@_usO@6@U@_@tFF3@L@sQaW@Op@dPX@@tkLeuX@_@u@@D@Gr@_X@ADVJgU_8m@N@2enY@@@@flI@@b@@YbHn@wbn@9@@SC@
    hs_token: RHwMZhe@JPX@@@D@@nRO@qxV@DI@Kz9zER@aCR@M@F@I@9uw@4H_@R@f69vB@ViD@@@@@5@P@izY@@WSG9Yp@@RW85eA@fvV@@@Yb@9@@0mh@@@@n@@YBd@bSkP@_@AM@zjy@xNo@@Jj@jHm@x@h@UHp79S@Nh@V8@FdP@i@r@5F@EaI@@t1@@@G@_@P0rP@1N@@@Gj@O@@@GLX@Japh@IbP@@6@@1AhVU@Q@fsIF@@_I@5Atw2i@@R1jghYY1e_
    id: Kazarma
    namespaces:
      aliases:
      - exclusive: true
        regex: '#ap_.+___.+'
      users:
      - exclusive: true
        regex: '@ap_.+___.+'
    sender_localpart: _kazarma
    url: https://kazarma.example.com/matrix/
---
# Source: kazarma/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kazarma-postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: kazarma-postgres
    helm.sh/chart: postgresql-12.2.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: kazarma-postgres
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: kazarma/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kazarma-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: kazarma-postgres
    helm.sh/chart: postgresql-12.2.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: kazarma-postgres
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: kazarma/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-kazarma
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
---
# Source: kazarma/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kazarma
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kazarma
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        prometheus.io/port: "4021"
        prometheus.io/scrape: "false"
      labels:
        app.kubernetes.io/name: kazarma
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      containers:
        - name: kazarma
          securityContext:
            {}
          image: "registry.gitlab.com/technostructures/kazarma/kazarma:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_HOST
              value: release-name-kazarma-postgres
            - name: DATABASE_USERNAME
              value: kazarma
            - name: DATABASE_DB
              value: kazarma
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kazarma-postgres-password
                  key: password
                  optional: false
            - name: MATRIX_URL
              value: https://matrix.example.com
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: kazarma-secret-key-base
                  key: key-base
                  optional: false
            - name: HOMESERVER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: kazarma-homeserver-token
                  key: token
                  optional: false
            - name: ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: kazarma-access-token
                  key: token
                  optional: false
            - name: ACTIVITY_PUB_DOMAIN
              value: example.com
            - name: PUPPET_PREFIX
              value: _ap_
            - name: HOST
              value: kazarma.example.com
            - name: BRIDGE_REMOTE
              value: "false"
            - name: HTML_SEARCH
              value: "true"
            - name: HTML_AP
              value: "true"
            - name: INSECURE_SSL_TESTING_ONLY
              value: "false"
            - name: LOG_LEVEL
              value: warning
            - name: RELEASE_LEVEL
              value: prod
            - name: SENTRY_ENABLED
              value: "false"
            - name: SENTRY_DSN
              value: 
            - name: LOKI_ENABLED
              value: "false"
            - name: LOKI_HOST
              value: 
            - name: LOKI_ORG_ID
              value: 
            - name: METRICS_ENABLED
              value: "false"
            - name: METRICS_PORT
              value: "4021"
            - name: GRAFANA_ENABLED
              value: "false"
            - name: GRAFANA_HOST
              value: 
            - name: GRAFANA_TOKEN
              value: 
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          resources:
            {}
          volumeMounts:
      volumes:
---
# Source: kazarma/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-kazarma-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: kazarma-postgres
    helm.sh/chart: postgresql-12.2.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-kazarma-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kazarma-postgres
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-kazarma-postgres
      labels:
        app.kubernetes.io/name: kazarma-postgres
        helm.sh/chart: postgresql-12.2.4
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kazarma-postgres
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "kazarma"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kazarma-postgres-password
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kazarma-postgres-password
                  key: password
            - name: POSTGRES_DB
              value: "kazarma"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "kazarma" -d "dbname=kazarma" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "kazarma" -d "dbname=kazarma" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kazarma/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-kazarma
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "kazarma.example.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-kazarma
                port:
                  number: 4000
---
# Source: kazarma/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kazarma-postgres-password-migrations
  namespace: default
  labels:
    helm.sh/chart: kazarma-2.3.0
    app.kubernetes.io/name: kazarma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
type: Opaque
data:
  postgres-password: ""
  password: "aFQ2cmlsZVlCWg=="
---
# Source: kazarma/templates/migrations.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name-kazarma-migrations"
  namespace: default
  labels:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
spec:
  template:
    metadata:
      name: "release-name"
      namespace: default
    spec:
      restartPolicy: Never
      containers:
      - name: kazarma-migrations
        image: "registry.gitlab.com/technostructures/kazarma/kazarma:latest"
        command: ["/app/bin/kazarma", "eval", "Kazarma.Release.migrate()"]
        imagePullPolicy: IfNotPresent
        env:
          - name: DATABASE_HOST
            value: release-name-kazarma-postgres
          - name: DATABASE_USERNAME
            value: kazarma
          - name: DATABASE_DB
            value: kazarma
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kazarma-postgres-password
                key: password
                optional: false
          - name: MATRIX_URL
            value: https://matrix.example.com
          - name: SECRET_KEY_BASE
            value: ""
          - name: HOMESERVER_TOKEN
            value: ""
          - name: ACCESS_TOKEN
            value: ""
          - name: ACTIVITY_PUB_DOMAIN
            value: example.com
          - name: PUPPET_PREFIX
            value: _ap_
          - name: HOST
            value: kazarma.example.com
          - name: BRIDGE_REMOTE
            value: "false"
          - name: HTML_SEARCH
            value: "true"
          - name: HTML_AP
            value: "true"
          - name: LOG_LEVEL
            value: warning
          - name: RELEASE_LEVEL
            value: prod
          - name: SENTRY_ENABLED
            value: "false"
          - name: SENTRY_DSN
            value: 
          - name: LOKI_ENABLED
            value: "false"
          - name: LOKI_HOST
            value: 
          - name: LOKI_ORG_ID
            value: 
          - name: METRICS_ENABLED
            value: "false"
          - name: METRICS_PORT
            value: "4021"
          - name: GRAFANA_ENABLED
            value: "false"
          - name: GRAFANA_HOST
            value: 
          - name: GRAFANA_TOKEN
            value:
