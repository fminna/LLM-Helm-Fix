---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "aHJ0bjhWU0R4Y0FCeHdRNA=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGpDVjdEME1sWWY5MjEzdHd2S3MyRCtaNWE2QXdyM0tkalYwWnFObGtMRzVjdFIzClNrUkp0V2lUTnIvWXZ5UExGUytrMHllTFdpaC9YV0VHYmltQW9PdTAvK2FHdUhLZGJtNkdCOFJqRGRLNVdMdkgKYXJBbGpnYzBkekM1bkFJNmx1bDB1am1tN0VMbXVSWWlVRnh1Y3NwckI2OTMxQjMyZlRpaWlnVW5CcmFhYkhUNwpETHE4Nk05ZXY1dUlwMko2Sk52V05yY3JKQmtPU0RsaDZnRFVaaFVDTjlydjgwQVZ4b1BsNWlDNmw1cCtlL3VpCnNkWVNIdHlvMDMyQzhFOE5zNVE4bldqNXlmVEpDZUF5RmJLVWowcElFclJ3a2I0QlNkYmRTWGtWSjFSenl0MnkKU3hBNmd3bThGc1N3MVZQVlhsUm1rNjR5L1FmYkhGU0pWMGJrQVFJREFRQUJBb0lCQUNMaDhVMFVnU3RTWkxELwpCRnJyU0FLMWxFdGFwUnJqWUNUb3k0SEVzellrWW9BMkNndVhDbk1DcEtsdDNzUmpoYjlIc0xpcndZN3U3ZTE5CnVCc25KV0lyMTZjYmF5MW81NlNQUVBaVHNCOENuM2p5eEtkTWNRNDlTRGNWZVpwNHNZWnlqSURud1Rsd2U5cVIKY2t0SVpmUW9DV2VQQlFEZWVoUUh0dkZvS0FPZHZXZjRMckM1T21ndDBqMDNiMzcwYWVMSU9ud08wdHFWM2lFbApvcTBHQTlWYlMwOWNsSFhkTUovdi9ZTHlaeUVUMnBCRDU3NENUVGtVMXJDazVoT2h3UGhiZllSQ213N0pHTmhXCjlsRzloTTV6MGs4NWRWUUFvMExsRFZIMEl2MHFWdUJYVW5sb3ZXUlI5RDlLK0c1dmxmaGhpN0tESjdRaG5MUGcKazlVVWdPMENnWUVBNjRySnZvSlNvbElubnVVK3NyUlZiWWtlNU1WZnRRUEoxNWtyTTBmY3F6REo0cE12UVlMSgo4aUxkaHJjK2VDNU83Rit5Y1ZuMU1seTRPc2JpdEU5dTRwTWY5KzljSUZVQlIzbkxheEVEQmFkTmpTdnJxTDlQCkhqcllzR3RYYjRXTzZNSFlLODZBSjBacWRJUm92M0VzYXRjNlhQc2daamw2cnM0MmtKa3p0ZThDZ1lFQTlkWFoKeGtHMjdLR2thN1dLNUIrdTFGa0V4UFV5VGxsdTdzWkRRRGhtalVZSVhXZHRqYzNvc0plQWNXVngwbmhxd29MYgpQVXo4WUIydC8xTDBKa2RSRWQ3M2s2L3lYMkwydFBnMnBxRk1pSXlpa0tCVE1INjR3OUIvazFrK2VRdVdleFlKCklIRmpKWVhXNmJpNkg0RklKLzFHRHFrRmY4Z25RT0tkSVdkM2RROENnWUVBNUlCZHV4MSt3TTNtZGZWN1g2NG0KZWY3ZUk1MStmWUxSV3dEU3NncnkvbmgwUWdQN2doZzVoVmRoaFFGYjd3Y3R0WTRZOUhJS3R2TFFIdVUycFNteQpMc2YvNlcwaCtKTytpL0tSN3Fvd1BsblJtRFNWaDcwZ0tmbDRvWjFnMDJYRC8vV2RtdEhYN1VJWW9EU2IwYTBmCkkvN3NOYXZDQUttZVpOclVnRzYvaGEwQ2dZRUF1SDF2dktDT2hoRmMwbFJnMG9pUWJONE5mVDVDTFpoaWJ5RXQKVVNIQ25KMEZKQXU5cE9EMWtxbHdCQ25NZk5aUDBIL2h4cVJpOWtMdjFLQk5oL2lYZDZEc0RkTEtReG1DNmhjbwo5RzR5Z0h1Q2VLVkpLU2pBd250VGNxSlVCd1ZTUGpjd1REK3IxM29VNmp2dXVqd01pYTVDaURnQ1gzNDNMek9pCkZuS09yTE1DZ1lBdHgvVVp6RjNxNHBBRndEbXFnVWVheStVWU1zRktsU1duUUpoRlpjZk4yNXBiNW5JOEkrcXcKaWVFMmtNWldYSms4NWpYRUtkZ0RObWxhV3Bsd21pbDlWU2tveDBYMjVadUhXcTkwT2hXRVBHWS81b2pqMzdodApYOWpzbWxGK3ZsenNxZjdybUphUXJPNWg1eVVVeE5tWDhVRHdxODg2bitWUmo1cURvc2xkYXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRVE44UWp0UnNvYzQ4bFhlZEhKUUgvekFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qUXdOVEUxTVRBeE5UQXhXaGNOTWpVdwpOVEUxTVRBeE5UQXhXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURpTUpYc1BReVZoLzNiWGUzQzhxellQNW5scm9EQ3ZjcDIKTlhSbW8yV1FzYmx5MUhkS1JFbTFhSk0ydjlpL0k4c1ZMNlRUSjR0YUtIOWRZUVp1S1lDZzY3VC81b2E0Y3AxdQpib1lIeEdNTjBybFl1OGRxc0NXT0J6UjNNTG1jQWpxVzZYUzZPYWJzUXVhNUZpSlFYRzV5eW1zSHIzZlVIZlo5Ck9LS0tCU2NHdHBwc2RQc011cnpvejE2L200aW5Zbm9rMjlZMnR5c2tHUTVJT1dIcUFOUm1GUUkzMnUvelFCWEcKZytYbUlMcVhtbjU3KzZLeDFoSWUzS2pUZllMd1R3MnpsRHlkYVBuSjlNa0o0RElWc3BTUFNrZ1N0SENSdmdGSgoxdDFKZVJVblZIUEszYkpMRURxRENid1d4TERWVTlWZVZHYVRyakw5QjlzY1ZJbFhSdVFCQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbS9ZWmppVEZaMmVuWXIvNG5JaU1jcWxIRGk0dwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSVdoQnRrb0o3OEJQZjdJb3ZWVjR0bmhhTlo5N0lPL05QL1BKL2ttCk50QTcrU2sybjRuYm9CYVJxUWwyaCt4MldlREV4OU1PNE1VZVRCQnEwTWVYZHZYSURWNmszNkxTbm5zRCtEd1YKNVZJMWFmSmQ5Yy9lVEpodFEveUVjenJCNFZvVFE2TkdwbVNaTnczSzdkYjc0QXNwclZKdEF0L3NhNkRaUHhyYwpZMTJPNDdRRXE2L3dnLy80cDZuTXZLS1lieWFZa2xEeHFIelBUSWlFOTFZZ3JGYkU0NzZyYTBFUk4vR0swN2VkCjdSakFEbUFteitiS291OHppUDhiR2FWa0xnRXhGVkZ2M2FzQkpVVGU0VC85THFTUkJtbUV0RmZPcmpFZWNja3cKUjMxajJBaVZMbWVmc3JFR29YSWVMQ3prZHdWZ0YvUGVrOWgwZEYzWlF0dDVQSGs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "RHNqQVI5eDV6T3JFbUd0UzA3aG1HQ1drVDc2V3ZUNzA="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUlIRFdjcUNvQStDYnppU2VnQWJkeEV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURVeE5URXdNVFV3TUZvWERUSTFNRFV4TlRFdwpNVFV3TUZvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUExZVpHKzBxS3MvUm9YRStKUU5vUHkwSHZRcnVUV2ZYem42a3AKV1J6Yi9BS3JyYkJMMk1oR0pKaVZyYlZtWmE4WEVFWDE5ZTdrMktlZ1dPR0xaOU1MRG9YWE5XZjhZcjZNcUhxUgpicitSRFBXVmNORW9tZ0pEM1U4STRmTGRIdDVlUndZUmtWU1UrODZPZ3RSTjVYK1E1R2JuRXJ3eDRaOEN5aXJGClo2QnRVSmNCNGlScG03TGREVUVlK2VQM2dId0g1ZXMyS1Z0Ull1RVN6RHpSUDkyb29nZkJ6TFlRU0JkQzUzUEcKektjenI5alR5NHF2a1gvbmNXZHhMYVNWdE9XRnpZeVNUYmZwdThISTFyWFlMdVVXYjZLblBpaUREUEowOXJRNAovQURQWitzWGJtQW9ESzNkVEdxcnRPTEFDcXQ4RFdzeXRldHRiOWRNNHJrbEhlVVZXUUlEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVzSEpTQzBmSXFacnlMcVd4T2pmUDlNVzVTSjB3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNDClpYSWJFQUFyVE5JQ0Vya3ZhUDJQcFg2K0dyc0FEM3hOeTltdVl6VHZyOW9LczJveTM0dHdXOWx3blh6Q2w2cnAKY1ZuMnRHVDVrYThDWStiekNCQjAwVjRabFo4YmRTMEhEK0NER2tkTUhISC8reFFSSGRvTnllU2dFb3loTWdmTgpaSitMdmtBY2VCLzFYeFBXeTgrU3hDdTJ6VE1xQ2p6akx2MmliMld2NFFxQlpsYlJnWDVxTmNZNWRZNUYwYURtCjkrbysxbzZiMEVPYTFqV2xWR09DbFFFMXM1bTEraVQwQnFjWHRhTWR4eDJZZXFzS0tHNS9zSyt2SC9aeWtaMFgKVlREemlVMmM3MStGVVErcXBOazkwQ2IzSzduTVhJU0x6eFJmRzU0ZkpEMHcwT3J0WkdnekxFSzNDM1Y4VVF4cApZRG4vWDltbkt0UEtJTVVIaDJjagotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMWVaRyswcUtzL1JvWEUrSlFOb1B5MEh2UXJ1VFdmWHpuNmtwV1J6Yi9BS3JyYkJMCjJNaEdKSmlWcmJWbVphOFhFRVgxOWU3azJLZWdXT0dMWjlNTERvWFhOV2Y4WXI2TXFIcVJicitSRFBXVmNORW8KbWdKRDNVOEk0ZkxkSHQ1ZVJ3WVJrVlNVKzg2T2d0Uk41WCtRNUdibkVyd3g0WjhDeWlyRlo2QnRVSmNCNGlScAptN0xkRFVFZStlUDNnSHdINWVzMktWdFJZdUVTekR6UlA5Mm9vZ2ZCekxZUVNCZEM1M1BHektjenI5alR5NHF2CmtYL25jV2R4TGFTVnRPV0Z6WXlTVGJmcHU4SEkxclhZTHVVV2I2S25QaWlERFBKMDlyUTQvQURQWitzWGJtQW8KREszZFRHcXJ0T0xBQ3F0OERXc3l0ZXR0YjlkTTRya2xIZVVWV1FJREFRQUJBb0lCQUNZYnJMSEFpZzJka2FwQQprVmQ0Z2kvWVEyUkVQdkJjSFZkb3IvRXNieFRxOU9NdzhaSmh1LzF4SWRtYzQrMWgwRjRaMk1SRUY0bHg4K05oCjY1Qkh6VVI5RytacjdFODdXNXY0bWtoODRMN0tVaUdUWWdSdU91RUczN0pCcnB0OVNwYWt3aVIrU1R6RGhDaFMKNHIzc2lFZm8vV29kRlZYNUdtb2lUS0UxdDhRUGo4eE02YW01Z3ZGRXdKK0Y1UGl2bW8wZlpTY21zWGhZQ1g1NwpqYVplR3Bhc1NMOWt4dkxJTnJNd1lDREpzaDJ5Ulc2Wk93RGxoYW9aTUpxMnJoRE9UcXgzQko4bnpOZXJUNFJwCnpRdlVnMTArV0c3WmgybHgvY0l2Qmh0TnBRVVg5RnhFSlg0dUxsTWhOcEUrVG1SNllSenpSUTlPa2tpSkhwUUIKTVNud1RnRUNnWUVBM2oxd2xCYk5IczNMbmswWmdMTDJvcUFxT040b3pvN2VRcmd5QmVocFA2clI0bmFQbklMZgpqSDJMaDdCNDRwQ0NPQjFXWFdOUitwOE9MWnpJYTlYQnFUUE53YW9oMUVXN1N3ejBVMmtEN011dEgxTkRsTm1iCkpibGE3WEZ5cmRjK3lyMElVRjQvUlpjNStRaWZrRHY0T1JSM2Q3b0Q1L2RrODJyTGtaeTNlMGtDZ1lFQTltUjkKVkJvWWEzd1JOL2J1VXJOMkVJbUJGOCszb01GaW9VYzhteEJWbXgwZlFoaGdCVWJGVVU2bkF3SmJWT2dxYlFFYwpoTk00dm0rZlJ5bnFGMHBOaC83cVlQS1lpaDJJQzBHZFdvMktpQTVrRmVFMFFDTFNqQm01bGE5N25ucTU4dmd4CjFFdzJ0MEJoM0hQWjlBV1ZsVzBsMmZsSUM2eEtqWE5mWXdaZE9aRUNnWUVBMmJkZzhZTEE0ZnVFRFluRWdTTlIKb1JHOUswYmd2VEtUSk5Pa0ZjdVFTQklGV1pFQ3NiWTRZRDZoa1lWZGQ3OVFBcjhpMjR3d1JKRExaLzNmRGwwegpRcHFBYU1oT0tkRkNZWXpJVW1wZnNQdjdsdU9RSW1ObnJYWS9VTHZDTi9IVkR2SlBFY1N5d1c4Y0dRN01tcFZWCllEM2ZwOGZ3aWJBQUVzTTl1R0hLRWhrQ2dZQlcxOFpnclMzc1BIZHBMVXlFczZJcVkveXZJdFJMQWI0OHIvb0oKZ1hGYTBhSGh6dXVSRUllZGg4WlB4alhnc0UrN3ljZCtmV0FqcHY0UnZCRTVFa1JQYWFhOGN1VVcwUi9STDloQgpRV0FSWWxrZWFSamNmaW1ObmNlT25hSkprbUlWNUNyVDgrVFpKQVVhQ1c5SmxlcEtGNFZlMVlEeU5GQzJtSEtICldZZmtNUUtCZ1FDdnRBcXlSbVp5TG5aQW1WM3YyK3RJU0lkSjU4MTdEUThEQUxNL1JiSG5mR1NBMyt1SmU0dGcKMDVxZ2xLU09IU2gwZlJiak9jUzQwQnFycmxvTkRHYlg4T1hKdHBPd200S2ZZQU45cS9ib01oeUJjRkJLWmtEKwpwcGhuM3BNZzNuQWRmNDl1ZUdwN2NMbm9WV0NnbWZzdis3VVROYktmdjF2TE5sMTBqelFEUWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRkVaaE13TTNxS1doL3QwMWJGQ3lvVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TlRFMU1UQXhOVEF3V2hjTk1qVXdOVEUxTVRBeApOVEF3V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHFydGV3WWl0Ny9Gc1RucWgyL0FMcTJTWXhpSXg4cHJlVTAxWnBJeFlGa1F3MjhabUgKM0tDYjREOTZvTHUrYndWODJtVlVqdG51bWdtcHJWNG1hVTRrb0ZSZVRLcTZ2T0tNUjBwSzAzUU5HQSs5emc2RwpmWkJxY1YwM2dFODl2WDkzSjA5Mm5NSkJVNVQ4eFFKRk56M1hPRUpIaG5zbURkMlF0TWtMeVdzRjNxaTdvazFHCnRYZGxrd25UYStjcEVSeEJIVGdpQmNtcVE0eEp3djJ0S0FJcjVDVDZpbDMycHhEME5CcDV0bitta0gycTBLTkwKMnFNdm9tZkVVckFKQTg0T24rV2ZaZkR2UXgyZDJSTGdONmxrK0Z1Zll0QlZza2xTVmJ0aVJGc0JVcWlNekJyOApVV2FCaEJ6bHhyZW1BUHNwaE50RDhMUE5TS0x6S0tTK0xUT0hBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVzSEpTQzBmSXFacnlMcVd4T2pmUDlNVzVTSjB3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFJdkxKa2xrNnFBUUZ1UDR0MzJhL3B4TUFDQjNRUTFpclFhQWNrYUlINE92Z3hZNWEyWlpmb2toCko4Y2Rkdm0vanM1dHZQbG1IcU81YS8rQlF5VGhKamNxVlRUZlhtRmhqdWlQa01OWlRyVGUraEtBQnlKYk40TS8KYUI4UGtJc3lrT0RNdHg5SWs4OXdFeklhSXRGOXJlQ2xlMk8rbzl4ckZRZ043RUd0QmZ1SHJQZUpsU0ZVSk9PTQplOVZTeHdYQ2xNQ0d6aGRIajlMNXVDazNtQ2V0STFCR0hPYWUrYUppaHdsMlJzK2EwU1B3NlBsL200QkQyR1d2Cm5nc1pENmFnanBHNTExTzFKNTBRaFN6eTBFY1VIREFDS3J2anEzQ3ZNd0h2eEJLbStaWjhSR21mOXNVZUFDWGEKd09nc0hqVWhHUWx5OU54LzllMWsxRUdoNGxncm8zVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "Nk94aUROeUpFSzRvaU5TaA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "SjdCRzh4NWVCR09UQWJNUw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJE1Mckc4di43dDZBOGVlbGkxSWRULmVXVEQwQU5MeXo3YURPazdySUtFQUwwNk9MMmhVR0Rp"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registryctl"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-trivy
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtaGFyYm9yLXJlZGlzOjYzNzkvNT9pZGxlX3RpbWVvdXRfc2Vjb25kcz0zMA==
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "release-name-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://release-name-harbor-core:80"
  JOBSERVICE_URL: "http://release-name-harbor-jobservice"
  REGISTRY_URL: "http://release-name-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://release-name-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://release-name-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://release-name-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://release-name-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://release-name-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://release-name-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://release-name-harbor-core:80"
  TOKEN_SERVICE_URL: "http://release-name-harbor-core:80/service/token"
  REGISTRY_URL: "http://release-name-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://release-name-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://release-name-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: release-name-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-registryctl"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: release-name
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: release-name
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-trivy"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 227c81aab425f4b392fe1fe54704d6f1b4678fcd78b9f5a9fd0593a88c20a954
        checksum/secret: 6016bd2cd2fceda9296cba6d85138d9ee4c3a1612cf15a62a5a1501c1f4ac949
        checksum/secret-jobservice: fbb134166ebd2674f3b4bc04b6b5ba83cf80d60ed0698af8c65fa955446f2e9d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.2
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-core"
        - secretRef:
            name: "release-name-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: release-name-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: release-name-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: release-name-harbor-core
      - name: ca-download
        secret:
          secretName: "release-name-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 28ba066426d0e1297a44dba34ab832f07c9a8f68a41c06ebca0a2bc91a5baa8e
        checksum/configmap-env: 71be556cbc31ca19caed4f7bdcb9735d6344a6b5cca951bc00159870fb249b91
        checksum/secret: 262ea27ef590fe39fffbeae56d7a49ca9b73e5c0cc5889aa650da91abae94340
        checksum/secret-core: 07e5a09a3d7d00ec4bfbdd5aa180fd0c6027fcb38ab2246d90998ada515cf4a8
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "release-name-harbor-jobservice-env"
        - secretRef:
            name: "release-name-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "release-name-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: release-name-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 9504cc80d53993b51cae2b31aaa200a9dffe216e5590b451fbe8e000386614a6
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "release-name-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 2b8b6bfbe694200e4b5d32f144d325d7f3101df80dece87db9644d1f1cdd53a4
        checksum/secret: 9764055d0c10464a7e708a90a0b6958a7a14547496790ba7aa47134630928579
        checksum/secret-jobservice: c29a0369d9ead3157e808e79ede073b7d0d057594816bec2d1c9308d9af9a964
        checksum/secret-core: ea7206f6c0975f0deac541c4f78d9a08a56e3b74b5364b4a0e860ae421f7d694
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "release-name-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-registryctl"
        - secretRef:
            name: "release-name-harbor-registry"
        - secretRef:
            name: "release-name-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: release-name-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: release-name-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: release-name-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "release-name-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: release-name-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "release-name-harbor-database"
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 62b64303e898fc3b79a590a9908ee1ef028279b055e21cff30dd409ddde1cc7c
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "release-name-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: release-name-harbor-redis
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-trivy
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: release-name-harbor-trivy
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 989353564056445018af9b778e7ece01a06f16ca7142d02b6dec5c2b58f56c3a
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,release-name-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: release-name
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Helm
    release: release-name
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: release-name-harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: release-name-harbor-portal
            port:
              number: 80
    host: core.harbor.domain
