---
# Source: mcrouter/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:  
  name: mcrouter-release-name
  labels:
    app: mcrouter
    chart: mcrouter-0.0.3
    release: release-name
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      app: mcrouter
      release: release-name
  policyTypes:
    - Ingress
  ingress:
    - ports:
---
# Source: mcrouter/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:  
  name: mcrouter-release-name-secret-config
  labels:
    app: mcrouter
    chart: mcrouter-0.0.3
    release: release-name
    heritage: Helm
type: Opaque
---
# Source: mcrouter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:  
  name: mcrouter-release-name-mcrouter-config
  labels:
    app: mcrouter
    chart: mcrouter-0.0.3
    release: release-name
    heritage: Helm
data:
  config.json: |-
    
    {
      "pools": {    
        "foo-pool": {
          "servers": [
          "192.168.1.1:11211:ascii:plain",
          "192.168.1.2:11211:ascii:plain"
        ]
        },
        "foo-pool-failover": {
          "servers": [
          "192.168.1.54:11211:ascii:plain",
          "192.168.1.53:11211:ascii:plain"
        ]
        },  
        "bar-pool": {
          "servers": [
          "192.168.2.1:11214:ascii:ssl",
          "192.168.2.2:11214:ascii:ssl"
        ]
        },
        "bar-pool-failover": {
          "servers": [
          "192.168.2.54:11214:ascii:ssl",
          "192.168.2.53:11214:ascii:ssl"
        ]
        }
      },
      "routes": [    
        {
          "aliases": [
            "/default/"
          ],
          "route": {
            "pool": "foo-pool",
            "type": "PoolRoute"
          }
        },  
        {
          "aliases": [
            "/replica/foo/"
          ],
          "route": {
            "default_policy": {
              "failover": "PoolRoute|foo-pool-failover",
              "failover_errors": [
                "tko"
              ],
              "failover_exptime": 10,
              "normal": "PoolRoute|foo-pool",
              "type": "FailoverWithExptimeRoute"
            },
            "operation_policies": {
              "delete": {
                "children": [
                  {
                    "failover": "PoolRoute|foo-pool-failover",
                    "failover_errors": [
                      "tko"
                    ],
                    "failover_exptime": 10,
                    "normal": "PoolRoute|foo-pool",
                    "type": "FailoverWithExptimeRoute"
                  }
                ],
                "type": "AllSyncRoute"
              },
              "set": {
                "children": [
                  {
                    "failover": "PoolRoute|foo-pool-failover",
                    "failover_errors": [
                      "tko"
                    ],
                    "failover_exptime": 10,
                    "normal": "PoolRoute|foo-pool",
                    "type": "FailoverWithExptimeRoute"
                  }
                ],
                "type": "AllSyncRoute"
              }
            },
            "type": "OperationSelectorRoute"
          }
        },
        {
          "aliases": [
            "/replica/bar/"
          ],
          "route": {
            "default_policy": {
              "failover": "PoolRoute|foo-pool-failover",
              "failover_errors": [
                "tko"
              ],
              "failover_exptime": 10,
              "normal": "PoolRoute|foo-pool",
              "type": "FailoverWithExptimeRoute"
            },
            "operation_policies": {
              "delete": {
                "children": [
                  {
                    "failover": "PoolRoute|bar-pool-failover",
                    "failover_errors": [
                      "tko"
                    ],
                    "failover_exptime": 10,
                    "normal": "PoolRoute|bar-pool",
                    "type": "FailoverWithExptimeRoute"
                  }
                ],
                "type": "AllSyncRoute"
              },
              "set": {
                "children": [
                  {
                    "failover": "PoolRoute|bar-pool-failover",
                    "failover_errors": [
                      "tko"
                    ],
                    "failover_exptime": 10,
                    "normal": "PoolRoute|bar-pool",
                    "type": "FailoverWithExptimeRoute"
                  }
                ],
                "type": "AllSyncRoute"
              }
            },
            "type": "OperationSelectorRoute"
          }
        },  
        {
          "aliases": [
            "/multilayer/"
          ],
          "route": {
            "type": "OperationSelectorRoute",
            "operation_policies": {
              "get": {
                "type": "WarmUpRoute",
                "exptime":60
                "cold": "PoolRoute|foo-pool",
                "warm": {
                  "failover": "PoolRoute|bar-pool-failover",
                  "failover_errors": [
                    "tko"
                  ],
                  "failover_exptime": 10,
                  "normal": "PoolRoute|bar-pool",
                  "type": "FailoverWithExptimeRoute"
                }
              }
            },
            "default_policy": {
              "failover": "PoolRoute|bar-pool-failover",
              "failover_errors": [
                "tko"
              ],
              "failover_exptime": 10,
              "normal": "PoolRoute|bar-pool",
              "type": "FailoverWithExptimeRoute"
            }
          }
        }
      ]
    }
---
# Source: mcrouter/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:  
  name: mcrouter-release-name
  labels:
    app: mcrouter
    chart: mcrouter-0.0.3
    release: release-name
    heritage: Helm
spec:
  selector:    
    matchLabels:
      app: mcrouter
      release: release-name
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:        
        app: mcrouter
        release: release-name
        routed_via: release-name
      annotations:        
        checksum/secrets: 765cf13b531baf06f0d6dbd615bd53fffeb9456b7cc2f0c01eca1a9c0e9d7bc1
    spec:
      containers:        
        # TODO: understand how to make mcrouter use the
        # application CA when connecting to memcached via TLS
        - name: mcrouter-release-name-mcrouter
          image: docker-registry.wikimedia.org/latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "4442"
            - name: CONFIG
              value: "file:/etc/mcrouter/config.json"
            - name: ROUTE_PREFIX
              value: "/default"
            - name: CROSS_REGION_TO
              value: "250"
            - name: CROSS_CLUSTER_TO
              value: "100"
            - name: NUM_PROXIES
              value: "3"
            - name: PROBE_TIMEOUT
              value: "6000"
            - name: TIMEOUTS_UNTIL_TKO
              value: "3"
            # We don't want to listen to TLS here.
            # TODO: check if it can connect with TLS without the TLS settings.
            - name: USE_SSL
              value: "no"
          ports:
          # Please note: this port is not exposed outside of the pod.
            - name: mcrouter
              containerPort: 4442
          livenessProbe:
            tcpSocket:
              port: mcrouter
          readinessProbe:
            exec:
              command:
                - /bin/healthz
          volumeMounts:
            - name: mcrouter-release-name-mcrouter
              mountPath: /etc/mcrouter
          resources:
            requests:
              cpu: 250m
              memory: 200M
            limits:
              cpu: 250m
              memory: 200M
      volumes:        
        # Mcrouter configuration
        - name: mcrouter-release-name-mcrouter
          configMap:
            name: mcrouter-release-name-mcrouter-config
