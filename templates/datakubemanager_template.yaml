---
# Source: datakubemanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-datakubemanager
  labels:
    app.kubernetes.io/name: datakubemanager
    helm.sh/chart: datakubemanager-0.2.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: datakubemanager
    app.kubernetes.io/instance: release-name
---
# Source: datakubemanager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-datakubemanager
  labels:
    app.kubernetes.io/name: datakubemanager
    helm.sh/chart: datakubemanager-0.2.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: datakubemanager
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: datakubemanager
        app.kubernetes.io/instance: release-name    
    spec:
      # Turning single-request-reopen option on would fix issue where in two requests from the same port are
      # not handled correctly it will close the socket and open a new one before sending the second request.
      dnsConfig:
        options:
          - name: single-request-reopen
      containers:
        - name: datakubemanager
          image: "geoscienceaustralia/datakubemanager:latest"
          imagePullPolicy: IfNotPresent
          args: []
          env:
          - name: CLIENT_ID 
            valueFrom:
              secretKeyRef:
                name: restcubecognito
                key: clientid
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: restcubecognito
                key: clientsecret            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
