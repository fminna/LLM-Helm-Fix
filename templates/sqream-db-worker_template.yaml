---
# Source: sqream-db-worker/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: license
type: Opaque
stringData:
  license_worker_0.enc: |-
    2F2263E49997BBC2DDD938958B363DE7DB3036ADAD4FB37FF4F34024FFE7DFAD669641ADEC68302FED6BCF7CC1CDBE14BC835B4D741F27EDBEA4725A751C21A06D226C6B228FBB9A3F092C32449A60485C37A9334B2686B236ABE2E2E4E2CF23998C0BFB7E5E0FC7E4042363E1BE91352A651CB0DD977EF73F5976E30E486018B53BCED724BE02A85F3AA2E0EA023BC2DCA2D43EEC9E38275911EFDC503ABE9C
  license_worker_1.enc: |-
    9D9F35EDBC077AA24BB78D40E5309E43A28E1A6E85329877729BC8A8C80CFB24AA1F379E72C7CCD6EABFD662746713119DDCCA4A1B9029E0901AD0A6C1F3FA6907C4E5EF7FCA59FAEB3AAB49DF88FF77978228AA8619BD018AF784FD673194C0841F1FF4D6C2133798FED190CE81CA5E24FD6494455651CD02173CA45218AD54395C12D11D904BA8C2227330B485DAC48690375D127B697CE89FAE07852955D2
  license_worker_2.enc: |-
    E961BDFB00D49D7E0BF9A2D1996331D6560992258BC57BC9E78DA30E5D41FDA14684467FA72BC919245168D431D46C4B19638EFB98ACBA8DB20033D6721A6B1AC782F44ED216B924943B573CCB8DE507FE67EE3026CD8DE0E66D38CA7B2004637FD1A7E8D940882789F36AC0DD3991084EAB10D5B2ABD6CD7558A82A894DE857AE9C909882503A87F320DB6CA46388CE990DF18849058D6F0CDEBF4470C867B446EA0D94F7A39D11846EB5CCC2522AF98D2AC64AB9D5928F
---
# Source: sqream-db-worker/templates/configmap-sqreamd-log-properties.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sqreamd-log-properties
data:
  "sqreamd_log_properties": |
    {
      # this file is the default log4cpp configuration file for sqreamd's loggings.

      # each executable need to have its own logging config file (server picker, sqreamd, metadata server)

      # the default configuration files of each of the executables is within sqream/automation/it/after_install/conf/

      # note there are other copy on etc/ that should be updated.

      # MAKE SURE YOU DONT PUSH ANY OF YOUR OWN CHANGES OF THE LOGGING CONFIGURATION FILES INTO THE GIT REPOSITORY.

      # in order for sqreamd to use this configuration you should NOT give any other configuration file as a command line argument.

      # same goes for other executables, if you wont give other config file as a command line argument, the default one will be used.

      # the external logging file is configured from within the code at sqreamd.cpp/metadata_server.cpp/server_picker.cpp accordingly.
      # the output logging files for all the executables will be under /tmp/logs/
      # on default the output log file has max size of 100MB and saves 10 files history.

      # 1. if you dont want logging to the console remove log to console
      # 2. if you want to change the overall level of the debugging change root's logger INFO level to a different level (INFO, DEBUG, ERROR,WARN, FATAL)
      log4j.rootLogger=INFO, log_to_console
      log4j.appender.log_to_console=org.apache.log4j.ConsoleAppender

      log4j.appender.log_to_console.layout=org.apache.log4j.PatternLayout
      # if you want to change the layout that is being printed to the console change this line
      log4j.appender.log_to_console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} [%p] [%X{contextid}][%X{threadname}][%F:%L] %m %n

      # change this line to get more logging to your console (e.g. change the threshold to DEBUG).
      log4j.appender.log_to_console.threshold=DEBUG

      # you can alter specific logger's level in order to turn it off/on e.g.
      # log4j.logger.CP=WARN -> this makes the level of the log called CP (which stands for all ChunkProducers) to WARN, since it inherits from the root log it also logs to console and 	to the file configured from within the code.
      #

      # example to change specific CP logger level:
      # log4j.logger.CP.ReadTable=WARN -> now only ReadTable will run in WARN level.

      log4j.logger.com.amazon.aws=WARN

      log4j.logger.log4_keys_eval=INFO, log4_keys_eval
      log4j.appender.log4_keys_eval=org.apache.log4j.RollingFileAppender
      log4j.additivity.log4_keys_eval= false
      log4j.appender.log4_keys_eval.fileName=/tmp/logs/keys_evaluate.log
      log4j.appender.log4_keys_eval.MaxBackupIndex=10
      log4j.appender.log4_keys_eval.MaxFileSize=100MB
      log4j.appender.log4_keys_eval.layout=org.apache.log4j.PatternLayout
      log4j.appender.log4_keys_eval.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} [%p] [%X{contextid}][%X{threadname}][%F:%L][SMSG] %m [EMSG]%n

      log4j.appender.log4_keys_eval.threshold=DEBUG
    }
---
# Source: sqream-db-worker/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sqream-db-configmap
  namespace: sqream
data:
  "sqream-worker-0-0.json": |
    {
        "cluster": "/mnt/sqream/sqreamdb",
        "gpu": 0,
        "cudaMemQuota": 98,
        "limitQueryMemoryGB": 86,
        "legacyConfigFilePath": "sqream-worker_config_legacy-0-0.json",
        "licensePath": "/etc/sqream/licenses/license_worker_0.enc",
        "metadataPath": "/mnt/sqream/sqreamdb/leveldb",
        "port": 5000,
        "metadataServerIp": "sqream-metadata.sqream",
        "metadataServerPort": 3105
    }
  "sqream-worker_config_legacy-0-0.json": |
    {
        "cloudRMode": true,
        "debugNetworkSession": true, 
        "developerMode": true,
        "isUnavailableNode": false,
        "logBlackList": "webui",
        "nodeInfoLoggingSec": 1,
        "reextentUse": false,
        "showFullExceptionInfo": true,
        "spoolMemoryGB": 36,
        "tablespaceURL": "/sqream/databases",
      
        "useClientLog": true,
        "useMetadataServer": true
    }
---
# Source: sqream-db-worker/templates/nfs-temp-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-temp
  namespace: sqream
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 5000Gi
  volumeName: nfs-temp
---
# Source: sqream-db-worker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sqream-worker-0
  labels:
    helm.sh/chart: sqream-db-worker-0.1.0
    app.kubernetes.io/name: sqream-db-worker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: http
  selector:
    ##  pods has to have this label, esm search by pods with this label to register RTC's
    app: sqream-worker-0
---
# Source: sqream-db-worker/templates/deployment.yaml
## deployment has to have "sqream-worker-0" name, esm search by deployment name
## this configuration can be changed, in application.yml that is compiled in esm service
## sqream.rtc.app:
##  name: sqream-worker-0
##  namespace: sqream

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqream-worker-0
  namespace: "sqream"
  labels:
    app: sqream-worker-0
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
      maxSurge: 50%
  selector:
    matchLabels:
      ## has to have this label, esm search by pods with this label to register RTC's
      app: sqream-worker-0
  template:
    metadata:
      labels:
        ## has to have this label, esm search by pods with this label to register RTC's
        app: sqream-worker-0
    spec:
      serviceAccountName: sqream-ns-admin
      terminationGracePeriodSeconds: 86400
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      hostPID: true
      containers:
        - name: sqream-db-worker
          image: ":1.16.0"
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          resources:
            requests:
              memory: 89Gi
            limits:
              nvidia.com/gpu: 1
              memory: 94Gi
          volumeMounts:
          - mountPath: /etc/sqream/config
            name: config
          - mountPath: /etc/sqream/sqreamd-log-properties
            name: sqreamd-log-properties
          - mountPath:  /etc/sqream/licenses
            name: license
          
          envFrom:
          - configMapRef:
              name: env-file
          env:
          - name: LC_ALL
            value: en_US.utf8
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: AWS_DEFAULT_REGION
            value: 
          command:
            - /bin/bash
            - -c
          args:
            - |
              set -xm
              mkdir -p /mnt/sqream/sqreamdb;
              cp -r -n /opt/sqream/sqream_cluster/sqreamdb/* /mnt/sqream/sqreamdb;
            
              echo Starting worker;
              rtc-service --port 5000 --config /etc/sqream/config/sqream-worker-0-0.json --logconfig=/etc/sqream/sqreamd-log-properties/sqreamd_log_properties $POD_NAME &
              RTC_PROCESS=$(echo $!)
              echo "RTC_PROCESS is $RTC_PROCESS"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - "/bin/bash <<'EOF'\nAPISERVER=https://kubernetes.default.svc; \nSERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\nNAMESPACE=$(cat
                  ${SERVICEACCOUNT}/namespace)\nTOKEN=$(cat ${SERVICEACCOUNT}/token)\nCACERT=${SERVICEACCOUNT}/ca.crt\n\nread
                  pod_image pod_replicaset is_forced_restart < <( \\\n  echo $(curl --silent --cacert
                  ${CACERT} --header \"Authorization: Bearer ${TOKEN}\" -X GET ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/$POD_NAME/
                  | \\\n  jq -r '.spec.containers[0].image, .metadata.ownerReferences[0].name,
                  .metadata.annotations.\"stop-worker\"'))\nread deploy_image deploy_revision
                  < <( \\\n  echo $(curl --silent --cacert ${CACERT} --header \"Authorization:
                  Bearer ${TOKEN}\" -X GET ${APISERVER}/apis/apps/v1/namespaces/$NAMESPACE/deployments/sqream-worker-0/
                  | \\\n  jq -r '.spec.template.spec.containers[0].image, .metadata.annotations.\"deployment.kubernetes.io/revision\"'))\nreplicaset_revision=$(curl
                  --silent --cacert ${CACERT} --header \"Authorization: Bearer ${TOKEN}\" -X GET
                  \ ${APISERVER}/apis/apps/v1/namespaces/$NAMESPACE/replicasets/$pod_replicaset/
                  | \\\n  jq -r .metadata.annotations.\\\"deployment.kubernetes.io/revision\\\"
                  )\n\nif [ $deploy_revision -ne $replicaset_revision ] || [ $pod_image !=  $deploy_image
                  ]; then\n  can_remove_pod=$(curl --silent -X GET \"http://esm:8080/getCanDeleteRTC/${POD_NAME}\")
                  || can_remove_pod='true'\n\n  while ! [ $can_remove_pod = 'true' ] && [ $is_forced_restart
                  != '1' ]\n  do\n    sleep 60\n    can_remove_pod=$(curl --silent  -X GET \"http://esm:8080/getCanDeleteRTC/${POD_NAME}\")
                  || can_remove_pod='true'\n    read is_forced_restart < <( \\\n      echo $(curl
                  --silent --cacert ${CACERT} --header \"Authorization: Bearer ${TOKEN}\" -X GET
                  ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/$POD_NAME/ | \\\n      jq -r
                  '.metadata.annotations.\"stop-worker\"'))\n  done\nfi\n\nEOF"
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 3
            tcpSocket:
              port: 5000
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - (nmap -p 5000 127.0.0.1 |grep open) || (APISERVER='https://kubernetes.default.svc'
                && SERVICEACCOUNT='/var/run/secrets/kubernetes.io/serviceaccount' && NAMESPACE=$(cat
                ${SERVICEACCOUNT}/namespace) && TOKEN=$(cat ${SERVICEACCOUNT}/token) && CACERT="${SERVICEACCOUNT}/ca.crt"
                && header_str="Authorization:"" Bearer ${TOKEN}" && if [ ! -z $POD_NAME ]; then
                curl --silent --cacert "${CACERT}" --header "${header_str}" -X DELETE "${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/$POD_NAME/";
                fi )
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 10

      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: gpuGroup
      volumes:
        - name: config
          configMap:
            name: sqream-db-configmap
        - name: license
          secret:
            secretName: license
        - name: sqreamd-log-properties
          configMap:
            name: sqreamd-log-properties
