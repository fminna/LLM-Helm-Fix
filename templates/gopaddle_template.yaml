---
# Source: gopaddle/charts/gp-core/templates/activitymanager-netsec-xexdb.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: activitymanager-netsec-xexdb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: activitymanager-netsec-xexdb
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
  name: activitymanager-netsec-xexdb
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: activitymanager-muv5ktiw
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-netsec-02z3v.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: alertmanager-netsec-02z3v
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: alertmanager-netsec-02z3v
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
  name: alertmanager-netsec-02z3v
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: alertmanager-697i4d88
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/appscanner-netsec-acw76.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: appscanner-netsec-acw76
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appscanner-netsec-acw76
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
  name: appscanner-netsec-acw76
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: appscanner-ugtwwlv3
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/appworker-netsec-fyhpv.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: appworker-netsec-fyhpv
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appworker-netsec-fyhpv
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
  name: appworker-netsec-fyhpv
  namespace: default
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          family: servicegroup
          servicegroup-name: deploymentmanager
    ports:
    - port: 8010
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: appworker-6iwtvs3g
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-netsec-1if91.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: cloudmanager-netsec-1if91
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: cloudmanager-netsec-1if91
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
  name: cloudmanager-netsec-1if91
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: cloudmanager-7kd52da1
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-netsec-nrulb.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: clustermanager-netsec-nrulb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: clustermanager-netsec-nrulb
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
  name: clustermanager-netsec-nrulb
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: clustermanager-lee5js63
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/configmanager-netsec-9602v.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: configmanager-netsec-9602v
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: configmanager-netsec-9602v
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
  name: configmanager-netsec-9602v
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: configmanager-ntkg8uov
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/costmanager-netsec-zymxm.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: costmanager-netsec-zymxm
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: costmanager-netsec-zymxm
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
  name: costmanager-netsec-zymxm
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: costmanager-olfgicj6
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-netsec-u9ajt.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: deploymentmanager-netsec-u9ajt
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: deploymentmanager-netsec-u9ajt
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
  name: deploymentmanager-netsec-u9ajt
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: deploymentmanager-7er149pa
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-netsec-yfbyu.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: domainmanager-netsec-yfbyu
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: domainmanager-netsec-yfbyu
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
  name: domainmanager-netsec-yfbyu
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: domainmanager-51g7q5yh
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/esearch-netsec-qmsut.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: esearch-netsec-qmsut
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: esearch-netsec-qmsut
    released-by: gopaddle
    servicegroup: esearch-lz5zjizb
  name: esearch-netsec-qmsut
  namespace: default
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          family: servicegroup
          servicegroup-name: kibana
    ports:
    - port: 9200
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: esearch-lz5zjizb
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/gateway-netsec-kwdlk.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gateway-netsec-kwdlk
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway-netsec-kwdlk
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway-netsec-kwdlk
  namespace: default
spec:
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 8080
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: gateway-i11oclpd
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/gpcore-netsec-kyan2.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gpcore-netsec-kyan2
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gpcore-netsec-kyan2
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
  name: gpcore-netsec-kyan2
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: gpcore-bad4slye
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/influxdb-netsec-mqgyx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: influxdb-netsec-mqgyx
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: influxdb-netsec-mqgyx
    released-by: gopaddle
    servicegroup: influxdb-6hu2bvhe
  name: influxdb-netsec-mqgyx
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: influxdb-6hu2bvhe
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/marketplace-netsec-oo8n5.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: marketplace-netsec-oo8n5
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    name: marketplace-netsec-oo8n5
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
  name: marketplace-netsec-oo8n5
  namespace: default
spec:
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 8023
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: marketplace-q5j701mv
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/mongodb-netsec-m08an.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: mongodb-netsec-m08an
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-netsec-m08an
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-netsec-m08an
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: mongodb-sr2ai9v6
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-netsec-0ulki.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: nodechecker-netsec-0ulki
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: nodechecker-netsec-0ulki
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
  name: nodechecker-netsec-0ulki
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: nodechecker-zsww7hby
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-netsec-r80a5.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: paymentmanager-netsec-r80a5
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: paymentmanager-netsec-r80a5
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
  name: paymentmanager-netsec-r80a5
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: paymentmanager-3yqw8yo3
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/rabbitmq-netsec-lb46x.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-netsec-lb46x
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: rabbitmq-netsec-lb46x
    released-by: gopaddle
    servicegroup: rabbitmq-ijdwt5eu
  name: rabbitmq-netsec-lb46x
  namespace: default
spec:
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 5672
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: rabbitmq-ijdwt5eu
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/redis-netsec-9rmy3.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: redis-netsec-9rmy3
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis-netsec-9rmy3
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis-netsec-9rmy3
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: redis-b1sjbz8a
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/usermanager-netsec-10dqx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: usermanager-netsec-10dqx
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: usermanager-netsec-10dqx
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
  name: usermanager-netsec-10dqx
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8012
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8009
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8004
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8007
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8759
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8013
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8010
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8003
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8005
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8006
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8017
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8021
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8011
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: default
    ports:
    - port: 8020
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: usermanager-l9s3brcs
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/webhook-netsec-x59kb.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: webhook-netsec-x59kb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: webhook-netsec-x59kb
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
  name: webhook-netsec-x59kb
  namespace: default
spec:
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 9090
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: webhook-xvi1s6em
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build-netsec-nm81n.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-build-netsec-nm81n
    name: rabbitmq-build-netsec-nm81n
    namespace: default
    servicegroup: rabbitmq-build-bz6w0o9l
    released-by: gopaddle
  name: rabbitmq-build-netsec-nm81n
  namespace: default
spec:
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - port: 5672
      protocol: TCP
  podSelector:
    matchLabels:
      family: ""
      servicegroup: rabbitmq-build-bz6w0o9l
  policyTypes:
  - Ingress
---
# Source: gopaddle/charts/gp-core/templates/activitymanager-activitymanager-envsecret-wuhue.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: activitymanager-activitymanager-envsecret-wuhue
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: activitymanager-activitymanager-envsecret-wuhue
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
  name: activitymanager-activitymanager-envsecret-wuhue
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-alertmanager-envsecret-04tog.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: alertmanager-alertmanager-envsecret-04tog
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: alertmanager-alertmanager-envsecret-04tog
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
  name: alertmanager-alertmanager-envsecret-04tog
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/appscanner-appscanner-envsecret-06oce.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: appscanner-appscanner-envsecret-06oce
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appscanner-appscanner-envsecret-06oce
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
  name: appscanner-appscanner-envsecret-06oce
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/appworker-appworker-envsecret-ycm42.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: appworker-appworker-envsecret-ycm42
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appworker-appworker-envsecret-ycm42
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
  name: appworker-appworker-envsecret-ycm42
  namespace: default
stringData:
  rabbitmq_passwd: ECabAv1Thdn8fANd
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-cloudmanager-envsecret-onluv.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: cloudmanager-cloudmanager-envsecret-onluv
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: cloudmanager-cloudmanager-envsecret-onluv
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
  name: cloudmanager-cloudmanager-envsecret-onluv
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-clustermanager-envsecret-ipy9y.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: clustermanager-clustermanager-envsecret-ipy9y
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: clustermanager-clustermanager-envsecret-ipy9y
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
  name: clustermanager-clustermanager-envsecret-ipy9y
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/configmanager-configmanager-envsecret-n8xui.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: configmanager-configmanager-envsecret-n8xui
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: configmanager-configmanager-envsecret-n8xui
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
  name: configmanager-configmanager-envsecret-n8xui
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/costmanager-costmanager-envsecret-nq4hj.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: costmanager-costmanager-envsecret-nq4hj
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: costmanager-costmanager-envsecret-nq4hj
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
  name: costmanager-costmanager-envsecret-nq4hj
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-deploymanager-envsecret-ik60p.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: deploymentmanager-deploymanager-envsecret-ik60p
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: deploymentmanager-deploymanager-envsecret-ik60p
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
  name: deploymentmanager-deploymanager-envsecret-ik60p
  namespace: default
stringData:
  rabbitmq_passwd: ECabAv1Thdn8fANd
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-domainmanager-envsecret-bzb3z.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: domainmanager-domainmanager-envsecret-bzb3z
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: domainmanager-domainmanager-envsecret-bzb3z
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
  name: domainmanager-domainmanager-envsecret-bzb3z
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/gateway-gateway-envsecret-gctwp.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gateway-gateway-envsecret-gctwp
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway-gateway-envsecret-gctwp
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway-gateway-envsecret-gctwp
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/gateway-gpkubeux-envsecret-ai5wl.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gateway-gpkubeux-envsecret-ai5wl
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway-gpkubeux-envsecret-ai5wl
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway-gpkubeux-envsecret-ai5wl
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/gcr-json-key.yaml
apiVersion: v1
data:
  .dockerconfigjson: ewogICJhdXRocyI6ewogICAgICJnY3IuaW8iOnsKICAgICAgICAidXNlcm5hbWUiOiJfanNvbl9rZXkiLAogICAgICAgICJwYXNzd29yZCI6IntcbiAgXCJ0eXBlXCI6IFwic2VydmljZV9hY2NvdW50XCIsXG4gIFwicHJvamVjdF9pZFwiOiBcImJsdWVtZXJpYy0xMzA4XCIsXG4gIFwicHJpdmF0ZV9rZXlfaWRcIjogXCJkMjM4MjcwN2Q4NDMyNDVmZDgwNGMwNjM4N2YyMTdkYTkyY2Y4ZWRiXCIsXG4gIFwicHJpdmF0ZV9rZXlcIjogXCItLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUNqQmd6MGZZT28xRDVEXFxuS1JDRWdlTHFVakVka0lzVXhnWkM3UHEyUWtvbFhHRE5wUWRjRmdhWS80dFV2NFY2Wk5QZ0lRWkJxemhFcVVtS1xcbjR2SThOR0FRQ1ZlUUhjckZqdHg3TFB2UG8wQ1QvSmlhSnN2UUVEM0VXU05oOXNTUkpDTXh3TG53V2dxY0l1RS9cXG41anNlc2RQQW5XZm92MnJORVBQWGtSVGpEeWhpY1QwZC81ZWx4YS9XanN6ZTArbkF4WHFBSngyV21oMW5oOUlmXFxuU21hdHpzNGVXSGhoMkVVcTU5TWtrUSt4OU10NzFyN1JPWHBOYXF6eGJBMWtDSlFDZTJyYTMwNCt6ZkNDdTF4bVxcbi95TjVSa2hraER2RDkrNVArSVVabEp3aU5HZVdWOEM1eTFBbXZTaGZzd2c4bXAzNSt3cVZzYW5BN1hiSTF0a2ZcXG5ZRHRXNkZiREFnTUJBQUVDZ2dFQVVJNHMyS01zNjcvMUJEckdick8vN1Ftd08ydXhUaEtNQllZVVhQdGtxQkY5XFxueENCSUFyamZpYnE4bnFRRTBQWUJ2RDZWV04zQ2NDczJxK3A0eUVjWk1OTnM4VW5IYU5ldkd5NmZQM3JyN2pSalxcbk04ajM3VmdaTFd6ZWp3bmhGOWREak5JdkR4VnZLTGdUbGYrdU52eW9KZ1doMHVERFpaRjY3SXBFUis2MWhlNmpcXG5pUlNFMyswWXNwMDl4aXpCdTB4NVIreVZialV4MHR4VEUvdGY3OFBKZ1JKVlNYcnlEOGtvUXpCaCthRFFrNHR1XFxuYTIvZkRCcFJTSDF0OEI1S081dTJUUjNIMHUySnpkT3U1ekxDaWpWVnhOU05vWnNoOTR1ODA0V0hFUURocGcrT1xcbnR5T2hScWprUWZXYXJTOTZGU0RFaUEzOTlncGVVTGc5K21qbGo3b0lBUUtCZ1FEbE1zdWsxWjZzNWtBMG5sU1FcXG5SNjZvejJveGVHT0t6clhITm5tdllWY2xNNlAxWU1ZZDBFYzREc2R0RzhtUzUxbmh5SnZGc3J2MkE0UUFKUFNmXFxuNURnZ0JrdHIwMTNERTI1M3BEeG1URFErQnBVczhtVEJpbFNJNE5LK0Q0TDFFUlFQS0d5VkQ0R0FsV0llYjVYNFxcbm5iRnJZMlpQOUxiZGk3MDNKYk1rYXBvM2F3S0JnUUMyRmtVS0xWcXNyaHdnRVJ3Zi9JU3lLVnNMeDUySFp5Q3FcXG42REh6S2NnbjNkWTdjc2JPT2NlZ0MvcnNIcjlnby9NOE9IQ1lUZFZ3Vkg1alpuR1lWeUlESy9IU1dkQ1ZMOU4vXFxuSEF0RFJXdFdUV2pYUG9pRnF2aVJPVDZmS09RbFQ4Qy9MTXhUQ29FaVpHdUFTdW9HOStiRFRQWk9vcWxJbFBRVFxcbjZqRGlYV0lzQ1FLQmdRQzZ5SytmVUp2MHFkeFBSVzBDKy9nQ0NLNnhURHhMSmZTTU9mL25CbnYvakZzbElNMjBcXG5CRVhXRUcxRHBPNmNNc0JVT2FtQTd3MHhDMkpxdjdOQURyd1NsUzZuMitSQWt6aG1ka2ptMFZtTjVzMXhpTVRGXFxuMlZiVkNldVZDbzBkN09JZERFT1pJcjdXTEdkL0NFNy9BbnhSV1B0TFU5SW5NTGR1RnVJc1hsZjVxd0tCZ0J4YVxcbmVXT3RUa3BIVGsvYitqSXM0d2pQRWNOUzBQL05tak9pdG14ejNCd0JHaVBscW5sZ1crcGJFemFEVHkrZ04vYnZcXG5udkRJWmV6NDZ6bFZNV2tVWUZKNEhFNng5NTNUZGE1OFVuQ21OYUdacWpLaUpTWVRTbU5xczRxYkZuT002S21jXFxuTXpEWEdPYWZGbkpDdUJCZnQ4by9pTGNUOHlJL040YUdXQmhYakRycEFvR0JBTklHNzErbHV2ZVY3YVNZYTZrTlxcbjMrd2RRaC9RUFM0dFhRL0cvcmJ4bTAydmVRcUdsczl6RVdCcWgxYWlHU0FkU015bGh5eWZlK2c3UlozRlBUaHFcXG5LdXk3ZDJ6eC9iRk1rczZYcW83emJVUW1xSTFBOCtRK3pOVWRuY2tEalBxcWN1UTl0YjlvSDJEbE5JYWdhZ21PXFxuK0R6VklKUFBhOTR5Q010Z3J2ZkhJS3JCXFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxcblwiLFxuICBcImNsaWVudF9lbWFpbFwiOiBcInRlc3Rnb3BhZGRsZS01MDFAYmx1ZW1lcmljLTEzMDguaWFtLmdzZXJ2aWNlYWNjb3VudC5jb21cIixcbiAgXCJjbGllbnRfaWRcIjogXCIxMTY3MTk5OTI1NDU1MTQ4ODU1NzNcIixcbiAgXCJhdXRoX3VyaVwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoXCIsXG4gIFwidG9rZW5fdXJpXCI6IFwiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW5cIixcbiAgXCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmxcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHNcIixcbiAgXCJjbGllbnRfeDUwOV9jZXJ0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvdGVzdGdvcGFkZGxlLTUwMSU0MGJsdWVtZXJpYy0xMzA4LmlhbS5nc2VydmljZWFjY291bnQuY29tXCJcbn0iLAogICAgICAgICJlbWFpbCI6ImRlbW9nb3BhZGRsZUBnbWFpbC5jb20iLAogICAgICAgICJhdXRoIjoiWDJwemIyNWZhMlY1T25zS0lDQWlkSGx3WlNJNklDSnpaWEoyYVdObFgyRmpZMjkxYm5RaUxBb2dJQ0p3Y205cVpXTjBYMmxrSWpvZ0ltSnNkV1Z0WlhKcFl5MHhNekE0SWl3S0lDQWljSEpwZG1GMFpWOXJaWGxmYVdRaU9pQWlaREl6T0RJM01EZGtPRFF6TWpRMVptUTRNRFJqTURZek9EZG1NakUzWkdFNU1tTm1PR1ZrWWlJc0NpQWdJbkJ5YVhaaGRHVmZhMlY1SWpvZ0lpMHRMUzB0UWtWSFNVNGdVRkpKVmtGVVJTQkxSVmt0TFMwdExWeHVUVWxKUlhablNVSkJSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVTBOQ1MyZDNaMmRUYTBGblJVRkJiMGxDUVZGRGFrSm5lakJtV1U5dk1VUTFSRnh1UzFKRFJXZGxUSEZWYWtWa2EwbHpWWGhuV2tNM1VIRXlVV3R2YkZoSFJFNXdVV1JqUm1kaFdTODBkRlYyTkZZMldrNVFaMGxSV2tKeGVtaEZjVlZ0UzF4dU5IWkpPRTVIUVZGRFZtVlJTR055Um1wMGVEZE1VSFpRYnpCRFZDOUthV0ZLYzNaUlJVUXpSVmRUVG1nNWMxTlNTa05OZUhkTWJuZFhaM0ZqU1hWRkwxeHVOV3B6WlhOa1VFRnVWMlp2ZGpKeVRrVlFVRmhyVWxScVJIbG9hV05VTUdRdk5XVnNlR0V2VjJwemVtVXdLMjVCZUZoeFFVcDRNbGR0YURGdWFEbEpabHh1VTIxaGRIcHpOR1ZYU0dob01rVlZjVFU1VFd0clVTdDRPVTEwTnpGeU4xSlBXSEJPWVhGNmVHSkJNV3REU2xGRFpUSnlZVE13TkN0NlprTkRkVEY0YlZ4dUwzbE9OVkpyYUd0b1JIWkVPU3MxVUN0SlZWcHNTbmRwVGtkbFYxWTRRelY1TVVGdGRsTm9abk4zWnpodGNETTFLM2R4Vm5OaGJrRTNXR0pKTVhSclpseHVXVVIwVnpaR1lrUkJaMDFDUVVGRlEyZG5SVUZWU1RSek1rdE5jelkzTHpGQ1JISkhZbkpQTHpkUmJYZFBNblY0VkdoTFRVSlpXVlZZVUhScmNVSkdPVnh1ZUVOQ1NVRnlhbVpwWW5FNGJuRlJSVEJRV1VKMlJEWldWMDR6UTJORGN6SnhLM0EwZVVWaldrMU9Ubk00Vlc1SVlVNWxka2Q1Tm1aUU0zSnlOMnBTYWx4dVRUaHFNemRXWjFwTVYzcGxhbmR1YUVZNVpFUnFUa2wyUkhoV2RrdE1aMVJzWml0MVRuWjViMHBuVjJnd2RVUkVXbHBHTmpkSmNFVlNLell4YUdVMmFseHVhVkpUUlRNck1GbHpjREE1ZUdsNlFuVXdlRFZTSzNsV1ltcFZlREIwZUZSRkwzUm1OemhRU21kU1NsWlRXSEo1UkRocmIxRjZRbWdyWVVSUmF6UjBkVnh1WVRJdlprUkNjRkpUU0RGME9FSTFTMDgxZFRKVVVqTklNSFV5U25wa1QzVTFla3hEYVdwV1ZuaE9VMDV2V25Ob09UUjFPREEwVjBoRlVVUm9jR2NyVDF4dWRIbFBhRkp4YW10UlpsZGhjbE01TmtaVFJFVnBRVE01T1dkd1pWVk1aemtyYldwc2FqZHZTVUZSUzBKblVVUnNUWE4xYXpGYU5uTTFhMEV3Ym14VFVWeHVValkyYjNveWIzaGxSMDlMZW5KWVNFNXViWFpaVm1Oc1RUWlFNVmxOV1dRd1JXTTBSSE5rZEVjNGJWTTFNVzVvZVVwMlJuTnlkakpCTkZGQlNsQlRabHh1TlVSblowSnJkSEl3TVRORVJUSTFNM0JFZUcxVVJGRXJRbkJWY3podFZFSnBiRk5KTkU1TEswUTBUREZGVWxGUVMwZDVWa1EwUjBGc1YwbGxZalZZTkZ4dWJtSkdjbGt5V2xBNVRHSmthVGN3TTBwaVRXdGhjRzh6WVhkTFFtZFJRekpHYTFWTFRGWnhjM0pvZDJkRlVuZG1MMGxUZVV0V2MweDROVEpJV25sRGNWeHVOa1JJZWt0aloyNHpaRmszWTNOaVQwOWpaV2RETDNKelNISTVaMjh2VFRoUFNFTlpWR1JXZDFaSU5XcGFia2RaVm5sSlJFc3ZTRk5YWkVOV1REbE9MMXh1U0VGMFJGSlhkRmRVVjJwWVVHOXBSbkYyYVZKUFZEWm1TMDlSYkZRNFF5OU1UWGhVUTI5RmFWcEhkVUZUZFc5SE9TdGlSRlJRV2s5dmNXeEpiRkJSVkZ4dU5tcEVhVmhYU1hORFVVdENaMUZETm5sTEsyWlZTbll3Y1dSNFVGSlhNRU1yTDJkRFEwczJlRlJFZUV4S1psTk5UMll2YmtKdWRpOXFSbk5zU1UweU1GeHVRa1ZZVjBWSE1VUndUelpqVFhOQ1ZVOWhiVUUzZHpCNFF6SktjWFkzVGtGRWNuZFRiRk0yYmpJclVrRnJlbWh0Wkd0cWJUQldiVTQxY3pGNGFVMVVSbHh1TWxaaVZrTmxkVlpEYnpCa04wOUpaRVJGVDFwSmNqZFhURWRrTDBORk55OUJibmhTVjFCMFRGVTVTVzVOVEdSMVJuVkpjMWhzWmpWeGQwdENaMEo0WVZ4dVpWZFBkRlJyY0VoVWF5OWlLMnBKY3pSM2FsQkZZMDVUTUZBdlRtMXFUMmwwYlhoNk0wSjNRa2RwVUd4eGJteG5WeXR3WWtWNllVUlVlU3RuVGk5aWRseHViblpFU1ZwbGVqUTJlbXhXVFZkclZWbEdTalJJUlRaNE9UVXpWR1JoTlRoVmJrTnRUbUZIV25GcVMybEtVMWxVVTIxT2NYTTBjV0pHYms5Tk5rdHRZMXh1VFhwRVdFZFBZV1pHYmtwRGRVSkNablE0Ynk5cFRHTlVPSGxKTDA0MFlVZFhRbWhZYWtSeWNFRnZSMEpCVGtsSE56RXJiSFYyWlZZM1lWTlpZVFpyVGx4dU15dDNaRkZvTDFGUVV6UjBXRkV2Unk5eVluaHRNREoyWlZGeFIyeHpPWHBGVjBKeGFERmhhVWRUUVdSVFRYbHNhSGw1Wm1Vclp6ZFNXak5HVUZSb2NWeHVTM1Y1TjJReWVuZ3ZZa1pOYTNNMldIRnZOM3BpVlZGdGNVa3hRVGdyVVN0NlRsVmtibU5yUkdwUWNYRmpkVkU1ZEdJNWIwZ3lSR3hPU1dGbllXZHRUMXh1SzBSNlZrbEtVRkJoT1RSNVEwMTBaM0oyWmtoSlMzSkNYRzR0TFMwdExVVk9SQ0JRVWtsV1FWUkZJRXRGV1MwdExTMHRYRzRpTEFvZ0lDSmpiR2xsYm5SZlpXMWhhV3dpT2lBaWRHVnpkR2R2Y0dGa1pHeGxMVFV3TVVCaWJIVmxiV1Z5YVdNdE1UTXdPQzVwWVcwdVozTmxjblpwWTJWaFkyTnZkVzUwTG1OdmJTSXNDaUFnSW1Oc2FXVnVkRjlwWkNJNklDSXhNVFkzTVRrNU9USTFORFUxTVRRNE9EVTFOek1pTEFvZ0lDSmhkWFJvWDNWeWFTSTZJQ0pvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjB2Ynk5dllYVjBhREl2WVhWMGFDSXNDaUFnSW5SdmEyVnVYM1Z5YVNJNklDSm9kSFJ3Y3pvdkwyOWhkWFJvTWk1bmIyOW5iR1ZoY0dsekxtTnZiUzkwYjJ0bGJpSXNDaUFnSW1GMWRHaGZjSEp2ZG1sa1pYSmZlRFV3T1Y5alpYSjBYM1Z5YkNJNklDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXZZWFYwYURJdmRqRXZZMlZ5ZEhNaUxBb2dJQ0pqYkdsbGJuUmZlRFV3T1Y5alpYSjBYM1Z5YkNJNklDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXliMkp2ZEM5Mk1TOXRaWFJoWkdGMFlTOTROVEE1TDNSbGMzUm5iM0JoWkdSc1pTMDFNREVsTkRCaWJIVmxiV1Z5YVdNdE1UTXdPQzVwWVcwdVozTmxjblpwWTJWaFkyTnZkVzUwTG1OdmJTSUtmUT09IgogICAgIH0KICB9Cn0=
kind: Secret
metadata:
  name: gcr-json-key
  namespace: default
type: kubernetes.io/dockerconfigjson
---
# Source: gopaddle/charts/gp-core/templates/gpcore-core-envsecret-51439.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gpcore-core-envsecret-51439
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gpcore-core-envsecret-51439
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
  name: gpcore-core-envsecret-51439
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/influxdb-influxdb-envsecret-3nazp.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: influxdb-influxdb-envsecret-3nazp
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: influxdb-influxdb-envsecret-3nazp
    released-by: gopaddle
    servicegroup: influxdb-6hu2bvhe
  name: influxdb-influxdb-envsecret-3nazp
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/marketplace-marketplace-envsecret-rmadj.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: marketplace-marketplace-envsecret-rmadj
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    name: marketplace-marketplace-envsecret-rmadj
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
  name: marketplace-marketplace-envsecret-rmadj
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/mongodb-mongo-envsecret-bd5xi.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: mongodb-mongo-envsecret-bd5xi
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-mongo-envsecret-bd5xi
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-mongo-envsecret-bd5xi
  namespace: default
stringData:
  MONGO_INITDB_ROOT_PASSWORD: cGFzc3dvcmQ
  MONGO_LITE_PASSWORD: cGFzc3dvcmQ
---
# Source: gopaddle/charts/gp-core/templates/mongodb-mongo-init-envsecret-b99qs.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: mongodb-mongo-init-envsecret-b99qs
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-mongo-init-envsecret-b99qs
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-mongo-init-envsecret-b99qs
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-nodechecker-envsecret-jdvy9.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: nodechecker-nodechecker-envsecret-jdvy9
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: nodechecker-nodechecker-envsecret-jdvy9
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
  name: nodechecker-nodechecker-envsecret-jdvy9
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-paymentmanager-envsecret-cgatk.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: paymentmanager-paymentmanager-envsecret-cgatk
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: paymentmanager-paymentmanager-envsecret-cgatk
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
  name: paymentmanager-paymentmanager-envsecret-cgatk
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/rabbitmq-rabbitmq-envsecret-tgmx3.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-rabbitmq-envsecret-tgmx3
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: rabbitmq-rabbitmq-envsecret-tgmx3
    released-by: gopaddle
    servicegroup: rabbitmq-ijdwt5eu
  name: rabbitmq-rabbitmq-envsecret-tgmx3
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/redis-redis-envsecret-6pack.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: redis-redis-envsecret-6pack
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis-redis-envsecret-6pack
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis-redis-envsecret-6pack
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/usermanager-usermanager-envsecret-w8sg1.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: usermanager-usermanager-envsecret-w8sg1
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: usermanager-usermanager-envsecret-w8sg1
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
  name: usermanager-usermanager-envsecret-w8sg1
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/webhook-webhook-envsecret-1bzkl.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: webhook-webhook-envsecret-1bzkl
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: webhook-webhook-envsecret-1bzkl
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
  name: webhook-webhook-envsecret-1bzkl
  namespace: default
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build-rabbitmq-envsecret-4jqe5.yaml
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-build-rabbitmq-envsecret-4jqe5
    name: rabbitmq-build-rabbitmq-envsecret-4jqe5
    namespace: default
    released-by: gopaddle
    servicegroup: rabbitmq-build-bz6w0o9l
  name: rabbitmq-build-rabbitmq-envsecret-4jqe5
  namespace: default
---
# Source: gopaddle/charts/gp-core/templates/activitymanager-activitymanager-configmap-ak577.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: activitymanager-activitymanager-configmap-ak577
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: activitymanager-activitymanager-configmap-ak577
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
  name: activitymanager-activitymanager-configmap-ak577
  namespace: default
data:
  profiles-kube.json: "{\n  \"mongodb\":{  \n    \"db-name\":\"activity\",\n    \"db-endpoint\":[
    \ \n      \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n
    \   \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"redis\":{\n
    \       \"redis-endpoint\":\"redis\",\n        \"redis-port\":\"6379\",\n        \"redis-password\":\"avraj\"\n
    \   },\n  \"rabbitmq\":{  \n    \"mq-protocol\":\"amqp\",\n    \"mq-user\":\"admin\",\n
    \   \"mq-password\":\"cGFzc3dvcmQ\",\n    \"mq-ip\":\"rabbitmq\",\n    \"mq-port\":\"5672\",\n
    \   \"mq-activity-host\": \"/activity\",\n    \"mq-activity-queue\": \"activity-worker-queue\",\n
    \   \"mq-exchange-name\":\"activity\",\n    \"mq-exchange-type\":\"fanout\",\n    \"mq-activity-queue-containerLimit\":\"activity-containerLimit\",\n
    \   \"mq-activity-queue-serviceLimit\":\"activity-serviceLimit\"\n  }\n}"
  log_config.json: |
    {
      "formatters": {
        "deploymentmanager": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "deploymentmanager": {
          "class": "RotatingFileHandler",
          "filepath": "./deploymentmanager.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "deploymentmanager"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "deploymentmanager"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "deploymentmanager"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "deploymentmanager"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "deploymentmanager"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "deploymentmanager"
          ]
        }
      }
    }
  log_app_force_config.json: |
    {
      "formatters": {
        "appForce": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "appForce": {
          "class": "RotatingFileHandler",
          "filepath": "./appForce.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "appForce"
        }
      },
      "loggers": {
        "appForce": {
          "level": "DEBUG",
          "handlers": [
            "appForce"
          ]
        }
      }
    }
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\",\n\t\t\"readRuleByID\":\"api-internal/%s/v1/%s/rule/%s\",\n\t\t\"triggerNotificationByID\":\"api-internal/%s/v1/%s/notification/%s\",\n\t\t\"readBilling\":\"api/%s/v1/billing\"\n\t},\n\t\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  error_config.json: |-
    {
        "all":{
          "ACTIVITY_NOTFOUND":"Resource '%s' does not exist",
          "SOMETHING_WRONG": "Internal Error",
          "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "MARSHAL_ERROR":"Error in marshaling '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "NOUNREAD_MSG":"unRead Messages are not there to update",
          "INVALID_A_FMT":"Requesting Activity is in invalid format '%s'",
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requesting invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requesting invalid size '%d' Page should be less than '%d'"
        },
        "gpctl":{
          "GPCTL_NOTFOUNT":"resource '%s' does not exist"
        }
    }
  service_directory-kube.json: "{\n\t\"core.ep\": {\n\t  \"host\": \"gpcore\",\n\t  \"port\":
    \"8759\"\n\t},\n\t\"configmanager.ep\": {\n\t  \"host\": \"configmanager\",\n\t
    \ \"port\": \"8001\"\n\t},\n\t\"deploymentmanager.ep\": {\n\t  \"host\": \"deploymentmanager\",\n\t
    \ \"port\": \"8003\"\n\t},\n\t\"user.ep\": {\n\t  \"host\": \"usermanager\",\n\t
    \ \"port\": \"8005\"\n\t},\n\t\"alertmanager.ep\":{\n\t\t\"host\": \"alertmanager\",\n\t
    \ \"port\": \"8012\"\n\t},\n    \"nodechecker.ep\":{\n\t  \"host\": \"nodechecker\",\n\t
    \ \"port\": \"8020\"\n\t},\n    \"usermanager.ep\": {\n       \"host\": \"usermanager\",\n
    \      \"port\": \"8005\"\n    },\n    \"costmanager.ep\":{\n\t\t\"host\":\"costmanager\",\n\t\t\"port\":\"8011\"\n\t},\n\t\"notification.ep\":{\n\t\t\"host\":\"activitymanager\",\n\t\t\"port\":\"8009\"\n\t}\n}"
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-alertmanager-configmap-wkaqd.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: alertmanager-alertmanager-configmap-wkaqd
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: alertmanager-alertmanager-configmap-wkaqd
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
  name: alertmanager-alertmanager-configmap-wkaqd
  namespace: default
data:
  service_directory-kube.json: "{\n\t\"alertmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n\t},\n\t\"notification.ep\": {\n\t\t\"host\":\"alertmanager\",\n\t\t\"port\":\"8012\"\n\t},\n\t\"deploymentManager.ep\":
    {\n\t\t\"host\": \"deploymentmanager\",\n\t\t\"port\": \"8003\"\n\t},\n\t\"builder.ep\":
    {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\": \"8759\"\n\t},\n    \"nodechecker.ep\":
    {\n    \t\"host\":\"nodechecker\",\n    \t\"port\":\"8020\"\n  \t},\n    \"configmanager.ep\":
    {\n    \t\"host\":\"configmanager\",\n    \t\"port\":\"8001\"\n  \t},\n\t\"clustermanager.ep\":
    {\n\t\t\"host\": \"clustermanager\",\n\t\t\"port\": \"8013\"\n\t},\n    \"usermanager.ep\":{\n\t\t\"host\":\"usermanager\",\n\t\t\"port\":\"8005\"\n\t
    \ },\n    \"gpcore.ep\":{\n                \"host\":\"gpcore\",\n                \"port\":\"8759\"\n
    \         }\n}\n"
  internal_api.json: "{\n\t\"allAPI\":{\n                \"readUserByID\":\"api/%s/user?organizationID=%s\",\n\t\t\"readNotificationByID\":\"api/%s/v1/%s/notification/%s\",\n\t\t\"updateAppDependencyRef\":\"api-internal/%s/v1/%s/application\",\n\t\t\"updateServiceRules\":\"api-updateRule/%s/v1/%s/release/%s/distribution/%s/container\",\n\t\t\"updateNotificationDependencyRef\":\"api-in/%s/v1/%s/notification/%s\",\n
    \               \"updateCluster\":\"api-internal/%s/v1/%s/cluster\"\n\t},\n\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \       \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG": "Internal Error",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "MARSHAL_ERROR":"Error in marshaling '%s'",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type",
          "QUERY_PARAMETER_VALUE_MISMATCH":"Query Parameter '%s' value '%s' mismatch"
        },
        "notification":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "INVALID_NOTIFICATIONID_FMT": " '%s' NotificationID format is invalid",
          "NOTIF_NOTFOUND": " '%s' notificationID is not found",
          "INVALID_PAGERDUTY_SERVICE": "'%s' Invalid Service: '%s'",
          "NOTIF_ALREADY_EXIST":"Requested notification '%s' already exists"
        },
        "rule":{
          "INVALID_EVENT_STATE":"Resource State '%s' is invalid",
          "RULE_NOTFOUND":"%s ruleID is not found",
          "INVALID_RULEID_FMT":"Rule ID format is invalid",
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "RULE_ALREADY_EXIST":"Given rule name '%s' already used"
        }
    }
  profiles-kube.json: "{  \n  \"mongodb\":{  \n    \"db-name\":\"alertmanager\",\n    \"db-endpoint\":[
    \ \n      \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n
    \   \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"alerturl\":{\n
    \   \"msgurl\":\"NODE_IP\"\n  },\n  \"redis\":{\n        \"redis-endpoint\":\"redis\",\n
    \       \"redis-port\":\"6379\",\n        \"redis-password\":\"avraj\"\n    },\n
    \ \"gopaddleDefaultMessage\":{\n     \"smsTestingDefaultMessage\":\"Notification
    SMS\"\n  }\n}\n"
---
# Source: gopaddle/charts/gp-core/templates/appscanner-appscanner-configmap-07ocv.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: appscanner-appscanner-configmap-07ocv
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appscanner-appscanner-configmap-07ocv
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
  name: appscanner-appscanner-configmap-07ocv
  namespace: default
data:
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\"\n\t},\n
    \       \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \   \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\t\n}"
  profiles-kube.json: |-
    {
       "mongodb":{
          "db-name":"appscanner",
          "db-endpoint":[
             "mongodb:27017"
          ],
          "db-port":"27017",
          "user-db":"admin",
          "db-user":"admin",
          "db-password":"cGFzc3dvcmQ"
       },
       "redis":{
          "redis-endpoint":"redis",
          "redis-port":"6379",
          "redis-password":"avraj"
       },
       "endpoints":{
          "google_endpoints":{
             "refresh_token":"https://www.googleapis.com/oauth2/v3/token",
             "cluster_details":"https://console.developers.google.com/kubernetes/clusters/details"
          },
          "github":{
             "endpoints":{
                "host":"https://github.com",
                "host_api":"https://api.github.com"
             },
             "saas_suffix":{
                "access_token":"/login/oauth/access_token",
                "user_data":"/user",
                "create_repo":"/user/repos",
                "getrepo":"/repos/:username/:reponame",
                "getcommit":"/repos/:username/:reponame/commits",
                "push_content":"/repos/:username/:reponame/contents/:path",
                "tags":"/repos/:username/:reponame/tags",
                "branches":"/repos/:username/:reponame/branches",
                "listing_repos":"/user/repos",
                "pull_tarball":"/repos/:username/:reponame/tarball",
                "webhook":"/repos/:username/:reponame/hooks",
                "webhook_get":"/repos/:username/:reponame/hooks/:hookID",
                "Remove_Git_Webhook":"/repos/:username/:reponame/hooks/:hookID",
                "Gettree":"/repos/:username/:reponame/git/trees/:tree_sha"
             },
             "onprem_suffix":{
                "access_token":"/login/oauth/access_token",
                "user_data":"/api/v3/user",
                "tags":"/api/v3/repos/:username/:reponame/tags",
                "getrepo":"/api/v3/repos/:username/:reponame",
                "getcommit":"/api/v3/repos/:username/:reponame/commits",
                "branches":"/api/v3/repos/:username/:reponame/branches",
                "listing_repos":"/api/v3/user/repos",
                "pull_tarball":"/api/v3/repos/:username/:reponame/tarball",
                "webhook":"/api/v3/repos/:username/:reponame/hooks",
                "webhook_get":"/api/v3/repos/:username/:reponame/hooks/:hookID",
                "Remove_Git_Webhook":"/api/v3/repos/:username/:reponame/hooks/:hookID"
             },
             "urlvalidation":[
                "https://:hostname/.*/(.*)\\.git",
                "git@:hostname:.*/(.*)\\.git",
                "https://:hostname/(.*)/.*\\.git",
                "git@:hostname:(.*)/.*\\.git"
             ]
          },
          "github_endpoints":{
             "access_token":"https://github.com/login/oauth/access_token",
             "user_data":"https://api.github.com/user",
             "create_repo":"https://api.github.com/user/repos",
             "push_content":"https://api.github.com/repos/:username/:reponame/contents/:path",
             "listing_tags":"https://api.github.com/repos/:username/:reponame/tags",
             "listing_branches":"https://api.github.com/repos/:username/:reponame/branches",
             "listing_repos":"https://api.github.com/user/repos",
             "pull_tarball":"https://api.github.com/repos/:username/:reponame/tarball",
             "webhook":"https://api.github.com/repos/:username/:reponame/hooks",
             "webhook_get":"https://api.github.com/repos/:username/:reponame/hooks/:hookID",
             "Remove_Git_Webhook":"https://api.github.com/repos/:username/:reponame/hooks/:hookID"
          }
       }
    }
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n    },\n    \"codebase.ep\": {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\":
    \"8759\"\n    },\n    \"usermanager.ep\":{  \n        \"host\":\"usermanager\",\n
    \       \"port\":\"8005\"\n    },\n    \"deploymentmanager.ep\": {\n      \"host\":
    \"deploymentmanager\",\n      \"port\": \"8003\"\n    },\n    \"release.ep\": {\n
    \       \"host\": \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"clustermanager.ep\":
    {\n      \"host\": \"clustermanager\",\n      \"port\": \"8013\"\n   },\n   \"cloudaccount.ep\":{\n
    \    \"host\":\"cloudmanager\",\n     \"port\":\"8018\"\n   },\n   \"domainmanager.ep\":{\n
    \   \"host\":\"domainmanager\",\n    \"port\":\"8004\"\n  },\n  \"notification.ep\":{
    \ \n    \"host\":\"activitymanager\",\n    \"port\":\"8009\"\n  }\n}"
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type",
          "SOMETHING_WRONG": "Internal Error",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "MARSHAL_ERROR":"Error in marshaling '%s'"
        },
        "All":{
          "SOMETHING_WRONG": "Internal Error",
          "PARSE_ERROR":"Failed to parse the request payload : %s",
          "DIR_ERROR":"Failed to create a directory: %s",
          "FILE_CREAT_ERROR":"Failed to create a file: %s",
          "FILE_TAR_ERROR":"Failed to tar the file: %s",
          "FILE_OPEN_ERROR":"Failed to open the file: %s",
          "FILE_GZIP_ERROR":"Failed to gzip the file: %s"
        },
        "notification":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "NFC_NOTFOUND":"Requested notificaiton channel '%s' is not found",
          "NFC_ALREADY_EXIST":"Requested notificaiton channel '%s' is already exist",
          "INVALID_NOTIFICATIONID_FMT":"Requested notification id '%s' is invalid formate"
        }
    }
  versionMatrix.json: |
    {
      "supportedVersions": [
        "v1.6",
        "v1.7",
        "v1.8",
        "v1.9",
        "v1.10",
        "v1.11",
        "v1.12",
        "v1.13",
        "v1.14",
        "v1.15",
        "v1.16",
        "v1.17",
        "v1.18",
        "v1.19",
        "v1.20",
        "v1.21",
        "v1.22",
        "v1.23",
        "v1.24",
        "v1.25",
        "v1.26",
        "v1.27"
      ],
      "v1.6": {
        "deployment": [
          "apps/v1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.7": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.8": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.9": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.10": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.11": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.12": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.13": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.14": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.15": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.16": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.17": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.18": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.19": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.20": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.21": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.22": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.23": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.24": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.25": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.26": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.27": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      }
    }
---
# Source: gopaddle/charts/gp-core/templates/appworker-appworker-configmap-njdt6.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: appworker-appworker-configmap-njdt6
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appworker-appworker-configmap-njdt6
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
  name: appworker-appworker-configmap-njdt6
  namespace: default
data:
  internal_api.json: "{\n        \"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\",\n\t\t\"readDomainByID\":\"api/%s/domain/%s?organizationID=%s\",\n\t\t\"readConfigByName\":\"api/%s/config/%s?organizationID=%s\",\n\t\t\"readServiceByName\":\"api/%s/service?organizationID=%s&operation=ReadByName&svcName=%s\",\n\t\t\"readServiceGroupByID\":\"api/%s/v1/serviceGroup/%s\",\n\t\t\"readServiceGroupByVersion\":\"api/%s/v1/%s/serviceGroup/%s/version/%s\",\n\t\t\"readServiceGroupByTags\":\"api/%s/v1/%s/serviceGroup/%s/version?%s\",\n\t\t\"updateServiceGroupDependencyRef\":\"api-internal/%s/v1/%s/serviceGroup/%s/version/%s\",\n\t\t\"readBuildVersionByBuildID\":\"api/%s/v1/%s/build/%s\",\n\t\t\"readBuildVersionByTags\":\"api/%s/v1/%s/build?%s\",\n\t\t\"readIngressByID\":\"api/%s/ingress/%s?organizationID=%s\",\n\t\t\"readProfileByID\":\"api/%s/profile/%s?organizationID=%s\",\n\t\t\"readAllocationPolicyByID\":\"api/%s/v1/%s/allocationPolicy/%s\",\n\t\t\"readVolumeClaimPolicyByID\":\"api/%s/%s/volumeClaimPolicy/%s?organizationID=%s\",\n\t\t\"readVolumeByID\":\"api/%s/volume/%s?organizationID=%s\",\n\t\t\"readKubeByID\":\"api/%s/kube/%s?organizationID=%s\",\n\t\t\"readBuildByVersion\":\"api/%s/build/%s?organizationID=%s&operation=forDeployment\",\n\t\t\"readRegistryByID\":\"api/%s/registry/%s?organizationID=%s&operation=accessToken&provider=%s\",\n\t\t\"Updated\":\"updated\",\n\t\t\"readScalingPolicyByID\":\"api/%s/v1/%s/scalingPolicy/%s\",\n\t\t\"readDeploymentPolicyByID\":\"api/%s/v1/%s/deploymentPolicy/%s\",\n\t\t\"readNetworkPolicyByID\":\"api/%s/v1/%s/networkpolicy/%s\",\n\t\t\"readServiceByID\":\"api/%s/v1/%s/service/%s\",\n\t\t\"updateScalingPolicyDependencyRef\":\"api-internal/%s/v1/%s/scalingPolicy/%s\",\n\t\t\"updateDeploymentPolicyDependencyRef\":\"api-internal/%s/v1/%s/deploymentPolicy/%s\",\n\t\t\"updateNetworkPolicyDependencyRef\":\"api-internal/%s/v1/%s/networkpolicy/%s\",\n\t\t\"updateVolumeClaimPolicyDependencyRef\":\"api-internal/%s/%s/volumeClaimPolicy/%s\",\n\t\t\"updateServiceDependencyRef\":\"api-internal/%s/v1/%s/service/%s/%s\",\n\t\t\"updateAllocationPolicyDependencyRef\":\"api-internal/%s/v1/%s/allocationPolicy/%s\",\n\t\t\"readServiceVersionByID\":\"api/%s/v1/%s/service/%s/version/%s\",\n\t\t\"readServiceVersionByTags\":\"api/%s/v1/%s/service/%s/version?%s\",\n\t\t\"readConfigVersionByID\":\"api/%s/v1/%s/config/%s/version/%s\"\n\t},\t\n
    \       \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \       \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  profiles-kube.json: "{  \n  \"group\":{  \n    \"workerInterval\":10\n  },\n  \"mongodb\":{
    \ \n    \"db-name\":\"deploymentmanager\",\n    \"db-endpoint\":[  \n      \"mongodb:27017\"\n
    \   ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n    \"db-user\":\"admin\",\n
    \   \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"redis\":{\n        \"redis-endpoint\":\"redis\",\n
    \       \"redis-port\":\"6379\",\n        \"redis-password\":\"avraj\"\n    },\n
    \ \"rabbitmq\":{  \n    \"mq-protocol\":\"amqp\",\n    \"mq-user\":\"admin\",\n
    \   \"mq-password\":\"cGFzc3dvcmQ\",\n    \"mq-ip\":\"rabbitmq\",\n    \"mq-port\":\"5672\",\n
    \   \"mq-apps-host\":\"/apps\",\n    \"mq-apps-queue\":\"apps-worker-queue\"\n  },\n
    \ \"esearch\":{  \n    \"es-user\":\"elastic\",\n    \"es-password\":\"cGFzc3dvcmQ\",\n
    \   \"es-endpoints\":[  \n      \"http://esearch:9200\"\n    ]\n  },\n  \"gopaddleTools\":{
    \ \n    \"prometheus\":{  \n      \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/application/datacollector/datapoint\",\n
    \     \"influxDBs\":{  \n        \"influxDB-1\":{  \n          \"dbEndpoint\":\"http://influxdb:8086\",\n
    \         \"dbUser\":\"admin\",\n          \"dbPassword\":\"cGFzc3dvcmQ\",\n          \"maxUserCount\":\"100\",\n
    \         \"isEnabled\":true\n        }\n      }\n    },\n    \"eventHandler\":{
    \ \n      \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/application/datacollector/eventhandler\"\n
    \   }\n  },\n  \"deploymentTemplateIconDirectory\":{  \n    \"iconDirectory\":\"/iconPath/%s/deploymentTemplate/\",\n
    \   \"iconAPI\":\"/v1/deploymentTemplate/icon/%s\"\n  }\n}"
  service_directory-kube.json: "{  \n\t\"builder.ep\":{  \n\t  \"host\":\"gpcore\",\n\t
    \ \"port\":\"8759\"\n\t},\n\t\"core.ep\": {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\":
    \"8759\"\n\t},\n\t\"configmanager.ep\":{  \n\t  \"host\":\"configmanager\",\n\t
    \ \"port\":\"8001\"\n\t},\n\t\"clustermanager.ep\": {\n\t\t\"host\": \"clustermanager\",\n\t\t\"port\":
    \"8013\"\n\t},\n\t\"domainmanager.ep\":{  \n\t  \"host\":\"domainmanager\",\n\t
    \ \"port\":\"8004\"\n\t},\n\t\"deploymentmanager.ep\":{  \n\t  \"host\":\"deploymentmanager\",\n\t
    \ \"port\":\"8003\"\n\t},\n\t\"platform.ep\": {\n\t\t\"host\": \"cloudmanager\",\n\t\t\"port\":
    \"8018\"\n\t},\n\t\"registry.ep\": {\n\t\t\"host\": \"cloudmanager\",\n\t\t\"port\":
    \"8018\"\n\t},\n\t\"policy.ep\":{  \n\t  \"host\":\"configmanager\",\n\t  \"port\":\"8001\"\n\t},\n\t\"user.ep\":{
    \ \n\t  \"host\":\"usermanager\",\n\t  \"port\":\"8005\"\n\t},\n\t\"notification.ep\":{
    \ \n\t  \"host\":\"activitymanager\",\n\t  \"port\":\"8009\"\n\t},\n\t\"deploymenttmpl.ep\":{
    \ \n\t  \"host\":\"deploymentmanager\",\n\t  \"port\":\"8003\"\n\t},\n\t\"servicegroup.ep\":{\n\t\t\"host\":
    \"deploymentmanager\",\n\t\t\"port\": \"8003\"\n\t},\n\t\"service.ep\":{  \n\t  \"host\":\"configmanager\",\n\t
    \ \"port\":\"8001\"\n\t},\n\t\"serviceGroup.ep\":{\n\t\t\"host\": \"deploymentmanager\",\n\t\t\"port\":
    \"8003\"\n\t},\n\t\"config.ep\":{  \n\t  \"host\":\"configmanager\",\n\t  \"port\":\"8001\"\n\t},\n\t\"gateway.ep\":{\n\t\t\"host\":\"gateway\",\n\t\t\"port\":\"8006\"\n\t},\n
    \   \"nodechecker.ep\":{\n      \"host\":\"nodechecker\",\n\t  \"port\":\"8020\"\n\t},\n\t\"billing.ep\":{\n\t\t\"host\":\"costmanager\",\n\t\t\"port\":\"8011\"\n\t},\n\t\"usermanager.ep\":{\n\t\t\"host\":
    \"usermanager\",\n\t\t\"port\": \"8005\"\n\t},\n    \"alertmanager.ep\":{\n        \"host\":
    \"alertmanager\",\n        \"port\": \"8012\"\n    },\n     \"release.ep\":{\n        \"host\":
    \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"cloudaccount.ep\":{\n        \"host\":\"cloudmanager\",\n
    \       \"port\":\"8018\"\n    }\n}"
  versionMatrix.json: |
    {
      "supportedVersions": [
        "v1.6",
        "v1.7",
        "v1.8",
        "v1.9",
        "v1.10",
        "v1.11",
        "v1.12",
        "v1.13",
        "v1.14",
        "v1.15",
        "v1.16",
        "v1.17",
        "v1.18",
        "v1.19",
        "v1.20",
        "v1.21",
        "v1.22",
        "v1.23",
        "v1.24",
        "v1.25",
        "v1.26",
        "v1.27"
      ],
      "v1.6": {
        "deployment": [
          "apps/v1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.7": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.8": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.9": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.10": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.11": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.12": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.13": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.14": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.15": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.16": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.17": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.18": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.19": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.20": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.21": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.22": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.23": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.24": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.25": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.26": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.27": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      }
    }
  validation.json: "{\n\t\"application\": {\n\t\t\"expectedFields\": [ \n\t\t\t\"name\",\n\t\t\t\"clusterID\",\n\t\t\t\"deploymentTemplateID\",\n\t\t\t\"accessType\"\n\t\t]\n\t},\n\t\"daemonset\":
    {\n\t\t\"expectedFields\": [ \n\t\t\t\"name\",\n\t\t\t\"clusterID\",\n\t\t\t\"deploymentTemplateID\"\n
    \   ]\n  },\n\t\"deploymentTemplate\": {\n\t\t\"expectedFields\": [\n\t\t\t\"name\",\n\t\t\t\"services\"\n\t\t],\n\t\t\"expectedFields_service\":
    [\n\t\t\t\"id\"\n\t\t]\n\t}\n}"
  error_config.json: "{\n    \"all\":{\n      \"DATA_PERSISTANCE\":\"Internal Error;
    (Failed to store data)\",\n      \"DATA_RETRIVE\":\"Internal Error; (Failed to retrive
    data)\",\n      \"INTERNAL_SERVER\":\"Internal Error; Unable to communicate with
    internal-server\",\n      \"INTERNAL_SERVER_ERROR\":\"Internal Error; Try after
    sometime\",\n      \"RESOURCE_NOT_FOUND\":\"Resource '%s' does not exist\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Resource
    does not exit\",\n      \"ERROR_HITTING_EXT_API\":\"Unable to communicate with external
    resources\",\n      \"ALREADY_EXIST\":\"'%s' already exists\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n      \"MISSING_FIELD_INSIDE\":\"Invalid
    input or missing mandatory field '%s' inside '%s'\",\n      \"INVALID_VALUE\":\"Invalid
    input for field '%s'\",\n      \"INVALID_TYPE\":\"Invalid input type for '%s'\",\n
    \     \"INPUT_MISMATCH\":\"Given input JSON structure is mismatched\",\n      \"KEY_NOT_FOUND\":\"
    '%s' Key not found in Json\",\n      \"VALUE_NOT_FOUND\":\" '%s' Value not found
    in Json\",\n      \"UNSUPPORTED\": \"Given %s is not supported\",\n      \"UNMARSHAL_ERROR\":\"The
    field '%s' is a '%s' type, but the given value is '%s' type\",\n      \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\",\n      \"SERVICE_NOT_FOUND\":\"Template
    need Atleast one Service\",\n      \"DR_NOTFOUND\":\"Requested Dependency Reference
    '%s' is not found\",\n      \"CLUSTER_WIDE_DT_SERVICE_RESTRICTION\":\"Cluster Wide
    Deployment will have only one service\",\n      \"DEPENDENCY_EXIST_RESOURCE\":\"This
    Resource has dependency: '%s'\",\n      \"SOMETHING_WRONG\": \"Internal Error\",\n
    \     \"INTERNAL_DB_COPY\": \"Could not format response from database object.\",\n
    \     \"GEN_UNMARSHAL_ERROR\":\"Error in unmarshal '%s'\",\n      \"STRING_TO_INT_ERROR\":\"Error
    in converting string to int '%s'\",\n      \"FIELD_VALIDATION\":\"InvalidValidationError
    '%s'\",\n      \"MARSHAL_ERROR\":\"Error in marshaling '%s'\",\n      \"SCHEDULE_JOB\":\"Failed
    on scheduling job: '%s'\",\n      \"RESPONSE_FORMATTING\":\"Failed on formatting
    response: '%s'\"\n    },\n   \"daemonset\": {\n      \"NAMING_CONVENTION\":\"'%s'
    violates the naming convention for daemonset. Allowed names should match (^[a-z][a-z0-9-]*[a-z0-9]$)\",\n
    \     \"DAEMONSET_NOT_FOUND\": \"Requested Daemonset '%s' is not found\",\n      \"SERVICE_NOT_FOUND\":
    \"Requested Service '%s' is not found\",\n      \"ALREADY_EXIST\":\"Given Daemonset
    name '%s' is already in use\",\n      \"EMPTY_NODES\": \"Requested cluster %s does
    not have healthy nodes to deploy the template\",\n      \"MISSING_NODES\": \"Failed
    to fetch nodes for the cluster '%s' to validate deployment process\",\n      \"DEPLOYMENT_TEMPLATE_NOT_FOUND\":
    \"Requested Deployment Template '%s' is not found\",\n      \"INVALID_ACCESS_TYPE\":
    \"Given access type '%s' is invalid\",\n      \"PORT_VALIDATION\": \"Requested port
    '%s' is already in use\",\n      \"ALTERNATIVE_PORT_MISSING\": \"Alternative port
    for '%s' under service '%s' is not provided in the request\",\n      \"EMPTY_ALTERNATIVE_PORT\":
    \"Request does not contain an alternative port for '%s' to expose\",\n      \"UNSUPPORTED_UPDATE_TYPE\":
    \"Requested service '%s' does not support update operation\",\n      \"VERSION_NOT_FOUND\":
    \"Requested version '%s' is not available under the service '%s'\",\n      \"VOLUME_ALREADY_USED\":
    \"Warning : Volume '%s' is already used by service '%s'. Data stored in the disk
    will be erased permanently\",\n      \"VOLUME_ALREADY_INUSE\": \"Volume '%s' is
    currently in use by service '%s'. Please select a different volume\",\n      \"VOLUME_NOT_AVAILABLE\":
    \"Volume '%s' is not available. Please select a different volume\"\n   },\n   \"deploymentTemplate\":{\n
    \   \"DT_NOTFOUND\":\"Requesting DeploymentTemplate '%s' is not found\",\n    \"INVALID_PAYLOAD\":\"Given
    Payload is invalid: \",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"INVALID_DEPLOYMENTTEMPLATEID_FMT\":\"Requested
    deploymentTemplate id is invalid format '%s'\",\n    \"DEPLOYMENTTEMPLATE_NOTFOUND\":\"Requested
    Deployment Template '%s' is not found\",\n    \"DEPLOYMENTTEMPLATE_ALREADY_EXIST\":\"Requested
    Deployment Template '%s' already exist\",\n    \"DEPLOYMENTTEMPLATEHIST_NOTFOUND\":\"Requested
    Deployment Template '%s' is not found\",\n    \"SERVICEGROUPNAME_ALREADY_EXIST\":\"Given
    ServiceGroup name '%s' already used\",\n    \"SERVICEGROUP_MIN_COUNT_DELETION_\":\"Service
    Group Deletion action can't be performed, Deployment Template need atleast only
    one Service Group\",\n    \"UPDATETYPE_MISSING\":\"UpdateType field missing\",\n
    \   \"FIELD_MISSING\":\"Required Field Missing '%s'\",\n    \"SERVICEGROUPS_ARRAY_MISSING\":\"Service
    Groups []Object '%s' is missing\",\n    \"SERVICE_OBJECT_MISSING\":\"Service object
    '%s' is missing\",\n    \"SERVICEGROUP_NAME_NOT_FOUND\":\"Requested Deployment Template
    Service Group '%s' is not found\",\n    \"SERVICE_NAME_NOT_FOUND\":\"Requesting
    Deployment Template Service ID '%s' not found in Service Group '%s'\",\n    \"SERVICE_NAME_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of service name '%s'\",\n    \"SERVICEGROUP_PORTS_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of port '%d'\",\n    \"SERVICE_MIN_COUNT_DELETION_\":\"Service
    Deletion action can't be performed, Service Group need atleast only one Service
    \",\n    \"BUILD_OBJECT_MISSING\":\"Build object missing in service '%s'\",\n    \"PORT_MISMATCH\":\"Port
    Mismatching '%d'\",\n    \"DUPLICATE_SERVICE_PORT\":\"Ports can't be same in ServieGroup,
    Service Port '%d' already used in one of services in '%s'\",\n    \"MOUNT_PATH_MISMATCH\":\"Mount
    Path Mismatch between actual service '%s' and value in ServiceGroup '%s'\",\n    \"STORAGENAME_NOTFOUND\":\"Storage
    Name '%s' not found in StorageGroups\",\n    \"ACTUAL_SERVICE_NOT_HAVING_CONFIG\":\"You
    can't update Confgis in ServiceGroup '%s' because Actual Service '%s' does't contain
    any configs\",\n    \"ACTUAL_SERVICE_HAVING_CONFIG\":\"You can't delete Confgis
    in ServiceGroup '%s' because Actual Service '%s' contains configs\",\n    \"CYCLIC_DEPENDENCY\":\"Cyclic
    Dependency between ServiceGroup '%s' and '%s'\",\n    \"SG_VERSION_DRAFT\":\"Can't
    commit serviceGroup '%s' version as '%s'\"\n\n  },\n   \"serviceGroup\":{\n    \"BUILD_OBJECT_MISSING\":\"Build
    object missing in service '%s'\",\n    \"SERVICEGROUP_NOTFOUND\":\"Requested Service
    Group '%s' is not found\",\n    \"SERVICEGROUP_ALREADY_EXIST\":\"Requested Service
    Group '%s' already exist\",\n    \"SERVICEGROUP_OBJECT_MISSING\":\"Service Group
    object '%s' is missing\",\n    \"SERVICE_OBJECT_MISSING\":\"Service object '%s'
    is missing\",\n    \"SERVICE_ARRAY_MISSING\":\"Service []Object '%s' is missing\",\n
    \   \"SERVICEGROUPEHIST_NOTFOUND\":\"Requested ServiceGroup history '%s' with version
    '%s' is not found\",\n    \"SERVICEGROUP_PORTS_CANNOTBE_DUPLICATE\":\"In Service
    Group '%s' Encountered duplication values of port '%d'\",\n    \"UPDATETYPE_MISSING\":\"UpdateType
    field missing\",\n    \"STATELESSSCALINGPOLICY\":\": stateless for this ServiceGroupType
    ScalingPolicy is required\",\n    \"STATEFULSCALINGPOLICY\":\": stateful for this
    ServiceGroupType ScalingPolicy will not come\",\n    \"SCALINGRESTRICT\":\" can't
    attach ScalingPolicy for this serviceGroup '%s' because StorageGroup has PersistentVolume\",\n
    \   \"PODDEPLOYMENTPOLICY\":\"pod for this ServiceGroupType deploymentPolicy will
    not come\",\n    \"INVALID_SERVICEGROUPID_FMT\":\"Requested serviceGroup id is invalid
    format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be negative number
    { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page should
    be less than '%d'\",\n    \"MOUNT_PATH_MISMATCH\":\"Mount Path Mismatch between
    actual service '%s' and value in ServiceGroup '%s'\",\n    \"STORAGENAME_NOTFOUND\":\"Storage
    Name '%s' not found in StorageGroups\",\n    \"SERVICE_NAME_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of service name '%s'\",\n    \"PORT_MISMATCH\":\"Port
    Mismatching '%d'\",\n    \"BUILD_IN_FAILED\":\"Build is in failed state\",\n    \"SERVICE_VERSION_DRAFT\":\"Can't
    commit service '%s' version as '%s'\",\n    \"SERVICE_CONFIG_VERSION\":\"Can't commit
    service '%s' config '%s' version as '%s'\",\n    \"PODAFFINITY_EXPRESSION\":\"Invalid
    Value for labelExpression operator: %s\",\n    \"PODAFFINITY_TOPOLOGYKEY\":\"Invalid
    topologyKey : %s\",\n    \"STORAGENAME_UNIQUE\":\"volumeLabel must contain unique
    values\",\n    \"SECURITYCONTEXT_NOT_ALLOWED\":\"securityContext runAsNonRoot is
    '%s' but the given runAsUser is '%s' root value\"\n   },\n   \"All\":{  \n    \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n    \"INVALID_ID\":\"Requested resource
    id '%s' is invalid format\",\n    \"UNMARSHAL_ERROR\":\"The field '%s' is a '%s'
    type, but the given value is '%s' type\",\n    \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\"\n  },\n  \"App\":{  \n
    \   \"APP_NOTFOUND\":\"Requested application '%s' is not found\",\n    \"APP_ALREADY_EXIST\":\"Requested
    application '%s' is already exist\",\n    \"NOT_IMPLEMENT\":\"This module has not
    been implemented\",\n    \"PAGESIZE_LESSONE\":\"Page or Size can not be less than
    one { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d'; Size should
    be less than '%d'\",\n    \"INVALID_CONFIGID_FMT\":\"Requesting config id is invalid
    formate '%s'\",\n    \"DONOT_MOD_FIELD\":\"You could not modify the field '%s' value
    after creation\",\n    \"CP_SETUP_FAILED\":\"Gopaddle setup failed with '%s'\",\n
    \   \"ACTIVITY_NOTFOUND\":\"Requested application's activity '%s' is not found\",\n
    \   \"INGRESS_NODEPORT_MISSING\":\"'accessInfo.httpNodePort' and 'accsessInfo.httpsNodePort'
    can not be nil if access info is nodeIPIngress\",\n     \n    \"//Volume configuration\":\"\",\n
    \   \"VOLUME_MISSING\":\"Volume info is missing to the service group '%s'\",\n    \"HOSTVOL_MISSING\":\"Host
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"PV_MISSING\":\"Persistent
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"SVOLUME_MISSING\":\"Static
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"USED_SVOLUME\":
    \"Volume '%s' is unavailable status '%s'. Please select a different volume\",\n
    \   \"DUP_SVOLUME\": \"The Given request contains duplicate static volume informations
    '%s'\",\n    \"SC_MISSING\": \"Storage class is missing to the storage name '%s'
    in the service group '%s'\",\n    \"INVALID_SCALING\":\"Autosclaing Max replica
    '%d' is less than Deployment policy Replica '%d' in service group '%s'\",\n    \"REPLICA_IN_STATIC\":\"Replicas
    should be only one if the service group '%s' contains the static volume\",\n    \"REPLICA_IN_DYNAMIC\":\"Replicas
    should be only one if the service group '%s' contains the dynamic volume and also
    no stateful type\",\n    \"SCALING_IN_VOLUME\":\"Scaling relicas should be only
    one if the service group '%s' contains the persistence volume\",\n\n    \"//NFS
    Provisioner\":\"\",\n\n    \"DEPLOYMENTTEMPLATE_READ_ERROR\":\"There is a problem
    in reading deployment template\",\n    \"STORAGECLASS_READ_ERROR\":\"There is a
    problem in reading storage class\",\n    \"PROVISIONER_READ_ERROR\":\"There is a
    problem in reading provisioner\",\n\n    \"//Port configuration\":\"\",\n    \"PORT_MISSING\":\"Port
    info is missing to the service group '%s'\",\n    \"EX_PORT_MISSING\":\"Expose port
    '%d' is null in the service group '%s.%s'\",\n    \"BOTH_PORT_OPTION\":\"The port
    '%d' can not be used both alternative port and ingress, in the service group '%s.%s'\",\n
    \   \"INVALID_INGRESS_PATH\":\"We detected invalid path '%s' for port '%d', in the
    service group '%s.%s'\",\n    \"INVALID_PORT\":\"We detected invalid port '%d',
    in the service group '%s.%s'\",\n    \"INGRESS_PATH_MISSING\":\"Ingress path info
    '%s' is missing to the service group '%s.%s'\",\n    \"INGRESS_LBIP_MISSING\":\"LoadBalancerIp
    is missing for nginx ingress\",\n    \"INGRESS_ELB_MISSING\":\"ELB id is missing
    for nginx ingress\",\n    \n    \"//Update\":\"\",\n    \"TOOMANY_SG\":\"Update
    will run a Service Group at single time\",\n    \"INVALID_SG\":\"We detected invalid
    service group info in update call '%s'\",\n    \"TOOMANY_UPDATECALL\":\"Too many
    update request on the same application '%s'\",\n    \"APP_INAVALID_STATUS\":\"The
    application which is in '%s' state '%s' could not be updated\",\n    \"NON_SUPPORT_SGTYPE\":\"Non
    stateless service group '%s' will not support any update\",\n    \"REVISION_NULL\":\"The
    revision number can not be empty if update type is rollback in the service group
    '%s'\",\n    \"ALREADY_ROLLEDBACK_REVISION\":\"The given revision '%d' already rolledback
    in the service group '%s'\",\n    \"EXPIRED_REVISION\":\"The given revision '%d'
    is already expired in the service group '%s'\",\n    \"UPDATE_DESC_NULL\":\"The
    parameter 'serviceGroups[0].description' can not be empty\",\n    \"UPDATE_SCALING_NULL\":\"The
    parameter 'serviceGroups[0].ScalingPolicy' can not be empty\",\n    \"UPDATE_SERVICE_ID_NULL\":\"The
    parameter '%s' can not be empty\",\n    \"UPDATE_SERVICE_IMAGE_NULL\":\"The parametet
    '%s' can not be empty\",\n    \"UPDATE_PODAFFINITY_EXPRESSIONS\":\"Invalid Value
    for labelExpression operator: %s\",\n    \"UPDATE_NODEAFFINITY_EXPRESSIONS\":\"Invalid
    Value for nodeExpression operator: %s\",\n\n    \"//READ\":\"\",\n    \"INVALID_READTYPE\":\"We
    detected that invalid value '%s' for query field read-type\",\n    \"MISSING_READQUERY_FIELDS\":\"The
    query field '%s' can not be null if the read-type is '%s'\",\n    \"MISSING_READTYPE\":\"The
    query filed 'read-type' is missing\",\n    \n    \"MISSING_RESOURCEQUERY_FIELDS\":\"The
    query field '%s' can not be null if the resource-type is '%s'\",\n    \"INVALID_RESOURCETYPE\":\"We
    detected that invalid value '%s' for query field resource-type\",\n    \"MISSING_RESOURCETYPE\":\"The
    query filed 'resource-type' is missing\",\n\n    \"//DEPENDENCY\": \"\",\n    \"DEPENDENCY_UPDATE_ERROR\":
    \"Couldnt update application dependency\",\n\n    \"DEPLOYMENT_VERSION_ERROR\":\"Couldnt
    find the difference in deploymentTemplate\",\n\n    \"BUILD_ID_MISSING\":\"The build
    version missing for a container '%s' in the serviceGroup '%s'.\",\n    \"RESPONSE_FORMATTING\":\"Failed
    on formatting application Response: '%s'\",\n    \"GETTING_RESPONSE\":\"failed on
    getting %s information %s\",\n\n   \"SERVICE_GROUP_ALREADY_EXIST\":\"Requested service
    '%s' is already exist in this application '%s'\",\n\n   \"//CONTAINER_ADD\":\"\",\n
    \  \"STORAGENAME_NOT_FOUND\":\"StorageName '%s' not found in the serviceGroup '%s'\",\n
    \  \"SERVICE_ALREADY_EXIST\":\"Requested container '%s' is already exist on the
    service '%s'\",\n   \"SERVICEGROUP_NOTFOUND\":\"Requested service '%s' is not found
    in application '%s'\",\n   \"SERVICE_NOTFOUND\":\"Requested container '%s' is not
    found in service '%s'\",\n   \"SERVICE_REQUIRED\":\"Container type '%s' is required
    in the service '%s'\",\n   \"BUILD_NOTFOUND\":\"Requested container '%s' build is
    not found for distribution '%s' in release '%s'\",\n   \"IMAGE_NOTFOUND\":\"Requested
    container '%s' image is not found for distribution '%s' in release '%s'\",\n \n
    \  \"POD_NOTSUPPORTED_UPDATED\":\"Requested update is not supported for pod. supported
    Update is buildUpdate and network\",\n   \"MICROK8S_DEFAULT_SC_NOTFOUND\":\"Failed
    default Storeageclass not equal to '%s' in microk8s\",\n   \"K3S_DEFAULT_SC_NOTFOUND\":\"Failed
    default Storeageclass not equal to '%s' in k3s\",\n   \"//SERVICEGROUP\":\"\",\n
    \  \"SG_NOTFOUND\":\"Requested servicegroup '%s' is not found\",\n   \"ALB_DEPLOYMENT_NOT_FOUND\":\"Requested
    alb deployment not found in the cluster '%s'\",\n   \"ALB_POD_NOT_FOUND\":\"Requested
    alb pod not found in the cluster '%s'\",\n   \"ALB_POD_NOT_READY\":\"Requested alb
    pod not ready in the cluster '%s'\",\n   \"DOMAIN_ARN_NOT_FOUND\":\"Requested domain
    '%s' not contain the certificateARN\",\n   \"DOMAIN_ARN_NOT_FOUND_REGION\": \"Request
    domain '%s' not contain the certificateARN for region '%s' and cloudaccount '%s'\"\n\n\n\n
    \ },\n  \"Metrics\":{\n    \"MISSING_METRICSQUERY_FIELDS\":\"The query field '%s'
    can not be null if the metrics-type is '%s'\",\n    \"METRICS_NOTFOUND\":\"Requested
    projectID '%s' is not found\"\n\n  },\n  \"Topup\":{\n    \"TOPUP_NOTFOUND\":\"Requested
    accountID '%s' is not found\"\n  },\n  \"allocationPolicy\":{\n    \"AP_NOTFOUND\":\"Requested
    Allocation Policy '%s' is not found\",\n    \"AP_ALREADY_EXIST\":\"Requested Allocation
    Policy '%s' already exists\",\n    \"INVALID_AP_FMT\":\"Requested service id is
    invalid format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"CPU_LIMIT\":\"CPU value in millicore should be
    between '%d' and '%d'\",\n    \"MEMORY_M_LIMIT\":\"Memory values in MegaBytes should
    be between '%d' and '%d'\",\n    \"MEMORY_G_LIMIT\":\"Memory values in GigaBytes
    should be between '%d' and '%d'\",\n    \"MEMORY_SUFFIX\":\"Memory suffix should
    be one of 'M' or 'G'\",\n    \"CPU_SUFFIX\":\"CPU suffix should be 'm'\",\n    \"INVALID_QUANTITY\":\"Value
    of '%s' contains invalid character '%s'\",\n    \"MEMORY_QUANTITY\":\"Memory limit
    '%s' should be greater than Request '%s'\",\n    \"CPU_QUANTITY\":\"CPU limit '%s'
    should be greater than Request '%s'\"\n  }\n\n}"
  Chart.yaml: |-
    apiVersion: v2
    name: HELM_CHART
    description: DESCRIPTION
  
    # A chart can be either an 'application' or a 'library' chart.
    #
    # Application charts are a collection of templates that can be packaged into versioned archives
    # to be deployed.
    #
    # Library charts provide useful utilities or functions for the chart developer. They're included as
    # a dependency of application charts to inject those utilities and functions into the rendering
    # pipeline. Library charts do not define any templates and therefore cannot be deployed.
    type: application
  
    # This is the chart version. This version number should be incremented each time you make changes
    # to the chart and its templates, including the app version.
    # Versions are expected to follow Semantic Versioning (https://semver.org/)
    version: 1.0.0
  
    # This is the version number of the application being deployed. This version number should be
    # incremented each time you make changes to the application. Versions are not expected to
    # follow Semantic Versioning. They should reflect the version the application is using.
    appVersion: APP_VERSION
  clusterrole.yaml: |-
    {{- if eq (include "gen.clusterrole" .) "true" -}}
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: gopaddle:nginx-ingress-clusterrole
    rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        - endpoints
        - nodes
        - pods
        - secrets
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - get
      - apiGroups:
        - ""
        resources:
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - ingresses
        - ingressclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - create
        - patch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - ingresses/status
        - ingressclasses
        verbs:
        - update
      - apiGroups:
        - ""
        resourceNames:
        - ingress-controller-leader
        resources:
        - configmaps
        verbs:
        - get
        - update
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - create
    {{- end }}
  helper.tpl: |
    {{/*
    Check ClusterRole Exist
    */}}
    {{- define "gen.clusterrole" -}}
    {{- $clusterrole := lookup "v1" "ClusterRole" "" "gopaddle:nginx-ingress-clusterrole" -}}
    {{- if $clusterrole -}}
            {{- printf "%s" true -}}
    {{- else -}}
            {{- printf "%s" false -}}
    {{- end -}}
    {{- end -}}
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-cloudmanager-configmap-o3c6s.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: cloudmanager-cloudmanager-configmap-o3c6s
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: cloudmanager-cloudmanager-configmap-o3c6s
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
  name: cloudmanager-cloudmanager-configmap-o3c6s
  namespace: default
data:
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n\t},\n    \"usermanager.ep\":{\n        \t\"host\":\"usermanager\",\n
    \       \t\"port\":\"8005\"\n    },\n\t\"cloudmanager.ep\": {\n\t\t\"host\": \"cloudmanager\",\n\t\t\"port\":
    \"8018\"\n\t},\n\t\"cloudaccount.ep\":{\n\t\t\"host\":\"cloudmanager\",\n\t\t\"port\":\"8018\"\n\t},\n
    \   \"nodechecker.ep\": {\n    \t\"host\":\"nodechecker\",\n    \t\"port\":\"8020\"\n
    \ \t},\n    \"billing.ep\":{\n      \"host\":\"costmanager\",\n      \"port\":\"8011\"\n
    \   }\n}"
  internal_api.json: "{\n\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \       \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
  error_config.json: "{\n    \"all\":{\n      \"DATA_PERSISTANCE\":\"Internal Error;
    (Failed to store data)\",\n      \"DATA_RETRIVE\":\"Internal Error; (Failed to retrive
    data)\",\n      \"INTERNAL_SERVER\":\"Internal Error; Unable to communicate with
    internal-server\",\n      \"INTERNAL_SERVER_ERROR\":\"Internal Error; Try after
    sometime\",\n      \"RESOURCE_NOT_FOUND\":\"Resource '%s' does not exist\",\n      \"ERROR_HITTING_EXT_API\":\"Unable
    to communicate with external resources\",\n      \"SOMETHING_WRONG\": \"Internal
    Error\",\n      \"INTERNAL_DB_COPY\": \"Could not format response from database
    object.\",\n      \"INPUT_PAYLOAD_ERROR\":\"Input payload have error: %s\",\n      \"GEN_UNMARSHAL_ERROR\":\"Error
    in unmarshal '%s'\",\n      \"STRING_TO_INT_ERROR\":\"Error in converting string
    to int '%s'\",\n      \"FIELD_VALIDATION\":\"InvalidValidationError '%s'\",\n      \"MARSHAL_ERROR\":\"Error
    in marshaling '%s'\",\n      \"ALREADY_EXIST\":\"'%s' already exists\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n      \"MISSING_FIELD_INSIDE\":\"Invalid
    input or missing mandatory field '%s' inside '%s'\",\n      \"INVALID_VALUE\":\"Invalid
    input for field '%s'\",\n      \"INVALID_TYPE\":\"Invalid input type for '%s'\",\n
    \     \"INPUT_MISMATCH\":\"Given input JSON structure is mismatched\",\n      \"KEY_NOT_FOUND\":\"
    '%s' Key not found in Json\",\n      \"VALUE_NOT_FOUND\":\" '%s' Value not found
    in Json\",\n      \"UNSUPPORTED\": \"Given %s is not supported\",\n      \"UNMARSHAL_ERROR\":\"The
    field '%s' is a '%s' type, but the given value is '%s' type\",\n      \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\",\n      \"PAGESIZE_LESSONE\":\"Page
    or Size can not be less than one { '%d', '%d' }\",\n      \"PPAGE_LIMIT\":\"Requested
    invalid page '%d'; Page should be less than '%d'\",\n      \"PSIZE_LIMIT\":\"Requested
    invalid size '%d'; Size should be less than '%d'\",\n      \"INVALID_ID\":\"Requested
    resource id '%s' is invalid format\"\n    },\n    \"cloudAuth\":{\n      \"MANAGED_TYPE\":\"User
    cannot delete Managed cloudAuth\",\n      \"KEY_EXISTS\":\"clientID already exist
    in the user\",\n      \"NAME_EXISTS\":\"Name already exist in the user\"\n    },\n
    \   \"cloud\":{\n      \"MANAGED_TYPE\":\"User cannot delete Managed cloudAccount\",\n
    \     \"KEY_EXISTS\":\"AccessKey already exist in the user\",      \n      \"NAME_EXISTS\":\"Name
    already exist in the user\",\n      \"GOOGLE_KEY_EXISTS\":\"serviceAccount already
    exist in  the user\",\n      \"CLOUD_ACCOUNT_NOTFOUND\":\"Requested CloudAccount'%s'
    is not found\"\n    },\n    \"registry\":{\n      \"PAGESIZE_NEGAVE\":\"Page or
    Size can not be negative number { '%d', '%d' }\",\n      \"PPAGE_LIMIT\":\"Requested
    invalid page '%d'; Page should be less than '%d'\",\n      \"PSIZE_LIMIT\":\"Requested
    invalid size '%d' Page should be less than '%d'\",\n      \"REG_NOTFOUND\":\"Requested
    registry channel '%s' is not found\",\n      \"REG_ALREADY_EXIST\":\"Requested registry
    channel '%s' is already exist\",\n      \"INVALID_REGISTRY_FMT\":\"Requested registry
    id '%s' is invalid formate\"\n    }\n}"
  profiles-kube.json: "{  \n    \"mongodb\":{  \n       \"db-name\":\"cloudmanager\",\n
    \      \"db-endpoint\":[  \n        \"mongodb:27017\"\n       ],\n       \"db-port\":\"27017\",\n
    \      \"user-db\":\"admin\",\n       \"db-user\":\"admin\",\n       \"db-password\":\"cGFzc3dvcmQ\"\n
    \   },\n    \"redis\":{\n        \"redis-endpoint\":\"redis\",\n        \"redis-port\":\"6379\",\n
    \       \"redis-password\":\"avraj\"\n    },\n    \"cloudapis\":{\n     \"getACR\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerRegistry/registries/:registryName?api-version=2019-05-01\",\n
    \    \"getACRCreds\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerRegistry/registries/:registryName/listCredentials?api-version=2019-05-01\",\n
    \    \"googleUrl\":\"https://oauth2.googleapis.com/token\",\n     \"azureUrl\":\"https://login.microsoftonline.com/common/oauth2/v2.0/token\"\n
    \   }\n  }"
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-clustermanager-configmap-vadks.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: clustermanager-clustermanager-configmap-vadks
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: clustermanager-clustermanager-configmap-vadks
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
  name: clustermanager-clustermanager-configmap-vadks
  namespace: default
data:
  clusterrole.yaml: |-
    AWSTemplateFormatVersion: "2010-09-09"
  
    Description: Amazon EKS - EKS service role
  
    Resources:
      EksServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - eks.amazonaws.com
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
            - "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
          Path: /
  
    Outputs:
      EksServiceRole:
        Description: The EKS service role
        Value: !GetAtt EksServiceRole.Arn
  versionMatrix.json: |-
    {
      "supportedVersions": [
        "v1.6",
        "v1.7",
        "v1.8",
        "v1.9",
        "v1.10",
        "v1.11",
        "v1.12",
        "v1.13",
        "v1.14",
        "v1.15",
        "v1.16",
        "v1.17",
        "v1.18",
        "v1.19",
        "v1.20",
        "v1.21",
        "v1.22",
        "v1.23",
        "v1.24",
        "v1.25",
        "v1.26",
        "v1.27"
      ],
      "v1.6": {
        "deployment": [
          "apps/v1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.7": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.8": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.9": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.10": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.11": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.12": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.13": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.14": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.15": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.16": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.17": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.18": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.19": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.20": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.21": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.22": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.23": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.24": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.25": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.26": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.27": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      }
    }
  storidgenodegroup3.yaml: "AWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription:
    Amazon EKS - Node Group\n\nMetadata:\n  \"AWS::CloudFormation::Interface\":\n    ParameterGroups:\n
    \     - Label:\n          default: EKS Cluster\n        Parameters:\n          -
    ClusterName\n          - ClusterControlPlaneSecurityGroup\n      - Label:\n          default:
    Worker Node Configuration\n        Parameters:\n          - NodeGroupName\n          -
    NodeAutoScalingGroupMinSize\n          - NodeAutoScalingGroupDesiredCapacity\n          -
    NodeAutoScalingGroupMaxSize\n          - NodeInstanceType\n          - NodeImageIdSSMParam\n
    \         - NodeImageId\n          - NodeVolumeSize\n          - KeyName\n          -
    BootstrapArguments\n          - DisableIMDSv1\n      - Label:\n          default:
    Worker Network Configuration\n        Parameters:\n          - VpcId\n          -
    Subnets\n\nParameters:\n  BootstrapArguments:\n    Type: String\n    Default: \"\"\n
    \   Description: \"Arguments to pass to the bootstrap script. See files/bootstrap.sh
    in https://github.com/awslabs/amazon-eks-ami\"\n\n  ClusterControlPlaneSecurityGroup:\n
    \   Type: \"AWS::EC2::SecurityGroup::Id\"\n    Default: CLUSTER_SG\n    Description:
    The security group of the cluster control plane.\n\n  ClusterName:\n    Type: String\n
    \   Default: CLUSTER_NAME\n    Description: The cluster name provided when the cluster
    was created. If it is incorrect, nodes will not be able to join the cluster.\n\n
    \ KeyName:\n    Type: \"AWS::EC2::KeyPair::KeyName\"\n    Default: KEY_NAME\n    Description:
    The EC2 Key Pair to allow SSH access to the instances\n\n  NodeAutoScalingGroupDesiredCapacity:\n
    \   Type: Number\n    Default: ASG_DESIRED_CAPACITY\n    Description: Desired capacity
    of Node Group ASG.\n\n  NodeAutoScalingGroupMaxSize:\n    Type: Number\n    Default:
    ASG_MAXSIZE\n    Description: Maximum size of Node Group ASG. Set to at least 1
    greater than NodeAutoScalingGroupDesiredCapacity.\n\n  NodeAutoScalingGroupMinSize:\n
    \   Type: Number\n    Default: ASG_MINSIZE\n    Description: Minimum size of Node
    Group ASG.\n\n  NodeGroupName:\n    Type: String\n    Default: NODEGROUP_NAME\n
    \   Description: Unique identifier for the Node Group.\n\n  NodeInstanceRole:\n
    \   Type: String\n    Default: NODE_INSTANCE_ROLE\n    Description: IAM role for
    Node group.\n\n  NodeImageId:\n    Type: String\n    Default: AMI_IMAGE_ID\n    Description:
    (Optional) Specify your own custom image ID. This value overrides any AWS Systems
    Manager Parameter Store value specified above.\n\n  NodeImageIdSSMParam:\n    Type:
    \"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\"\n    Default: /aws/service/eks/optimized-ami/1.17/amazon-linux-2/recommended/image_id\n
    \   Description: AWS Systems Manager Parameter Store parameter of the AMI ID for
    the worker node instances. Change this value to match the version of Kubernetes
    you are using.\n\n  DisableIMDSv1:\n    Type: String\n    Default: \"false\"\n    AllowedValues:\n
    \     - \"false\"\n      - \"true\"\n\n  NodeInstanceType:\n    Type: String\n    Default:
    NODEPOOL_INSTANCE_TYPE\n    AllowedValues:\n      - a1.medium\n      - a1.large\n
    \     - a1.xlarge\n      - a1.2xlarge\n      - a1.4xlarge\n      - c1.medium\n      -
    c1.xlarge\n      - c3.large\n      - c3.xlarge\n      - c3.2xlarge\n      - c3.4xlarge\n
    \     - c3.8xlarge\n      - c4.large\n      - c4.xlarge\n      - c4.2xlarge\n      -
    c4.4xlarge\n      - c4.8xlarge\n      - c5.large\n      - c5.xlarge\n      - c5.2xlarge\n
    \     - c5.4xlarge\n      - c5.9xlarge\n      - c5.12xlarge\n      - c5.18xlarge\n
    \     - c5.24xlarge\n      - c5.metal\n      - c5d.large\n      - c5d.xlarge\n      -
    c5d.2xlarge\n      - c5d.4xlarge\n      - c5d.9xlarge\n      - c5d.12xlarge\n      -
    c5d.18xlarge\n      - c5d.24xlarge\n      - c5d.metal\n      - c5n.large\n      -
    c5n.xlarge\n      - c5n.2xlarge\n      - c5n.4xlarge\n      - c5n.9xlarge\n      -
    c5n.18xlarge\n      - c6g.medium\n      - c6g.large\n      - c6g.xlarge\n      -
    c6g.2xlarge\n      - c6g.4xlarge\n      - c6g.8xlarge\n      - c6g.12xlarge\n      -
    c6g.16xlarge\n      - c6g.metal\n      - c6gd.medium\n      - c6gd.large\n      -
    c6gd.xlarge\n      - c6gd.2xlarge\n      - c6gd.4xlarge\n      - c6gd.8xlarge\n
    \     - c6gd.12xlarge\n      - c6gd.16xlarge\n      - c6gd.metal\n      - cc2.8xlarge\n
    \     - cr1.8xlarge\n      - d2.xlarge\n      - d2.2xlarge\n      - d2.4xlarge\n
    \     - d2.8xlarge\n      - f1.2xlarge\n      - f1.4xlarge\n      - f1.16xlarge\n
    \     - g2.2xlarge\n      - g2.8xlarge\n      - g3s.xlarge\n      - g3.4xlarge\n
    \     - g3.8xlarge\n      - g3.16xlarge\n      - h1.2xlarge\n      - h1.4xlarge\n
    \     - h1.8xlarge\n      - h1.16xlarge\n      - hs1.8xlarge\n      - i2.xlarge\n
    \     - i2.2xlarge\n      - i2.4xlarge\n      - i2.8xlarge\n      - i3.large\n      -
    i3.xlarge\n      - i3.2xlarge\n      - i3.4xlarge\n      - i3.8xlarge\n      - i3.16xlarge\n
    \     - i3.metal\n      - i3en.large\n      - i3en.xlarge\n      - i3en.2xlarge\n
    \     - i3en.3xlarge\n      - i3en.6xlarge\n      - i3en.12xlarge\n      - i3en.24xlarge\n
    \     - inf1.xlarge\n      - inf1.2xlarge\n      - inf1.6xlarge\n      - inf1.24xlarge\n
    \     - m1.small\n      - m1.medium\n      - m1.large\n      - m1.xlarge\n      -
    m2.xlarge\n      - m2.2xlarge\n      - m2.4xlarge\n      - m3.medium\n      - m3.large\n
    \     - m3.xlarge\n      - m3.2xlarge\n      - m4.large\n      - m4.xlarge\n      -
    m4.2xlarge\n      - m4.4xlarge\n      - m4.10xlarge\n      - m4.16xlarge\n      -
    m5.large\n      - m5.xlarge\n      - m5.2xlarge\n      - m5.4xlarge\n      - m5.8xlarge\n
    \     - m5.12xlarge\n      - m5.16xlarge\n      - m5.24xlarge\n      - m5.metal\n
    \     - m5a.large\n      - m5a.xlarge\n      - m5a.2xlarge\n      - m5a.4xlarge\n
    \     - m5a.8xlarge\n      - m5a.12xlarge\n      - m5a.16xlarge\n      - m5a.24xlarge\n
    \     - m5ad.large\n      - m5ad.xlarge\n      - m5ad.2xlarge\n      - m5ad.4xlarge\n
    \     - m5ad.12xlarge\n      - m5ad.24xlarge\n      - m5d.large\n      - m5d.xlarge\n
    \     - m5d.2xlarge\n      - m5d.4xlarge\n      - m5d.8xlarge\n      - m5d.12xlarge\n
    \     - m5d.16xlarge\n      - m5d.24xlarge\n      - m5d.metal\n      - m5dn.large\n
    \     - m5dn.xlarge\n      - m5dn.2xlarge\n      - m5dn.4xlarge\n      - m5dn.8xlarge\n
    \     - m5dn.12xlarge\n      - m5dn.16xlarge\n      - m5dn.24xlarge\n      - m5n.large\n
    \     - m5n.xlarge\n      - m5n.2xlarge\n      - m5n.4xlarge\n      - m5n.8xlarge\n
    \     - m5n.12xlarge\n      - m5n.16xlarge\n      - m5n.24xlarge\n      - m6g.medium\n
    \     - m6g.large\n      - m6g.xlarge\n      - m6g.2xlarge\n      - m6g.4xlarge\n
    \     - m6g.8xlarge\n      - m6g.12xlarge\n      - m6g.16xlarge\n      - m6g.metal\n
    \     - m6gd.medium\n      - m6gd.large\n      - m6gd.xlarge\n      - m6gd.2xlarge\n
    \     - m6gd.4xlarge\n      - m6gd.8xlarge\n      - m6gd.12xlarge\n      - m6gd.16xlarge\n
    \     - m6gd.metal\n      - p2.xlarge\n      - p2.8xlarge\n      - p2.16xlarge\n
    \     - p3.2xlarge\n      - p3.8xlarge\n      - p3.16xlarge\n      - p3dn.24xlarge\n
    \     - g4dn.xlarge\n      - g4dn.2xlarge\n      - g4dn.4xlarge\n      - g4dn.8xlarge\n
    \     - g4dn.12xlarge\n      - g4dn.16xlarge\n      - g4dn.metal\n      - r3.large\n
    \     - r3.xlarge\n      - r3.2xlarge\n      - r3.4xlarge\n      - r3.8xlarge\n
    \     - r4.large\n      - r4.xlarge\n      - r4.2xlarge\n      - r4.4xlarge\n      -
    r4.8xlarge\n      - r4.16xlarge\n      - r5.large\n      - r5.xlarge\n      - r5.2xlarge\n
    \     - r5.4xlarge\n      - r5.8xlarge\n      - r5.12xlarge\n      - r5.16xlarge\n
    \     - r5.24xlarge\n      - r5.metal\n      - r5a.large\n      - r5a.xlarge\n      -
    r5a.2xlarge\n      - r5a.4xlarge\n      - r5a.8xlarge\n      - r5a.12xlarge\n      -
    r5a.16xlarge\n      - r5a.24xlarge\n      - r5ad.large\n      - r5ad.xlarge\n      -
    r5ad.2xlarge\n      - r5ad.4xlarge\n      - r5ad.12xlarge\n      - r5ad.24xlarge\n
    \     - r5d.large\n      - r5d.xlarge\n      - r5d.2xlarge\n      - r5d.4xlarge\n
    \     - r5d.8xlarge\n      - r5d.12xlarge\n      - r5d.16xlarge\n      - r5d.24xlarge\n
    \     - r5d.metal\n      - r5dn.large\n      - r5dn.xlarge\n      - r5dn.2xlarge\n
    \     - r5dn.4xlarge\n      - r5dn.8xlarge\n      - r5dn.12xlarge\n      - r5dn.16xlarge\n
    \     - r5dn.24xlarge\n      - r5n.large\n      - r5n.xlarge\n      - r5n.2xlarge\n
    \     - r5n.4xlarge\n      - r5n.8xlarge\n      - r5n.12xlarge\n      - r5n.16xlarge\n
    \     - r5n.24xlarge\n      - r6g.medium\n      - r6g.large\n      - r6g.xlarge\n
    \     - r6g.2xlarge\n      - r6g.4xlarge\n      - r6g.8xlarge\n      - r6g.12xlarge\n
    \     - r6g.16xlarge\n      - r6g.metal\n      - r6gd.medium\n      - r6gd.large\n
    \     - r6gd.xlarge\n      - r6gd.2xlarge\n      - r6gd.4xlarge\n      - r6gd.8xlarge\n
    \     - r6gd.12xlarge\n      - r6gd.16xlarge\n      - r6gd.metal\n      - t1.micro\n
    \     - t2.nano\n      - t2.micro\n      - t2.small\n      - t2.medium\n      -
    t2.large\n      - t2.xlarge\n      - t2.2xlarge\n      - t3.nano\n      - t3.micro\n
    \     - t3.small\n      - t3.medium\n      - t3.large\n      - t3.xlarge\n      -
    t3.2xlarge\n      - t3a.nano\n      - t3a.micro\n      - t3a.small\n      - t3a.medium\n
    \     - t3a.large\n      - t3a.xlarge\n      - t3a.2xlarge\n      - u-6tb1.metal\n
    \     - u-9tb1.metal\n      - u-12tb1.metal\n      - x1.16xlarge\n      - x1.32xlarge\n
    \     - x1e.xlarge\n      - x1e.2xlarge\n      - x1e.4xlarge\n      - x1e.8xlarge\n
    \     - x1e.16xlarge\n      - x1e.32xlarge\n      - z1d.large\n      - z1d.xlarge\n
    \     - z1d.2xlarge\n      - z1d.3xlarge\n      - z1d.6xlarge\n      - z1d.12xlarge\n
    \     - z1d.metal\n    ConstraintDescription: Must be a valid EC2 instance type\n
    \   Description: EC2 instance type for the node instances\n\n  NodeVolumeSize:\n
    \   Type: Number\n    Default: NODE_DISK_SIZE\n    Description: Node volume size\n\n
    \ Subnets:\n    Type: \"CommaDelimitedList\"\n    Default: SUBNET01\n    Description:
    The subnets where workers can be created.\n\n  VpcId:\n    Type: \"AWS::EC2::VPC::Id\"\n
    \   Default: VPCID\n    Description: The VPC of the worker instances\n\nMappings:\n
    \ PartitionMap:\n    aws:\n      EC2ServicePrincipal: \"ec2.amazonaws.com\"\n    aws-us-gov:\n
    \     EC2ServicePrincipal: \"ec2.amazonaws.com\"\n    aws-cn:\n      EC2ServicePrincipal:
    \"ec2.amazonaws.com.cn\"\n    aws-iso:\n      EC2ServicePrincipal: \"ec2.c2s.ic.gov\"\n
    \   aws-iso-b:\n      EC2ServicePrincipal: \"ec2.sc2s.sgov.gov\"\n\nConditions:\n
    \ HasNodeImageId: !Not\n    - \"Fn::Equals\":\n      - !Ref NodeImageId\n      -
    \"\"\n\n  IMDSv1Disabled:\n    \"Fn::Equals\":\n      - !Ref DisableIMDSv1\n      -
    \"true\"\n\nResources:\n  NodeInstanceProfile:\n    Type: \"AWS::IAM::InstanceProfile\"\n
    \   Properties:\n      Path: /\n      Roles:\n        - !Ref NodeInstanceRole\n\n
    \ NodeSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    Properties:\n      GroupDescription:
    Security group for all nodes in the cluster\n      Tags:\n        - Key: !Sub kubernetes.io/cluster/${ClusterName}\n
    \         Value: owned\n      VpcId: !Ref VpcId\n\n  NodeSecurityGroupIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow node to communicate with each other\n
    \     FromPort: 0\n      GroupId: !Ref NodeSecurityGroup\n      IpProtocol: \"-1\"\n
    \     SourceSecurityGroupId: !Ref NodeSecurityGroup\n      ToPort: 65535\n\n  ClusterControlPlaneToNodeSecurityGroupIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow pods to communicate with the cluster API
    Server\n      FromPort: 0\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: \"-1\"\n      SourceSecurityGroupId: !Ref NodeSecurityGroup\n
    \     ToPort: 65535\n\n  ClusterControlPlaneSecurityGroupIngress:\n    Type: \"AWS::EC2::SecurityGroupIngress\"\n
    \   DependsOn: NodeSecurityGroup\n    Properties:\n      Description: Allow pods
    to communicate with the cluster API Server1\n      FromPort: 0\n      GroupId: !Ref
    ClusterControlPlaneSecurityGroup\n      IpProtocol: \"-1\"\n      SourceSecurityGroupId:
    !Ref ClusterControlPlaneSecurityGroup\n      ToPort: 65535\n\n  ClusterControlPlaneEgressToNodeSecurityGroup:\n
    \   Type: \"AWS::EC2::SecurityGroupEgress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow the cluster control plane to communicate
    with worker Kubelet and pods\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     CidrIp: 0.0.0.0/0\n      FromPort: 0\n      IpProtocol: \"-1\"\n      ToPort:
    65535\n\n  ClusterControlPlaneIngressForStoridgeAPIOn8282:\n    Type: \"AWS::EC2::SecurityGroupIngress\"\n
    \   DependsOn: NodeSecurityGroup\n    Properties:\n      Description: Allow goPaddle/User
    to access the Storidge API on 8282\n      FromPort: 8282\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: tcp\n      CidrIp: 0.0.0.0/0\n      ToPort: 8282\n\n  ClusterControlPlaneIngressForGrafanaOn32000:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow users to access the Grafana on 32000\n
    \     FromPort: 32000\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n      IpProtocol:
    tcp\n      CidrIp: 0.0.0.0/0\n      ToPort: 32000\n\n  NodeLaunchTemplate:\n    Type:
    \"AWS::EC2::LaunchTemplate\"\n    Properties:\n      LaunchTemplateData:\n        BlockDeviceMappings:\n
    \         - DeviceName: /dev/xvda\n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2\n
    \         - DeviceName: /dev/xvdf \n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2
    \n          - DeviceName: /dev/xvdg \n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2
    \n          - DeviceName: /dev/xvdh \n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2
    \         \n        IamInstanceProfile:\n          Arn: !GetAtt NodeInstanceProfile.Arn\n
    \       ImageId: !If\n          - HasNodeImageId\n          - !Ref NodeImageId\n
    \         - !Ref NodeImageIdSSMParam\n        InstanceType: !Ref NodeInstanceType\n
    \       KeyName: !Ref KeyName\n        SecurityGroupIds:\n        - !Ref NodeSecurityGroup\n
    \       - !Ref ClusterControlPlaneSecurityGroup\n        UserData: !Base64\n          \"Fn::Sub\":
    |\n            #!/bin/bash\n            set -o xtrace\n            /etc/eks/bootstrap.sh
    ${ClusterName} \n            curl -fsSL ftp://download.storidge.com/pub/ce/cio-ce
    | sudo bash\n            /opt/aws/bin/cfn-signal --exit-code $? \\\n                     --stack
    \ ${AWS::StackName} \\\n                     --resource NodeGroup  \\\n                     --region
    ${AWS::Region}   \n                     \n            reboot\n        MetadataOptions:\n
    \         HttpPutResponseHopLimit : 2\n          HttpEndpoint: enabled\n          HttpTokens:
    !If\n            - IMDSv1Disabled\n            - required\n            - optional\n\n
    \ NodeGroup:\n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n    Properties:\n
    \     DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity\n      LaunchTemplate:\n
    \       LaunchTemplateId: !Ref NodeLaunchTemplate\n        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber\n
    \     MaxSize: !Ref NodeAutoScalingGroupMaxSize\n      MinSize: !Ref NodeAutoScalingGroupMinSize\n
    \     Tags:\n        - Key: Name\n          PropagateAtLaunch: true\n          Value:
    !Sub ${ClusterName}-${NodeGroupName}-Node\n        - Key: !Sub kubernetes.io/cluster/${ClusterName}\n
    \         PropagateAtLaunch: true\n          Value: owned\n      VPCZoneIdentifier:
    !Ref Subnets\n    CreationPolicy:\n      ResourceSignal:\n        Count: !Ref NodeAutoScalingGroupDesiredCapacity\n
    \       Timeout: PT15M\n    UpdatePolicy:\n      AutoScalingRollingUpdate:\n        MaxBatchSize:
    1\n        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity\n        PauseTime:
    PT5M\n    \n  ASGLifecycleHookTerminate:\n    Type: AWS::AutoScaling::LifecycleHook\n
    \   DependsOn: NodeGroup\n    Properties:\n      AutoScalingGroupName: !Ref NodeGroup\n
    \     DefaultResult: \"CONTINUE\"\n      HeartbeatTimeout: 600\n      LifecycleHookName:
    \"Storidge-Remove-Node\"\n      LifecycleTransition: \"autoscaling:EC2_INSTANCE_TERMINATING\"\n
    \   \n  ASGLifecycleHookLaunch:\n    Type: AWS::AutoScaling::LifecycleHook\n    DependsOn:
    NodeGroup\n    Properties:\n      AutoScalingGroupName: !Ref NodeGroup\n      HeartbeatTimeout:
    1200\n      LifecycleHookName: \"Storidge-Add-Node\"\n      LifecycleTransition:
    \"autoscaling:EC2_INSTANCE_LAUNCHING\"\n\n  ASGScaleOutPolicy: \n    Type: AWS::AutoScaling::ScalingPolicy\n
    \   Properties: \n      AdjustmentType: \"ChangeInCapacity\"\n      PolicyType:
    \"SimpleScaling\"\n      Cooldown: \"600\"\n      AutoScalingGroupName: !Ref NodeGroup\n
    \     ScalingAdjustment: 1\n\n  ASGCPUAlarmHigh:\n    Type: AWS::CloudWatch::Alarm\n
    \   Properties:\n      EvaluationPeriods: '2'\n      Statistic: Average\n      Threshold:
    '80'\n      AlarmDescription: Alarm if CPU too high or metric disappears indicating
    instance\n        is down\n      Period: '60'\n      AlarmActions:\n      - !Ref
    ASGScaleOutPolicy\n      Namespace: AWS/EC2\n      Dimensions:\n      - Name: AutoScalingGroupName\n
    \       Value: !Ref NodeGroup\n      ComparisonOperator: GreaterThanThreshold\n
    \     MetricName: CPUUtilization\n\n  SSMdocument:\n    Type: 'AWS::SSM::Document'\n
    \   DependsOn: NodeGroup\n    Properties:\n      DocumentType: Automation\n      Content:\n
    \       schemaVersion: \"0.3\"\n        description: \"Create Storidge cluster with
    SSM Automation\"\n        # Role that is utilized to perform the steps within the
    Automation Document. In this case to be able to Signal CFN and Describe Instances.
    \n        assumeRole: \"{{AutomationAssumeRole}}\"\n        # Gathering parameters
    needed to configure DCs in the Quick Start\n        parameters:\n          Region:\n
    \           type: String\n            default: !Ref \"AWS::Region\"\n          AutomationAssumeRole:\n
    \           type: String\n            # TODO\n            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'
    \          \n          ASGName:\n            type: String\n            default:
    !Ref NodeGroup\n        mainSteps:\n          - name: Get_Token_Name\n            action:
    'aws:executeScript'\n            inputs:\n              Runtime: python3.6\n              Handler:
    script_handler\n              Script: |-\n                import time\n                import
    calendar        \n                def script_handler(events, context):\n                  print('Setting
    storidge token name')\n                  # print(events[\"parameter\"])\n                  token=str(calendar.timegm(time.gmtime()))\n
    \                 return {'token': token}\n            maxAttempts: 3\n            outputs:\n
    \             - Selector: $.Payload.token\n                Type: String\n                Name:
    token\n          - name: Get_ASG_Instances\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: AutoScaling\n              Api: DescribeAutoScalingGroups\n
    \             AutoScalingGroupNames:\n                - '{{ASGName}}'\n            maxAttempts:
    3\n            outputs:\n              - Selector: '$.AutoScalingGroups[0].Instances..InstanceId'\n
    \               Name: StorageNodes\n                Type: StringList\n          -
    name: GetStorageNodeList\n            action: 'aws:executeScript'\n            inputs:\n
    \             Runtime: python3.6\n              Handler: script_handler\n              Script:
    |-\n                def script_handler(events, context):\n                  print(events[\"InstanceIds\"])\n
    \                 LeaderInstanceId = []\n                  LeaderInstanceId.append(events[\"InstanceIds\"].pop(0))\n
    \                 return {'StorageInstanceIds': events[\"InstanceIds\"], 'LeaderInstanceId':
    LeaderInstanceId }\n              InputPayload:\n                InstanceIds: '{{
    Get_ASG_Instances.StorageNodes}}'\n            outputs:\n              - Name: StorageInstanceIds\n
    \               Selector: $.Payload.StorageInstanceIds\n                Type: StringList\n
    \             - Name: LeaderInstanceId\n                Selector: $.Payload.LeaderInstanceId\n
    \               Type: StringList\n          - name: Create_Token\n            action:
    'aws:runCommand'\n            inputs:\n              DocumentName: AWS-RunShellScript\n
    \             InstanceIds:\n                - '{{ GetStorageNodeList.LeaderInstanceId
    }}'\n              Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    ip=$(ec2metadata --local-ipv4)\n                  - token=$(cioctl create --ip $ip
    | grep \"cioctl join\")\n                  - if [ -z \"${token}\" ]; then echo \"ERROR:Token
    is not created\"; exit; fi\n                  - aws ssm put-parameter --region {{
    Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --type SecureString
    --overwrite --value \"$token\"\n            maxAttempts: 1\n          - name: Join_Nodes\n
    \           action: 'aws:runCommand'\n            inputs:\n              DocumentName:
    AWS-RunShellScript\n              InstanceIds:\n                - '{{ GetStorageNodeList.StorageInstanceIds
    }}'\n              Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    ip=$(ec2metadata --local-ipv4)\n                  - STORIDGE_TOKEN=$(aws ssm get-parameter
    --region {{ Region }}  --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --with-decryption
    --query \"Parameter.Value\" --output text)\n                  - echo $STORIDGE_TOKEN\n
    \                 - eval \"$STORIDGE_TOKEN --ip $ip\"\n            maxAttempts:
    1\n            onFailure: 'step:CleanupParam'\n          - name: Initialize_Cluster\n
    \           action: 'aws:runCommand'\n            inputs:\n              DocumentName:
    AWS-RunShellScript\n              InstanceIds:\n                - '{{ GetStorageNodeList.LeaderInstanceId
    }}'\n              Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    STORIDGE_TOKEN=$(aws ssm get-parameter --region {{ Region }} --name \"STORIDGE_TOKEN_{{
    Get_Token_Name.token }}\" --with-decryption --query ''Parameter.Value'' --output
    text)\n                  - echo $STORIDGE_TOKEN\n                  - cioctl init
    `echo $STORIDGE_TOKEN | cut -d'-' -f2`\n                  - cio node ls | grep -v
    \"Error\"\n                  - aws ssm delete-parameter --region {{ Region }} --name
    \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" \n            maxAttempts: 1\n            onFailure:
    'step:CleanupParam'\n          - name: K8s_Add_Node_Label\n            action: 'aws:runCommand'\n
    \           inputs:\n              Parameters:\n                commands:\n                  -
    '#!/bin/bash'\n                  - set -o pipefail\n                  - set -xe\n
    \                 - instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n
    \                 - hostname=$(aws ec2 describe-instances --region {{ Region }}
    --instance-ids $instanceId --query 'Reservations[*].Instances[*].[PrivateDnsName]'
    --output text)\n                  - !Sub kubectl --kubeconfig ~/.kube/config label
    nodes $hostname nodePoolType=storidgeNodePool  nodePoolName=${NodeGroupName}\n              DocumentName:
    AWS-RunShellScript\n              InstanceIds:\n                - '{{ GetStorageNodeList.LeaderInstanceId
    }}'\n                - '{{ GetStorageNodeList.StorageInstanceIds }}'\n            maxAttempts:
    1\n          - name: Tag_Node\n            action: 'aws:createTags'\n            inputs:\n
    \             ResourceType: EC2\n              ResourceIds:\n                - '{{Get_ASG_Instances.StorageNodes}}'\n
    \             Tags:\n                - Value: ready\n                  Key: node_status\n
    \         - name: CleanupParam\n            action: 'aws:executeAwsApi'\n            inputs:\n
    \             Service: ssm\n              Api: DeleteParameter\n              Name:
    STORIDGE_TOKEN_{{ Get_Token_Name.token }}\n            isCritical: false\n\n\n  SSMDocumentAddNode:\n
    \   Type: 'AWS::SSM::Document'\n    DependsOn: NodeGroup\n    Properties:\n      DocumentType:
    Automation\n      Content:\n        description: Add a new node to Storidge cluster\n
    \       schemaVersion: '0.3'\n        assumeRole: '{{AutomationAssumeRole}}'\n        parameters:\n
    \         AutomationAssumeRole:\n            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n
    \           type: String\n          ASGName:\n            default: test22-vv1-NodeGroup-1TMPAZMFBWHSE\n
    \           type: String\n          Region:\n            default: !Ref \"AWS::Region\"\n
    \           type: String\n          InstanceId:\n            type: String\n          LCHName:\n
    \           type: String\n          SSMDocumentName:\n            type: String\n
    \       mainSteps:\n          - name: GetRunningAutomation\n            action:
    'aws:executeAwsApi'\n            inputs:\n              Service: ssm\n              Api:
    describe_automation_executions\n              Filters:\n                - Key: DocumentNamePrefix\n
    \                 Values:\n                    - '{{SSMDocumentName}}'\n                -
    Key: ExecutionStatus\n                  Values:\n                    - InProgress\n
    \                   - Waiting\n                    - Pending\n            outputs:\n
    \             - Name: ExecutionStatus\n                Selector: AutomationExecutionMetadataList..AutomationExecutionStatus\n
    \               Type: StringList\n              - Name: ExecutionIds\n                Selector:
    AutomationExecutionMetadataList..AutomationExecutionId\n                Type: StringList
    \  \n          - name: GetExecutionCount\n            action: 'aws:executeScript'\n
    \           inputs:\n              Runtime: python3.6\n              Handler: script_handler\n
    \             Script: |-\n                def script_handler(events, context):\n
    \                 print(events[\"ExecutionIds\"])\n                  events[\"ExecutionIds\"].pop(0)\n
    \                 if len(events[\"ExecutionIds\"]) != 0:\n                    return
    {'ExecutionIds': events[\"ExecutionIds\"], 'ExecutionLen': len(events[\"ExecutionIds\"])
    }\n                  return {'ExecutionLen': 0}\n              InputPayload:\n                ExecutionIds:
    '{{ GetRunningAutomation.ExecutionIds}}'\n            outputs:\n              -
    Name: ExecutionIds\n                Selector: $.Payload.ExecutionIds\n                Type:
    StringList\n              - Name: ExecutionLen\n                Selector: $.Payload.ExecutionLen\n
    \               Type: Integer\n          - name: CheckExecutionLength\n            action:
    'aws:branch'\n            inputs:\n              Choices:\n                - NextStep:
    WaitToCompleteRunningExecutions\n                  Variable: '{{GetExecutionCount.ExecutionLen}}'\n
    \                 NumericGreater: 0\n              Default: Sleep\n          - name:
    WaitToCompleteRunningExecutions\n            action: 'aws:waitForAwsResourceProperty'\n
    \           inputs:\n              Service: ssm\n              Api: describe_automation_executions\n
    \             PropertySelector: AutomationExecutionMetadataList..AutomationExecutionStatus\n
    \             DesiredValues:\n                - Success\n                - TimedOut\n
    \               - Cancelling\n                - Cancelled\n                - Failed\n
    \             Filters:\n                - Key: DocumentNamePrefix\n                  Values:\n
    \                   - '{{SSMDocumentName}}'\n                - Key: ExecutionId\n
    \                 Values:\n                    - '{{GetExecutionCount.ExecutionIds}}'\n
    \           timeoutSeconds: 600   \n          - name: Sleep\n            action:
    'aws:sleep'\n            inputs:\n              Duration: PT5M    \n          -
    outputs:\n              - Type: String\n                Selector: $.Payload.token\n
    \               Name: token\n            inputs:\n              Script: |-\n                import
    time\n                import calendar                \n\n                def script_handler(events,
    context):\n                  print('Setting storidge token name')\n                  #
    print(events[\"parameter\"])\n                  token=str(calendar.timegm(time.gmtime()))\n
    \                 return {'token': token}\n              Runtime: python3.6\n              Handler:
    script_handler\n            name: Get_Token_Name\n            action: 'aws:executeScript'\n
    \           maxAttempts: 2\n          - name: GetStoridgeNode\n            action:
    'aws:executeAwsApi'\n            outputs:\n              - Selector: $.Reservations[0].Instances[0].InstanceId\n
    \               Name: NodeId\n                Type: String\n            inputs:\n
    \             Service: ec2\n              Api: DescribeInstances\n              Filters:\n
    \               - Name: 'tag:aws:autoscaling:groupName'\n                  Values:\n
    \                   - '{{ASGName}}'\n                - Name: 'tag:node_status'\n
    \                 Values:\n                    - ready\n                - Name:
    instance-state-name\n                  Values:\n                    - running\n
    \         - name: Create_Token\n            action: 'aws:runCommand'\n            inputs:\n
    \             Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    ip=$(ec2metadata --local-ipv4)\n                  - token=$(sudo cioctl join-token)\n
    \                 - if [ -z \"${token}\" ]; then echo \"ERROR:Token is not created\";
    exit; fi\n                  - echo $token\n                  - 'aws ssm put-parameter
    --region {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --type
    SecureString --overwrite --value \"$token\"'\n              DocumentName: AWS-RunShellScript\n
    \             InstanceIds:\n                - '{{GetStoridgeNode.NodeId}}'\n            maxAttempts:
    1\n          - name: Add_Node\n            action: 'aws:runCommand'\n            inputs:\n
    \             Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    ip=$(ec2metadata --local-ipv4)\n                  - 'STORIDGE_TOKEN=$(aws ssm get-parameter
    --region {{ Region }}  --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --with-decryption
    --query \"Parameter.Value\" --output text)'\n                  - echo $STORIDGE_TOKEN\n
    \                 - eval \"$STORIDGE_TOKEN --ip $ip\"\n                  - sleep
    2m\n                  - cio node ls\n                  - aws ssm delete-parameter
    --region {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" \n              DocumentName:
    AWS-RunShellScript\n              InstanceIds:\n                - '{{InstanceId}}'\n
    \           maxAttempts: 1\n            onFailure: 'step:CleanupParam'\n          -
    name: CompleteLifecycleAction_Launch\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: autoscaling\n              Api: CompleteLifecycleAction\n
    \             LifecycleActionResult: CONTINUE\n              LifecycleHookName:
    '{{ LCHName }}'\n              AutoScalingGroupName: '{{ ASGName }}'\n              InstanceId:
    '{{ InstanceId }}'\n            maxAttempts: 3\n          - name: K8s_Add_Node_Label\n
    \           action: 'aws:runCommand'\n            inputs:\n              Parameters:\n
    \               commands:\n                  - '#!/bin/bash'\n                  -
    set -o pipefail\n                  - set -xe\n                  - instanceId=$(curl
    http://169.254.169.254/latest/meta-data/instance-id)\n                  - hostname=$(aws
    ec2 describe-instances --region {{ Region }} --instance-ids $instanceId --query
    'Reservations[*].Instances[*].[PrivateDnsName]' --output text)\n                  -
    !Sub kubectl --kubeconfig ~/.kube/config label nodes $hostname nodePoolType=storidgeNodePool
    \ nodePoolName=${NodeGroupName}\n              DocumentName: AWS-RunShellScript\n
    \             InstanceIds:\n                - '{{InstanceId}}'\n            maxAttempts:
    1\n          - name: Tag_Node\n            action: 'aws:createTags'\n            inputs:\n
    \             ResourceType: EC2\n              ResourceIds:\n                - '{{
    InstanceId }}'\n              Tags:\n                - Value: ready\n                  Key:
    node_status\n          - name: CleanupParam\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: ssm\n              Api: DeleteParameter\n
    \             Name: STORIDGE_TOKEN_{{ Get_Token_Name.token }}\n            isCritical:
    false\n\n  SSMDocumentRemoveNode:\n    Type: 'AWS::SSM::Document'\n    DependsOn:
    NodeGroup\n    Properties:\n      DocumentType: Automation\n      Content:\n        description:
    Remove node from storidge cluster\n        schemaVersion: '0.3'\n        assumeRole:
    '{{AutomationAssumeRole}}'\n        parameters:\n          AutomationAssumeRole:\n
    \           type: String\n          ASGName:\n            default: test22-vv1-NodeGroup-1TMPAZMFBWHSE\n
    \           type: String\n          InstanceId:\n            type: String\n          LCHName:\n
    \           type: String\n        mainSteps:\n          - name: Remove_Node\n            action:
    'aws:runCommand'\n            inputs:\n              DocumentName: AWS-RunShellScript\n
    \             InstanceIds:\n                - '{{InstanceId}}'\n              Parameters:\n
    \               commands:\n                  - '#!/bin/bash'\n                  -
    set -o pipefail\n                  - set -xe\n                  - cio node ls\n
    \                 - cioctl node remove\n            maxAttempts: 1\n          -
    name: CompleteLifecycleAction_Terminate\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: autoscaling\n              Api: CompleteLifecycleAction\n
    \             LifecycleActionResult: CONTINUE\n              LifecycleHookName:
    '{{ LCHName }}'\n              AutoScalingGroupName: '{{ ASGName }}'\n              InstanceId:
    '{{ InstanceId }}'\n            maxAttempts: 3      \n\n  CloudWatchEventRuleLaunchNode:\n
    \   Type: AWS::Events::Rule\n    DependsOn: SSMDocumentAddNode\n    Properties:\n
    \     Description: \"Event rule to add a new node to storidge cluster\"\n      EventPattern:\n
    \       source:\n          - \"aws.autoscaling\"\n        detail-type:\n          -
    \"EC2 Instance-launch Lifecycle Action\"\n        detail:\n          AutoScalingGroupName:\n
    \           - !Ref NodeGroup    \n      Name: !Join [ \"\", [\"Launch_\", !Ref NodeGroup
    ] ] \n      State: \"ENABLED\"\n      Targets:\n        - \n          Arn: !Sub
    'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMDocumentAddNode}:$DEFAULT'\n
    \         Id: \"CallSSMDocumentAddNode\"\n          # TODO\n          RoleArn: !Sub
    'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n          InputTransformer:\n
    \           InputPathsMap:\n              asgname: \"$.detail.AutoScalingGroupName\"\n
    \             instanceid: \"$.detail.EC2InstanceId\"\n              lchname: \"$.detail.LifecycleHookName\"\n
    \          # TODO\n            InputTemplate: !Sub '{\"InstanceId\":[<instanceid>],\"ASGName\":[<asgname>],\"LCHName\":[<lchname>],\"AutomationAssumeRole\":[\"arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}\"],\"SSMDocumentName\":[\"${SSMDocumentAddNode}\"]}'\n\n
    \ CloudWatchEventRuleTerminateNode:\n    Type: AWS::Events::Rule\n    DependsOn:
    SSMDocumentRemoveNode\n    Properties:\n      Description: \"Event rule to remove
    node from storidge cluster\"\n      EventPattern:\n        source:\n          -
    \"aws.autoscaling\"\n        detail-type:\n          - \"EC2 Instance-terminate
    Lifecycle Action\"\n        detail:\n          AutoScalingGroupName:\n            -
    !Ref NodeGroup    \n      Name: !Join [ \"\", [\"Terminate_\", !Ref NodeGroup ]
    ] \n      State: \"ENABLED\"\n      Targets:\n        - \n          Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMDocumentRemoveNode}:$DEFAULT'\n
    \         Id: \"CallSSMDocumentRemoveNode\"\n          # TODO\n          RoleArn:
    !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n          InputTransformer:\n
    \           InputPathsMap:\n              asgname: \"$.detail.AutoScalingGroupName\"\n
    \             instanceid: \"$.detail.EC2InstanceId\"\n              lchname: \"$.detail.LifecycleHookName\"\n
    \             # TODO\n            InputTemplate: !Sub '{\"InstanceId\":[<instanceid>],\"ASGName\":[<asgname>],\"LCHName\":[<lchname>],\"AutomationAssumeRole\":[\"arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}\"]}'\nOutputs:\n
    \ NodeSecurityGroup:\n    Description: The security group for the node group\n    Value:
    !Ref NodeSecurityGroup\n\n  NodeAutoScalingGroup:\n    Description: The autoscaling
    group\n    Value: !Ref NodeGroup\n    \n  SSMDocumentCreate:\n    Description: SSM
    document to create the storidge cluster\n    Value: !Ref SSMdocument\n\n  SSMDocumentAddNode:\n
    \   Description: SSM document to add the node to the Storidge Cluster\n    Value:
    !Ref SSMDocumentAddNode\n\n  SSMDocumentRemoveNode:\n    Description: SSM document
    to remove the node from Storidge Cluster\n    Value: !Ref SSMDocumentRemoveNode"
  nodegrouprole.yaml: |-
    AWSTemplateFormatVersion: "2010-09-09"
  
    Description: Amazon EKS - Node Group Role
  
    Resources:
      NodeInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          Path: /
  
    Outputs:
      NodeInstanceRole:
        Description: The node instance role
        Value: !GetAtt NodeInstanceRole.Arn
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n\t},\n\t\"platform.ep\":{\n\t\t\"host\":\"core\",\n\t\t\"port\":\"8759\"\n\t},\n\t\"cloudaccount.ep\":{\n\t\t\"host\":\"cloudmanager\",\n\t\t\"port\":\"8018\"\n\t},\n\t\"clustermanager.ep\":{\n\t\t\"host\":\"clustermanager\",\n\t\t\"port\":\"8013\"\n\t},\n\t\"nodechecker.ep\":{\n\t\t\"host\":\"nodechecker\",\n\t\t\"port\":\"8020\"\n\t},\n
    \   \"billing.ep\":{\n      \"host\":\"costmanager\",\n      \"port\":\"8011\"\n
    \   },\n    \"application.ep\":{\n      \"host\":\"deploymentmanager\",\n      \"port\":\"8003\"\n
    \   },\n    \"usermanager.ep\":{\n        \"host\":\"usermanager\",\n        \"port\":\"8005\"\n
    \   },\n    \"notification.ep\":{\n\t\t\"host\":\"activitymanager\",\n\t\t\"port\":\"8009\"\n\t},\n\t\"appscanner.ep\":{\n\t\t\"host\":\"appscanner\",\n\t\t\"port\":\"8022\"\n\t},\n\t\"codebase.ep\":
    {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\": \"8759\"\n    },\n\t\"domainmanager.ep\":{\n\t\t\"host\":\"domainmanager\",\n\t\t\"port\":\"8004\"\n\t}\n}"
  storidgenodegroup2.yaml: "AWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription:
    Amazon EKS - Node Group\n\nMetadata:\n  \"AWS::CloudFormation::Interface\":\n    ParameterGroups:\n
    \     - Label:\n          default: EKS Cluster\n        Parameters:\n          -
    ClusterName\n          - ClusterControlPlaneSecurityGroup\n      - Label:\n          default:
    Worker Node Configuration\n        Parameters:\n          - NodeGroupName\n          -
    NodeAutoScalingGroupMinSize\n          - NodeAutoScalingGroupDesiredCapacity\n          -
    NodeAutoScalingGroupMaxSize\n          - NodeInstanceType\n          - NodeImageIdSSMParam\n
    \         - NodeImageId\n          - NodeVolumeSize\n          - KeyName\n          -
    BootstrapArguments\n          - DisableIMDSv1\n      - Label:\n          default:
    Worker Network Configuration\n        Parameters:\n          - VpcId\n          -
    Subnets\n\nParameters:\n  BootstrapArguments:\n    Type: String\n    Default: \"\"\n
    \   Description: \"Arguments to pass to the bootstrap script. See files/bootstrap.sh
    in https://github.com/awslabs/amazon-eks-ami\"\n\n  ClusterControlPlaneSecurityGroup:\n
    \   Type: \"AWS::EC2::SecurityGroup::Id\"\n    Default: CLUSTER_SG\n    Description:
    The security group of the cluster control plane.\n\n  ClusterName:\n    Type: String\n
    \   Default: CLUSTER_NAME\n    Description: The cluster name provided when the cluster
    was created. If it is incorrect, nodes will not be able to join the cluster.\n\n
    \ KeyName:\n    Type: \"AWS::EC2::KeyPair::KeyName\"\n    Default: KEY_NAME\n    Description:
    The EC2 Key Pair to allow SSH access to the instances\n\n  NodeAutoScalingGroupDesiredCapacity:\n
    \   Type: Number\n    Default: ASG_DESIRED_CAPACITY\n    Description: Desired capacity
    of Node Group ASG.\n\n  NodeAutoScalingGroupMaxSize:\n    Type: Number\n    Default:
    ASG_MAXSIZE\n    Description: Maximum size of Node Group ASG. Set to at least 1
    greater than NodeAutoScalingGroupDesiredCapacity.\n\n  NodeAutoScalingGroupMinSize:\n
    \   Type: Number\n    Default: ASG_MINSIZE\n    Description: Minimum size of Node
    Group ASG.\n\n  NodeGroupName:\n    Type: String\n    Default: NODEGROUP_NAME\n
    \   Description: Unique identifier for the Node Group.\n\n  NodeInstanceRole:\n
    \   Type: String\n    Default: NODE_INSTANCE_ROLE\n    Description: IAM role for
    Node group.\n\n  NodeImageId:\n    Type: String\n    Default: AMI_IMAGE_ID\n    Description:
    (Optional) Specify your own custom image ID. This value overrides any AWS Systems
    Manager Parameter Store value specified above.\n\n  NodeImageIdSSMParam:\n    Type:
    \"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\"\n    Default: /aws/service/eks/optimized-ami/1.17/amazon-linux-2/recommended/image_id\n
    \   Description: AWS Systems Manager Parameter Store parameter of the AMI ID for
    the worker node instances. Change this value to match the version of Kubernetes
    you are using.\n\n  DisableIMDSv1:\n    Type: String\n    Default: \"false\"\n    AllowedValues:\n
    \     - \"false\"\n      - \"true\"\n\n  NodeInstanceType:\n    Type: String\n    Default:
    NODEPOOL_INSTANCE_TYPE\n    AllowedValues:\n      - a1.medium\n      - a1.large\n
    \     - a1.xlarge\n      - a1.2xlarge\n      - a1.4xlarge\n      - c1.medium\n      -
    c1.xlarge\n      - c3.large\n      - c3.xlarge\n      - c3.2xlarge\n      - c3.4xlarge\n
    \     - c3.8xlarge\n      - c4.large\n      - c4.xlarge\n      - c4.2xlarge\n      -
    c4.4xlarge\n      - c4.8xlarge\n      - c5.large\n      - c5.xlarge\n      - c5.2xlarge\n
    \     - c5.4xlarge\n      - c5.9xlarge\n      - c5.12xlarge\n      - c5.18xlarge\n
    \     - c5.24xlarge\n      - c5.metal\n      - c5d.large\n      - c5d.xlarge\n      -
    c5d.2xlarge\n      - c5d.4xlarge\n      - c5d.9xlarge\n      - c5d.12xlarge\n      -
    c5d.18xlarge\n      - c5d.24xlarge\n      - c5d.metal\n      - c5n.large\n      -
    c5n.xlarge\n      - c5n.2xlarge\n      - c5n.4xlarge\n      - c5n.9xlarge\n      -
    c5n.18xlarge\n      - c6g.medium\n      - c6g.large\n      - c6g.xlarge\n      -
    c6g.2xlarge\n      - c6g.4xlarge\n      - c6g.8xlarge\n      - c6g.12xlarge\n      -
    c6g.16xlarge\n      - c6g.metal\n      - c6gd.medium\n      - c6gd.large\n      -
    c6gd.xlarge\n      - c6gd.2xlarge\n      - c6gd.4xlarge\n      - c6gd.8xlarge\n
    \     - c6gd.12xlarge\n      - c6gd.16xlarge\n      - c6gd.metal\n      - cc2.8xlarge\n
    \     - cr1.8xlarge\n      - d2.xlarge\n      - d2.2xlarge\n      - d2.4xlarge\n
    \     - d2.8xlarge\n      - f1.2xlarge\n      - f1.4xlarge\n      - f1.16xlarge\n
    \     - g2.2xlarge\n      - g2.8xlarge\n      - g3s.xlarge\n      - g3.4xlarge\n
    \     - g3.8xlarge\n      - g3.16xlarge\n      - h1.2xlarge\n      - h1.4xlarge\n
    \     - h1.8xlarge\n      - h1.16xlarge\n      - hs1.8xlarge\n      - i2.xlarge\n
    \     - i2.2xlarge\n      - i2.4xlarge\n      - i2.8xlarge\n      - i3.large\n      -
    i3.xlarge\n      - i3.2xlarge\n      - i3.4xlarge\n      - i3.8xlarge\n      - i3.16xlarge\n
    \     - i3.metal\n      - i3en.large\n      - i3en.xlarge\n      - i3en.2xlarge\n
    \     - i3en.3xlarge\n      - i3en.6xlarge\n      - i3en.12xlarge\n      - i3en.24xlarge\n
    \     - inf1.xlarge\n      - inf1.2xlarge\n      - inf1.6xlarge\n      - inf1.24xlarge\n
    \     - m1.small\n      - m1.medium\n      - m1.large\n      - m1.xlarge\n      -
    m2.xlarge\n      - m2.2xlarge\n      - m2.4xlarge\n      - m3.medium\n      - m3.large\n
    \     - m3.xlarge\n      - m3.2xlarge\n      - m4.large\n      - m4.xlarge\n      -
    m4.2xlarge\n      - m4.4xlarge\n      - m4.10xlarge\n      - m4.16xlarge\n      -
    m5.large\n      - m5.xlarge\n      - m5.2xlarge\n      - m5.4xlarge\n      - m5.8xlarge\n
    \     - m5.12xlarge\n      - m5.16xlarge\n      - m5.24xlarge\n      - m5.metal\n
    \     - m5a.large\n      - m5a.xlarge\n      - m5a.2xlarge\n      - m5a.4xlarge\n
    \     - m5a.8xlarge\n      - m5a.12xlarge\n      - m5a.16xlarge\n      - m5a.24xlarge\n
    \     - m5ad.large\n      - m5ad.xlarge\n      - m5ad.2xlarge\n      - m5ad.4xlarge\n
    \     - m5ad.12xlarge\n      - m5ad.24xlarge\n      - m5d.large\n      - m5d.xlarge\n
    \     - m5d.2xlarge\n      - m5d.4xlarge\n      - m5d.8xlarge\n      - m5d.12xlarge\n
    \     - m5d.16xlarge\n      - m5d.24xlarge\n      - m5d.metal\n      - m5dn.large\n
    \     - m5dn.xlarge\n      - m5dn.2xlarge\n      - m5dn.4xlarge\n      - m5dn.8xlarge\n
    \     - m5dn.12xlarge\n      - m5dn.16xlarge\n      - m5dn.24xlarge\n      - m5n.large\n
    \     - m5n.xlarge\n      - m5n.2xlarge\n      - m5n.4xlarge\n      - m5n.8xlarge\n
    \     - m5n.12xlarge\n      - m5n.16xlarge\n      - m5n.24xlarge\n      - m6g.medium\n
    \     - m6g.large\n      - m6g.xlarge\n      - m6g.2xlarge\n      - m6g.4xlarge\n
    \     - m6g.8xlarge\n      - m6g.12xlarge\n      - m6g.16xlarge\n      - m6g.metal\n
    \     - m6gd.medium\n      - m6gd.large\n      - m6gd.xlarge\n      - m6gd.2xlarge\n
    \     - m6gd.4xlarge\n      - m6gd.8xlarge\n      - m6gd.12xlarge\n      - m6gd.16xlarge\n
    \     - m6gd.metal\n      - p2.xlarge\n      - p2.8xlarge\n      - p2.16xlarge\n
    \     - p3.2xlarge\n      - p3.8xlarge\n      - p3.16xlarge\n      - p3dn.24xlarge\n
    \     - g4dn.xlarge\n      - g4dn.2xlarge\n      - g4dn.4xlarge\n      - g4dn.8xlarge\n
    \     - g4dn.12xlarge\n      - g4dn.16xlarge\n      - g4dn.metal\n      - r3.large\n
    \     - r3.xlarge\n      - r3.2xlarge\n      - r3.4xlarge\n      - r3.8xlarge\n
    \     - r4.large\n      - r4.xlarge\n      - r4.2xlarge\n      - r4.4xlarge\n      -
    r4.8xlarge\n      - r4.16xlarge\n      - r5.large\n      - r5.xlarge\n      - r5.2xlarge\n
    \     - r5.4xlarge\n      - r5.8xlarge\n      - r5.12xlarge\n      - r5.16xlarge\n
    \     - r5.24xlarge\n      - r5.metal\n      - r5a.large\n      - r5a.xlarge\n      -
    r5a.2xlarge\n      - r5a.4xlarge\n      - r5a.8xlarge\n      - r5a.12xlarge\n      -
    r5a.16xlarge\n      - r5a.24xlarge\n      - r5ad.large\n      - r5ad.xlarge\n      -
    r5ad.2xlarge\n      - r5ad.4xlarge\n      - r5ad.12xlarge\n      - r5ad.24xlarge\n
    \     - r5d.large\n      - r5d.xlarge\n      - r5d.2xlarge\n      - r5d.4xlarge\n
    \     - r5d.8xlarge\n      - r5d.12xlarge\n      - r5d.16xlarge\n      - r5d.24xlarge\n
    \     - r5d.metal\n      - r5dn.large\n      - r5dn.xlarge\n      - r5dn.2xlarge\n
    \     - r5dn.4xlarge\n      - r5dn.8xlarge\n      - r5dn.12xlarge\n      - r5dn.16xlarge\n
    \     - r5dn.24xlarge\n      - r5n.large\n      - r5n.xlarge\n      - r5n.2xlarge\n
    \     - r5n.4xlarge\n      - r5n.8xlarge\n      - r5n.12xlarge\n      - r5n.16xlarge\n
    \     - r5n.24xlarge\n      - r6g.medium\n      - r6g.large\n      - r6g.xlarge\n
    \     - r6g.2xlarge\n      - r6g.4xlarge\n      - r6g.8xlarge\n      - r6g.12xlarge\n
    \     - r6g.16xlarge\n      - r6g.metal\n      - r6gd.medium\n      - r6gd.large\n
    \     - r6gd.xlarge\n      - r6gd.2xlarge\n      - r6gd.4xlarge\n      - r6gd.8xlarge\n
    \     - r6gd.12xlarge\n      - r6gd.16xlarge\n      - r6gd.metal\n      - t1.micro\n
    \     - t2.nano\n      - t2.micro\n      - t2.small\n      - t2.medium\n      -
    t2.large\n      - t2.xlarge\n      - t2.2xlarge\n      - t3.nano\n      - t3.micro\n
    \     - t3.small\n      - t3.medium\n      - t3.large\n      - t3.xlarge\n      -
    t3.2xlarge\n      - t3a.nano\n      - t3a.micro\n      - t3a.small\n      - t3a.medium\n
    \     - t3a.large\n      - t3a.xlarge\n      - t3a.2xlarge\n      - u-6tb1.metal\n
    \     - u-9tb1.metal\n      - u-12tb1.metal\n      - x1.16xlarge\n      - x1.32xlarge\n
    \     - x1e.xlarge\n      - x1e.2xlarge\n      - x1e.4xlarge\n      - x1e.8xlarge\n
    \     - x1e.16xlarge\n      - x1e.32xlarge\n      - z1d.large\n      - z1d.xlarge\n
    \     - z1d.2xlarge\n      - z1d.3xlarge\n      - z1d.6xlarge\n      - z1d.12xlarge\n
    \     - z1d.metal\n    ConstraintDescription: Must be a valid EC2 instance type\n
    \   Description: EC2 instance type for the node instances\n\n  NodeVolumeSize:\n
    \   Type: Number\n    Default: NODE_DISK_SIZE\n    Description: Node volume size\n\n
    \ Subnets:\n    Type: \"CommaDelimitedList\"\n    Default: SUBNET01\n    Description:
    The subnets where workers can be created.\n\n  VpcId:\n    Type: \"AWS::EC2::VPC::Id\"\n
    \   Default: VPCID\n    Description: The VPC of the worker instances\n\nMappings:\n
    \ PartitionMap:\n    aws:\n      EC2ServicePrincipal: \"ec2.amazonaws.com\"\n    aws-us-gov:\n
    \     EC2ServicePrincipal: \"ec2.amazonaws.com\"\n    aws-cn:\n      EC2ServicePrincipal:
    \"ec2.amazonaws.com.cn\"\n    aws-iso:\n      EC2ServicePrincipal: \"ec2.c2s.ic.gov\"\n
    \   aws-iso-b:\n      EC2ServicePrincipal: \"ec2.sc2s.sgov.gov\"\n\nConditions:\n
    \ HasNodeImageId: !Not\n    - \"Fn::Equals\":\n      - !Ref NodeImageId\n      -
    \"\"\n\n  IMDSv1Disabled:\n    \"Fn::Equals\":\n      - !Ref DisableIMDSv1\n      -
    \"true\"\n\nResources:\n  NodeInstanceProfile:\n    Type: \"AWS::IAM::InstanceProfile\"\n
    \   Properties:\n      Path: /\n      Roles:\n        - !Ref NodeInstanceRole\n\n
    \ NodeSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n    Properties:\n      GroupDescription:
    Security group for all nodes in the cluster\n      Tags:\n        - Key: !Sub kubernetes.io/cluster/${ClusterName}\n
    \         Value: owned\n      VpcId: !Ref VpcId\n\n  NodeSecurityGroupIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow node to communicate with each other\n
    \     FromPort: 0\n      GroupId: !Ref NodeSecurityGroup\n      IpProtocol: \"-1\"\n
    \     SourceSecurityGroupId: !Ref NodeSecurityGroup\n      ToPort: 65535\n\n  ClusterControlPlaneSecurityGroupIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow pods to communicate with the cluster API
    Server\n      FromPort: 443\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: tcp\n      SourceSecurityGroupId: !Ref NodeSecurityGroup\n      ToPort:
    443\n\n  ControlPlaneEgressToNodeSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroupEgress\"\n
    \   DependsOn: NodeSecurityGroup\n    Properties:\n      Description: Allow the
    cluster control plane to communicate with worker Kubelet and pods\n      DestinationSecurityGroupId:
    !Ref NodeSecurityGroup\n      FromPort: 1025\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: tcp\n      ToPort: 65535\n\n  ControlPlaneEgressToNodeSecurityGroupOn443:\n
    \   Type: \"AWS::EC2::SecurityGroupEgress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow the cluster control plane to communicate
    with pods running extension API servers on port 443\n      DestinationSecurityGroupId:
    !Ref NodeSecurityGroup\n      FromPort: 443\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: tcp\n      ToPort: 443\n\n  NodeSecurityGroupFromControlPlaneIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow worker Kubelets and pods to receive communication
    from the cluster control plane\n      FromPort: 1025\n      GroupId: !Ref NodeSecurityGroup\n
    \     IpProtocol: tcp\n      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     ToPort: 65535\n\n  NodeSecurityGroupFromControlPlaneOn443Ingress:\n    Type:
    \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n    Properties:\n
    \     Description: Allow pods running extension API servers on port 443 to receive
    communication from cluster control plane\n      FromPort: 443\n      GroupId: !Ref
    NodeSecurityGroup\n      IpProtocol: tcp\n      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     ToPort: 443\n\n  NodeLaunchTemplate:\n    Type: \"AWS::EC2::LaunchTemplate\"\n
    \   Properties:\n      LaunchTemplateData:\n        BlockDeviceMappings:\n          -
    DeviceName: /dev/xvda\n            Ebs:\n              DeleteOnTermination: true\n
    \             VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2\n          -
    DeviceName: /dev/xvdf \n            Ebs:\n              DeleteOnTermination: true\n
    \             VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2 \n
    \         - DeviceName: /dev/xvdg \n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2
    \n          - DeviceName: /dev/xvdh \n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2
    \         \n        IamInstanceProfile:\n          Arn: !GetAtt NodeInstanceProfile.Arn\n
    \       ImageId: !If\n          - HasNodeImageId\n          - !Ref NodeImageId\n
    \         - !Ref NodeImageIdSSMParam\n        InstanceType: !Ref NodeInstanceType\n
    \       KeyName: !Ref KeyName\n        SecurityGroupIds:\n        - !Ref NodeSecurityGroup\n
    \       UserData: !Base64\n          \"Fn::Sub\": |\n            #!/bin/bash\n            set
    -o xtrace\n            sed -i '/allow-privileged\\=true\\ \\\\/d' /etc/eks/bootstrap.sh\n
    \           /etc/eks/bootstrap.sh ${ClusterName} --kubelet-extra-args --node-labels=nodePoolType=storidgeNodePool\n
    \           curl -fsSL ftp://download.storidge.com/pub/ce/cio-ce | sudo bash\n            /opt/aws/bin/cfn-signal
    --exit-code $? \\\n                     --stack  ${AWS::StackName} \\\n                     --resource
    NodeGroup  \\\n                     --region ${AWS::Region}   \n                     \n
    \           reboot\n        MetadataOptions:\n          HttpPutResponseHopLimit
    : 2\n          HttpEndpoint: enabled\n          HttpTokens: !If\n            - IMDSv1Disabled\n
    \           - required\n            - optional\n\n  NodeGroup:\n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n
    \   Properties:\n      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity\n
    \     LaunchTemplate:\n        LaunchTemplateId: !Ref NodeLaunchTemplate\n        Version:
    !GetAtt NodeLaunchTemplate.LatestVersionNumber\n      MaxSize: !Ref NodeAutoScalingGroupMaxSize\n
    \     MinSize: !Ref NodeAutoScalingGroupMinSize\n      Tags:\n        - Key: Name\n
    \         PropagateAtLaunch: true\n          Value: !Sub ${ClusterName}-${NodeGroupName}-Node\n
    \       - Key: !Sub kubernetes.io/cluster/${ClusterName}\n          PropagateAtLaunch:
    true\n          Value: owned\n      VPCZoneIdentifier: !Ref Subnets\n    CreationPolicy:\n
    \     ResourceSignal:\n        Count: !Ref NodeAutoScalingGroupDesiredCapacity\n
    \       Timeout: PT15M\n    UpdatePolicy:\n      AutoScalingRollingUpdate:\n        MaxBatchSize:
    1\n        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity\n        PauseTime:
    PT5M\n    \n  ASGLifecycleHookTerminate:\n    Type: AWS::AutoScaling::LifecycleHook\n
    \   DependsOn: NodeGroup\n    Properties:\n      AutoScalingGroupName: !Ref NodeGroup\n
    \     DefaultResult: \"CONTINUE\"\n      HeartbeatTimeout: 600\n      LifecycleHookName:
    \"Storidge-Remove-Node\"\n      LifecycleTransition: \"autoscaling:EC2_INSTANCE_TERMINATING\"\n
    \   \n  ASGLifecycleHookLaunch:\n    Type: AWS::AutoScaling::LifecycleHook\n    DependsOn:
    NodeGroup\n    Properties:\n      AutoScalingGroupName: !Ref NodeGroup\n      HeartbeatTimeout:
    1200\n      LifecycleHookName: \"Storidge-Add-Node\"\n      LifecycleTransition:
    \"autoscaling:EC2_INSTANCE_LAUNCHING\"\n\n  SSMdocument:\n    Type: 'AWS::SSM::Document'\n
    \   DependsOn: NodeGroup\n    Properties:\n      DocumentType: Automation\n      Content:\n
    \       schemaVersion: \"0.3\"\n        description: \"Create Storidge cluster with
    SSM Automation\"\n        # Role that is utilized to perform the steps within the
    Automation Document. In this case to be able to Signal CFN and Describe Instances.
    \n        assumeRole: \"{{AutomationAssumeRole}}\"\n        # Gathering parameters
    needed to configure DCs in the Quick Start\n        parameters:\n          Region:\n
    \           type: String\n            default: !Ref \"AWS::Region\"\n          AutomationAssumeRole:\n
    \           type: String\n            # TODO\n            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'
    \        \n          ASGName:\n            type: String\n            default: !Ref
    NodeGroup\n        mainSteps:\n          - name: Get_Token_Name\n            action:
    'aws:executeScript'\n            inputs:\n              Runtime: python3.6\n              Handler:
    script_handler\n              Script: |-\n                import time\n                import
    calendar        \n                def script_handler(events, context):\n                  print('Setting
    storidge token name')\n                  # print(events[\"parameter\"])\n                  token=str(calendar.timegm(time.gmtime()))\n
    \                 return {'token': token}\n            maxAttempts: 3\n            outputs:\n
    \             - Selector: $.Payload.token\n                Type: String\n                Name:
    token\n          - name: Get_ASG_Instances\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: AutoScaling\n              Api: DescribeAutoScalingGroups\n
    \             AutoScalingGroupNames:\n                - '{{ASGName}}'\n            maxAttempts:
    3\n            outputs:\n              - Selector: '$.AutoScalingGroups[0].Instances..InstanceId'\n
    \               Name: StorageNodes\n                Type: StringList\n              -
    Name: LeaderNode\n                Selector: '$.AutoScalingGroups[0].Instances[0].InstanceId'\n
    \               Type: String\n          - name: Tag_StorageNodes\n            action:
    'aws:createTags'\n            inputs:\n              ResourceType: EC2\n              ResourceIds:\n
    \               - '{{Get_ASG_Instances.StorageNodes}}'\n              Tags:\n                -
    Key: storidge_role\n                  Value: 'Storage-{{Get_Token_Name.token}}'\n
    \           maxAttempts: 3\n          - name: Tag_LeaderNode\n            action:
    'aws:createTags'\n            inputs:\n              ResourceType: EC2\n              ResourceIds:\n
    \               - '{{Get_ASG_Instances.LeaderNode}}'\n              Tags:\n                -
    Key: storidge_role\n                  Value: 'Leader-{{Get_Token_Name.token}}'\n
    \           maxAttempts: 3\n          - name: VerifyTags\n            action: 'aws:executeAwsApi'\n
    \           outputs:\n              - Selector: $.Reservations..Instances..InstanceId\n
    \               Name: out1\n                Type: StringList\n            inputs:\n
    \             Service: ec2\n              Api: DescribeInstances\n              Filters:\n
    \               - Name: tag-value\n                  Values:\n                    -
    Leader-{{Get_Token_Name.token}}\n                    - Storage-{{Get_Token_Name.token}}\n
    \         - name: Sleep\n            action: 'aws:sleep'\n            inputs:\n
    \             Duration: PT5M\n          - name: Create_Token\n            action:
    'aws:runCommand'\n            inputs:\n              DocumentName: AWS-RunShellScript\n
    \             Targets:\n                - Key: 'tag:storidge_role'\n                  Values:\n
    \                   - 'Leader-{{Get_Token_Name.token}}'\n              Parameters:\n
    \               commands:\n                  - '#!/bin/bash'\n                  -
    set -o pipefail\n                  - set -xe\n                  - ip=$(ec2metadata
    --local-ipv4)\n                  - token=$(cioctl create --ip $ip | grep \"cioctl
    join\")\n                  - if [ -z \"${token}\" ]; then echo \"ERROR:Token is
    not created\"; exit; fi\n                  - /snap/bin/aws ssm put-parameter --region
    {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --type SecureString
    --overwrite --value \"$token\"\n            maxAttempts: 1\n          - name: Join_Nodes\n
    \           action: 'aws:runCommand'\n            inputs:\n              DocumentName:
    AWS-RunShellScript\n              Targets:\n                - Key: 'tag:storidge_role'\n
    \                 Values:\n                    - 'Storage-{{Get_Token_Name.token}}'\n
    \             Parameters:\n                commands:\n                  - '#!/bin/bash'\n
    \                 - set -o pipefail\n                  - set -xe\n                  -
    ip=$(ec2metadata --local-ipv4)\n                  - STORIDGE_TOKEN=$(/snap/bin/aws
    ssm get-parameter --region {{ Region }}  --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token
    }}\" --with-decryption --query \"Parameter.Value\" --output text)\n                  -
    echo $STORIDGE_TOKEN\n                  - eval \"$STORIDGE_TOKEN --ip $ip\"\n            maxAttempts:
    1\n          - name: Initialize_Cluster\n            action: 'aws:runCommand'\n
    \           inputs:\n              DocumentName: AWS-RunShellScript\n              Targets:\n
    \               - Key: 'tag:storidge_role'\n                  Values:\n                    -
    'Leader-{{Get_Token_Name.token}}'\n              Parameters:\n                commands:\n
    \                 - '#!/bin/bash'\n                  - set -o pipefail\n                  -
    set -xe\n                  - STORIDGE_TOKEN=$(/snap/bin/aws ssm get-parameter --region
    {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --with-decryption
    --query ''Parameter.Value'' --output text)\n                  - echo $STORIDGE_TOKEN\n
    \                 - cioctl init `echo $STORIDGE_TOKEN | cut -d'-' -f2`\n                  -
    cio node ls | grep -v \"Error\"\n                  - /snap/bin/aws ssm delete-parameter
    --region {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" \n            maxAttempts:
    1\n          - name: Tag_Node\n            action: 'aws:createTags'\n            inputs:\n
    \             ResourceType: EC2\n              ResourceIds:\n                - '{{Get_ASG_Instances.LeaderNode}}'\n
    \               - '{{Get_ASG_Instances.StorageNodes}}'\n              Tags:\n                -
    Value: ready\n                  Key: node_status\n\n  SSMDocumentAddNode:\n    Type:
    'AWS::SSM::Document'\n    DependsOn: NodeGroup\n    Properties:\n      DocumentType:
    Automation\n      Content:\n        description: Add a new node to Storidge cluster\n
    \       schemaVersion: '0.3'\n        assumeRole: '{{AutomationAssumeRole}}'\n        parameters:\n
    \         AutomationAssumeRole:\n            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n
    \           type: String\n          ASGName:\n            default: test22-vv1-NodeGroup-1TMPAZMFBWHSE\n
    \           type: String\n          Region:\n            default: !Ref \"AWS::Region\"\n
    \           type: String\n          InstanceId:\n            type: String\n          LCHName:\n
    \           type: String\n          SSMDocumentName:\n            type: String\n
    \       mainSteps:\n          - name: GetRunningAutomation\n            action:
    'aws:executeAwsApi'\n            inputs:\n              Service: ssm\n              Api:
    describe_automation_executions\n              Filters:\n                - Key: DocumentNamePrefix\n
    \                 Values:\n                    - '{{SSMDocumentName}}'\n                -
    Key: ExecutionStatus\n                  Values:\n                    - InProgress\n
    \                   - Waiting\n                    - Pending\n            outputs:\n
    \             - Name: ExecutionStatus\n                Selector: AutomationExecutionMetadataList..AutomationExecutionStatus\n
    \               Type: StringList\n              - Name: ExecutionIds\n                Selector:
    AutomationExecutionMetadataList..AutomationExecutionId\n                Type: StringList
    \  \n          - name: GetExecutionCount\n            action: 'aws:executeScript'\n
    \           inputs:\n              Runtime: python3.6\n              Handler: script_handler\n
    \             Script: |-\n                def script_handler(events, context):\n
    \                 print(events[\"ExecutionIds\"])\n                  events[\"ExecutionIds\"].pop(0)\n
    \                 if len(events[\"ExecutionIds\"]) != 0:\n                    return
    {'ExecutionIds': events[\"ExecutionIds\"], 'ExecutionLen': len(events[\"ExecutionIds\"])
    }\n                  return {'ExecutionLen': 0}\n              InputPayload:\n                ExecutionIds:
    '{{ GetRunningAutomation.ExecutionIds}}'\n            outputs:\n              -
    Name: ExecutionIds\n                Selector: $.Payload.ExecutionIds\n                Type:
    StringList\n              - Name: ExecutionLen\n                Selector: $.Payload.ExecutionLen\n
    \               Type: Integer\n          - name: CheckExecutionLength\n            action:
    'aws:branch'\n            inputs:\n              Choices:\n                - NextStep:
    WaitToCompleteRunningExecutions\n                  Variable: '{{GetExecutionCount.ExecutionLen}}'\n
    \                 NumericGreater: 0\n              Default: Sleep\n          - name:
    WaitToCompleteRunningExecutions\n            action: 'aws:waitForAwsResourceProperty'\n
    \           inputs:\n              Service: ssm\n              Api: describe_automation_executions\n
    \             PropertySelector: AutomationExecutionMetadataList..AutomationExecutionStatus\n
    \             DesiredValues:\n                - Success\n                - TimedOut\n
    \               - Cancelling\n                - Cancelled\n                - Failed\n
    \             Filters:\n                - Key: DocumentNamePrefix\n                  Values:\n
    \                   - '{{SSMDocumentName}}'\n                - Key: ExecutionId\n
    \                 Values:\n                    - '{{GetExecutionCount.ExecutionIds}}'\n
    \           timeoutSeconds: 600   \n          - name: Sleep\n            action:
    'aws:sleep'\n            inputs:\n              Duration: PT5M    \n          -
    outputs:\n              - Type: String\n                Selector: $.Payload.token\n
    \               Name: token\n            inputs:\n              Script: |-\n                import
    time\n                import calendar                \n\n                def script_handler(events,
    context):\n                  print('Setting storidge token name')\n                  #
    print(events[\"parameter\"])\n                  token=str(calendar.timegm(time.gmtime()))\n
    \                 return {'token': token}\n              Runtime: python3.6\n              Handler:
    script_handler\n            name: Get_Token_Name\n            action: 'aws:executeScript'\n
    \           maxAttempts: 2\n          - name: GetStoridgeNode\n            action:
    'aws:executeAwsApi'\n            outputs:\n              - Selector: $.Reservations[0].Instances[0].InstanceId\n
    \               Name: NodeId\n                Type: String\n            inputs:\n
    \             Service: ec2\n              Api: DescribeInstances\n              Filters:\n
    \               - Name: 'tag:aws:autoscaling:groupName'\n                  Values:\n
    \                   - '{{ASGName}}'\n                - Name: 'tag:node_status'\n
    \                 Values:\n                    - ready\n                - Name:
    instance-state-name\n                  Values:\n                    - running\n
    \         - inputs:\n              Parameters:\n                commands:\n                  -
    '#!/bin/bash'\n                  - set -o pipefail\n                  - set -xe\n
    \                 - ip=$(ec2metadata --local-ipv4)\n                  - token=$(sudo
    cioctl join-token)\n                  - if [ -z \"${token}\" ]; then echo \"ERROR:Token
    is not created\"; exit; fi\n                  - echo $token\n                  -
    '/snap/bin/aws ssm put-parameter --region {{ Region }} --name \"STORIDGE_TOKEN_{{
    Get_Token_Name.token }}\" --type SecureString --overwrite --value \"$token\"'\n
    \             DocumentName: AWS-RunShellScript\n              InstanceIds:\n                -
    '{{GetStoridgeNode.NodeId}}'\n            name: Create_Token\n            action:
    'aws:runCommand'\n            maxAttempts: 1\n          - inputs:\n              Parameters:\n
    \               commands:\n                  - '#!/bin/bash'\n                  -
    set -o pipefail\n                  - set -xe\n                  - ip=$(ec2metadata
    --local-ipv4)\n                  - 'STORIDGE_TOKEN=$(/snap/bin/aws ssm get-parameter
    --region {{ Region }}  --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" --with-decryption
    --query \"Parameter.Value\" --output text)'\n                  - echo $STORIDGE_TOKEN\n
    \                 - eval \"$STORIDGE_TOKEN --ip $ip\"\n                  - sleep
    2m\n                  - cio node ls\n                  - /snap/bin/aws ssm delete-parameter
    --region {{ Region }} --name \"STORIDGE_TOKEN_{{ Get_Token_Name.token }}\" \n              DocumentName:
    AWS-RunShellScript\n              InstanceIds:\n                - '{{InstanceId}}'\n
    \           name: Add_Node\n            action: 'aws:runCommand'\n            maxAttempts:
    1\n          - name: CompleteLifecycleAction_Launch\n            action: 'aws:executeAwsApi'\n
    \           inputs:\n              Service: autoscaling\n              Api: CompleteLifecycleAction\n
    \             LifecycleActionResult: CONTINUE\n              LifecycleHookName:
    '{{ LCHName }}'\n              AutoScalingGroupName: '{{ ASGName }}'\n              InstanceId:
    '{{ InstanceId }}'\n            maxAttempts: 3\n          - name: Tag_Node\n            action:
    'aws:createTags'\n            inputs:\n              ResourceType: EC2\n              ResourceIds:\n
    \               - '{{ InstanceId }}'\n              Tags:\n                - Value:
    ready\n                  Key: node_status\n\n  SSMDocumentRemoveNode:\n    Type:
    'AWS::SSM::Document'\n    DependsOn: NodeGroup\n    Properties:\n      DocumentType:
    Automation\n      Content:\n        description: Remove node from storidge cluster\n
    \       schemaVersion: '0.3'\n        assumeRole: '{{AutomationAssumeRole}}'\n        parameters:\n
    \         AutomationAssumeRole:\n            type: String\n          ASGName:\n
    \           default: test22-vv1-NodeGroup-1TMPAZMFBWHSE\n            type: String\n
    \         InstanceId:\n            type: String\n          LCHName:\n            type:
    String\n        mainSteps:\n          - name: Remove_Node\n            action: 'aws:runCommand'\n
    \           inputs:\n              DocumentName: AWS-RunShellScript\n              InstanceIds:\n
    \               - '{{InstanceId}}'\n              Parameters:\n                commands:\n
    \                 - '#!/bin/bash'\n                  - set -o pipefail\n                  -
    set -xe\n                  - cio node ls\n                  - cioctl node remove\n
    \           maxAttempts: 1\n          - name: CompleteLifecycleAction_Terminate\n
    \           action: 'aws:executeAwsApi'\n            inputs:\n              Service:
    autoscaling\n              Api: CompleteLifecycleAction\n              LifecycleActionResult:
    CONTINUE\n              LifecycleHookName: '{{ LCHName }}'\n              AutoScalingGroupName:
    '{{ ASGName }}'\n              InstanceId: '{{ InstanceId }}'\n            maxAttempts:
    3      \n\n  CloudWatchEventRuleLaunchNode:\n    Type: AWS::Events::Rule\n    DependsOn:
    SSMDocumentAddNode\n    Properties:\n      Description: \"Event rule to add a new
    node to storidge cluster\"\n      EventPattern:\n        source:\n          - \"aws.autoscaling\"\n
    \       detail-type:\n          - \"EC2 Instance-launch Lifecycle Action\"\n        detail:\n
    \         AutoScalingGroupName:\n            - !Ref NodeGroup    \n      Name: !Join
    [ \"\", [\"Launch_\", !Ref NodeGroup ] ] \n      State: \"ENABLED\"\n      Targets:\n
    \       - \n          Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMDocumentAddNode}:$DEFAULT'\n
    \         Id: \"CallSSMDocumentAddNode\"\n          # TODO\n          RoleArn: !Sub
    'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n          InputTransformer:\n
    \           InputPathsMap:\n              asgname: \"$.detail.AutoScalingGroupName\"\n
    \             instanceid: \"$.detail.EC2InstanceId\"\n              lchname: \"$.detail.LifecycleHookName\"\n
    \          # TODO\n            InputTemplate: !Sub '{\"InstanceId\":[<instanceid>],\"ASGName\":[<asgname>],\"LCHName\":[<lchname>],\"AutomationAssumeRole\":[\"arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}\"],\"SSMDocumentName\":[\"${SSMDocumentAddNode}\"]}'\n\n
    \ CloudWatchEventRuleTerminateNode:\n    Type: AWS::Events::Rule\n    DependsOn:
    SSMDocumentRemoveNode\n    Properties:\n      Description: \"Event rule to remove
    node from storidge cluster\"\n      EventPattern:\n        source:\n          -
    \"aws.autoscaling\"\n        detail-type:\n          - \"EC2 Instance-terminate
    Lifecycle Action\"\n        detail:\n          AutoScalingGroupName:\n            -
    !Ref NodeGroup    \n      Name: !Join [ \"\", [\"Terminate_\", !Ref NodeGroup ]
    ] \n      State: \"ENABLED\"\n      Targets:\n        - \n          Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMDocumentRemoveNode}:$DEFAULT'\n
    \         Id: \"CallSSMDocumentRemoveNode\"\n          # TODO\n          RoleArn:
    !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}'\n          InputTransformer:\n
    \           InputPathsMap:\n              asgname: \"$.detail.AutoScalingGroupName\"\n
    \             instanceid: \"$.detail.EC2InstanceId\"\n              lchname: \"$.detail.LifecycleHookName\"\n
    \             # TODO\n            InputTemplate: !Sub '{\"InstanceId\":[<instanceid>],\"ASGName\":[<asgname>],\"LCHName\":[<lchname>],\"AutomationAssumeRole\":[\"arn:aws:iam::${AWS::AccountId}:role/${NodeInstanceRole}\"]}'\n\nOutputs:\n\n
    \ NodeSecurityGroup:\n    Description: The security group for the node group\n    Value:
    !Ref NodeSecurityGroup\n\n  NodeAutoScalingGroup:\n    Description: The autoscaling
    group\n    Value: !Ref NodeGroup\n    \n  SSMDocument:\n    Description: SSM document
    name\n    Value: !Ref SSMdocument"
  nodegroup.yaml: "AWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: Amazon EKS
    - Node Group\n\nMetadata:\n  \"AWS::CloudFormation::Interface\":\n    ParameterGroups:\n
    \     - Label:\n          default: EKS Cluster\n        Parameters:\n          -
    ClusterName\n          - ClusterControlPlaneSecurityGroup\n      - Label:\n          default:
    Worker Node Configuration\n        Parameters:\n          - NodeGroupName\n          -
    NodeAutoScalingGroupMinSize\n          - NodeAutoScalingGroupDesiredCapacity\n          -
    NodeAutoScalingGroupMaxSize\n          - NodeInstanceType\n          - NodeImageIdSSMParam\n
    \         - NodeImageId\n          - NodeVolumeSize\n          - KeyName\n          -
    BootstrapArguments\n          - DisableIMDSv1\n      - Label:\n          default:
    Worker Network Configuration\n        Parameters:\n          - VpcId\n          -
    Subnets\n          - NodeInstanceRole\n\nParameters:\n  BootstrapArguments:\n    Type:
    String\n    Default: \"\"\n    Description: \"Arguments to pass to the bootstrap
    script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami\"\n\n
    \ ClusterControlPlaneSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup::Id\"\n
    \   Default: CLUSTER_SG\n    Description: The security group of the cluster control
    plane.\n\n  ClusterName:\n    Type: String\n    Default: CLUSTER_NAME\n    Description:
    The cluster name provided when the cluster was created. If it is incorrect, nodes
    will not be able to join the cluster.\n\n  KeyName:\n    Type: \"AWS::EC2::KeyPair::KeyName\"\n
    \   Default: KEY_NAME\n    Description: The EC2 Key Pair to allow SSH access to
    the instances\n\n  NodeAutoScalingGroupDesiredCapacity:\n    Type: Number\n    Default:
    ASG_DESIRED_CAPACITY\n    Description: Desired capacity of Node Group ASG.\n\n  NodeAutoScalingGroupMaxSize:\n
    \   Type: Number\n    Default: ASG_MAXSIZE\n    Description: Maximum size of Node
    Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.\n\n
    \ NodeAutoScalingGroupMinSize:\n    Type: Number\n    Default: ASG_MINSIZE\n    Description:
    Minimum size of Node Group ASG.\n\n  NodeGroupName:\n    Type: String\n    Default:
    NODEGROUP_NAME\n    Description: Unique identifier for the Node Group.\n\n  NodeImageId:\n
    \   Type: String\n    Default: AMI_IMAGE_ID\n    Description: (Optional) Specify
    your own custom image ID. This value overrides any AWS Systems Manager Parameter
    Store value specified above.\n\n  NodeImageIdSSMParam:\n    Type: \"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\"\n
    \   Default: /aws/service/eks/optimized-ami/1.17/amazon-linux-2/recommended/image_id\n
    \   Description: AWS Systems Manager Parameter Store parameter of the AMI ID for
    the worker node instances. Change this value to match the version of Kubernetes
    you are using.\n\n  DisableIMDSv1:\n    Type: String\n    Default: \"false\"\n    AllowedValues:\n
    \     - \"false\"\n      - \"true\"\n\n  NodeInstanceType:\n    Type: String\n    Default:
    NODEPOOL_INSTANCE_TYPE\n    AllowedValues:\n      - a1.medium\n      - a1.large\n
    \     - a1.xlarge\n      - a1.2xlarge\n      - a1.4xlarge\n      - c1.medium\n      -
    c1.xlarge\n      - c3.large\n      - c3.xlarge\n      - c3.2xlarge\n      - c3.4xlarge\n
    \     - c3.8xlarge\n      - c4.large\n      - c4.xlarge\n      - c4.2xlarge\n      -
    c4.4xlarge\n      - c4.8xlarge\n      - c5.large\n      - c5.xlarge\n      - c5.2xlarge\n
    \     - c5.4xlarge\n      - c5.9xlarge\n      - c5.12xlarge\n      - c5.18xlarge\n
    \     - c5.24xlarge\n      - c5.metal\n      - c5d.large\n      - c5d.xlarge\n      -
    c5d.2xlarge\n      - c5d.4xlarge\n      - c5d.9xlarge\n      - c5d.12xlarge\n      -
    c5d.18xlarge\n      - c5d.24xlarge\n      - c5d.metal\n      - c5n.large\n      -
    c5n.xlarge\n      - c5n.2xlarge\n      - c5n.4xlarge\n      - c5n.9xlarge\n      -
    c5n.18xlarge\n      - c6g.medium\n      - c6g.large\n      - c6g.xlarge\n      -
    c6g.2xlarge\n      - c6g.4xlarge\n      - c6g.8xlarge\n      - c6g.12xlarge\n      -
    c6g.16xlarge\n      - c6g.metal\n      - c6gd.medium\n      - c6gd.large\n      -
    c6gd.xlarge\n      - c6gd.2xlarge\n      - c6gd.4xlarge\n      - c6gd.8xlarge\n
    \     - c6gd.12xlarge\n      - c6gd.16xlarge\n      - c6gd.metal\n      - cc2.8xlarge\n
    \     - cr1.8xlarge\n      - d2.xlarge\n      - d2.2xlarge\n      - d2.4xlarge\n
    \     - d2.8xlarge\n      - f1.2xlarge\n      - f1.4xlarge\n      - f1.16xlarge\n
    \     - g2.2xlarge\n      - g2.8xlarge\n      - g3s.xlarge\n      - g3.4xlarge\n
    \     - g3.8xlarge\n      - g3.16xlarge\n      - h1.2xlarge\n      - h1.4xlarge\n
    \     - h1.8xlarge\n      - h1.16xlarge\n      - hs1.8xlarge\n      - i2.xlarge\n
    \     - i2.2xlarge\n      - i2.4xlarge\n      - i2.8xlarge\n      - i3.large\n      -
    i3.xlarge\n      - i3.2xlarge\n      - i3.4xlarge\n      - i3.8xlarge\n      - i3.16xlarge\n
    \     - i3.metal\n      - i3en.large\n      - i3en.xlarge\n      - i3en.2xlarge\n
    \     - i3en.3xlarge\n      - i3en.6xlarge\n      - i3en.12xlarge\n      - i3en.24xlarge\n
    \     - inf1.xlarge\n      - inf1.2xlarge\n      - inf1.6xlarge\n      - inf1.24xlarge\n
    \     - m1.small\n      - m1.medium\n      - m1.large\n      - m1.xlarge\n      -
    m2.xlarge\n      - m2.2xlarge\n      - m2.4xlarge\n      - m3.medium\n      - m3.large\n
    \     - m3.xlarge\n      - m3.2xlarge\n      - m4.large\n      - m4.xlarge\n      -
    m4.2xlarge\n      - m4.4xlarge\n      - m4.10xlarge\n      - m4.16xlarge\n      -
    m5.large\n      - m5.xlarge\n      - m5.2xlarge\n      - m5.4xlarge\n      - m5.8xlarge\n
    \     - m5.12xlarge\n      - m5.16xlarge\n      - m5.24xlarge\n      - m5.metal\n
    \     - m5a.large\n      - m5a.xlarge\n      - m5a.2xlarge\n      - m5a.4xlarge\n
    \     - m5a.8xlarge\n      - m5a.12xlarge\n      - m5a.16xlarge\n      - m5a.24xlarge\n
    \     - m5ad.large\n      - m5ad.xlarge\n      - m5ad.2xlarge\n      - m5ad.4xlarge\n
    \     - m5ad.12xlarge\n      - m5ad.24xlarge\n      - m5d.large\n      - m5d.xlarge\n
    \     - m5d.2xlarge\n      - m5d.4xlarge\n      - m5d.8xlarge\n      - m5d.12xlarge\n
    \     - m5d.16xlarge\n      - m5d.24xlarge\n      - m5d.metal\n      - m5dn.large\n
    \     - m5dn.xlarge\n      - m5dn.2xlarge\n      - m5dn.4xlarge\n      - m5dn.8xlarge\n
    \     - m5dn.12xlarge\n      - m5dn.16xlarge\n      - m5dn.24xlarge\n      - m5n.large\n
    \     - m5n.xlarge\n      - m5n.2xlarge\n      - m5n.4xlarge\n      - m5n.8xlarge\n
    \     - m5n.12xlarge\n      - m5n.16xlarge\n      - m5n.24xlarge\n      - m6g.medium\n
    \     - m6g.large\n      - m6g.xlarge\n      - m6g.2xlarge\n      - m6g.4xlarge\n
    \     - m6g.8xlarge\n      - m6g.12xlarge\n      - m6g.16xlarge\n      - m6g.metal\n
    \     - m6gd.medium\n      - m6gd.large\n      - m6gd.xlarge\n      - m6gd.2xlarge\n
    \     - m6gd.4xlarge\n      - m6gd.8xlarge\n      - m6gd.12xlarge\n      - m6gd.16xlarge\n
    \     - m6gd.metal\n      - p2.xlarge\n      - p2.8xlarge\n      - p2.16xlarge\n
    \     - p3.2xlarge\n      - p3.8xlarge\n      - p3.16xlarge\n      - p3dn.24xlarge\n
    \     - g4dn.xlarge\n      - g4dn.2xlarge\n      - g4dn.4xlarge\n      - g4dn.8xlarge\n
    \     - g4dn.12xlarge\n      - g4dn.16xlarge\n      - g4dn.metal\n      - r3.large\n
    \     - r3.xlarge\n      - r3.2xlarge\n      - r3.4xlarge\n      - r3.8xlarge\n
    \     - r4.large\n      - r4.xlarge\n      - r4.2xlarge\n      - r4.4xlarge\n      -
    r4.8xlarge\n      - r4.16xlarge\n      - r5.large\n      - r5.xlarge\n      - r5.2xlarge\n
    \     - r5.4xlarge\n      - r5.8xlarge\n      - r5.12xlarge\n      - r5.16xlarge\n
    \     - r5.24xlarge\n      - r5.metal\n      - r5a.large\n      - r5a.xlarge\n      -
    r5a.2xlarge\n      - r5a.4xlarge\n      - r5a.8xlarge\n      - r5a.12xlarge\n      -
    r5a.16xlarge\n      - r5a.24xlarge\n      - r5ad.large\n      - r5ad.xlarge\n      -
    r5ad.2xlarge\n      - r5ad.4xlarge\n      - r5ad.12xlarge\n      - r5ad.24xlarge\n
    \     - r5d.large\n      - r5d.xlarge\n      - r5d.2xlarge\n      - r5d.4xlarge\n
    \     - r5d.8xlarge\n      - r5d.12xlarge\n      - r5d.16xlarge\n      - r5d.24xlarge\n
    \     - r5d.metal\n      - r5dn.large\n      - r5dn.xlarge\n      - r5dn.2xlarge\n
    \     - r5dn.4xlarge\n      - r5dn.8xlarge\n      - r5dn.12xlarge\n      - r5dn.16xlarge\n
    \     - r5dn.24xlarge\n      - r5n.large\n      - r5n.xlarge\n      - r5n.2xlarge\n
    \     - r5n.4xlarge\n      - r5n.8xlarge\n      - r5n.12xlarge\n      - r5n.16xlarge\n
    \     - r5n.24xlarge\n      - r6g.medium\n      - r6g.large\n      - r6g.xlarge\n
    \     - r6g.2xlarge\n      - r6g.4xlarge\n      - r6g.8xlarge\n      - r6g.12xlarge\n
    \     - r6g.16xlarge\n      - r6g.metal\n      - r6gd.medium\n      - r6gd.large\n
    \     - r6gd.xlarge\n      - r6gd.2xlarge\n      - r6gd.4xlarge\n      - r6gd.8xlarge\n
    \     - r6gd.12xlarge\n      - r6gd.16xlarge\n      - r6gd.metal\n      - t1.micro\n
    \     - t2.nano\n      - t2.micro\n      - t2.small\n      - t2.medium\n      -
    t2.large\n      - t2.xlarge\n      - t2.2xlarge\n      - t3.nano\n      - t3.micro\n
    \     - t3.small\n      - t3.medium\n      - t3.large\n      - t3.xlarge\n      -
    t3.2xlarge\n      - t3a.nano\n      - t3a.micro\n      - t3a.small\n      - t3a.medium\n
    \     - t3a.large\n      - t3a.xlarge\n      - t3a.2xlarge\n      - u-6tb1.metal\n
    \     - u-9tb1.metal\n      - u-12tb1.metal\n      - x1.16xlarge\n      - x1.32xlarge\n
    \     - x1e.xlarge\n      - x1e.2xlarge\n      - x1e.4xlarge\n      - x1e.8xlarge\n
    \     - x1e.16xlarge\n      - x1e.32xlarge\n      - z1d.large\n      - z1d.xlarge\n
    \     - z1d.2xlarge\n      - z1d.3xlarge\n      - z1d.6xlarge\n      - z1d.12xlarge\n
    \     - z1d.metal\n    ConstraintDescription: Must be a valid EC2 instance type\n
    \   Description: EC2 instance type for the node instances\n\n  NodeVolumeSize:\n
    \   Type: Number\n    Default: NODE_DISK_SIZE\n    Description: Node volume size\n\n
    \ Subnets:\n    Type: \"CommaDelimitedList\"\n    Default: SUBNET01\n    Description:
    The subnets where workers can be created.\n\n  VpcId:\n    Type: \"AWS::EC2::VPC::Id\"\n
    \   Default: VPCID\n    Description: The VPC of the worker instances\n\n  NodeInstanceRole:\n
    \   Type: String\n    Default: NODE_INSTANCE_ROLE   \n    Description: The node
    instance role of the worker instances                          \n\nMappings:\n  PartitionMap:\n
    \   aws:\n      EC2ServicePrincipal: \"ec2.amazonaws.com\"\n    aws-us-gov:\n      EC2ServicePrincipal:
    \"ec2.amazonaws.com\"\n    aws-cn:\n      EC2ServicePrincipal: \"ec2.amazonaws.com.cn\"\n
    \   aws-iso:\n      EC2ServicePrincipal: \"ec2.c2s.ic.gov\"\n    aws-iso-b:\n      EC2ServicePrincipal:
    \"ec2.sc2s.sgov.gov\"\n\nConditions:\n  HasNodeImageId: !Not\n    - \"Fn::Equals\":\n
    \     - !Ref NodeImageId\n      - \"\"\n\n  IMDSv1Disabled:\n    \"Fn::Equals\":\n
    \     - !Ref DisableIMDSv1\n      - \"true\"\n\nResources:\n  NodeInstanceProfile:\n
    \   Type: \"AWS::IAM::InstanceProfile\"\n    Properties:\n      Path: /\n      Roles:
    \n        - !Ref NodeInstanceRole\n\n  NodeSecurityGroup:\n    Type: \"AWS::EC2::SecurityGroup\"\n
    \   Properties:\n      GroupDescription: Security group for all nodes in the cluster\n
    \     Tags:\n        - Key: !Sub kubernetes.io/cluster/${ClusterName}\n          Value:
    owned\n      VpcId: !Ref VpcId\n\n  NodeSecurityGroupIngress:\n    Type: \"AWS::EC2::SecurityGroupIngress\"\n
    \   DependsOn: NodeSecurityGroup\n    Properties:\n      Description: Allow node
    to communicate with each other\n      FromPort: 0\n      GroupId: !Ref NodeSecurityGroup\n
    \     IpProtocol: \"-1\"\n      SourceSecurityGroupId: !Ref NodeSecurityGroup\n
    \     ToPort: 65535\n\n  ClusterControlPlaneToNodeSecurityGroupIngress:\n    Type:
    \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n    Properties:\n
    \     Description: Allow pods to communicate with the cluster API Server\n      FromPort:
    0\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n      IpProtocol: \"-1\"\n
    \     SourceSecurityGroupId: !Ref NodeSecurityGroup\n      ToPort: 65535\n\n  ClusterControlPlaneSecurityGroupIngress:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow pods to communicate with the cluster API
    Server1\n      FromPort: 0\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: \"-1\"\n      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     ToPort: 65535\n\n  ClusterControlPlaneEgressToNodeSecurityGroup:\n    Type:
    \"AWS::EC2::SecurityGroupEgress\"\n    DependsOn: NodeSecurityGroup\n    Properties:\n
    \     Description: Allow the cluster control plane to communicate with worker Kubelet
    and pods\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n      CidrIp: 0.0.0.0/0\n
    \     FromPort: 0\n      IpProtocol: \"-1\"\n      ToPort: 65535\n\n  ClusterControlPlaneIngressForStoridgeAPIOn8282:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow goPaddle/User to access the Storidge API
    on 8282\n      FromPort: 8282\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n
    \     IpProtocol: tcp\n      CidrIp: 0.0.0.0/0\n      ToPort: 8282\n\n  ClusterControlPlaneIngressForGrafanaOn32000:\n
    \   Type: \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: NodeSecurityGroup\n
    \   Properties:\n      Description: Allow users to access the Grafana on 32000\n
    \     FromPort: 32000\n      GroupId: !Ref ClusterControlPlaneSecurityGroup\n      IpProtocol:
    tcp\n      CidrIp: 0.0.0.0/0\n      ToPort: 32000\n\n  NodeLaunchTemplate:\n    Type:
    \"AWS::EC2::LaunchTemplate\"\n    Properties:\n      LaunchTemplateData:\n        BlockDeviceMappings:\n
    \         - DeviceName: /dev/xvda\n            Ebs:\n              DeleteOnTermination:
    true\n              VolumeSize: !Ref NodeVolumeSize\n              VolumeType: gp2\n
    \       IamInstanceProfile:\n          Arn: !GetAtt NodeInstanceProfile.Arn\n        ImageId:
    !If\n          - HasNodeImageId\n          - !Ref NodeImageId\n          - !Ref
    NodeImageIdSSMParam\n        InstanceType: !Ref NodeInstanceType\n        KeyName:
    !Ref KeyName\n        SecurityGroupIds:\n        - !Ref NodeSecurityGroup\n        -
    !Ref ClusterControlPlaneSecurityGroup\n        UserData: !Base64\n          \"Fn::Sub\":
    |\n            #!/bin/bash\n            set -o xtrace\n            /etc/eks/bootstrap.sh
    ${ClusterName} --kubelet-extra-args --node-labels=nodePoolName=NODEGROUP_NAME\n
    \           /opt/aws/bin/cfn-signal --exit-code $? \\\n                     --stack
    \ ${AWS::StackName} \\\n                     --resource NodeGroup  \\\n                     --region
    ${AWS::Region}\n        MetadataOptions:\n          HttpPutResponseHopLimit : 2\n
    \         HttpEndpoint: enabled\n          HttpTokens: !If\n            - IMDSv1Disabled\n
    \           - required\n            - optional\n\n  NodeGroup:\n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n
    \   Properties:\n      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity\n
    \     LaunchTemplate:\n        LaunchTemplateId: !Ref NodeLaunchTemplate\n        Version:
    !GetAtt NodeLaunchTemplate.LatestVersionNumber\n      MaxSize: !Ref NodeAutoScalingGroupMaxSize\n
    \     MinSize: !Ref NodeAutoScalingGroupMinSize\n      Tags:\n        - Key: Name\n
    \         PropagateAtLaunch: true\n          Value: !Sub ${ClusterName}-${NodeGroupName}-Node\n
    \       - Key: !Sub kubernetes.io/cluster/${ClusterName}\n          PropagateAtLaunch:
    true\n          Value: owned\n      VPCZoneIdentifier: !Ref Subnets\n    UpdatePolicy:\n
    \     AutoScalingRollingUpdate:\n        MaxBatchSize: 1\n        MinInstancesInService:
    !Ref NodeAutoScalingGroupDesiredCapacity\n        PauseTime: PT5M\n\nOutputs:\n\n
    \ NodeSecurityGroup:\n    Description: The security group for the node group\n    Value:
    !Ref NodeSecurityGroup\n\n  NodeAutoScalingGroup:\n    Description: The autoscaling
    group\n    Value: !Ref NodeGroup"
  gke-kubeconfig.yaml: |
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: CERTIFICATE
        server: https://CLUSTER_IP
      name: CLUSTER_NAME
    contexts:
    - context:
        cluster: CLUSTER_NAME
        user: CLUSTER_NAME
      name: CLUSTER_NAME
    current-context: CLUSTER_NAME
    kind: Config
    preferences: {}
    users:
    - name: CLUSTER_NAME
      user:
        auth-provider:
          name: gcp
  amazon-eks-nodegroup-gp.yaml: |
    ClusterName - CLUSTER_NAME: inputfrom User
    ClusterControlPlaneSecurityGroup - CLUCONPLASCGROUP - output from VPC stack
    NodeGroupName - NODEGROUPNAME - inputfrom User
    NodeAutoScalingGroupMinSize - AUTOSCALINGMINSIZE - inputfrom User(default 1)
    NodeAutoScalingGroupDesiredCapacity - AUTOSCALINGDESIREDCAPACITY - inputfrom User(default 3)
    NodeAutoScalingGroupMaxSize - AUTOSCALINGMAXSIZE - inputfrom User(Default 4)
    NodeInstanceType - NODEINSTANCETYPE - inputfrom User
    NodeVolumeSize - NODEVOLUMESIZE - inputfrom User
    KeyName - KEYNAME - inputfrom User
    VpcId - VPCID - output from VPC stack
    Subnets - SUBNETS - output from VPC stack
  
  
    ---
    AWSTemplateFormatVersion: "2010-09-09"
  
    Description: Amazon EKS - Node Group
  
    Metadata:
      "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label:
              default: EKS Cluster
            Parameters:
              - ClusterName
              - ClusterControlPlaneSecurityGroup
          - Label:
              default: Worker Node Configuration
            Parameters:
              - NodeGroupName
              - NodeAutoScalingGroupMinSize
              - NodeAutoScalingGroupDesiredCapacity
              - NodeAutoScalingGroupMaxSize
              - NodeInstanceType
              - NodeImageIdSSMParam
              - NodeImageId
              - NodeVolumeSize
              - KeyName
              - BootstrapArguments
          - Label:
              default: Worker Network Configuration
            Parameters:
              - VpcId
              - Subnets
  
    Parameters:
      BootstrapArguments:
        Type: String
        Default: ""
        Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"
  
      ClusterControlPlaneSecurityGroup:
        Type: "AWS::EC2::SecurityGroup::Id"
        Description: The security group of the cluster control plane.
  
      ClusterName:
        Type: String
        Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
  
      KeyName:
        Type: "AWS::EC2::KeyPair::KeyName"
        Description: The EC2 Key Pair to allow SSH access to the instances
  
      NodeAutoScalingGroupDesiredCapacity:
        Type: Number
        Default: 3
        Description: Desired capacity of Node Group ASG.
  
      NodeAutoScalingGroupMaxSize:
        Type: Number
        Default: 4
        Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
  
      NodeAutoScalingGroupMinSize:
        Type: Number
        Default: 1
        Description: Minimum size of Node Group ASG.
  
      NodeGroupName:
        Type: String
        Description: Unique identifier for the Node Group.
  
      NodeImageId:
        Type: String
        Default: ""
        Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.
  
      NodeImageIdSSMParam:
        Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
        Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.
  
      NodeInstanceType:
        Type: String
        Default: t3.medium
        AllowedValues:
          - a1.medium
          - a1.large
          - a1.xlarge
          - a1.2xlarge
          - a1.4xlarge
          - c1.medium
          - c1.xlarge
          - c3.large
          - c3.xlarge
          - c3.2xlarge
          - c3.4xlarge
          - c3.8xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.12xlarge
          - c5.18xlarge
          - c5.24xlarge
          - c5.metal
          - c5d.large
          - c5d.xlarge
          - c5d.2xlarge
          - c5d.4xlarge
          - c5d.9xlarge
          - c5d.18xlarge
          - c5n.large
          - c5n.xlarge
          - c5n.2xlarge
          - c5n.4xlarge
          - c5n.9xlarge
          - c5n.18xlarge
          - cc2.8xlarge
          - cr1.8xlarge
          - d2.xlarge
          - d2.2xlarge
          - d2.4xlarge
          - d2.8xlarge
          - f1.2xlarge
          - f1.4xlarge
          - f1.16xlarge
          - g2.2xlarge
          - g2.8xlarge
          - g3s.xlarge
          - g3.4xlarge
          - g3.8xlarge
          - g3.16xlarge
          - h1.2xlarge
          - h1.4xlarge
          - h1.8xlarge
          - h1.16xlarge
          - hs1.8xlarge
          - i2.xlarge
          - i2.2xlarge
          - i2.4xlarge
          - i2.8xlarge
          - i3.large
          - i3.xlarge
          - i3.2xlarge
          - i3.4xlarge
          - i3.8xlarge
          - i3.16xlarge
          - i3.metal
          - i3en.large
          - i3en.xlarge
          - i3en.2xlarge
          - i3en.3xlarge
          - i3en.6xlarge
          - i3en.12xlarge
          - i3en.24xlarge
          - m1.small
          - m1.medium
          - m1.large
          - m1.xlarge
          - m2.xlarge
          - m2.2xlarge
          - m2.4xlarge
          - m3.medium
          - m3.large
          - m3.xlarge
          - m3.2xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m5.large
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.8xlarge
          - m5.12xlarge
          - m5.16xlarge
          - m5.24xlarge
          - m5.metal
          - m5a.large
          - m5a.xlarge
          - m5a.2xlarge
          - m5a.4xlarge
          - m5a.8xlarge
          - m5a.12xlarge
          - m5a.16xlarge
          - m5a.24xlarge
          - m5ad.large
          - m5ad.xlarge
          - m5ad.2xlarge
          - m5ad.4xlarge
          - m5ad.12xlarge
          - m5ad.24xlarge
          - m5d.large
          - m5d.xlarge
          - m5d.2xlarge
          - m5d.4xlarge
          - m5d.8xlarge
          - m5d.12xlarge
          - m5d.16xlarge
          - m5d.24xlarge
          - m5d.metal
          - p2.xlarge
          - p2.8xlarge
          - p2.16xlarge
          - p3.2xlarge
          - p3.8xlarge
          - p3.16xlarge
          - p3dn.24xlarge
          - g4dn.xlarge
          - g4dn.2xlarge
          - g4dn.4xlarge
          - g4dn.8xlarge
          - g4dn.12xlarge
          - g4dn.16xlarge
          - g4dn.metal
          - r3.large
          - r3.xlarge
          - r3.2xlarge
          - r3.4xlarge
          - r3.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge
          - r5.large
          - r5.xlarge
          - r5.2xlarge
          - r5.4xlarge
          - r5.8xlarge
          - r5.12xlarge
          - r5.16xlarge
          - r5.24xlarge
          - r5.metal
          - r5a.large
          - r5a.xlarge
          - r5a.2xlarge
          - r5a.4xlarge
          - r5a.8xlarge
          - r5a.12xlarge
          - r5a.16xlarge
          - r5a.24xlarge
          - r5ad.large
          - r5ad.xlarge
          - r5ad.2xlarge
          - r5ad.4xlarge
          - r5ad.12xlarge
          - r5ad.24xlarge
          - r5d.large
          - r5d.xlarge
          - r5d.2xlarge
          - r5d.4xlarge
          - r5d.8xlarge
          - r5d.12xlarge
          - r5d.16xlarge
          - r5d.24xlarge
          - r5d.metal
          - t1.micro
          - t2.nano
          - t2.micro
          - t2.small
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - t3.nano
          - t3.micro
          - t3.small
          - t3.medium
          - t3.large
          - t3.xlarge
          - t3.2xlarge
          - t3a.nano
          - t3a.micro
          - t3a.small
          - t3a.medium
          - t3a.large
          - t3a.xlarge
          - t3a.2xlarge
          - u-6tb1.metal
          - u-9tb1.metal
          - u-12tb1.metal
          - x1.16xlarge
          - x1.32xlarge
          - x1e.xlarge
          - x1e.2xlarge
          - x1e.4xlarge
          - x1e.8xlarge
          - x1e.16xlarge
          - x1e.32xlarge
          - z1d.large
          - z1d.xlarge
          - z1d.2xlarge
          - z1d.3xlarge
          - z1d.6xlarge
          - z1d.12xlarge
          - z1d.metal
        ConstraintDescription: Must be a valid EC2 instance type
        Description: EC2 instance type for the node instances
  
      NodeVolumeSize:
        Type: Number
        Default: 20
        Description: Node volume size
  
      Subnets:
        Type: "List<AWS::EC2::Subnet::Id>"
        Description: The subnets where workers can be created.
  
      VpcId:
        Type: "AWS::EC2::VPC::Id"
        Description: The VPC of the worker instances
  
    Conditions:
      HasNodeImageId: !Not
        - "Fn::Equals":
            - Ref: NodeImageId
            - ""
  
    Resources:
      NodeInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          Path: /
  
      NodeInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
          Path: /
          Roles:
            - Ref: NodeInstanceRole
  
      NodeSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
          GroupDescription: Security group for all nodes in the cluster
          Tags:
            - Key: !Sub kubernetes.io/cluster/${ClusterName}
              Value: owned
          VpcId: !Ref VpcId
  
      NodeSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow node to communicate with each other
          FromPort: 0
          GroupId: !Ref NodeSecurityGroup
          IpProtocol: "-1"
          SourceSecurityGroupId: !Ref NodeSecurityGroup
          ToPort: 65535
  
      ClusterControlPlaneSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow pods to communicate with the cluster API Server
          FromPort: 443
          GroupId: !Ref ClusterControlPlaneSecurityGroup
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref NodeSecurityGroup
          ToPort: 443
  
      ControlPlaneEgressToNodeSecurityGroup:
        Type: "AWS::EC2::SecurityGroupEgress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow the cluster control plane to communicate with worker Kubelet and pods
          DestinationSecurityGroupId: !Ref NodeSecurityGroup
          FromPort: 1025
          GroupId: !Ref ClusterControlPlaneSecurityGroup
          IpProtocol: tcp
          ToPort: 65535
  
      ControlPlaneEgressToNodeSecurityGroupOn443:
        Type: "AWS::EC2::SecurityGroupEgress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
          DestinationSecurityGroupId: !Ref NodeSecurityGroup
          FromPort: 443
          GroupId: !Ref ClusterControlPlaneSecurityGroup
          IpProtocol: tcp
          ToPort: 443
  
      NodeSecurityGroupFromControlPlaneIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
          FromPort: 1025
          GroupId: !Ref NodeSecurityGroup
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
          ToPort: 65535
  
      NodeSecurityGroupFromControlPlaneOn443Ingress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
          Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
          FromPort: 443
          GroupId: !Ref NodeSecurityGroup
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
          ToPort: 443
  
      NodeLaunchConfig:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        Properties:
          AssociatePublicIpAddress: "true"
          BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                DeleteOnTermination: true
                VolumeSize: !Ref NodeVolumeSize
                VolumeType: gp2
          IamInstanceProfile: !Ref NodeInstanceProfile
          ImageId: !If
            - HasNodeImageId
            - Ref: NodeImageId
            - Ref: NodeImageIdSSMParam
          InstanceType: !Ref NodeInstanceType
          KeyName: !Ref KeyName
          SecurityGroups:
            - Ref: NodeSecurityGroup
          UserData: !Base64
            "Fn::Sub": |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
              /opt/aws/bin/cfn-signal --exit-code $? \
                       --stack  ${AWS::StackName} \
                       --resource NodeGroup  \
                       --region ${AWS::Region}
  
      NodeGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
          DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
          LaunchConfigurationName: !Ref NodeLaunchConfig
          MaxSize: !Ref NodeAutoScalingGroupMaxSize
          MinSize: !Ref NodeAutoScalingGroupMinSize
          Tags:
            - Key: Name
              PropagateAtLaunch: "true"
              Value: !Sub ${ClusterName}-${NodeGroupName}-Node
            - Key: !Sub kubernetes.io/cluster/${ClusterName}
              PropagateAtLaunch: "true"
              Value: owned
          VPCZoneIdentifier: !Ref Subnets
        UpdatePolicy:
          AutoScalingRollingUpdate:
            MaxBatchSize: "1"
            MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
            PauseTime: PT5M
  
    Outputs:
      NodeInstanceRole:
        Description: The node instance role
        Value: !GetAtt NodeInstanceRole.Arn
  
      NodeSecurityGroup:
        Description: The security group for the node group
        Value: !Ref NodeSecurityGroup
  profiles-kube.json: "{\n  \"rabbitmq\":{\n    \"mq-protocol\":\"amqp\",\n    \"mq-user\":\"admin\",\n
    \   \"mq-password\":\"cGFzc3dvcmQ\",\n    \"mq-ip\":\"rabbitmq\",\n    \"mq-port\":\"5672\",\n
    \   \"mq-apps-host\":\"/apps\",\n    \"mq-apps-queue\":\"apps-worker-queue\"\n  },\n
    \ \"esearch\":{\n    \"es-user\":\"elastic\",\n    \"es-password\":\"cGFzc3dvcmQ\",\n
    \   \"es-endpoints\":[\n      \"http://esearch:9200\"\n    ]\n  },\n  \"gopaddleTools\":{\n
    \   \"prometheus\":{\n      \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/%s/application/datacollector/datapoint\",\n
    \     \"influxDBs\":{\n        \"influxDB-1\":{\n          \"dbEndpoint\":\"http://influxdb:8086\",\n
    \         \"dbUser\":\"admin\",\n          \"dbPassword\":\"cGFzc3dvcmQ\",\n          \"maxUserCount\":\"100\",\n
    \         \"isEnabled\":true\n        }\n      }\n    },\n    \"eventHandler\":{\n
    \     \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/%s/application/clusterInfo/%s/datacollector/eventhandler\"\n
    \   }\n  },\n  \"mongodb\":{\n    \"db-name\":\"clustermanager\",\n    \"db-endpoint\":[\n
    \     \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n
    \   \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"redis\":{\n
    \   \"redis-endpoint\":\"redis\",\n    \"redis-port\":\"6379\",\n    \"redis-password\":\"avraj\"\n
    \ },\n  \"cluster\":{\n    \"createAKS\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name?api-version=2020-06-01\",\n
    \   \"createAKSNodePool\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name/agentPools/:nodePoolName?api-version=2020-06-01\",\n
    \   \"getAKSNodePool\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name/agentPools/:nodePoolName?api-version=2020-06-01\",\n
    \   \"scaleAKSNodePool\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name/agentPools/:nodePoolName?api-version=2020-06-01\",\n
    \   \"getAKS\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name?api-version=2020-06-01\",\n
    \   \"getAKSClusterConfig\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.ContainerService/managedClusters/:name/listClusterUserCredential?api-version=2020-06-01\",\n
    \   \"getAKSResourceGroup\":\"https://management.azure.com/subscriptions/:subscriptionID/resourcegroups/:resourceGroupName?api-version=2020-06-01\",\n
    \   \"createAKSResourceGroup\":\"https://management.azure.com/subscriptions/:subscriptionID/resourcegroups/:resourceGroupName?api-version=2020-06-01\",\n
    \   \"deleteAKSResourceGroup\":\"https://management.azure.com/subscriptions/:subscriptionID/resourcegroups/:resourceGroupName?api-version=2020-06-01\",\n
    \   \"getSubscriptionsAKS\":\"https://management.azure.com/subscriptions?api-version=2020-06-01\",\n
    \   \"platformURL\":\"api/:accID/platform/:platformID?operation=secrets&organizationID=:organizationID\",\n
    \   \"createGCE\":\"https://container.googleapis.com/v1/projects/:projectID/locations/:location/clusters\",\n
    \   \"createGCENodePool\":\"https://container.googleapis.com/v1/projects/:projectID/locations/:location/clusters/:name/nodePools\",\n
    \   \"getGCENodePool\":\"https://container.googleapis.com/v1/projects/:projectID/locations/:location/clusters/:name/nodePools/:nodePoolName\",\n
    \   \"getGCEByName\":\"https://container.googleapis.com/v1/projects/:project_id/zones/:zone/clusters/:name\",\n
    \   \"oauthScopes\":\"https://www.googleapis.com/auth/devstorage.read_only\",\n
    \   \"getGCE\":\"https://container.googleapis.com/v1/projects/:projectID/locations/:location/clusters/:name\",\n
    \   \"updateGCENodePoolSize\":\"https://container.googleapis.com/v1/projects/:projectID/locations/:location/clusters/:name/nodePools/:nodePoolName:setSize\",\n
    \   \"getGCEInstanceGroup\":\"https://compute.googleapis.com/compute/v1/projects/:projectID/zones/:location/instanceGroups/:instanceGroupName/listInstances\",\n
    \   \"getGCEInstance\":\"https://compute.googleapis.com/compute/v1/projects/:projectID/zones/:location/instances/:instanceName\",\n
    \   \"getGCEProjects\":\"https://cloudresourcemanager.googleapis.com/v1/projects\",\n
    \   \"listAKSResourceGroups\":\"https://management.azure.com/subscriptions/:subscriptionID/resourcegroups?api-version=2020-06-01\",\n
    \   \"listVMSS\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.Compute/virtualMachineScaleSets?api-version=2020-06-01\",\n
    \   \"listVMSSInstance\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/Microsoft.Compute/virtualMachineScaleSets/:vmss/virtualMachines?api-version=2020-06-01\",\n
    \   \"listVMSSInterface\":\"https://management.azure.com/subscriptions/:subscriptionID/resourceGroups/:resourceGroupName/providers/microsoft.Compute/virtualMachineScaleSets/:vmss/networkInterfaces?api-version=2018-10-01\",\n
    \   \"azureAutoScale\":\"https://management.azure.com/subscriptions/:subscriptionID/resourcegroups/:resourceGroupName/providers/microsoft.insights/autoscalesettings/:autoScaleName?api-version=2015-04-01\"\n
    \ },\n  \"aksServicePrincipalApp\":{\n    \"clientID\":\"164192b6-cccf-4ef0-b147-eead3ac31512\",\n
    \   \"secret\":\"s0e]FceLcdbTu@]/sO01g76Q5rBIeoLj\"\n  },\n  \"instantsTypes\":{\n
    \   \"eks\":{\n      \"versions\":[\n        \"1.19\",\n        \"1.20\",\n        \"1.21\",\n
    \       \"1.22\"\n      ],\n      \"cpuInstances\":[\n        \"t3.micro\",\n        \"t3.small\",\n
    \       \"t3.medium\",\n        \"t3.large\",\n        \"t3.xlarge\",\n        \"t3.2xlarge\",\n
    \       \"t3a.micro\",\n        \"t3a.small\",\n        \"t3a.medium\",\n        \"t3a.large\",\n
    \       \"t3a.xlarge\",\n        \"t3a.2xlarge\",\n        \"m5.large\",\n        \"m5.xlarge\",\n
    \       \"m5.2xlarge\",\n        \"m5.4xlarge\",\n        \"m5.8xlarge\",\n        \"m5.12xlarge\",\n
    \       \"m5a.large\",\n        \"m5a.xlarge\",\n        \"m5a.2xlarge\",\n        \"m5a.4xlarge\",\n
    \       \"c5.large\",\n        \"c5.xlarge\",\n        \"c5.2xlarge\",\n        \"c5.4xlarge\",\n
    \       \"c5.9xlarge\",\n        \"r5.large\",\n        \"r5.xlarge\",\n        \"r5.2xlarge\",\n
    \       \"r5.4xlarge\",\n        \"r5a.large\",\n        \"r5a.xlarge\",\n        \"r5a.2xlarge\",\n
    \       \"r5a.4xlarge\"\n      ],\n      \"gpuInstances\":[\n        \"g4dn.xlarge\",\n
    \       \"g4dn.2xlarge\",\n        \"g4dn.4xlarge\",\n        \"g4dn.8xlarge\",\n
    \       \"g4dn.12xlarge\",\n        \"p2.xlarge\",\n        \"p2.8xlarge\",\n        \"p2.16xlarge\",\n
    \       \"p3.2xlarge\",\n        \"p3.8xlarge\",\n        \"p3.16xlarge\",\n        \"p3dn.24xlarge\"\n
    \     ],\n      \"armInstances\":[\n        \"m6g.medium\",\n        \"m6g.large\",\n
    \       \"m6g.xlarge\",\n        \"m6g.2xlarge\",\n        \"m6g.4xlarge\",\n        \"m6g.8xlarge\",\n
    \       \"m6g.12xlarge\",\n        \"m6g.16xlarge\",\n        \"c6g.medium\",\n
    \       \"c6g.large\",\n        \"c6g.xlarge\",\n        \"c6g.2xlarge\",\n        \"c6g.4xlarge\",\n
    \       \"c6g.8xlarge\",\n        \"c6g.12xlarge\",\n        \"c6g.16xlarge\",\n
    \       \"r6g.medium\",\n        \"r6g.large\",\n        \"r6g.xlarge\",\n        \"r6g.2xlarge\",\n
    \       \"r6g.4xlarge\",\n        \"r6g.8xlarge\",\n        \"r6g.12xlarge\",\n
    \       \"r6g.16xlarge\"\n      ],\n      \"regions\":[\n        \"us-east-1\",\n
    \       \"us-east-2\",\n        \"us-west-2\",\n        \"ap-east-1\",\n        \"ap-south-1\",\n
    \       \"ap-northeast-2\",\n        \"ap-southeast-1\",\n        \"ap-southeast-2\",\n
    \       \"ap-northeast-1\",\n        \"ca-central-1\",\n        \"eu-central-1\",\n
    \       \"eu-west-1\",\n        \"eu-west-2\",\n        \"eu-west-3\",\n        \"eu-north-1\",\n
    \       \"me-south-1\",\n        \"sa-east-1\"\n      ],\n      \"us-east-1\":[\n
    \       \"us-east-1a\",\n        \"us-east-1b\",\n        \"us-east-1c\",\n        \"us-east-1d\",\n
    \       \"us-east-1e\",\n        \"us-east-1f\"\n      ],\n      \"us-east-2\":[\n
    \       \"us-east-2a\",\n        \"us-east-2b\",\n        \"us-east-2c\"\n      ],\n
    \     \"us-west-2\":[\n        \"us-west-2a\",\n        \"us-west-2b\",\n        \"us-west-2c\",\n
    \       \"us-west-2d\"\n      ],\n      \"ap-east-1\":[\n      ],\n      \"ap-south-1\":[\n
    \       \"ap-south-1a\",\n        \"ap-south-1b\",\n        \"ap-south-1c\"\n      ],\n
    \     \"ap-northeast-2\":[\n        \"ap-northeast-2a\",\n        \"ap-northeast-2b\",\n
    \       \"ap-northeast-2c\"\n      ],\n      \"ap-southeast-1\":[\n        \"ap-southeast-1a\",\n
    \       \"ap-southeast-1b\",\n        \"ap-southeast-1c\"\n      ],\n      \"ap-southeast-2\":[\n
    \       \"ap-southeast-2a\",\n        \"ap-southeast-2b\",\n        \"ap-southeast-2c\"\n
    \     ],\n      \"ap-northeast-1\":[\n        \"ap-northeast-1a\",\n        \"ap-northeast-1b\",\n
    \       \"ap-northeast-1c\",\n        \"ap-northeast-1d\"\n      ],\n      \"ca-central-1\":[\n
    \       \"ca-central-1a\",\n        \"ca-central-1b\"\n      ],\n      \"eu-central-1\":[\n
    \       \"eu-central-1a\",\n        \"eu-central-1b\",\n        \"eu-central-1c\"\n
    \     ],\n      \"eu-west-1\":[\n        \"eu-west-1a\",\n        \"eu-west-1b\",\n
    \       \"eu-west-1c\"\n      ],\n      \"eu-west-2\":[\n        \"eu-west-2a\",\n
    \       \"eu-west-2b\",\n        \"eu-west-2c\"\n      ],\n      \"eu-west-3\":[\n
    \       \"eu-west-3a\",\n        \"eu-west-3b\",\n        \"eu-west-3c\"\n      ],\n
    \     \"eu-north-1\":[\n        \"eu-north-1a\",\n        \"eu-north-1b\",\n        \"eu-north-1c\"\n
    \     ],\n      \"me-south-1\":[\n      ],\n      \"sa-east-1\":[\n        \"sa-east-1a\",\n
    \       \"sa-east-1b\",\n        \"sa-east-1c\"\n      ]\n    },\n    \"aks\":{\n
    \     \"instanceTypes\":[\n        \"Standard_A1\",\n        \"Standard_A10\",\n
    \       \"Standard_A11\",\n        \"Standard_A1_v2\",\n        \"Standard_A2\",\n
    \       \"Standard_A2_v2\",\n        \"Standard_A2m_v2\",\n        \"Standard_A3\",\n
    \       \"Standard_A4\",\n        \"Standard_A4_v2\",\n        \"Standard_A4m_v2\",\n
    \       \"Standard_A5\",\n        \"Standard_A6\",\n        \"Standard_A7\",\n        \"Standard_A8\",\n
    \       \"Standard_A8_v2\",\n        \"Standard_A8m_v2\",\n        \"Standard_A9\",\n
    \       \"Standard_B2ms\",\n        \"Standard_B2s\",\n        \"Standard_B4ms\",\n
    \       \"Standard_B8ms\",\n        \"Standard_D1\",\n        \"Standard_D11\",\n
    \       \"Standard_D11_v2\",\n        \"Standard_D11_v2_Promo\",\n        \"Standard_D12\",\n
    \       \"Standard_D12_v2\",\n        \"Standard_D12_v2_Promo\",\n        \"Standard_D13\",\n
    \       \"Standard_D13_v2\",\n        \"Standard_D13_v2_Promo\",\n        \"Standard_D14\",\n
    \       \"Standard_D14_v2\",\n        \"Standard_D14_v2_Promo\",\n        \"Standard_D15_v2\",\n
    \       \"Standard_D16_v3\",\n        \"Standard_D16s_v3\",\n        \"Standard_D1_v2\",\n
    \       \"Standard_D2\",\n        \"Standard_D2_v2\",\n        \"Standard_D2_v2_Promo\",\n
    \       \"Standard_D2_v3\",\n        \"Standard_D2s_v3\",\n        \"Standard_D3\",\n
    \       \"Standard_D32_v3\",\n        \"Standard_D32s_v3\",\n        \"Standard_D3_v2\",\n
    \       \"Standard_D3_v2_Promo\",\n        \"Standard_D4\",\n        \"Standard_D4_v2\",\n
    \       \"Standard_D4_v2_Promo\",\n        \"Standard_D4_v3\",\n        \"Standard_D4s_v3\",\n
    \       \"Standard_D5_v2\",\n        \"Standard_D5_v2_Promo\",\n        \"Standard_D64_v3\",\n
    \       \"Standard_D64s_v3\",\n        \"Standard_D8_v3\",\n        \"Standard_D8s_v3\",\n
    \       \"Standard_DS1\",\n        \"Standard_DS11\",\n        \"Standard_DS11_v2\",\n
    \       \"Standard_DS11_v2_Promo\",\n        \"Standard_DS12\",\n        \"Standard_DS12_v2\",\n
    \       \"Standard_DS12_v2_Promo\",\n        \"Standard_DS13\",\n        \"Standard_DS13-2_v2\",\n
    \       \"Standard_DS13-4_v2\",\n        \"Standard_DS13_v2\",\n        \"Standard_DS13_v2_Promo\",\n
    \       \"Standard_DS14\",\n        \"Standard_DS14-4_v2\",\n        \"Standard_DS14-8_v2\",\n
    \       \"Standard_DS14_v2\",\n        \"Standard_DS14_v2_Promo\",\n        \"Standard_DS15_v2\",\n
    \       \"Standard_DS1_v2\",\n        \"Standard_DS2\",\n        \"Standard_DS2_v2\",\n
    \       \"Standard_DS2_v2_Promo\",\n        \"Standard_DS3\",\n        \"Standard_DS3_v2\",\n
    \       \"Standard_DS3_v2_Promo\",\n        \"Standard_DS4\",\n        \"Standard_DS4_v2\",\n
    \       \"Standard_DS4_v2_Promo\",\n        \"Standard_DS5_v2\",\n        \"Standard_DS5_v2_Promo\",\n
    \       \"Standard_E16_v3\",\n        \"Standard_E16s_v3\",\n        \"Standard_E2_v3\",\n
    \       \"Standard_E2s_v3\",\n        \"Standard_E32-16s_v3\",\n        \"Standard_E32-8s_v3\",\n
    \       \"Standard_E32_v3\",\n        \"Standard_E32s_v3\",\n        \"Standard_E4_v3\",\n
    \       \"Standard_E4s_v3\",\n        \"Standard_E64-16s_v3\",\n        \"Standard_E64-32s_v3\",\n
    \       \"Standard_E64_v3\",\n        \"Standard_E64s_v3\",\n        \"Standard_E8_v3\",\n
    \       \"Standard_E8s_v3\",\n        \"Standard_F1\",\n        \"Standard_F16\",\n
    \       \"Standard_F16s\",\n        \"Standard_F16s_v2\",\n        \"Standard_F1s\",\n
    \       \"Standard_F2\",\n        \"Standard_F2s\",\n        \"Standard_F2s_v2\",\n
    \       \"Standard_F32s_v2\",\n        \"Standard_F4\",\n        \"Standard_F4s\",\n
    \       \"Standard_F4s_v2\",\n        \"Standard_F64s_v2\",\n        \"Standard_F72s_v2\",\n
    \       \"Standard_F8\",\n        \"Standard_F8s\",\n        \"Standard_F8s_v2\",\n
    \       \"Standard_G1\",\n        \"Standard_G2\",\n        \"Standard_G3\",\n        \"Standard_G4\",\n
    \       \"Standard_G5\",\n        \"Standard_GS1\",\n        \"Standard_GS2\",\n
    \       \"Standard_GS3\",\n        \"Standard_GS4\",\n        \"Standard_GS4-4\",\n
    \       \"Standard_GS4-8\",\n        \"Standard_GS5\",\n        \"Standard_GS5-16\",\n
    \       \"Standard_GS5-8\",\n        \"Standard_H16\",\n        \"Standard_H16m\",\n
    \       \"Standard_H16mr\",\n        \"Standard_H16r\",\n        \"Standard_H8\",\n
    \       \"Standard_H8m\",\n        \"Standard_L16s\",\n        \"Standard_L32s\",\n
    \       \"Standard_L4s\",\n        \"Standard_L8s\",\n        \"Standard_M128-32ms\",\n
    \       \"Standard_M128-64ms\",\n        \"Standard_M128ms\",\n        \"Standard_M128s\",\n
    \       \"Standard_M64-16ms\",\n        \"Standard_M64-32ms\",\n        \"Standard_M64ms\",\n
    \       \"Standard_M64s\",\n        \"Standard_NC12\",\n        \"Standard_NC12s_v2\",\n
    \       \"Standard_NC12s_v3\",\n        \"Standard_NC24\",\n        \"Standard_NC24r\",\n
    \       \"Standard_NC24rs_v2\",\n        \"Standard_NC24rs_v3\",\n        \"Standard_NC24s_v2\",\n
    \       \"Standard_NC24s_v3\",\n        \"Standard_NC6\",\n        \"Standard_NC6s_v2\",\n
    \       \"Standard_NC6s_v3\",\n        \"Standard_ND12s\",\n        \"Standard_ND24rs\",\n
    \       \"Standard_ND24s\",\n        \"Standard_ND6s\",\n        \"Standard_NV12\",\n
    \       \"Standard_NV24\",\n        \"Standard_NV6\"\t\n      ],\n      \"regions\":[\n
    \       \"eastus\",\n        \"eastus2\",\n        \"sounthcentralus\",\n        \"westus2\",\n
    \       \"centralus\",\n        \"northcentralus\",\n        \"westus\",\n        \"southafricanorth\",\n
    \       \"australiaeast\",\n        \"southeastasia\",\n        \"centralindia\",\n
    \       \"eastasia\",\n        \"japaneast\",\n        \"koreacentral\",\n        \"canadacentral\",\n
    \       \"northeurope\",\n        \"uksouth\",\n        \"westeurope\",\n        \"francecentral\",\n
    \       \"germanywestcentral\",\n        \"norwayeast\",\n        \"switzerlandnorth\",\n
    \       \"brazilsouth\",\n        \"australiasoutheast\",\n        \"japanwest\",\n
    \       \"koreasouth\",\n        \"southindia\",\n        \"canadaeast\",\n        \"germanynorth\",\n
    \       \"norwaywest\",\n        \"switzerlandwest\",\n        \"ukwest\",\n        \"uaenorth\"\n
    \     ]\n    },\n    \"gke\":{\n      \"instanceTypes\":[\n        \"f1-micro\",\n
    \       \"g1-small\",\n        \"n1-standard-1\",\n        \"n1-standard-2\",\n
    \       \"n1-standard-4\",\n        \"n1-standard-8\",\n        \"n1-standard-16\",\n
    \       \"n1-standard-32\",\n        \"n1-standard-64\",\n        \"n1-standard-96\",\n
    \       \"n1-highmem-2\",\n        \"n1-highmem-4\",\n        \"n1-highmem-8\",\n
    \       \"n1-highmem-16\",\n        \"n1-highmem-32\",\n        \"n1-highmem-64\",\n
    \       \"n1-highmem-96\",\n        \"n1-highcpu-2\",\n        \"n1-highcpu-4\",\n
    \       \"n1-highcpu-8\",\n        \"n1-highcpu-16\",\n        \"n1-highcpu-32\",\n
    \       \"n1-highcpu-64\",\n        \"n1-highcpu-96\",\n        \"n1-megamem-96\",\n
    \       \"n1-ultramem-40\",\n        \"n1-ultramem-80\",\n        \"n1-ultramem-160\",\n
    \       \"e2-micro\",\n        \"e2-small\",\n        \"e2-medium\",\n        \"e2-standard-2\",\n
    \       \"e2-standard-4\",\n        \"e2-standard-8\",\n        \"e2-standard-16\",\n
    \       \"e2-highmem-2\",\n        \"e2-highmem-4\",\n        \"e2-highmem-8\",\n
    \       \"e2-highmem-16\",\n        \"e2-highcpu-2\",\n        \"e2-highcpu-4\",\n
    \       \"e2-highcpu-8\",\n        \"e2-highcpu-16\",\n        \"n2-standard-2\",\n
    \       \"n2-standard-4\",\n        \"n2-standard-8\",\n        \"n2-standard-16\",\n
    \       \"n2-standard-32\",\n        \"n2-standard-48\",\n        \"n2-standard-64\",\n
    \       \"n2-standard-80\",\n        \"n2-highmem-2\",\n        \"n2-highmem-4\",\n
    \       \"n2-highmem-8\",\n        \"n2-highmem-16\",\n        \"n2-highmem-32\",\n
    \       \"n2-highmem-48\",\n        \"n2-highmem-64\",\n        \"n2-highmem-80\",\n
    \       \"n2-highcpu-2\",\n        \"n2-highcpu-4\",\n        \"n2-highcpu-8\",\n
    \       \"n2-highcpu-16\",\n        \"n2-highcpu-32\",\n        \"n2-highcpu-48\",\n
    \       \"n2-highcpu-64\",\n        \"n2-highcpu-80\",\n        \"m1-megamem-96\",\n
    \       \"m1-ultramem-40\",\n        \"m1-ultramem-80\",\n        \"m1-ultramem-160\"\n
    \     ],\n      \"regions\":[\n        \"asia-east1-a\",\n        \"asia-east1-b\",\n
    \       \"asia-east1-c\",\n        \"asia-east2-a\",\n        \"asia-east2-b\",\n
    \       \"asia-east2-c\",\n        \"asia-northeast1-a\",\n        \"asia-northeast1-b\",\n
    \       \"asia-northeast1-c\",\n        \"asia-northeast2-a\",\n        \"asia-northeast2-b\",\n
    \       \"asia-northeast2-c\",\n        \"asia-south1-a\",\n        \"asia-south1-b\",\n
    \       \"asia-south1-c\",\n        \"asia-southeast1-a\",\n        \"asia-southeast1-b\",\n
    \       \"asia-southeast1-c\",\n        \"australia-southeast1-a\",\n        \"australia-southeast1-b\",\n
    \       \"australia-southeast1-c\",\n        \"europe-north1-a\",\n        \"europe-north1-b\",\n
    \       \"europe-north1-c\",\n        \"europe-west1-b\",\n        \"europe-west1-c\",\n
    \       \"europe-west1-d\",\n        \"europe-west2-a\",\n        \"europe-west2-b\",\n
    \       \"europe-west2-c\",\n        \"europe-west3-a\",\n        \"europe-west3-b\",\n
    \       \"europe-west3-c\",\n        \"europe-west4-a\",\n        \"europe-west4-b\",\n
    \       \"europe-west4-c\",\n        \"europe-west6-a\",\n        \"europe-west6-b\",\n
    \       \"europe-west6-c\",\n        \"northamerica-northeast1-a\",\n        \"northamerica-northeast1-b\",\n
    \       \"northamerica-northeast1-c\",\n        \"southamerica-east1-a\",\n        \"southamerica-east1-b\",\n
    \       \"southamerica-east1-c\",\n        \"us-central1-a\",\n        \"us-central1-b\",\n
    \       \"us-central1-c\",\n        \"us-central1-f\",\n        \"us-east1-b\",\n
    \       \"us-east1-c\",\n        \"us-east1-d\",\n        \"us-east4-a\",\n        \"us-east4-b\",\n
    \       \"us-east4-c\",\n        \"us-west1-a\",\n        \"us-west1-b\",\n        \"us-west1-c\",\n
    \       \"us-west2-a\",\n        \"us-west2-b\",\n        \"us-west2-c\"\n      ]\n
    \   }\n  }\n} \n"
  kubeconfig.yaml: |-
    ---
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: CERTIFICATE_VALUE
        server: ENDPOINT_VALUE
      name: CLUSTER_VALUE
    contexts:
    - context:
        cluster: CONTEXT_CLUSTER_NAME
        user: CONTEXT_USER_NAME
      name: CLUSTER_USER_NAME
    current-context: CONTEXT_NAME
    kind: Config
    preferences: {}
    users:
    - name: USER_NAME
      user:
        exec:
          apiVersion: client.authentication.k8s.io/v1alpha1
          args:
          - --region
          - REGION_VALUE
          - eks
          - get-token
          - --cluster-name
          - NAME_VALUE
          command: aws
          env:
          - name: AWS_ACCESS_KEY_ID
            value:  ACCESS_KEY_VALUE
          - name: AWS_SECRET_ACCESS_KEY
            value: SECRET_KEY_VALUE
  internal_api.json: "{\n        \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \       \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
  amazon-eks-vpc-gp.yaml: "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription:
    'Amazon EKS Sample VPC'\n\nParameters:\n\n  VpcBlock:\n    Type: String\n    Default:
    VPC_VALUE\n    Description: The CIDR range for the VPC. This should be a valid private
    (RFC 1918) CIDR range.\n\n  Subnet01Block:\n    Type: String\n    Default: SUBNET01_VALUE\n
    \   Description: CidrBlock for subnet 01 within the VPC\n\n  Subnet02Block:\n    Type:
    String\n    Default: SUBNET02_VALUE\n    Description: CidrBlock for subnet 02 within
    the VPC\n\n  Subnet03Block:\n    Type: String\n    Default: SUBNET03_VALUE\n    Description:
    CidrBlock for subnet 03 within the VPC. This is used only if the region has more
    than 2 AZs.\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n
    \     -\n        Label:\n          default: \"Worker Network Configuration\"\n        Parameters:\n
    \         - VpcBlock\n          - Subnet01Block\n          - Subnet02Block\n          -
    Subnet03Block\n\nConditions:\n  Has2Azs:\n    Fn::Or:\n      - Fn::Equals:\n        -
    {Ref: 'AWS::Region'}\n        - ca-central-1\n      - Fn::Equals:\n        - {Ref:
    'AWS::Region'}\n        - cn-north-1\n\n  HasMoreThan2Azs:\n    Fn::Not:\n      -
    Condition: Has2Azs\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n
    \     CidrBlock:  !Ref VpcBlock\n      EnableDnsSupport: true\n      EnableDnsHostnames:
    true\n      Tags:\n      - Key: Name\n        Value: !Sub '${AWS::StackName}-VPC'\n\n
    \ InternetGateway:\n    Type: \"AWS::EC2::InternetGateway\"\n\n  VPCGatewayAttachment:\n
    \   Type: \"AWS::EC2::VPCGatewayAttachment\"\n    Properties:\n      InternetGatewayId:
    !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  RouteTable:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value:
    Public Subnets\n      - Key: Network\n        Value: Public\n\n  Route:\n    DependsOn:
    VPCGatewayAttachment\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId:
    !Ref RouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n
    \ Subnet01:\n    Type: AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet 01\n
    \   Properties:\n      MapPublicIpOnLaunch: true\n      AvailabilityZone: SUBNET01_ZONE\n
    \     CidrBlock:\n        Ref: Subnet01Block\n      VpcId:\n        Ref: VPC\n      Tags:\n
    \     - Key: Name\n        Value: !Sub \"${AWS::StackName}-Subnet01\"\n\n  Subnet02:\n
    \   Type: AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet 02\n    Properties:\n
    \     MapPublicIpOnLaunch: true\n      AvailabilityZone: SUBNET02_ZONE\n      CidrBlock:\n
    \       Ref: Subnet02Block\n      VpcId:\n        Ref: VPC\n      Tags:\n      -
    Key: Name\n        Value: !Sub \"${AWS::StackName}-Subnet02\"\n\n  Subnet03:\n    Condition:
    HasMoreThan2Azs\n    Type: AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet
    03\n    Properties:\n      MapPublicIpOnLaunch: true\n      AvailabilityZone: SUBNET03_ZONE\n
    \     CidrBlock:\n        Ref: Subnet03Block\n      VpcId:\n        Ref: VPC\n      Tags:\n
    \     - Key: Name\n        Value: !Sub \"${AWS::StackName}-Subnet03\"\n\n  Subnet01RouteTableAssociation:\n
    \   Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId:
    !Ref Subnet01\n      RouteTableId: !Ref RouteTable\n\n  Subnet02RouteTableAssociation:\n
    \   Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId:
    !Ref Subnet02\n      RouteTableId: !Ref RouteTable\n\n  Subnet03RouteTableAssociation:\n
    \   Condition: HasMoreThan2Azs\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref Subnet03\n      RouteTableId: !Ref RouteTable\n\n
    \ ControlPlaneSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n
    \     GroupDescription: Cluster communication with worker nodes\n      VpcId: !Ref
    VPC\n\nOutputs:\n\n  SubnetIds:\n    Description: All subnets in the VPC\n    Value:\n
    \     Fn::If:\n      - HasMoreThan2Azs\n      - !Join [ \",\", [ !Ref Subnet01,
    !Ref Subnet02, !Ref Subnet03 ] ]\n      - !Join [ \",\", [ !Ref Subnet01, !Ref Subnet02
    ] ]\n\n  SecurityGroups:\n    Description: Security group for the cluster control
    plane communication with worker nodes\n    Value: !Join [ \",\", [ !Ref ControlPlaneSecurityGroup
    ] ]\n\n  VpcId:\n    Description: The VPC Id\n    Value: !Ref VPC\n  \n  Subnet01ID:\n
    \   Description: The Subnet01 Id\n    Value: !Ref Subnet01\n\n  Subnet02ID:\n    Description:
    The Subnet02 Id\n    Value: !Ref Subnet02\n\n  Subnet03ID:\n    Condition: HasMoreThan2Azs\n
    \   Description: The Subnet03 Id\n    Value: !Ref Subnet03\n  \n  Subnet01AZ:\n
    \   Description: The Subnet01 AZ\n    Value: !GetAtt \n          - Subnet01\n          -
    AvailabilityZone\n\n  Subnet02AZ:\n    Description: The Subnet02 AZ\n    Value:
    !GetAtt \n          - Subnet02\n          - AvailabilityZone\n\n  Subnet03AZ:\n
    \   Condition: HasMoreThan2Azs\n    Description: The Subnet03 AZ\n    Value: !GetAtt
    \n          - Subnet03\n          - AvailabilityZone"
  error_config.json: "{\n    \"all\":{\n      \"DATA_PERSISTANCE\":\"Internal Error;
    (Failed to store data)\",\n      \"DATA_RETRIVE\":\"Internal Error; (Failed to retrive
    data)\",\n      \"INTERNAL_SERVER\":\"Internal Error; Unable to communicate with
    internal-server\",\n      \"INTERNAL_SERVER_ERROR\":\"Internal Error; Try after
    sometime\",\n      \"RESOURCE_NOT_FOUND\":\"Resource '%s' does not exist\",\n      \"ERROR_HITTING_EXT_API\":\"Unable
    to communicate with external resources\",\n      \"SOMETHING_WRONG\": \"Internal
    Error\",\n      \"INTERNAL_DB_COPY\": \"Could not format response from database
    object.\",\n      \"INPUT_PAYLOAD_ERROR\":\"Input payload have error: %s\",\n      \"GEN_UNMARSHAL_ERROR\":\"Error
    in unmarshal '%s'\",\n      \"STRING_TO_INT_ERROR\":\"Error in converting string
    to int '%s'\",\n      \"FIELD_VALIDATION\":\"InvalidValidationError '%s'\",\n      \"MARSHAL_ERROR\":\"Error
    in marshaling '%s'\",\n      \"ALREADY_EXIST\":\"'%s' already exists\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n      \"MISSING_FIELD_INSIDE\":\"Invalid
    input or missing mandatory field '%s' inside '%s'\",\n      \"INVALID_VALUE\":\"Invalid
    input for field '%s'\",\n      \"INVALID_TYPE\":\"Invalid input type for '%s'\",\n
    \     \"INPUT_MISMATCH\":\"Given input JSON structure is mismatched\",\n      \"KEY_NOT_FOUND\":\"
    '%s' Key not found in Json\",\n      \"VALUE_NOT_FOUND\":\" '%s' Value not found
    in Json\",\n      \"UNSUPPORTED\": \"Given %s is not supported\",\n      \"UNMARSHAL_ERROR\":\"The
    field '%s' is a '%s' type, but the given value is '%s' type\",\n      \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\"\n    },\n    \"clusterManager\":{\n
    \     \"CLUSTER_NOTFOUND\":\"The requested cluster '%s' is not found\",\n      \"NAME_EXISTS\":\"Cluster
    Name '%s' already exists.\",\n      \"CLOUD_ACCOUNT_NOTFOUND\":\"Cluster.Kube.CloudAccount.ID
    '%s' Not valid\",\n      \"DEP_REF_ALREADY_EXISTS\":\"This Depency Reference Id
    '%s' version '%s' is already exists\"\n      \n    },\n    \"eks\":{\n      \"NODE_POOL_LENGTH\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool array length must be one\",\n      \"NODE_POOL_NAME\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].Name cannot be empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].InstanceType Should be valid\",\n      \"NODE_POOL_AMITYPE\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].AMIType must be one of 'AL2_x86_64','AL2_x86_64_GPU','AL2_ARM_64'\",\n
    \     \"NODE_POOL_DESIREDCAPACITY\":\"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].DesiredCapacity
    should not be empty\",\n      \"NODE_POOL_DISKSIZE\":\"Encountered invalid input:
    Cluster.Kube.EKS.Nodepool[0].DiskSize should not be empty\",\n      \"NODE_POOL_KEYNAME\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].KeyName should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].MinCount should not be empty\",\n      \"NODE_POOL_REGION\":\"Encountered
    invalid input: Cluster.Kube.EKS.VPCBlock.Region should be valid\",\n      \"VPC_CIDR\":\"Encountered
    invalid input: Cluster.Kube.EKS.VPCBlock.CIDR Should be valid\",\n      \"SUBNET_LENGTH\":\"Encountered
    invalid input: Cluster.Kube.EKS.VPC.Subnet length should be 3. if region is ca-central-1
    length should be 2\",\n      \"SUBNET_CIDR\":\"Encountered invalid input: Cluster.Kube.EKS.Subnet['%s'].CIDR
    Should be valid\",\n      \"SUBNET_AZ\":\"Encountered invalid input: Cluster.Kube.EKS.Subnet['%s'].AZ
    should be one of %s\",\n      \"NODEPOOL_AZ\":\"Encountered invalid input: Cluster.Kube.EKS.NodePool[0].AZ
    need atleast one availability Zones\",\n      \"NODE_POOL_ROLE\":\"Encountered invalid
    input: Cluster.Kube.EKS.Nodepool[0].NodePoolRole.RoleArn should not be empty\",\n
    \     \"MASTER_ROLE\":\"Encountered invalid input: Cluster.Kube.EKS.MasterRole.RoleArn
    should not be empty\",\n      \"MASTER_VERSION\":\"Encountered invalid input: Cluster.Kube.Version
    Should be valid\",\n      \"STORIDGE_NODEPOOL_MINCOUNT\":\"Encountered invalid input:
    Cluster.Kube.EKS.NodePool[0].MinCount should not be greater than 2\",\n      \"NODE_POOL_AMIIMAGE\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].AMIImageID should not be empty\",\n
    \     \"NODE_POOL_ROLEARN\":\"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].NodePoolRole.RoleArn
    should be valid\"\n    },\n    \"aks\":{\n      \"NODE_POOL_LENGTH\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool array length must be one\",\n      \"NODE_POOL_NAME\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].Name cannot be empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].InstanceType Should be valid\",\n      \"NODE_POOL_COUNT\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].Count should not be empty\",\n      \"NODE_POOL_NODE_RESOURCE_GROUP\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].NodeResourceGroup should not be empty\",\n
    \     \"NODE_POOL_TYPE\":\"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].Type
    should be one of VirtualMachineScaleSets, AvailabilitySet\",\n      \"NODE_POOL_DISKSIZE\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].DiskSize should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].MinCount should not be empty\",\n      \"NODE_POOL_REGION\":\"Encountered
    invalid input: Cluster.Kube.AKS.Location should be valid\",\n      \"AKS_RESOURCE_GROUP_NAME\":\"Encountered
    invalid input: Cluster.Kube.AKS.ResourceGroupName should not be empty\",\n      \"AKS_SUBSCRIPTION_ID\":\"Encountered
    invalid input: Cluster.Kube.AKS.SubscriptionID should not be empty\",\n      \"NODE_POOL_OSTYPE\":\"Encountered
    invalid input: Cluster.Kube.AKS.Nodepool[0].OSType should be one of Linux, Windows\",\n
    \     \"NODE_POOL_AZ\":\"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].AZ
    should be in the format ['1','2','3']\",\n      \"NODE_POOL_RS\":\"Encountered invalid
    input: Cluster.Kube.AKS.NetworkProfile.LoadBalancerSku not 'standard' so cannot
    create a nodepool with availability zones\",\n      \"SKU_TIER\":\"Encountered invalid
    input: Cluster.Kube.AKS.SKU.Tier should be one of Free, Paid\",\n      \"LBSKU\":\"Encountered
    invalid input: Cluster.Kube.AKS.NetworkProfile.LoadBalancerSku should be one of
    basic, standard\",\n      \"NODE_POOL_MODE\":\"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].Mode
    Should be one of User, System\",\n      \"NODE_POOL_NAME_VALID\":\"Encountered invalid
    input: AKSNodepool.Name Should be 1-12 charecters and lowercase.\",\n      \"RS_METRIC_NAME\":\"Encountered
    invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].MetricName not
    available\",\n      \"RS_AGGREGATION_TYPE\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].AggregationType
    not available\",\n      \"RS_OPERATOR\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Operator
    not available\",\n      \"RS_DURATION_TO_WATCH\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].DurationToWatch
    not available\",\n      \"RS_VERB\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Verb
    not available\",\n      \"RS_COUNT\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Count
    not available\",\n      \"RS_CAPACITY\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Capacity
    not available\",\n      \"RS_SCALE_TYPE\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].ScaleType
    not available\",\n      \"RS_TIME_WINDOW\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].TimeWindow
    not available\",\n      \"RS_COOLDOWN\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].CoolDown
    not available\",\n      \"RS_STATISTIC\":\"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Statistic
    not available\"\n\n    },\n    \"gke\":{\n      \"NODE_POOL_LENGTH\":\"Encountered
    invalid input: Cluster.Kube.GKE.Nodepool array length must be one\",\n      \"NODE_POOL_NAME\":\"Encountered
    invalid input: Cluster.Kube.GKE.Nodepool[0].Name cannot be empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered
    invalid input: Cluster.Kube.GKE.Nodepool[0].InstanceType Should be valid\",\n      \"NODE_POOL_COUNT\":\"Encountered
    invalid input: Cluster.Kube.EKS.Nodepool[0].InitialNodeCount should not be empty\",\n
    \     \"NODE_POOL_DISKSIZE\":\"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].DiskSize
    should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered invalid input:
    Cluster.Kube.GKE.Nodepool[0].MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: Cluster.Kube.GKE.Nodepool[0].MinCount should not be empty\",\n      \"NODE_POOL_REGION\":\"Encountered
    invalid input: Cluster.Kube.GKE.Location['%s'] should be valid\",\n      \"PROJECTID_NOTFOUND\":\"Encountered
    invalid input: Cluster.Kube.GKE.ProjectID should not be empty\"\n    },\n    \"external\":{\n
    \     \"IP_NOT_FOUND\":\"Encountered invalid input: Cluster.Kube.IP should not be
    empty\",\n      \"AUTH_TYPE\":\"Encountered invalid input: Cluster.Kube.AuthType
    should be one of password, config\",\n      \"USERNAME_NOTFOUND\":\"Encountered
    invalid input: Cluster.Kube.Auth.Basic.Username should not be empty\",\n      \"PASSWORD_NOTFOUND\":\"Encountered
    invalid input: Cluster.Kube.Auth.Password should not be empty\",\n      \"CONFIG_NOTFOUND\":\"Encountered
    invalid input: Cluster.Kube.Auth.Config.Config should not be empty\",\n      \"PORT_NOTFOUND\":\"Encountered
    invalid input: Cluster.Kube.Port should not be empty\"\n    },\n    \"eksnodepool\":{\n
    \     \"NODE_POOL_NAME\":\"Encountered invalid input: EKSNodepool.Name cannot be
    empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered invalid input: EKSNodepool.InstanceType
    Should be valid\",\n      \"NODE_POOL_AMITYPE\":\"Encountered invalid input: EKSNodepool.AMIType
    must be one of 'AL2_x86_64','AL2_x86_64_GPU','AL2_ARM_64'\",\n      \"NODE_POOL_DESIREDCAPACITY\":\"Encountered
    invalid input: EKSNodepool.DesiredCapacity should not be empty\",\n      \"NODE_POOL_DISKSIZE\":\"Encountered
    invalid input: EKSNodepool.DiskSize should not be empty\",\n      \"NODE_POOL_KEYNAME\":\"Encountered
    invalid input: EKSNodepool.KeyName should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered
    invalid input: EKSNodepool.MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: EKSNodepool.MinCount should not be empty\",\n      \"SUBNET_AZ\":\"Encountered
    invalid input: EKSNodepool.AZ need atleast one availability Zones\",\n      \"NODE_POOL_ROLE\":\"Encountered
    invalid input: EKSNodepool.NodePoolRole.RoleArn should not be empty\",\n      \"STORIDGE_NODEPOOL_MINCOUNT\":\"Encountered
    invalid input: EKSNodepool.Mincount should not be greater than 2\",\n      \"NODE_POOL_ROLEARN\":\"Encountered
    invalid input: EKSNodepool.NodePoolRole.RoleArn should be valid\",\n      \"NODE_POOL_AMIIMAGE\":\"Encountered
    invalid input: EKSNodepool.AMIImageID should not be empty\"\n    },\n    \"aksnodepool\":{\n
    \     \"NODE_POOL_NAME\":\"Encountered invalid input: AKSNodepool.Name Should be
    1-12 charecters and lowercase.\",\n      \"NODE_POOL_NAME_VALID\":\"Encountered
    invalid input: AKSNodepool.Name cannot be empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered
    invalid input: AKSNodepool.InstanceType Should be valid\",\n      \"NODE_POOL_COUNT\":\"Encountered
    invalid input: AKSNodepool.Count should not be empty\",\n      \"NODE_POOL_DISKSIZE\":\"Encountered
    invalid input: AKSNodepool.DiskSize should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered
    invalid input: AKSNodepool.MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: AKSNodepool.MinCount should not be empty\",\n      \"NODE_POOL_RESOURCE_GROUP\":\"Encountered
    invalid input: AKSNodepool.NodeResourceGroup Should not be empty\",\n      \"NODE_POOL_TYPE\":\"Encountered
    invalid input: AKSNodepool.Type should be one of VirtualMachineScaleSets, AvailabilitySet\",\n
    \     \"NODE_POOL_OSTYPE\":\"Encountered invalid input: AKSNodepool.OSType should
    be one of Linux, Windows\",\n      \"NODE_POOL_AZ\":\"Encountered invalid input:
    AKSNodepool.AZ should be in the format ['1','2','3']\",\n      \"NODE_POOL_MODE\":\"Encountered
    invalid input: AKSNodepool.Mode Should be one of User, System\",\n      \"RS_METRIC_NAME\":\"Encountered
    invalid input: AKSNodepool.AutoScale.RuleSets[%s].MetricName not available\",\n
    \     \"RS_AGGREGATION_TYPE\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].AggregationType
    not available\",\n      \"RS_OPERATOR\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Operator
    not available\",\n      \"RS_DURATION_TO_WATCH\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].DurationToWatch
    not available\",\n      \"RS_VERB\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Verb
    not available\",\n      \"RS_COUNT\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Count
    not available\",\n      \"RS_CAPACITY\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Capacity
    not available\",\n      \"RS_SCALE_TYPE\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].ScaleType
    not available\",\n      \"RS_TIME_WINDOW\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].TimeWindow
    not available\",\n      \"RS_COOLDOWN\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].CoolDown
    not available\",\n      \"RS_STATISTIC\":\"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Statistic
    not available\"\n    },\n    \"gkenodepool\":{\n      \"NODE_POOL_NAME\":\"Encountered
    invalid input: GKENodepool.Name cannot be empty\",\n      \"NODE_POOL_INSTANCETYPE\":\"Encountered
    invalid input: GKENodepool.InstanceType Should be valid\",\n      \"NODE_POOL_COUNT\":\"Encountered
    invalid input: GKENodepool.InitialNodeCount should not be empty\",\n      \"NODE_POOL_DISKSIZE\":\"Encountered
    invalid input: GKENodepool.DiskSize should not be empty\",\n      \"NODE_POOL_MAXCOUNT\":\"Encountered
    invalid input: GKENodepool.MaxCount should not be empty\",\n      \"NODE_POOL_MINCOUNT\":\"Encountered
    invalid input: GKENodepool.MinCount should not be empty\"\n    },\n\n    \"activity\":{\n
    \     \"ACTIVITY_NOTFOUND\":\"The requested activity '%s' is not found\"\n    }\n}"
  albcontrollercft.yaml: |
    ---
    AWSTemplateFormatVersion: '2010-09-09'
    Resources:
      AmazonEKSLoadBalancerControllerRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Federated: IDENTITY_PROVIDER_ARN
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  IDENTITY_PROVIDER_ID: "system:serviceaccount:kube-system:aws-load-balancer-controller"
          Path: "/"
          Policies:
          - PolicyName: AWSLoadBalancerControllerIAMPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: "*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: elasticloadbalancing.amazonaws.com
              - Effect: Allow
                Action:
                - ec2:DescribeAccountAttributes
                - ec2:DescribeAddresses
                - ec2:DescribeAvailabilityZones
                - ec2:DescribeInternetGateways
                - ec2:DescribeVpcs
                - ec2:DescribeVpcPeeringConnections
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - ec2:DescribeInstances
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeTags
                - ec2:GetCoipPoolUsage
                - ec2:DescribeCoipPools
                - elasticloadbalancing:DescribeLoadBalancers
                - elasticloadbalancing:DescribeLoadBalancerAttributes
                - elasticloadbalancing:DescribeListeners
                - elasticloadbalancing:DescribeListenerCertificates
                - elasticloadbalancing:DescribeSSLPolicies
                - elasticloadbalancing:DescribeRules
                - elasticloadbalancing:DescribeTargetGroups
                - elasticloadbalancing:DescribeTargetGroupAttributes
                - elasticloadbalancing:DescribeTargetHealth
                - elasticloadbalancing:DescribeTags
                Resource: "*"
              - Effect: Allow
                Action:
                - cognito-idp:DescribeUserPoolClient
                - acm:ListCertificates
                - acm:DescribeCertificate
                - iam:ListServerCertificates
                - iam:GetServerCertificate
                - waf-regional:GetWebACL
                - waf-regional:GetWebACLForResource
                - waf-regional:AssociateWebACL
                - waf-regional:DisassociateWebACL
                - wafv2:GetWebACL
                - wafv2:GetWebACLForResource
                - wafv2:AssociateWebACL
                - wafv2:DisassociateWebACL
                - shield:GetSubscriptionState
                - shield:DescribeProtection
                - shield:CreateProtection
                - shield:DeleteProtection
                Resource: "*"
              - Effect: Allow
                Action:
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:RevokeSecurityGroupIngress
                Resource: "*"
              - Effect: Allow
                Action:
                - ec2:CreateSecurityGroup
                Resource: "*"
              - Effect: Allow
                Action:
                - ec2:CreateTags
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  StringEquals:
                    ec2:CreateAction: CreateSecurityGroup
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - ec2:CreateTags
                - ec2:DeleteTags
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:RevokeSecurityGroupIngress
                - ec2:DeleteSecurityGroup
                Resource: "*"
                Condition:
                  'Null':
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - elasticloadbalancing:CreateLoadBalancer
                - elasticloadbalancing:CreateTargetGroup
                Resource: "*"
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - elasticloadbalancing:CreateListener
                - elasticloadbalancing:DeleteListener
                - elasticloadbalancing:CreateRule
                - elasticloadbalancing:DeleteRule
                Resource: "*"
              - Effect: Allow
                Action:
                - elasticloadbalancing:AddTags
                - elasticloadbalancing:RemoveTags
                Resource:
                - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
                - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
                - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - elasticloadbalancing:AddTags
                - elasticloadbalancing:RemoveTags
                Resource:
                - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
                - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
                - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
                - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
              - Effect: Allow
                Action:
                - elasticloadbalancing:ModifyLoadBalancerAttributes
                - elasticloadbalancing:SetIpAddressType
                - elasticloadbalancing:SetSecurityGroups
                - elasticloadbalancing:SetSubnets
                - elasticloadbalancing:DeleteLoadBalancer
                - elasticloadbalancing:ModifyTargetGroup
                - elasticloadbalancing:ModifyTargetGroupAttributes
                - elasticloadbalancing:DeleteTargetGroup
                Resource: "*"
                Condition:
                  'Null':
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - elasticloadbalancing:RegisterTargets
                - elasticloadbalancing:DeregisterTargets
                Resource: arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
              - Effect: Allow
                Action:
                - elasticloadbalancing:SetWebAcl
                - elasticloadbalancing:ModifyListener
                - elasticloadbalancing:AddListenerCertificates
                - elasticloadbalancing:RemoveListenerCertificates
                - elasticloadbalancing:ModifyRule
                Resource: "*"
          - PolicyName: AWSLoadBalancerControllerAdditionalIAMPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - ec2:CreateTags
                - ec2:DeleteTags
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  'Null':
                    aws:ResourceTag/ingress.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                - elasticloadbalancing:AddTags
                - elasticloadbalancing:RemoveTags
                - elasticloadbalancing:DeleteTargetGroup
                Resource:
                - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
                - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
                - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
                Condition:
                  'Null':
                    aws:ResourceTag/ingress.k8s.aws/cluster: 'false'
  amazon-eks-vpc-private-public.yaml: "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription:
    'Amazon EKS Sample VPC - Private and Public subnets'\n\nParameters:\n\n  VpcBlock:\n
    \   Type: String\n    Default: VPC_VALUE\n    Description: The CIDR range for the
    VPC. This should be a valid private (RFC 1918) CIDR range.\n\n  PublicSubnet01Block:\n
    \   Type: String\n    Default: SUBNET01_VALUE\n    Description: CidrBlock for public
    subnet 01 within the VPC\n\n  PublicSubnet02Block:\n    Type: String\n    Default:
    SUBNET02_VALUE\n    Description: CidrBlock for public subnet 02 within the VPC\n\n
    \ PrivateSubnet01Block:\n    Type: String\n    Default: SUBNET03_VALUE\n    Description:
    CidrBlock for private subnet 03 within the VPC\n\n  PrivateSubnet02Block:\n    Type:
    String\n    Default: SUBNET04_VALUE\n    Description: CidrBlock for private subnet
    04 within the VPC\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n
    \     -\n        Label:\n          default: \"Worker Network Configuration\"\n        Parameters:\n
    \         - VpcBlock\n          - PublicSubnet01Block\n          - PublicSubnet02Block\n
    \         - PrivateSubnet01Block\n          - PrivateSubnet02Block\n\nResources:\n
    \ VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock:  !Ref VpcBlock\n
    \     EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n      -
    Key: Name\n        Value: !Sub '${AWS::StackName}-VPC'\n      - Key: source\n        Value:
    gopaddle\n\n  InternetGateway:\n    Type: \"AWS::EC2::InternetGateway\"\n    Properties:\n
    \     Tags:\n      - Key: source\n        Value: gopaddle\n\n  VPCGatewayAttachment:\n
    \   Type: \"AWS::EC2::VPCGatewayAttachment\"\n    Properties:\n      InternetGatewayId:
    !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value:
    Public Subnets\n      - Key: Network\n        Value: Public\n      - Key: source\n
    \       Value: gopaddle\n  PrivateRouteTable01:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value:
    Private Subnet AZ1\n      - Key: Network\n        Value: Private01\n      - Key:
    source\n        Value: gopaddle\n\n  PrivateRouteTable02:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value:
    Private Subnet AZ2\n      - Key: Network\n        Value: Private02\n      - Key:
    source\n        Value: gopaddle\n\n  PublicRoute:\n    DependsOn: VPCGatewayAttachment\n
    \   Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n
    \     DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n
    \ PrivateRoute01:\n    DependsOn:\n    - VPCGatewayAttachment\n    - NatGateway01\n
    \   Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable01\n
    \     DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway01\n\n
    \ PrivateRoute02:\n    DependsOn:\n    - VPCGatewayAttachment\n    - NatGateway02\n
    \   Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable02\n
    \     DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway02\n\n
    \ NatGateway01:\n    DependsOn:\n    - NatGatewayEIP1\n    - PublicSubnet01\n    -
    VPCGatewayAttachment\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:
    !GetAtt 'NatGatewayEIP1.AllocationId'\n      SubnetId: !Ref PublicSubnet01\n      Tags:\n
    \     - Key: Name\n        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'\n      -
    Key: source\n        Value: gopaddle\n\n  NatGateway02:\n    DependsOn:\n    - NatGatewayEIP2\n
    \   - PublicSubnet02\n    - VPCGatewayAttachment\n    Type: AWS::EC2::NatGateway\n
    \   Properties:\n      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'\n      SubnetId:
    !Ref PublicSubnet02\n      Tags:\n      - Key: Name\n        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'\n
    \     - Key: source\n        Value: gopaddle\n\n  NatGatewayEIP1:\n    DependsOn:\n
    \   - VPCGatewayAttachment\n    Type: 'AWS::EC2::EIP'\n    Properties:\n      Domain:
    vpc\n\n  NatGatewayEIP2:\n    DependsOn:\n    - VPCGatewayAttachment\n    Type:
    'AWS::EC2::EIP'\n    Properties:\n      Domain: vpc\n\n  PublicSubnet01:\n    Type:
    AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet 01\n    Properties:\n      MapPublicIpOnLaunch:
    true\n      AvailabilityZone:\n        Fn::Select:\n        - '0'\n        - Fn::GetAZs:\n
    \           Ref: AWS::Region\n      CidrBlock:\n        Ref: PublicSubnet01Block\n
    \     VpcId:\n        Ref: VPC\n      Tags:\n      - Key: Name\n        Value: !Sub
    \"${AWS::StackName}-PublicSubnet01\"\n      - Key: kubernetes.io/role/elb\n        Value:
    1\n      - Key: source\n        Value: gopaddle\n\n  PublicSubnet02:\n    Type:
    AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet 02\n    Properties:\n      MapPublicIpOnLaunch:
    true\n      AvailabilityZone:\n        Fn::Select:\n        - '1'\n        - Fn::GetAZs:\n
    \           Ref: AWS::Region\n      CidrBlock:\n        Ref: PublicSubnet02Block\n
    \     VpcId:\n        Ref: VPC\n      Tags:\n      - Key: Name\n        Value: !Sub
    \"${AWS::StackName}-PublicSubnet02\"\n      - Key: kubernetes.io/role/elb\n        Value:
    1\n      - Key: source\n        Value: gopaddle\n\n  PrivateSubnet01:\n    Type:
    AWS::EC2::Subnet\n    Metadata:\n      Comment: Subnet 03\n    Properties:\n      AvailabilityZone:\n
    \       Fn::Select:\n        - '0'\n        - Fn::GetAZs:\n            Ref: AWS::Region\n
    \     CidrBlock:\n        Ref: PrivateSubnet01Block\n      VpcId:\n        Ref:
    VPC\n      Tags:\n      - Key: Name\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet01\"\n
    \     - Key: kubernetes.io/role/internal-elb\n        Value: 1\n      - Key: source\n
    \       Value: gopaddle\n\n  PrivateSubnet02:\n    Type: AWS::EC2::Subnet\n    Metadata:\n
    \     Comment: Private Subnet 02\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n
    \       - '1'\n        - Fn::GetAZs:\n            Ref: AWS::Region\n      CidrBlock:\n
    \       Ref: PrivateSubnet02Block\n      VpcId:\n        Ref: VPC\n      Tags:\n
    \     - Key: Name\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet02\"\n      -
    Key: kubernetes.io/role/internal-elb\n        Value: 1\n      - Key: source\n        Value:
    gopaddle\n\n  PublicSubnet01RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PublicSubnet01\n      RouteTableId: !Ref PublicRouteTable\n\n
    \ PublicSubnet02RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PublicSubnet02\n      RouteTableId: !Ref PublicRouteTable\n\n
    \ PrivateSubnet01RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PrivateSubnet01\n      RouteTableId: !Ref
    PrivateRouteTable01\n\n  PrivateSubnet02RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PrivateSubnet02\n      RouteTableId: !Ref
    PrivateRouteTable02\n\n  ControlPlaneSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n
    \   Properties:\n      GroupDescription: Cluster communication with worker nodes\n
    \     VpcId: !Ref VPC\n      Tags:\n      - Key: source\n        Value: gopaddle\n\nOutputs:\n\n
    \ SubnetIds:\n    Description: Subnets IDs in the VPC\n    Value: !Join [ \",\",
    [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02
    ] ]\n\n  SecurityGroups:\n    Description: Security group for the cluster control
    plane communication with worker nodes\n    Value: !Join [ \",\", [ !Ref ControlPlaneSecurityGroup
    ] ]\n\n  VpcId:\n    Description: The VPC Id\n    Value: !Ref VPC\n\n  Subnet01ID:\n
    \   Description: The Subnet01 Id\n    Value: !Ref PublicSubnet01\n\n  Subnet02ID:\n
    \   Description: The Subnet02 Id\n    Value: !Ref PublicSubnet02\n\n  Subnet03ID:\n
    \   Description: The Subnet03 Id\n    Value: !Ref PrivateSubnet01\n\n  Subnet04ID:\n
    \   Description: The Subnet04 Id\n    Value: !Ref PrivateSubnet02\n  \n  Subnet01AZ:\n
    \   Description: The Subnet01 AZ\n    Value: !GetAtt \n          - PublicSubnet01\n
    \         - AvailabilityZone\n\n  Subnet02AZ:\n    Description: The Subnet02 AZ\n
    \   Value: !GetAtt \n          - PublicSubnet02\n          - AvailabilityZone\n\n
    \ Subnet03AZ:\n    Description: The Subnet03 AZ\n    Value: !GetAtt \n          -
    PrivateSubnet01\n          - AvailabilityZone\n\n  Subnet04AZ:\n    Description:
    The Subnet04 AZ\n    Value: !GetAtt \n          - PrivateSubnet02\n          - AvailabilityZone"
  amazon-eks-fully-private-vpc.yaml: "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription:
    'Amazon EKS Sample VPC - Private only subnets. These subnets do not have access
    to the Internet and this templates creates the recommended VPC Endpoints for running
    EKS Clusters.'\n\nParameters:\n\n  VpcBlock:\n    Type: String\n    Default: VPC_VALUE\n
    \   Description: The CIDR range for the VPC. This should be a valid private (RFC
    1918) CIDR range.\n\n  PrivateSubnet01Block:\n    Type: String\n    Default: SUBNET01_VALUE\n
    \   Description: CidrBlock for private subnet 01 within the VPC\n\n  PrivateSubnet02Block:\n
    \   Type: String\n    Default: SUBNET02_VALUE\n    Description: CidrBlock for private
    subnet 02 within the VPC\n\n  PrivateSubnet03Block:\n    Type: String\n    Default:
    SUBNET03_VALUE\n    Description: CidrBlock for private subnet 03 within the VPC\n\nMetadata:\n
    \ AWS::CloudFormation::Interface:\n    ParameterGroups:\n      -\n        Label:\n
    \         default: \"Primary Worker Network Configuration\"\n        Parameters:\n
    \         - VpcBlock\n          - PrivateSubnet01Block\n          - PrivateSubnet02Block\n
    \         - PrivateSubnet03Block\n  \nConditions:\n  Has2Azs:\n    Fn::Or:\n      -
    Fn::Equals:\n        - {Ref: 'AWS::Region'}\n        - ap-south-1\n      - Fn::Equals:\n
    \       - {Ref: 'AWS::Region'}\n        - ap-northeast-2\n      - Fn::Equals:\n
    \       - {Ref: 'AWS::Region'}\n        - ca-central-1\n      - Fn::Equals:\n        -
    {Ref: 'AWS::Region'}\n        - cn-north-1\n      - Fn::Equals:\n        - {Ref:
    'AWS::Region'}\n        - sa-east-1\n      - Fn::Equals:\n        - {Ref: 'AWS::Region'}\n
    \       - us-west-1\n\n  HasMoreThan2Azs:\n    Fn::Not:\n      - Condition: Has2Azs\n\nMappings:\n
    \ ServiceNamePrefixMap:\n    aws:\n      Name: com.amazonaws\n    aws-cn:\n      Name:
    cn.com.amazonaws\n    aws-us-gov:\n      Name: com.amazonaws\n\nResources:\n  VPC:\n
    \   Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock:  !Ref VpcBlock\n      EnableDnsSupport:
    true\n      EnableDnsHostnames: true\n      Tags:\n      - Key: Name\n        Value:
    !Sub '${AWS::StackName}-VPC'\n\n  PrivateRouteTable:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: !Ref VPC\n\n  PrivateSubnet01:\n    Type: AWS::EC2::Subnet\n
    \   Metadata:\n      Comment: Private Subnet 01\n    Properties:\n      AvailabilityZone:\n
    \       Fn::Select:\n        - '0'\n        - Fn::GetAZs:\n            Ref: AWS::Region\n
    \     CidrBlock:\n        Ref: PrivateSubnet01Block\n      VpcId:\n        Ref:
    VPC\n      Tags:\n      - Key: Name\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet01\"\n
    \     - Key: kubernetes.io/role/internal-elb\n        Value: 1\n\n  PrivateSubnet02:\n
    \   Type: AWS::EC2::Subnet\n    Metadata:\n      Comment: Private Subnet 02\n    Properties:\n
    \     AvailabilityZone:\n        Fn::Select:\n        - '1'\n        - Fn::GetAZs:\n
    \           Ref: AWS::Region\n      CidrBlock:\n        Ref: PrivateSubnet02Block\n
    \     VpcId:\n        Ref: VPC\n      Tags:\n      - Key: Name\n        Value: !Sub
    \"${AWS::StackName}-PrivateSubnet02\"\n      - Key: kubernetes.io/role/internal-elb\n
    \       Value: 1\n\n  PrivateSubnet03:\n    Condition: HasMoreThan2Azs\n    Type:
    AWS::EC2::Subnet\n    Metadata:\n      Comment: Private Subnet 03\n    Properties:\n
    \     AvailabilityZone:\n        Fn::Select:\n        - '2'\n        - Fn::GetAZs:\n
    \           Ref: AWS::Region\n      CidrBlock:\n        Ref: PrivateSubnet03Block\n
    \     VpcId:\n        Ref: VPC\n      Tags:\n      - Key: Name\n        Value: !Sub
    \"${AWS::StackName}-PrivateSubnet03\"\n      - Key: kubernetes.io/role/internal-elb\n
    \       Value: 1\n\n  PrivateSubnet01RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PrivateSubnet01\n      RouteTableId: !Ref
    PrivateRouteTable\n\n  PrivateSubnet02RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref PrivateSubnet02\n      RouteTableId: !Ref
    PrivateRouteTable\n\n  PrivateSubnet03RouteTableAssociation:\n    Condition: HasMoreThan2Azs\n
    \   Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId:
    !Ref PrivateSubnet03\n      RouteTableId: !Ref PrivateRouteTable\n     \n  EndpointSecurityGroup:\n
    \   Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Security
    group to govern who can access the endpoints\n      VpcId: !Ref VPC\n      SecurityGroupIngress:\n
    \       - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp:
    !Ref VpcBlock\n          \n  S3APIEndpoint:\n    Type: \"AWS::EC2::VPCEndpoint\"\n
    \   Properties:\n      ServiceName: !Sub \"com.amazonaws.${AWS::Region}.s3\"\n      VpcEndpointType:
    Gateway\n      RouteTableIds:\n        - !Ref PrivateRouteTable\n      VpcId: !Ref
    VPC\n\n  ECRAPIEndpoint:\n    Type: \"AWS::EC2::VPCEndpoint\"\n    Properties:\n
    \     ServiceName: \n        !Join [ \".\", [ !FindInMap [ServiceNamePrefixMap,
    !Ref \"AWS::Partition\", Name], !Ref \"AWS::Region\", \"ecr.api\" ] ]\n      VpcEndpointType:
    Interface\n      PrivateDnsEnabled: true \n      SecurityGroupIds:\n        - !GetAtt
    EndpointSecurityGroup.GroupId\n      SubnetIds:\n        - !Ref PrivateSubnet01\n
    \       - !Ref PrivateSubnet02\n        - Fn::If:\n          - HasMoreThan2Azs\n
    \         - !Ref PrivateSubnet03\n          - !Ref AWS::NoValue\n      VpcId: !Ref
    VPC\n\n  ECRDockerEndpoint:\n    Type: \"AWS::EC2::VPCEndpoint\"\n    Properties:\n
    \     ServiceName: \n        !Join [ \".\", [ !FindInMap [ServiceNamePrefixMap,
    !Ref \"AWS::Partition\", Name], !Ref \"AWS::Region\", \"ecr.dkr\" ] ]\n      VpcEndpointType:
    Interface\n      PrivateDnsEnabled: true \n      SecurityGroupIds:\n        - !GetAtt
    EndpointSecurityGroup.GroupId\n      SubnetIds:\n        - !Ref PrivateSubnet01\n
    \       - !Ref PrivateSubnet02\n        - Fn::If:\n          - HasMoreThan2Azs\n
    \         - !Ref PrivateSubnet03\n          - !Ref AWS::NoValue\n      VpcId: !Ref
    VPC\n\n  EC2Endpoint:\n    Type: \"AWS::EC2::VPCEndpoint\"\n    Properties:\n      ServiceName:
    \n        !Join [ \".\", [ !FindInMap [ServiceNamePrefixMap, !Ref \"AWS::Partition\",
    Name], !Ref \"AWS::Region\", \"ec2\" ] ]\n      VpcEndpointType: Interface\n      PrivateDnsEnabled:
    true \n      SecurityGroupIds:\n        - !GetAtt EndpointSecurityGroup.GroupId\n
    \     SubnetIds:\n        - !Ref PrivateSubnet01\n        - !Ref PrivateSubnet02\n
    \       - Fn::If:\n          - HasMoreThan2Azs\n          - !Ref PrivateSubnet03\n
    \         - !Ref AWS::NoValue\n      VpcId: !Ref VPC\n\n  CWLogsEndpoint:\n    Type:
    \"AWS::EC2::VPCEndpoint\"\n    Properties:\n      ServiceName: !Sub \"com.amazonaws.${AWS::Region}.logs\"\n
    \     VpcEndpointType: Interface\n      PrivateDnsEnabled: true \n      SecurityGroupIds:\n
    \       - !GetAtt EndpointSecurityGroup.GroupId\n      SubnetIds:\n        - !Ref
    PrivateSubnet01\n        - !Ref PrivateSubnet02\n        - Fn::If:\n          -
    HasMoreThan2Azs\n          - !Ref PrivateSubnet03\n          - !Ref AWS::NoValue\n
    \     VpcId: !Ref VPC\n\n  STSEndpoint:\n    Type: \"AWS::EC2::VPCEndpoint\"\n    Properties:\n
    \     ServiceName: \n        !Join [ \".\", [ !FindInMap [ServiceNamePrefixMap,
    !Ref \"AWS::Partition\", Name], !Ref \"AWS::Region\", \"sts\" ] ]\n      VpcEndpointType:
    Interface\n      PrivateDnsEnabled: true \n      SecurityGroupIds:\n        - !GetAtt
    EndpointSecurityGroup.GroupId\n      SubnetIds:\n        - !Ref PrivateSubnet01\n
    \       - !Ref PrivateSubnet02\n        - Fn::If:\n          - HasMoreThan2Azs\n
    \         - !Ref PrivateSubnet03\n          - !Ref AWS::NoValue\n      VpcId: !Ref
    VPC\n\n  ControlPlaneSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n
    \     GroupDescription: Cluster communication with worker nodes\n      VpcId: !Ref
    VPC\n\nOutputs:\n\n  VpcId:\n    Description: The VPC ID\n    Value: !Ref VPC\n\n
    \ SubnetIds:\n    Description: All subnets in the VPC\n    Value:\n      Fn::If:\n
    \     - HasMoreThan2Azs\n      - !Join [ \",\", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02,
    !Ref PrivateSubnet03 ] ]\n      - !Join [ \",\", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02
    ] ]\n\n  SecurityGroups:\n    Description: Security group for the cluster control
    plane communication with worker nodes\n    Value: !Join [ \",\", [ !Ref ControlPlaneSecurityGroup
    ] ]\n\n  Subnet01ID:\n    Description: The Subnet01 Id\n    Value: !Ref PrivateSubnet01\n\n
    \ Subnet02ID:\n    Description: The Subnet02 Id\n    Value: !Ref PrivateSubnet02\n\n
    \ Subnet03ID:\n    Condition: HasMoreThan2Azs\n    Description: The Subnet03 Id\n
    \   Value: !Ref PrivateSubnet03\n\n  \n  Subnet01AZ:\n    Description: The Subnet01
    AZ\n    Value: !GetAtt \n          - PrivateSubnet01\n          - AvailabilityZone\n\n
    \ Subnet02AZ:\n    Description: The Subnet02 AZ\n    Value: !GetAtt \n          -
    PrivateSubnet02\n          - AvailabilityZone\n\n  Subnet03AZ:\n    Condition: HasMoreThan2Azs\n
    \   Description: The Subnet03 AZ\n    Value: !GetAtt \n          - PrivateSubnet03\n
    \         - AvailabilityZone\n"
  bastion-cft.yaml: "# Reference - https://aws.amazon.com/blogs/infrastructure-and-automation/best-practices-for-deploying-ec2-instances-with-aws-cloudformation/\n---\nAWSTemplateFormatVersion:
    '2010-09-09'\nDescription: 'Amazon EKS Sample VPC'\n\nParameters:\n\n  SubnetBlock:\n
    \   Type: String\n    Default: SUBNET_VALUE\n    Description: CidrBlock for subnet
    04 within the VPC\n\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n
    \     -\n        Label:\n          default: \"Worker Network Configuration\"\n        Parameters:\n
    \         - SubnetBlock\n\nResources:\n\n  InternetGateway:\n    Type: \"AWS::EC2::InternetGateway\"\n
    \   Properties:\n      Tags:\n      - Key: source\n        Value: gopaddle\n\n  VPCGatewayAttachment:\n
    \   Type: \"AWS::EC2::VPCGatewayAttachment\"\n    Properties:\n      InternetGatewayId:
    !Ref InternetGateway\n      VpcId: VPC_ID\n      \n\n  RouteTable:\n    Type: AWS::EC2::RouteTable\n
    \   Properties:\n      VpcId: VPC_ID\n      Tags:\n      - Key: Name\n        Value:
    Public Subnets\n      - Key: Network\n        Value: Public\n      - Key: source\n
    \       Value: gopaddle\n\n\n  Route:\n    DependsOn: VPCGatewayAttachment\n    Type:
    AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref RouteTable\n      DestinationCidrBlock:
    0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n    \n\n  Subnet:\n    Type: AWS::EC2::Subnet\n
    \   Metadata:\n      Comment: Subnet 01\n    Properties:\n      MapPublicIpOnLaunch:
    true\n      AvailabilityZone: SUBNET_ZONE\n      CidrBlock:\n        Ref: SubnetBlock\n
    \     VpcId: VPC_ID\n      Tags:\n      - Key: Name\n        Value: !Sub \"${AWS::StackName}-Subnet04\"\n
    \     - Key: SUBNET_TAG\n        Value: 1\n      - Key: source\n        Value: gopaddle\n\n
    \ SubnetRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n
    \   Properties:\n      SubnetId: !Ref Subnet\n      RouteTableId: !Ref RouteTable\n
    \ \n  SecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription:
    Bastion Host Security Group\n      VpcId: VPC_ID\n      SecurityGroupIngress:\n
    \       - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n        -
    IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n      Tags:\n      -
    Key: source\n        Value: gopaddle\n       \n  SecurityGroupIngress22:\n    Type:
    \"AWS::EC2::SecurityGroupIngress\"\n    DependsOn: SecurityGroup\n    Properties:\n
    \     Description: Allow node to communicate with each other\n      CidrIp: 0.0.0.0/0\n
    \     FromPort: 22\n      GroupId: !Ref SecurityGroup\n      IpProtocol: tcp\n      ToPort:
    22\n      \n  SecurityGroupIngress443:\n    Type: \"AWS::EC2::SecurityGroupIngress\"\n
    \   DependsOn: SecurityGroup\n    Properties:\n      Description: Allow node to
    communicate with each other\n      CidrIp: 0.0.0.0/0\n      FromPort: 443\n      GroupId:
    !Ref SecurityGroup\n      IpProtocol: tcp\n      ToPort: 443\n\n  Ec2Instance: \n
    \   Type: AWS::EC2::Instance\n    Properties: \n      ImageId: IMAGE_ID\n      KeyName:
    KEY_NAME\n      InstanceType: \"t2.micro\"\n      NetworkInterfaces: \n      - AssociatePublicIpAddress:
    \"true\"\n        DeviceIndex: \"0\"\n        GroupSet: \n          - Ref: SecurityGroup\n
    \       SubnetId: \n          Ref: Subnet\n      Tags:\n      - Key: source\n        Value:
    gopaddle\n      UserData: !Base64\n        \"Fn::Sub\": |\n          #!/bin/bash\n
    \         sudo apt update\n          sudo snap install amazon-ssm-agent --classic
    \n          sudo snap switch --channel=candidate amazon-ssm-agent \n          sudo
    snap refresh amazon-ssm-agent\n          sudo snap start amazon-ssm-agent \n          sudo
    snap services amazon-ssm-agent \n  \nOutputs:\n\n  SubnetID:\n    Description: The
    Subnet Id\n    Value: !Ref Subnet\n  \n  InstanceID:\n    Description: The Instance
    Id\n    Value: !Ref Ec2Instance\n    \n  SecurityGroupID:\n    Description: The
    Security Group Id\n    Value: !Ref SecurityGroup\n\n  PublicIp: \n    Value: !GetAtt
    \n          - Ec2Instance\n          - PublicIp\n    Description: Ec2Instance's
    PublicIp Address\n"
  bastion-kubeconfig.yaml: |-
    ---
    apiVersion: v1
    clusters:
    - cluster:
        server: https://localhost:9444
        insecure-skip-tls-verify: true
      name: EKS_CLUSTER_ARN
    contexts:
    - context:
        cluster: EKS_CLUSTER_ARN
        user: cluster/EKS_CLUSTER_NAME
      name: EKS_CLUSTER_ARN
    current-context: EKS_CLUSTER_ARN
    kind: Config
    preferences: {}
    users:
    - name: cluster/EKS_CLUSTER_NAME
      user:
        exec:
          apiVersion: client.authentication.k8s.io/v1beta1
          args:
          - --region
          - EKS_REGION
          - eks
          - get-token
          - --cluster-name
          - EKS_CLUSTER_NAME
          command: aws
          env:
          - name: AWS_ACCESS_KEY_ID
            value:  EKS_OWNER_ACCESS
          - name: AWS_SECRET_ACCESS_KEY
            value: EKS_OWNER_SECRET
  ssm_document.json: |-
    {
        "schemaVersion": "0.3",
        "description": "Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies",
        "assumeRole": "{{AutomationAssumeRole}}",
        "parameters": {
          "AutomationAssumeRole": {
            "type": "String"
          },
          "InstanceId": {
            "type": "String"
          },
          "IsPolicyAttachAllowed": {
            "type": "String"
          }
        },
        "mainSteps": [
          {
            "outputs": [
              {
                "Type": "String",
                "Name": "existingInstanceProfileRoleName",
                "Selector": "$.Payload.RoleName"
              }
            ],
            "inputs": {
              "Script": "import boto3\n\ndef getInstanceProfileName(events, context):\n    ec2_client = boto3.client(\"ec2\")\n    response = ec2_client.describe_instances(InstanceIds=[events[\"InstanceId\"]])\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('/').pop()}\n    return {'RoleName': 'NoRoleFound'}",
              "Runtime": "python3.6",
              "InputPayload": {
                "InstanceId": "{{InstanceId}}"
              },
              "Handler": "getInstanceProfileName"
            },
            "name": "getExistingRoleName",
            "action": "aws:executeScript",
            "nextStep": "branchIfProfileExists"
          },
          {
            "inputs": {
              "Choices": [
                {
                  "StringEquals": "NoRoleFound",
                  "Variable": "{{getExistingRoleName.existingInstanceProfileRoleName}}",
                  "NextStep": "createRoleIfNotExists"
                }
              ],
              "Default": "checkIfPolicyAttachAllowed"
            },
            "name": "branchIfProfileExists",
            "action": "aws:branch"
          },
          {
            "inputs": {
              "Choices": [
                {
                  "StringEquals": "true",
                  "Variable": "{{IsPolicyAttachAllowed}}",
                  "NextStep": "getRoleFromInstanceProfile"
                }
              ],
              "Default": "createRoleIfNotExists"
            },
            "name": "checkIfPolicyAttachAllowed",
            "action": "aws:branch"
          },
          {
            "outputs": [
              {
                "Type": "String",
                "Name": "existingRoleName",
                "Selector": "$.InstanceProfile.Roles[0].RoleName"
              }
            ],
            "inputs": {
              "InstanceProfileName": "{{getExistingRoleName.existingInstanceProfileRoleName}}",
              "Service": "iam",
              "Api": "GetInstanceProfile"
            },
            "name": "getRoleFromInstanceProfile",
            "action": "aws:executeAwsApi",
            "nextStep": "attachAmazonSSMManagedInstanceCoreToExistingRole"
          },
          {
            "inputs": {
              "RoleName": "{{getRoleFromInstanceProfile.existingRoleName}}",
              "PolicyArn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
              "Service": "iam",
              "Api": "AttachRolePolicy"
            },
            "name": "attachAmazonSSMManagedInstanceCoreToExistingRole",
            "action": "aws:executeAwsApi",
            "nextStep": "attachAmazonSSMPatchAssociationToExistingRole"
          },
          {
            "inputs": {
              "RoleName": "{{getRoleFromInstanceProfile.existingRoleName}}",
              "PolicyArn": "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
              "Service": "iam",
              "Api": "AttachRolePolicy"
            },
            "name": "attachAmazonSSMPatchAssociationToExistingRole",
            "action": "aws:executeAwsApi",
            "isEnd": true
          },
          {
            "inputs": {
              "Path": "/",
              "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
              "Description": "EC2 role for SSM for Quick-Setup",
              "AssumeRolePolicyDocument": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
              "Service": "iam",
              "Api": "CreateRole"
            },
            "name": "createRoleIfNotExists",
            "action": "aws:executeAwsApi",
            "description": "Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup",
            "onFailure": "Continue",
            "nextStep": "assertRoleForInstanceProfileExists"
          },
          {
            "inputs": {
              "PropertySelector": "$.Role.RoleName",
              "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
              "DesiredValues": [
                "AmazonSSMRoleForInstancesQuickSetup"
              ],
              "Service": "iam",
              "Api": "GetRole"
            },
            "name": "assertRoleForInstanceProfileExists",
            "action": "aws:assertAwsResourceProperty",
            "nextStep": "attachAmazonSSMManagedInstanceCoreToRole"
          },
          {
            "inputs": {
              "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
              "PolicyArn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
              "Service": "iam",
              "Api": "AttachRolePolicy"
            },
            "name": "attachAmazonSSMManagedInstanceCoreToRole",
            "action": "aws:executeAwsApi",
            "nextStep": "attachAmazonSSMPatchAssociationToRole"
          },
          {
            "inputs": {
              "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
              "PolicyArn": "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
              "Service": "iam",
              "Api": "AttachRolePolicy"
            },
            "name": "attachAmazonSSMPatchAssociationToRole",
            "action": "aws:executeAwsApi",
            "nextStep": "createInstanceProfileIfNotExists"
          },
          {
            "inputs": {
              "InstanceProfileName": "AmazonSSMRoleForInstancesQuickSetup",
              "Service": "iam",
              "Api": "CreateInstanceProfile"
            },
            "name": "createInstanceProfileIfNotExists",
            "action": "aws:executeAwsApi",
            "onFailure": "Continue",
            "nextStep": "addRoleToInstanceProfile"
          },
          {
            "inputs": {
              "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
              "InstanceProfileName": "AmazonSSMRoleForInstancesQuickSetup",
              "Service": "iam",
              "Api": "AddRoleToInstanceProfile"
            },
            "name": "addRoleToInstanceProfile",
            "action": "aws:executeAwsApi",
            "onFailure": "Continue",
            "nextStep": "executeAttachIAMToInstance"
          },
          {
            "maxAttempts": 10,
            "inputs": {
              "RuntimeParameters": {
                "AutomationAssumeRole": "{{ AutomationAssumeRole }}",
                "RoleName": "AmazonSSMRoleForInstancesQuickSetup",
                "InstanceId": "{{ InstanceId }}",
                "ForceReplace": false
              },
              "DocumentName": "AWS-AttachIAMToInstance"
            },
            "name": "executeAttachIAMToInstance",
            "action": "aws:executeAutomation",
            "timeoutSeconds": 60,
            "isEnd": true
          }
        ]
      }
---
# Source: gopaddle/charts/gp-core/templates/configmanager-configmanager-configmap-hxdat.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: configmanager-configmanager-configmap-hxdat
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: configmanager-configmanager-configmap-hxdat
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
  name: configmanager-configmanager-configmap-hxdat
  namespace: default
data:
  log_config.json: |
    {
      "formatters": {
        "configmanager": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "configmanager": {
          "class": "RotatingFileHandler",
          "filepath": "./configmanager.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "configmanager"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "configmanager"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "configmanager"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "configmanager"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "configmanager"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "configmanager"
          ]
        }
      }
    }
  validation.json: "{\n\t\"deploymentType\": [\n\t\t\"deployment\",\n\t\t\"statefulSet\",\n\t\t\"daemonSet\"\n\t],\n\t\"scalingStrategyType\":
    [\n\t\t\"resource\"\n\t],\n\t\"scalingStrategy\": {\n\t\t\"type\": \"string\",\n\t\t\"cpuLimit\":
    \"float64\",\n\t\t\"memoryLimit\": \"float64\",\n\t\t\"minScaleUnit\": \"float64\",\n\t\t\"maxScaleUnit\":
    \"float64\"\n\t},\n\t\"allocationStrategy\":{\n\t\t\"cpuLimit\": \"string\",\n\t\t\"cpuRequest\":
    \"string\",\n\t\t\"memoryLimit\": \"string\",\n\t\t\"memoryRequest\": \"string\"\n\t},\n\t\"deploymentStrategy\":{\n\t\t\"type\":\"string\",\n\t\t\"updateMethod\":\"string\",\n\t\t\"revisionHistory\":\"float64\"\n\t},\n\t\"service\":
    {\n\t\t\"expectedFields\" :{\n\t\t\t\"metaFields\": [ \"name\", \"serviceType\",
    \"artifactType\", \"serviceConfig\" ],\n\t\t\t\"basicServiceConfig\": [ \"osType\",
    \"network\" ],\n\t\t\t\"advancedServiceConfig\": [ \"osType\", \"network\" ],\n\n\t\t\t\"artifactType\":
    [ \"codeBased\", \"imageBased\", \"dockerfileBased\" ],\n\t\t\t\"osType\": [\t\"linux\",
    \"windows\" ],\n\t\t\t\"codebased\":{\n\t\t\t\t\"repository\": [ \"repoProvider\",
    \"repoURL\" ],\n\t\t\t\t\"script\": [ \"buildScript\", \"startScript\" ],\n\t\t\t\t\"buildImageConfig\":
    [ \"imageType\", \"imageName\" ],\n\t\t\t\t\"deploymentImageConfig\": [ \"imageType\",
    \"imageName\" ],\n\t\t\t\t\"distributionImageRegistryID\": []\n\t\t\t},\n\t\t\t\"imagebased\":
    [ \"imageName\" ],\n\t\t\t\"dockerfilebased\":{\n\t\t\t\t\"repository\": [ \"repoProvider\",
    \"repoURL\" ],\n\t\t\t\t\"distributionImageRegistryID\": []\n\t\t\t}\n\t\t}\n\t},\n\t\"volume\":
    {\n\t\t\"AWS\":[\n\t\t\t\"name\",\n\t\t\t\"volumeType\",\n\t\t\t\"platformID\",\n\t\t\t\"zones\",\n\t\t\t\"size\",\n\t\t\t\"volumeID\",\n\t\t\t\"accessMode\",\n\t\t\t\"volumeMode\"\n\t\t],\n\t\t\"GCE\":[\n\t\t\t\"name\",\n\t\t\t\"volumeType\",\n\t\t\t\"platformID\",\n\t\t\t\"projectID\",\n\t\t\t\"zone\",\n\t\t\t\"accessMode\"\n\t\t],\n\t\t\"fileSystemType\":
    [\n\t\t\t\"XFS\",\n\t\t\t\"Ext3\",\n\t\t\t\"Ext4\"\n\t\t],\n\t\t\"accessMode\":
    [\n\t\t\t\"ReadWriteOnce\",\n\t\t\t\"ReadOnlyMany\",\n\t\t\t\"ReadWriteMany\"\n\t\t],\n\t\t\"updateFields\":[\"AWSVolume\",\"GCEVolume\",\"application\",\"service\",\"volumeClaimPolicy\",\"status\",\"discovered\"]\n\t},\n\t\"volumeClaimPolicy\":
    {\n\t\t\"requiredFields\": [\n\t\t\t\"name\",\n\t\t\t\"accessMode\",\n\t\t\t\"resources\",\n\t\t\t\"volumeMode\"\n\t\t],\n\t\t\"resourcesRequiredFields\":
    [\n\t\t\t\"limits\",\n\t\t\t\"requests\"\n\t\t],\n\t\t\"accessMode\": [\n\t\t\t\"ReadWriteOnce\",\n\t\t\t\"ReadOnlyMany\",\n
    \           \"ReadWriteMany\"\n\t\t]\n\t}\n}"
  error_config.json: "{  \n  \"All\":{  \n    \"RESOURCE_NOT_FOUND\":\"Requested '%s'
    does not exist\",\n    \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Resource does not exit\",\n
    \   \"ERROR_HITTING_EXT_API\":\"Unable to communicate with external resources\",\n
    \   \"ALREADY_EXIST\":\"'%s' already exists\",\n    \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n    \"MISSING_FIELD_INSIDE\":\"Invalid
    input or missing mandatory field '%s' inside '%s'\",\n    \"INVALID_VALUE\":\"Invalid
    input for field '%s'\",\n    \"INVALID_TYPE\":\"Invalid input type for '%s'\",\n
    \   \"INVALID_FIELD\":\"Invalid input field '%s'\",\n    \"INVALID_VOLUME_TYPE\":\"Invalid
    Volume type for '%s'\",\n    \"INPUT_MISMATCH\":\"Given input JSON structure is
    mismatched\",\n    \"KEY_NOT_FOUND\":\" '%s' Key not found in Json\",\n    \"VALUE_NOT_FOUND\":\"
    '%s' Value not found in Json\",\n    \"UNSUPPORTED\":\"Given %s is not supported\",\n
    \   \"UNMARSHAL_ERROR\":\"The field '%s' is a '%s' type, but the given value is
    '%s' type\",\n    \"UNKNOWN_UNMARSHAL_ERROR\":\"The expected type is a '%s', but
    the given value is '%s' type\",\n    \"NP_NOTFOUND\":\"Requested Network Policy
    '%s' is not found\",\n    \"SOMETHING_WRONG\": \"Internal Error\",\n    \"INTERNAL_DB_COPY\":
    \"Could not format response from database object.\",\n    \"GEN_UNMARSHAL_ERROR\":\"Error
    in unmarshal '%s'\",\n    \"STRING_TO_INT_ERROR\":\"Error in converting string to
    int '%s'\",\n    \"FIELD_VALIDATION\":\"InvalidValidationError '%s'\",\n    \"MARSHAL_ERROR\":\"Error
    in marshaling '%s'\"\n  },\n  \"all\":{\n    \"INTERNAL_SERVER\":\"Something went
    wrong! Please try again later\", \n    \"RESOURCE_NOT_FOUND\":\"Requested '%s' does
    not exist\",\n    \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Resource does not exit\",\n
    \   \"ERROR_HITTING_EXT_API\":\"Unable to communicate with external resources\",\n
    \   \"SOMETHING_WRONG\":\"Internal Error\",\n    \"ALREADY_EXIST\":\"'%s' already
    exists\",\n    \"MISSING_FIELD\":\"Invalid input or missing mandatory field '%s'\",\n
    \   \"MISSING_FIELD_INSIDE\":\"Invalid input or missing mandatory field '%s' inside
    '%s'\",\n    \"INVALID_VALUE\":\"Invalid input for field '%s'\",\n    \"INVALID_TYPE\":\"Invalid
    input type for '%s'\",\n    \"INVALID_FIELD\":\"Invalid input field '%s'\",\n    \"INVALID_VOLUME_TYPE\":\"Invalid
    Volume type for '%s'\",\n    \"INPUT_MISMATCH\":\"Given input JSON structure is
    mismatched\",\n    \"KEY_NOT_FOUND\":\" '%s' Key not found in Json\",\n    \"VALUE_NOT_FOUND\":\"
    '%s' Value not found in Json\",\n    \"UNSUPPORTED\":\"Given %s is not supported\",\n
    \   \"UNMARSHAL_ERROR\":\"The field '%s' is a '%s' type, but the given value is
    '%s' type\",\n    \"UNKNOWN_UNMARSHAL_ERROR\":\"The expected type is a '%s', but
    the given value is '%s' type\",\n    \"MARSHAL_ERROR\":\"Error in marshaling '%s'\",\n
    \   \"NP_NOTFOUND\":\"Requested Network Policy '%s' is not found\",\n    \"CANT_DELETE_POLICY\":\"Gopaddle's
    default policy can't be removed\",\n    \"DR_NOTFOUND\":\"Requested Dependency Reference
    '%s' is not found\",\n    \"DEPENDENCY_EXIST_RESOURCE\":\"This Resource has dependency:
    '%s'\"\n  },\n  \"Config\":{  \n    \"CONFIG_NOTFOUND\":\"Requested config '%s'
    is not found\",\n    \"CONFIG_ALREADY_EXIST\":\"Requested config '%s' already exists\",\n
    \   \"FILES_EMPTY\":\"File array can not be empty if type is File\",\n    \"LITERALs_EMPTY\":\"Literal
    array can not be empty if type is Literal\",\n    \"NOT_IMPLEMENT\":\"This module
    has not been implemented\",\n    \"CONFIGHIST_NOT_FOUND\":\"Requested config history
    '%s' with version '%d' is not found\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can
    not be a negative number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid
    page '%d'; Page should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid
    size '%d' Page should be less than '%d'\",\n    \"INVALID_CONFIGID_FMT\":\"Requested
    config id is invalid formate '%s'\",\n    \"DONOT_MOD_FIELD\":\"You could not modify
    the field '%s' value after creation\"\n  },\n  \"Service\":{\n    \"SVC_NOTFOUND\":\"Requested
    container '%s' is not found\",\n    \"SVC_ALREADY_EXIST\":\"Requested container
    '%s' already exists\",\n    \"SVC_RELEASE_ALREADY_EXIST\":\"Requested release '%s'
    already exists in the service '%s'\",\n    \"SVCVERSION_ALREADY_EXIST\":\"Requested
    container version '%d' already exists\",\n    \"REPO_VALIDATION_FAILED\":\"Failed
    in repo validation: %s\",\n    \"REGISTRY_VALIDATION_FAILED\":\"Failed in registry
    validation: %s\",\n    \"NOT_IMPLEMENT\":\"This module has not been implemented\",\n
    \   \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative number { '%d', '%d'
    }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should be less than
    '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page should be less than
    '%d'\",\n    \"INVALID_SERVICEID_FMT\":\"Requested container id '%s' is invalid
    formate\",\n    \"INVALID_SERVICEVERSION_FMT\": \"Requested container '%s' with
    version '%s' is invalid formate\",\n    \"DONOT_MOD_FIELD\":\"You could not modify
    the field '%s' value after creation\",\n    \"SVCHIST_NOT_FOUND\":\"Requested container
    history '%s' with version '%s' is not found\",\n    \"ARTIFACT_EMPTY\":\"serviceConfig.artifactConfig.%s
    field can not be empty if artifacts type is %s\",\n    \"MISMATCHED_ARTIFACTS\":\"Given
    update type '%s' is not matched with the existing service artifact type '%s'\",\n
    \   \"ARTIFACT_UPDATE_EMPTY\":\"serviceConfig.artifactConfig.%s field can not be
    empty if update type is %s\",\n    \"INVALID_UPDATE_TYPE\":\"Invalid update type
    has been encountered '%s'\",\n\n    \"ROUTEPATH_PORT_ERROR\":\"Could not update
    container '%s' ! Given port '%d' is used in the route path '%s'.Delete all the route
    paths using the port, before deleting the port.\",\n    \"HEALTHCK_PORT_ERROR\":\"Given
    port '%d' in the health check does not exists in the ports input\",\n    \"HTTPHEALTHCK_MISSED\":\"Http
    healthcheck handler can not be empty if type is http\",\n    \"EXECHEALTHCK_MISSED\":\"Exec
    healthcheck handler can not be empty if type is exec\",\n    \"REFERED_BY_HEALTHCK\":\"The
    port '%d' is referred by healthcheck parameter\",\n    \"SERVICE_NOT_FOUND\":\"Requested
    container '%s' not found\",\n    \"SERVICEHIST_NOTFOUND\": \"Requested container
    '%s' version '%s' not found\",\n    \"UNSUPPORTED_BUILD\":\"Selected container '%s'
    does not support build operation\",\n    \"STORAGE_PATH\":\"The given stroage path
    '%s' is already used in config\",\n    \"CONFIG_MOUNTPATH\":\"The given config mount
    path '%s' is already used in storage\",\n    \"CI_NOT_APPLICABLE\":\"CI is enabled.But
    CI not applicable for Unregistered CodeBase Repository\",\n    \"CODEBASE_VALIDATION\":\"ServiceConfig.ArtifactConfig.CodebaseRepo.RegisteredCodebase
    is selected. So ServiceConfig.ArtifactConfig.CodebaseRepo.CodebaseID cannot be empty\",\n
    \   \"CONFIG_VERSION_DARFT\":\"Can't commit with config '%s' version as '%s'\",\n
    \   \"DECK_IS_NOT_ACTIVE\": \"Deck subscription is not active\",\n    \"ACCOUNT_NOT_ACTIVE\":
    \"Not an active account\",\n    \"PRIVATE_SCM\": \"Requested SCM type is not supported
    for deck subscription type '%s'\"\n  },\n  \"volumeClaimPolicy\":{  \n    \"UNSUPPORTED_TYPE\":\"Given
    %s '%s' is not supported\",\n    \"LIMIT_CAPACITY\":\"Limit Capacity '%d' should
    be greater than Requested Capacity '%d'\",\n    \"CAPACITY_LIMIT\":\"Limit value
    should be between '%d' and '%d'\",\n    \"CAPACITY_REQUEST\":\"Request values should
    be between '%d' and '%d'\",\n    \"VCP_NOTFOUND\":\"Requested Volume Claim Policy
    '%s' is not found\", \n    \"LIMIT_SUFFIX\":\"Limits suffix should be one of 'M'
    or 'Mi' or 'G' or 'Gi'\",\n    \"REQUEST_SUFFIX\":\"Requests suffix should be one
    of 'M' or 'Mi' or 'G' or 'Gi'\"\n\n  },\n  \"provisioner\":{\n    \"PV_NOTFOUND\":\"Requested
    Provisioner '%s' is not found\",\n    \"PV_ALREADY_EXIST\":\"Requested Provisioner
    '%s' already exist\",\n    \"INVALID_PV_FMT\":\"Requested service id is invalid
    format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative number
    { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page should
    be less than '%d'\"\n  },\n  \"storageClass\":{\n    \"SC_NOTFOUND\":\"Requested
    Storage Class '%s' is not found\",\n    \"SC_ALREADY_EXIST\":\"Requested Storage
    Class '%s' already exists\",\n    \"INVALID_SC_FMT\":\"Requested service id is invalid
    format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative number
    { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page should
    be less than '%d'\"\n  },\n  \"deploymentPolicy\":{\n    \"DP_NOTFOUND\":\"Requested
    Deployment Policy '%s' is not found\",\n    \"DP_ALREADY_EXIST\":\"Requested Deployment
    Policy '%s' already exists\",\n    \"DP_ROLLINGUPDATE\":\"Requested Deployment Policy
    with maxSurge '%d' and maxUnavailable '%d' not allowed. Both maxSurge and maxUnavailable
    cannot be 0. Set either one of these attributes to non-zero value.\",\n    \"INVALID_DP_FMT\":\"Requested
    service id is invalid format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can
    not be a negative number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid
    page '%d'; Page should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid
    size '%d' Page should be less than '%d'\"\n  },\n  \"schedulePolicy\":{\n    \"SP_NOTFOUND\":\"Requested
    Schedule Policy '%s' is not found\"\n  },\n  \"allocationPolicy\":{\n    \"AP_NOTFOUND\":\"Requested
    Allocation Policy '%s' is not found\",\n    \"AP_ALREADY_EXIST\":\"Requested Allocation
    Policy '%s' already exists\",\n    \"INVALID_AP_FMT\":\"Requested service id is
    invalid format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"CPU_LIMIT\":\"CPU value in millicore should be
    between '%d' and '%d'\",\n    \"MEMORY_M_LIMIT\":\"Memory values in MegaBytes should
    be between '%d' and '%d'\",\n    \"MEMORY_G_LIMIT\":\"Memory values in GigaBytes
    should be between '%d' and '%d'\",\n    \"MEMORY_SUFFIX\":\"Memory suffix should
    be one of 'E', 'P', 'T', 'G', 'M', 'K', 'Ei', 'Pi', 'Ti', 'Gi', 'Mi', 'Ki'.\",\n
    \   \"CPU_SUFFIX\":\"CPU suffix should be 'm'\",\n    \"INVALID_QUANTITY\":\"Value
    of '%s' contains invalid character '%s'\",\n    \"MEMORY_QUANTITY\":\"Memory limit
    '%s' should be greater than Request '%s'\",\n    \"CPU_QUANTITY\":\"CPU limit '%s'
    should be greater than Request '%s'\"\n  },\n  \"scalingPolicy\":{\n    \"SP_NOTFOUND\":\"Requested
    Scaling Policy '%s' is not found\",\n    \"SP_ALREADY_EXIST\":\"Requested Scaling
    Policy '%s' already exists\",\n    \"INVALID_SP_FMT\":\"Requested Scaling Policy
    is invalid format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"INVALID_MIN_MAX\": \"Requested Scaling Policy
    min Replica '%s' must be less then or equal to max  Replica '%s'\"\n  }\n}"
  profiles-kube.json: "{  \n  \"mongodb\":{  \n    \"db-name\":\"configmanager\",\n
    \   \"db-endpoint\":[  \n      \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n
    \   \"user-db\":\"admin\",\n    \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n
    \ },\n  \"redis\":{\n    \"redis-endpoint\":\"redis\",\n    \"redis-port\":\"6379\",\n
    \   \"redis-password\":\"avraj\"\n},\n\"jwt_params\": {\n   \"JWTExpirationDelta\":
    \"12\"\n},\n  \"logger\":{  \n    \"logType\":\"debug\"\n  },\n  \"service\":{\n
    \   \"iconDirectory\":\"/iconPath/%s/service/\",\n    \"iconAPI\":\"/v1/service/icon/%s\"\n
    \ },\n  \"version\":\"v1.0.0\"\n}"
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"updateProvisionerDependencyRef\":\"api-internal/%s/v1/provisioner/%s\"\n\t},\n\t\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  service_directory-kube.json: |
    {
        "platform.ep": {
            "host": "cloudmanager",
            "port": "8018"
        },
        "registry.ep": {
            "host": "cloudmanager",
            "port": "8018"
        },
        "codebase.ep": {
            "host": "gpcore",
            "port": "8759"
        },
        "builder.ep": {
            "host": "gpcore",
            "port": "8759"
        },
        "config.ep": {
            "host": "configmanager",
            "port": "8001"
        },
        "provisioner.ep": {
            "host": "configmanager",
            "port": "8001"
        },
        "nodechecker.ep": {
            "host": "nodechecker",
            "port": "8020"
        },
        "usermanager.ep":{
            "host": "usermanager",
            "port": "8005"
        },
        "servicegroup.ep":{
            "host":"deploymentmanager",
            "port":"8003"
        },
        "billing.ep":{
            "host":"costmanager",
            "port":"8011"
        },
         "gpcore.ep":{
            "host":"gpcore",
            "port":"8759"
        },
        "notification.ep":{
            "host":"activitymanager",
            "port":"8009"
        },
        "domain.ep":{
            "host":"domainmanager",
            "port":"8004"
        }
    }
  design_profiles.json: "{\n\t\"internal_ep\": {\n    \t\"VALIDATE_PUBLIC_URL\": \"api/%s/codebase?organizationID=%s&operation=url&url=%s\",\n
    \       \"VALIDATE_PRIVATE_URL\": \"api/%s/codebase?organizationID=%s&operation=url&url=%s&handle=%s&provider=%s\",\n
    \       \"REPO_TYPE_TAG\": \"api/%s/codebase?url=%s&tag=%s&operation=url&organizationID=%s\",\n
    \       \"REPO_HANDLE\": \"api/%s/codebase?handle=true&organizationID=%s\",\n        \"PRIVATE_REPO_TAG\":
    \"api/%s/codebase?handle=%s&provider=%s&url=%s&tag=%s&operation=url&organizationID=%s\",\n
    \       \"ADD_TAG\": \"api/%s/tags?organizationID=%s\",\n        \"DEL_TAG\": \"api/%s/tags/%s?organizationID=%s\",\n
    \       \"GET_TAG\": \"api/%s/tags/design?organizationID=%s\",\n        \"GET_TAG_QS\":
    \"api/%s/tags/design?tag=%s&organizationID=%s\",\n        \"POST_DESIGN_VERSION\":
    \"api/%s/design/version?organizationID=%s\"\n    }\n}"
---
# Source: gopaddle/charts/gp-core/templates/costmanager-costmanager-configmap-q1g1s.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: costmanager-costmanager-configmap-q1g1s
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: costmanager-costmanager-configmap-q1g1s
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
  name: costmanager-costmanager-configmap-q1g1s
  namespace: default
data:
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n\t},\n\t\"gpcore.ep\": {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\": \"8759\"\n\t},\n\t\"deploymentmanager.ep\":{\n\t\t\"host\":\"deploymentmanager\",\n\t\t\"port\":\"8003\"\n\t},\n\t\"clustermanager.ep\":{\n\t\t\"host\":\"clustermanager\",\n\t\t\"port\":\"8013\"\n\t},\n\t\"usermanager.ep\":{\n\t\t\"host\":\"usermanager\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"paymentmanager.ep\":{\n\t\t\"host\":\"paymentmanager\",\n\t\t\"port\":\"8021\"\n\t},\n
    \   \"costmanager.ep\":{\n        \"host\":\"costmanager\",\n        \"port\":\"8011\"\n
    \   }\n}"
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG": "Internal Error",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type"
        },
        "billing":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "BILLING_NOTFOUND":"Requested subscription '%s' is not found for this user",
          "BILLING_ALREADY_EXIST":"Requested subscription '%s' is already exist",
          "INVALID_BILLING_FMT":"Requested subscription id '%s' is invalid formate",
          "INVALID_UPDATETYPE":"Requesting UpdateType should be one of upgrade, downgrade, topup, activate, cancel and subscription",
          "INVALID_UPDATE_FMT":"Requesting Subscription '%s' Update Type is invalid",
          "INVALID_TOPUP_TYPE":"Cannot Add the topup for the plan '%s'. only plan 'professional' can be topup",
          "INVALID_TOPUP":"Subscription.Deck.Professional.Current.IsTopUpUsed should be true for adding topup",
          "INVALID_TOPUP_CONCURRENCY":"Subscription.Deck.Professional.Current.TopUp.TopupConcurrency should be greater than 0",
          "INVALID_TYPE_FMT":"Requesting Subscription '%s' Type Should be one of 'free','developer,'team','professional'",
          "INVALID_MODE_FMT":"Requesting Subscription Mode Should be a saas",
          "INVALID_UPGRADE_FMT":"Invalid Subscription upgrade",
          "INVALID_DOWNGRADE_FMT":"Invalid Subscription downgrade",
          "INVALID_SUBS_FMT":"This '%s' Plan Subscription Added already",
          "INVALID_CAN_FMT":"This Deck Plan Subscription is not available",
          "FREE_CAN_FMT":"Cannot cancel the Free Subscription",
          "FREE_ACT_FMT":"Cannot activate the Free Subscription",
          "INVALID_ACT_FMT":"This '%s' Plan Subscription is not available",
          "INVALID_CANCEL_FMT":"Requesting Subscription '%s' cancel Type is invalid",
          "INVALID_ACTIVATE_FMT":"Requesting Subscription '%s' activate Type is invalid"
        },
        "offers":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "OFFERS_NOTFOUND":"Requested subscription '%s' is not found for this user",
          "OFFERS_ALREADY_EXIST":"Requested subscription '%s' is already exist",
          "INVALID_OFFERS_FMT":"Requested subscription id '%s' is invalid formate"
        }
    }
  profiles-kube.json: "{  \n    \"mongodb\":{  \n      \"db-name\":\"costmanager\",\n
    \     \"db-endpoint\":[  \n        \"mongodb:27017\"\n      ],\n      \"db-port\":\"27017\",\n
    \     \"user-db\":\"admin\",\n      \"db-user\":\"admin\",\n      \"db-password\":\"cGFzc3dvcmQ\"\n
    \   },\n    \"redis\":{\n        \"redis-endpoint\":\"redis\",\n        \"redis-port\":\"6379\",\n
    \       \"redis-password\":\"avraj\"\n    },\n    \"rabbitmq\":{\n      \"mq-protocol\":\"amqp\",\n
    \     \"mq-user\":\"admin\",\n      \"mq-password\":\"cGFzc3dvcmQ\",\n      \"mq-ip\":\"rabbitmq\",\n
    \     \"mq-port\":\"5672\",\n      \"mq-billing-host\":\"/billing\",\n      \"mq-billing-queue\":\"billing-worker-queue\"\n
    \  }\n  }"
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\"\n\t},\n\t\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
  validation.json: "{\n\t\"deploymentType\": [\n\t\t\"deployment\",\n\t\t\"statefulSet\",\n\t\t\"daemonSet\"\n\t],\n\t\"scalingStrategyType\":
    [\n\t\t\"resource\"\n\t],\n\t\"scalingStrategy\": {\n\t\t\"type\": \"string\",\n\t\t\"cpuLimit\":
    \"float64\",\n\t\t\"memoryLimit\": \"float64\",\n\t\t\"minScaleUnit\": \"float64\",\n\t\t\"maxScaleUnit\":
    \"float64\"\n\t},\n\t\"allocationStrategy\":{\n\t\t\"cpuLimit\": \"string\",\n\t\t\"cpuRequest\":
    \"string\",\n\t\t\"memoryLimit\": \"string\",\n\t\t\"memoryRequest\": \"string\"\n\t},\n\t\"deploymentStrategy\":{\n\t\t\"type\":\"string\",\n\t\t\"updateMethod\":\"string\",\n\t\t\"revisionHistory\":\"float64\"\n\t},\n\t\"service\":
    {\n\t\t\"expectedFields\" :{\n\t\t\t\"metaFields\": [ \"name\", \"serviceType\",
    \"artifactType\", \"serviceConfig\" ],\n\t\t\t\"basicServiceConfig\": [ \"osType\",
    \"network\" ],\n\t\t\t\"advancedServiceConfig\": [ \"osType\", \"network\" ],\n\n\t\t\t\"artifactType\":
    [ \"codeBased\", \"imageBased\", \"dockerfileBased\" ],\n\t\t\t\"osType\": [\t\"linux\",
    \"windows\" ],\n\t\t\t\"codebased\":{\n\t\t\t\t\"repository\": [ \"repoProvider\",
    \"repoURL\" ],\n\t\t\t\t\"script\": [ \"buildScript\", \"startScript\" ],\n\t\t\t\t\"buildImageConfig\":
    [ \"imageType\", \"imageName\" ],\n\t\t\t\t\"deploymentImageConfig\": [ \"imageType\",
    \"imageName\" ],\n\t\t\t\t\"distributionImageRegistryID\": []\n\t\t\t},\n\t\t\t\"imagebased\":
    [ \"imageName\" ],\n\t\t\t\"dockerfilebased\":{\n\t\t\t\t\"repository\": [ \"repoProvider\",
    \"repoURL\" ],\n\t\t\t\t\"distributionImageRegistryID\": []\n\t\t\t}\n\t\t}\n\t},\n\t\"volume\":
    {\n\t\t\"AWS\":[\n\t\t\t\"name\",\n\t\t\t\"volumeType\",\n\t\t\t\"platformID\",\n\t\t\t\"zones\",\n\t\t\t\"size\",\n\t\t\t\"volumeID\",\n\t\t\t\"accessMode\",\n\t\t\t\"volumeMode\"\n\t\t],\n\t\t\"GCE\":[\n\t\t\t\"name\",\n\t\t\t\"volumeType\",\n\t\t\t\"platformID\",\n\t\t\t\"projectID\",\n\t\t\t\"zone\",\n\t\t\t\"accessMode\"\n\t\t],\n\t\t\"fileSystemType\":
    [\n\t\t\t\"XFS\",\n\t\t\t\"Ext3\",\n\t\t\t\"Ext4\"\n\t\t],\n\t\t\"accessMode\":
    [\n\t\t\t\"ReadWriteOnce\",\n\t\t\t\"ReadOnlyMany\"\n\t\t],\n\t\t\"updateFields\":[\"AWSVolume\",\"GCEVolume\",\"application\",\"service\",\"volumeClaimPolicy\",\"status\"]\n\t},\n\t\"volumeClaimPolicy\":
    {\n\t\t\"requiredFields\": [\n\t\t\t\"name\",\n\t\t\t\"accessMode\",\n\t\t\t\"resources\",\n\t\t\t\"volumeMode\"\n\t\t],\n\t\t\"resourcesRequiredFields\":
    [\n\t\t\t\"limits\",\n\t\t\t\"requests\"\n\t\t],\n\t\t\"accessMode\": [\n\t\t\t\"ReadWriteOnce\",\n\t\t\t\"ReadOnlyMany\",\n
    \           \"ReadWriteMany\"\n\t\t]\n\t}\n}"
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-deploymanager-configmap-ub0p4.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: deploymentmanager-deploymanager-configmap-ub0p4
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: deploymentmanager-deploymanager-configmap-ub0p4
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
  name: deploymentmanager-deploymanager-configmap-ub0p4
  namespace: default
data:
  profiles-kube.json: "{  \n  \"group\":{  \n    \"workerInterval\":10\n  },\n  \"mongodb\":{
    \ \n    \"db-name\":\"deploymentmanager\",\n    \"db-endpoint\":[  \n      \"mongodb:27017\"\n
    \   ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n    \"db-user\":\"admin\",\n
    \   \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"redis\":{\n        \"redis-endpoint\":\"redis\",\n
    \       \"redis-port\":\"6379\",\n        \"redis-password\":\"avraj\"\n    },\n
    \ \"rabbitmq\":{  \n    \"mq-protocol\":\"amqp\",\n    \"mq-user\":\"admin\",\n
    \   \"mq-password\":\"cGFzc3dvcmQ\",\n    \"mq-ip\":\"rabbitmq\",\n    \"mq-port\":\"5672\",\n
    \   \"mq-apps-host\":\"/apps\",\n    \"mq-apps-queue\":\"apps-worker-queue\"\n  },\n
    \ \"esearch\":{  \n    \"es-user\":\"elastic\",\n    \"es-password\":\"cGFzc3dvcmQ\",\n
    \   \"es-endpoints\":[  \n      \"http://esearch:9200\"\n    ]\n  },\n  \"gopaddleTools\":{
    \ \n    \"prometheus\":{  \n      \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/application/datacollector/datapoint\",\n
    \     \"influxDBs\":{  \n        \"influxDB-1\":{  \n          \"dbEndpoint\":\"http://influxdb:8086\",\n
    \         \"dbUser\":\"admin\",\n          \"dbPassword\":\"cGFzc3dvcmQ\",\n          \"maxUserCount\":\"100\",\n
    \         \"isEnabled\":true\n        }\n      }\n    },\n    \"eventHandler\":{
    \ \n      \"gatewayEndpoint\":\"NODE_IP\",\n      \"gatewayAPI\":\"/api/%s/v1/application/datacollector/eventhandler\"\n
    \   }\n  },\n  \"deploymentTemplateIconDirectory\":{  \n    \"iconDirectory\":\"/iconPath/%s/deploymentTemplate/\",\n
    \   \"iconAPI\":\"/v1/deploymentTemplate/icon/%s\"\n  }\n}"
  service_directory-kube.json: "{  \n\t\"builder.ep\":{  \n\t  \"host\":\"gpcore\",\n\t
    \ \"port\":\"8759\"\n\t},\n\t\"core.ep\": {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\":
    \"8759\"\n\t},\n\t\"configmanager.ep\":{  \n\t  \"host\":\"configmanager\",\n\t
    \ \"port\":\"8001\"\n\t},\n\t\"clustermanager.ep\": {\n\t\t\"host\": \"clustermanager\",\n\t\t\"port\":
    \"8013\"\n\t},\n\t\"domainmanager.ep\":{  \n\t  \"host\":\"domainmanager\",\n\t
    \ \"port\":\"8004\"\n\t},\n\t\"deploymentmanager.ep\":{  \n\t  \"host\":\"deploymentmanager\",\n\t
    \ \"port\":\"8003\"\n\t},\n\t\"platform.ep\": {\n\t\t\"host\": \"cloudmanager\",\n\t\t\"port\":
    \"8018\"\n\t},\n\t\"registry.ep\": {\n\t\t\"host\": \"cloudmanager\",\n\t\t\"port\":
    \"8018\"\n\t},\n\t\"policy.ep\":{  \n\t  \"host\":\"configmanager\",\n\t  \"port\":\"8001\"\n\t},\n\t\"user.ep\":{
    \ \n\t  \"host\":\"usermanager\",\n\t  \"port\":\"8005\"\n\t},\n\t\"notification.ep\":{
    \ \n\t  \"host\":\"activitymanager\",\n\t  \"port\":\"8009\"\n\t},\n\t\"deploymenttmpl.ep\":{
    \ \n\t  \"host\":\"deploymentmanager\",\n\t  \"port\":\"8003\"\n\t},\n\t\"servicegroup.ep\":{\n\t\t\"host\":
    \"deploymentmanager\",\n\t\t\"port\": \"8003\"\n\t},\n\t\"service.ep\":{  \n\t  \"host\":\"configmanager\",\n\t
    \ \"port\":\"8001\"\n\t},\n\t\"serviceGroup.ep\":{\n\t\t\"host\": \"deploymentmanager\",\n\t\t\"port\":
    \"8003\"\n\t},\n\t\"config.ep\":{  \n\t  \"host\":\"configmanager\",\n\t  \"port\":\"8001\"\n\t},\n\t\"gateway.ep\":{\n\t\t\"host\":\"gateway\",\n\t\t\"port\":\"8006\"\n\t},\n
    \   \"nodechecker.ep\":{\n      \"host\":\"nodechecker\",\n\t  \"port\":\"8020\"\n\t},\n\t\"billing.ep\":{\n\t\t\"host\":\"costmanager\",\n\t\t\"port\":\"8011\"\n\t},\n\t\"usermanager.ep\":{\n\t\t\"host\":
    \"usermanager\",\n\t\t\"port\": \"8005\"\n\t},\n    \"alertmanager.ep\":{\n        \"host\":
    \"alertmanager\",\n        \"port\": \"8012\"\n    },\n     \"release.ep\":{\n        \"host\":
    \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"cloudaccount.ep\":{\n        \"host\":\"cloudmanager\",\n
    \       \"port\":\"8018\"\n    }\n}"
  versionMatrix.json: |
    {
      "supportedVersions": [
        "v1.6",
        "v1.7",
        "v1.8",
        "v1.9",
        "v1.10",
        "v1.11",
        "v1.12",
        "v1.13",
        "v1.14",
        "v1.15",
        "v1.16",
        "v1.17",
        "v1.18",
        "v1.19",
        "v1.20",
        "v1.21",
        "v1.22",
        "v1.23",
        "v1.24",
        "v1.25",
        "v1.26",
        "v1.27"
      ],
      "v1.6": {
        "deployment": [
          "apps/v1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.7": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.8": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.9": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.10": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.11": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.12": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.13": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.14": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.15": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.16": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.17": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.18": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.19": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.20": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.21": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.22": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.23": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.24": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.25": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.26": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      },
      "v1.27": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "apps/v1",
          "extensions/v1beta1"
        ],
        "controllerRevision": [
          "apps/v1",
          "apps/v1beta1",
          "apps/v1beta2"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1",
          "networking.k8s.io/v1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ],
        "CustomResourceDefinition":[
          "apiextensions.k8s.io/v1beta1"
        ],
        "CustomConfigMap":[
          "configurator.gopaddle.io/v1alpha1"
        ],
        "CustomSecret":[
          "configurator.gopaddle.io/v1alpha1"
        ]
      }
    }
  validation.json: "{\n\t\"application\": {\n\t\t\"expectedFields\": [ \n\t\t\t\"name\",\n\t\t\t\"clusterID\",\n\t\t\t\"deploymentTemplateID\",\n\t\t\t\"accessType\"\n\t\t]\n\t},\n\t\"daemonset\":
    {\n\t\t\"expectedFields\": [ \n\t\t\t\"name\",\n\t\t\t\"clusterID\",\n\t\t\t\"deploymentTemplateID\"\n
    \   ]\n  },\n\t\"deploymentTemplate\": {\n\t\t\"expectedFields\": [\n\t\t\t\"name\",\n\t\t\t\"services\"\n\t\t],\n\t\t\"expectedFields_service\":
    [\n\t\t\t\"id\"\n\t\t]\n\t}\n}"
  error_config.json: "{\n    \"all\":{\n      \"DATA_PERSISTANCE\":\"Internal Error;
    (Failed to store data)\",\n      \"DATA_RETRIVE\":\"Internal Error; (Failed to retrive
    data)\",\n      \"INTERNAL_SERVER\":\"Internal Error; Unable to communicate with
    internal-server\",\n      \"INTERNAL_SERVER_ERROR\":\"Internal Error; Try after
    sometime\",\n      \"RESOURCE_NOT_FOUND\":\"Resource '%s' does not exist\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Resource
    does not exit\",\n      \"ERROR_HITTING_EXT_API\":\"Unable to communicate with external
    resources\",\n      \"ALREADY_EXIST\":\"'%s' already exists\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n      \"MISSING_FIELD_INSIDE\":\"Invalid
    input or missing mandatory field '%s' inside '%s'\",\n      \"INVALID_VALUE\":\"Invalid
    input for field '%s'\",\n      \"INVALID_TYPE\":\"Invalid input type for '%s'\",\n
    \     \"INPUT_MISMATCH\":\"Given input JSON structure is mismatched\",\n      \"KEY_NOT_FOUND\":\"
    '%s' Key not found in Json\",\n      \"VALUE_NOT_FOUND\":\" '%s' Value not found
    in Json\",\n      \"UNSUPPORTED\": \"Given %s is not supported\",\n      \"UNMARSHAL_ERROR\":\"The
    field '%s' is a '%s' type, but the given value is '%s' type\",\n      \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\",\n      \"SERVICE_NOT_FOUND\":\"Template
    need Atleast one Service\",\n      \"DR_NOTFOUND\":\"Requested Dependency Reference
    '%s' is not found\",\n      \"CLUSTER_WIDE_DT_SERVICE_RESTRICTION\":\"Cluster Wide
    Deployment will have only one service\",\n      \"DEPENDENCY_EXIST_RESOURCE\":\"This
    Resource has dependency: '%s'\",\n      \"SOMETHING_WRONG\": \"Internal Error\",\n
    \     \"INTERNAL_DB_COPY\": \"Could not format response from database object.\",\n
    \     \"GEN_UNMARSHAL_ERROR\":\"Error in unmarshal '%s'\",\n      \"STRING_TO_INT_ERROR\":\"Error
    in converting string to int '%s'\",\n      \"FIELD_VALIDATION\":\"InvalidValidationError
    '%s'\",\n      \"MARSHAL_ERROR\":\"Error in marshaling '%s'\",\n      \"SCHEDULE_JOB\":\"Failed
    on scheduling job: '%s'\",\n      \"RESPONSE_FORMATTING\":\"Failed on formatting
    response: '%s'\"\n    },\n   \"daemonset\": {\n      \"NAMING_CONVENTION\":\"'%s'
    violates the naming convention for daemonset. Allowed names should match (^[a-z][a-z0-9-]*[a-z0-9]$)\",\n
    \     \"DAEMONSET_NOT_FOUND\": \"Requested Daemonset '%s' is not found\",\n      \"SERVICE_NOT_FOUND\":
    \"Requested Service '%s' is not found\",\n      \"ALREADY_EXIST\":\"Given Daemonset
    name '%s' is already in use\",\n      \"EMPTY_NODES\": \"Requested cluster %s does
    not have healthy nodes to deploy the template\",\n      \"MISSING_NODES\": \"Failed
    to fetch nodes for the cluster '%s' to validate deployment process\",\n      \"DEPLOYMENT_TEMPLATE_NOT_FOUND\":
    \"Requested Deployment Template '%s' is not found\",\n      \"INVALID_ACCESS_TYPE\":
    \"Given access type '%s' is invalid\",\n      \"PORT_VALIDATION\": \"Requested port
    '%s' is already in use\",\n      \"ALTERNATIVE_PORT_MISSING\": \"Alternative port
    for '%s' under service '%s' is not provided in the request\",\n      \"EMPTY_ALTERNATIVE_PORT\":
    \"Request does not contain an alternative port for '%s' to expose\",\n      \"UNSUPPORTED_UPDATE_TYPE\":
    \"Requested service '%s' does not support update operation\",\n      \"VERSION_NOT_FOUND\":
    \"Requested version '%s' is not available under the service '%s'\",\n      \"VOLUME_ALREADY_USED\":
    \"Warning : Volume '%s' is already used by service '%s'. Data stored in the disk
    will be erased permanently\",\n      \"VOLUME_ALREADY_INUSE\": \"Volume '%s' is
    currently in use by service '%s'. Please select a different volume\",\n      \"VOLUME_NOT_AVAILABLE\":
    \"Volume '%s' is not available. Please select a different volume\"\n   },\n   \"deploymentTemplate\":{\n
    \   \"DT_NOTFOUND\":\"Requesting DeploymentTemplate '%s' is not found\",\n    \"INVALID_PAYLOAD\":\"Given
    Payload is invalid: \",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"INVALID_DEPLOYMENTTEMPLATEID_FMT\":\"Requested
    deploymentTemplate id is invalid format '%s'\",\n    \"DEPLOYMENTTEMPLATE_NOTFOUND\":\"Requested
    Deployment Template '%s' is not found\",\n    \"DEPLOYMENTTEMPLATE_ALREADY_EXIST\":\"Requested
    Deployment Template '%s' already exist\",\n    \"DEPLOYMENTTEMPLATEHIST_NOTFOUND\":\"Requested
    Deployment Template '%s' is not found\",\n    \"SERVICEGROUPNAME_ALREADY_EXIST\":\"Given
    ServiceGroup name '%s' already used\",\n    \"SERVICEGROUP_MIN_COUNT_DELETION_\":\"Service
    Group Deletion action can't be performed, Deployment Template need atleast only
    one Service Group\",\n    \"UPDATETYPE_MISSING\":\"UpdateType field missing\",\n
    \   \"FIELD_MISSING\":\"Required Field Missing '%s'\",\n    \"SERVICEGROUPS_ARRAY_MISSING\":\"Service
    Groups []Object '%s' is missing\",\n    \"SERVICE_OBJECT_MISSING\":\"Service object
    '%s' is missing\",\n    \"SERVICEGROUP_NAME_NOT_FOUND\":\"Requested Deployment Template
    Service Group '%s' is not found\",\n    \"SERVICE_NAME_NOT_FOUND\":\"Requesting
    Deployment Template Service ID '%s' not found in Service Group '%s'\",\n    \"SERVICE_NAME_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of service name '%s'\",\n    \"SERVICEGROUP_PORTS_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of port '%d'\",\n    \"SERVICE_MIN_COUNT_DELETION_\":\"Service
    Deletion action can't be performed, Service Group need atleast only one Service
    \",\n    \"BUILD_OBJECT_MISSING\":\"Build object missing in service '%s'\",\n    \"PORT_MISMATCH\":\"Port
    Mismatching '%d'\",\n    \"DUPLICATE_SERVICE_PORT\":\"Ports can't be same in ServieGroup,
    Service Port '%d' already used in one of services in '%s'\",\n    \"MOUNT_PATH_MISMATCH\":\"Mount
    Path Mismatch between actual service '%s' and value in ServiceGroup '%s'\",\n    \"STORAGENAME_NOTFOUND\":\"Storage
    Name '%s' not found in StorageGroups\",\n    \"ACTUAL_SERVICE_NOT_HAVING_CONFIG\":\"You
    can't update Confgis in ServiceGroup '%s' because Actual Service '%s' does't contain
    any configs\",\n    \"ACTUAL_SERVICE_HAVING_CONFIG\":\"You can't delete Confgis
    in ServiceGroup '%s' because Actual Service '%s' contains configs\",\n    \"CYCLIC_DEPENDENCY\":\"Cyclic
    Dependency between ServiceGroup '%s' and '%s'\",\n    \"SG_VERSION_DRAFT\":\"Can't
    commit serviceGroup '%s' version as '%s'\"\n\n  },\n   \"serviceGroup\":{\n    \"BUILD_OBJECT_MISSING\":\"Build
    object missing in service '%s'\",\n    \"SERVICEGROUP_NOTFOUND\":\"Requested Service
    Group '%s' is not found\",\n    \"SERVICEGROUP_ALREADY_EXIST\":\"Requested Service
    Group '%s' already exist\",\n    \"SERVICEGROUP_OBJECT_MISSING\":\"Service Group
    object '%s' is missing\",\n    \"SERVICE_OBJECT_MISSING\":\"Service object '%s'
    is missing\",\n    \"SERVICE_ARRAY_MISSING\":\"Service []Object '%s' is missing\",\n
    \   \"SERVICEGROUPEHIST_NOTFOUND\":\"Requested ServiceGroup history '%s' with version
    '%s' is not found\",\n    \"SERVICEGROUP_PORTS_CANNOTBE_DUPLICATE\":\"In Service
    Group '%s' Encountered duplication values of port '%d'\",\n    \"UPDATETYPE_MISSING\":\"UpdateType
    field missing\",\n    \"STATELESSSCALINGPOLICY\":\": stateless for this ServiceGroupType
    ScalingPolicy is required\",\n    \"STATEFULSCALINGPOLICY\":\": stateful for this
    ServiceGroupType ScalingPolicy will not come\",\n    \"SCALINGRESTRICT\":\" can't
    attach ScalingPolicy for this serviceGroup '%s' because StorageGroup has PersistentVolume\",\n
    \   \"PODDEPLOYMENTPOLICY\":\"pod for this ServiceGroupType deploymentPolicy will
    not come\",\n    \"INVALID_SERVICEGROUPID_FMT\":\"Requested serviceGroup id is invalid
    format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be negative number
    { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page should
    be less than '%d'\",\n    \"MOUNT_PATH_MISMATCH\":\"Mount Path Mismatch between
    actual service '%s' and value in ServiceGroup '%s'\",\n    \"STORAGENAME_NOTFOUND\":\"Storage
    Name '%s' not found in StorageGroups\",\n    \"SERVICE_NAME_CANNOTBE_DUPLICATE\":\"In
    Service Group '%s' Encountered duplication values of service name '%s'\",\n    \"PORT_MISMATCH\":\"Port
    Mismatching '%d'\",\n    \"BUILD_IN_FAILED\":\"Build is in failed state\",\n    \"SERVICE_VERSION_DRAFT\":\"Can't
    commit service '%s' version as '%s'\",\n    \"SERVICE_CONFIG_VERSION\":\"Can't commit
    service '%s' config '%s' version as '%s'\",\n    \"PODAFFINITY_EXPRESSION\":\"Invalid
    Value for labelExpression operator: %s\",\n    \"PODAFFINITY_TOPOLOGYKEY\":\"Invalid
    topologyKey : %s\",\n    \"STORAGENAME_UNIQUE\":\"volumeLabel must contain unique
    values\",\n    \"SECURITYCONTEXT_NOT_ALLOWED\":\"securityContext runAsNonRoot is
    '%s' but the given runAsUser is '%s' root value\"\n   },\n   \"All\":{  \n    \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n    \"INVALID_ID\":\"Requested resource
    id '%s' is invalid format\",\n    \"UNMARSHAL_ERROR\":\"The field '%s' is a '%s'
    type, but the given value is '%s' type\",\n    \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\"\n  },\n  \"App\":{  \n
    \   \"APP_NOTFOUND\":\"Requested application '%s' is not found\",\n    \"APP_ALREADY_EXIST\":\"Requested
    application '%s' is already exist\",\n    \"NOT_IMPLEMENT\":\"This module has not
    been implemented\",\n    \"PAGESIZE_LESSONE\":\"Page or Size can not be less than
    one { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page should
    be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d'; Size should
    be less than '%d'\",\n    \"INVALID_CONFIGID_FMT\":\"Requesting config id is invalid
    formate '%s'\",\n    \"DONOT_MOD_FIELD\":\"You could not modify the field '%s' value
    after creation\",\n    \"CP_SETUP_FAILED\":\"Gopaddle setup failed with '%s'\",\n
    \   \"ACTIVITY_NOTFOUND\":\"Requested application's activity '%s' is not found\",\n
    \   \"INGRESS_NODEPORT_MISSING\":\"'accessInfo.httpNodePort' and 'accsessInfo.httpsNodePort'
    can not be nil if access info is nodeIPIngress\",\n     \n    \"//Volume configuration\":\"\",\n
    \   \"VOLUME_MISSING\":\"Volume info is missing to the service group '%s'\",\n    \"HOSTVOL_MISSING\":\"Host
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"PV_MISSING\":\"Persistent
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"SVOLUME_MISSING\":\"Static
    volume is missing to the storage name '%s' in service group '%s'\",\n    \"USED_SVOLUME\":
    \"Volume '%s' is unavailable status '%s'. Please select a different volume\",\n
    \   \"DUP_SVOLUME\": \"The Given request contains duplicate static volume informations
    '%s'\",\n    \"SC_MISSING\": \"Storage class is missing to the storage name '%s'
    in the service group '%s'\",\n    \"INVALID_SCALING\":\"Autosclaing Max replica
    '%d' is less than Deployment policy Replica '%d' in service group '%s'\",\n    \"REPLICA_IN_STATIC\":\"Replicas
    should be only one if the service group '%s' contains the static volume\",\n    \"REPLICA_IN_DYNAMIC\":\"Replicas
    should be only one if the service group '%s' contains the dynamic volume and also
    no stateful type\",\n    \"SCALING_IN_VOLUME\":\"Scaling relicas should be only
    one if the service group '%s' contains the persistence volume\",\n\n    \"//NFS
    Provisioner\":\"\",\n\n    \"DEPLOYMENTTEMPLATE_READ_ERROR\":\"There is a problem
    in reading deployment template\",\n    \"STORAGECLASS_READ_ERROR\":\"There is a
    problem in reading storage class\",\n    \"PROVISIONER_READ_ERROR\":\"There is a
    problem in reading provisioner\",\n\n    \"//Port configuration\":\"\",\n    \"PORT_MISSING\":\"Port
    info is missing to the service group '%s'\",\n    \"EX_PORT_MISSING\":\"Expose port
    '%d' is null in the service group '%s.%s'\",\n    \"BOTH_PORT_OPTION\":\"The port
    '%d' can not be used both alternative port and ingress, in the service group '%s.%s'\",\n
    \   \"INVALID_INGRESS_PATH\":\"We detected invalid path '%s' for port '%d', in the
    service group '%s.%s'\",\n    \"INVALID_PORT\":\"We detected invalid port '%d',
    in the service group '%s.%s'\",\n    \"INGRESS_PATH_MISSING\":\"Ingress path info
    '%s' is missing to the service group '%s.%s'\",\n    \"INGRESS_LBIP_MISSING\":\"LoadBalancerIp
    is missing for nginx ingress\",\n    \"INGRESS_ELB_MISSING\":\"ELB id is missing
    for nginx ingress\",\n    \n    \"//Update\":\"\",\n    \"TOOMANY_SG\":\"Update
    will run a Service Group at single time\",\n    \"INVALID_SG\":\"We detected invalid
    service group info in update call '%s'\",\n    \"TOOMANY_UPDATECALL\":\"Too many
    update request on the same application '%s'\",\n    \"APP_INAVALID_STATUS\":\"The
    application which is in '%s' state '%s' could not be updated\",\n    \"NON_SUPPORT_SGTYPE\":\"Non
    stateless service group '%s' will not support any update\",\n    \"REVISION_NULL\":\"The
    revision number can not be empty if update type is rollback in the service group
    '%s'\",\n    \"ALREADY_ROLLEDBACK_REVISION\":\"The given revision '%d' already rolledback
    in the service group '%s'\",\n    \"EXPIRED_REVISION\":\"The given revision '%d'
    is already expired in the service group '%s'\",\n    \"UPDATE_DESC_NULL\":\"The
    parameter 'serviceGroups[0].description' can not be empty\",\n    \"UPDATE_SCALING_NULL\":\"The
    parameter 'serviceGroups[0].ScalingPolicy' can not be empty\",\n    \"UPDATE_SERVICE_ID_NULL\":\"The
    parameter '%s' can not be empty\",\n    \"UPDATE_SERVICE_IMAGE_NULL\":\"The parametet
    '%s' can not be empty\",\n    \"UPDATE_RELEASE_CONFIG_NULL\":\"Release ID or Distribution
    ID cannot be empty\",\n    \"UPDATE_PODAFFINITY_EXPRESSIONS\":\"Invalid Value for
    labelExpression operator: %s\",\n    \"UPDATE_NODEAFFINITY_EXPRESSIONS\":\"Invalid
    Value for nodeExpression operator: %s\",\n\n    \"//READ\":\"\",\n    \"INVALID_READTYPE\":\"We
    detected that invalid value '%s' for query field read-type\",\n    \"MISSING_READQUERY_FIELDS\":\"The
    query field '%s' can not be null if the read-type is '%s'\",\n    \"MISSING_READTYPE\":\"The
    query filed 'read-type' is missing\",\n    \n    \"MISSING_RESOURCEQUERY_FIELDS\":\"The
    query field '%s' can not be null if the resource-type is '%s'\",\n    \"INVALID_RESOURCETYPE\":\"We
    detected that invalid value '%s' for query field resource-type\",\n    \"MISSING_RESOURCETYPE\":\"The
    query filed 'resource-type' is missing\",\n\n    \"//DEPENDENCY\": \"\",\n    \"DEPENDENCY_UPDATE_ERROR\":
    \"Couldnt update application dependency\",\n\n    \"DEPLOYMENT_VERSION_ERROR\":\"Couldnt
    find the difference in deploymentTemplate\",\n\n    \"BUILD_ID_MISSING\":\"The build
    version missing for a container '%s' in the serviceGroup '%s'.\",\n    \"RESPONSE_FORMATTING\":\"Failed
    on formatting application Response: '%s'\",\n    \"GETTING_RESPONSE\":\"failed on
    getting %s information %s\",\n\n  \"SERVICE_GROUP_ALREADY_EXIST\":\"Requested service
    '%s' is already exist in this application '%s'\",\n\n   \"//CONTAINER_ADD\":\"\",\n
    \  \"STORAGENAME_NOT_FOUND\":\"StorageName '%s' not found in the serviceGroup '%s'\",\n
    \  \"SERVICE_ALREADY_EXIST\":\"Requested container '%s' is already exist on the
    service '%s'\",\n   \"SERVICEGROUP_NOTFOUND\":\"Requested service '%s' is not found
    in application '%s'\",\n   \"SERVICE_NOTFOUND\":\"Requested container '%s' is not
    found in service '%s'\",\n   \"SERVICE_REQUIRED\":\"Container type '%s' is required
    in the service '%s'\",\n   \"BUILD_NOTFOUND\":\"Requested container '%s' build is
    not found for distribution '%s' in release '%s'\",\n   \"IMAGE_NOTFOUND\":\"Requested
    container '%s' image is not found for distribution '%s' in release '%s'\",\n \n
    \  \"POD_NOTSUPPORTED_UPDATED\":\"Requested update is not supported for pod. supported
    Update is buildUpdate and network\",\n   \"MICROK8S_DEFAULT_SC_NOTFOUND\":\"Failed
    default Storeageclass not equal to '%s' in microk8s\",\n   \"K3S_DEFAULT_SC_NOTFOUND\":\"Failed
    default Storeageclass not equal to '%s' in k3s\",\n   \"//SERVICEGROUP\":\"\",\n
    \  \"SG_NOTFOUND\":\"Requested servicegroup '%s' is not found\",\n   \"ALB_DEPLOYMENT_NOT_FOUND\":\"Requested
    alb deployment not found in the cluster '%s'\",\n   \"ALB_POD_NOT_FOUND\":\"Requested
    alb pod not found in the cluster '%s'\",\n   \"ALB_POD_NOT_READY\":\"Requested alb
    pod not ready in the cluster '%s'\",\n   \"DOMAIN_ARN_NOT_FOUND\":\"Requested domain
    '%s' not contain the certificateARN\",\n   \"DOMAIN_ARN_NOT_FOUND_REGION\": \"Request
    domain '%s' not contain the certificateARN for region '%s' and cloudaccount '%s'\",\n
    \  \"UPDATE_IMAGEPULL_POLICY_NOTVALID\": \"Request imagePullPolicy value is not
    valid.supported values are 'always','never','ifNotPresent'\"\n  },\n  \"Metrics\":{\n
    \   \"MISSING_METRICSQUERY_FIELDS\":\"The query field '%s' can not be null if the
    metrics-type is '%s'\",\n    \"METRICS_NOTFOUND\":\"Requested projectID '%s' is
    not found\"\n\n  },\n  \"Topup\":{\n    \"TOPUP_NOTFOUND\":\"Requested accountID
    '%s' is not found\"\n  },\n  \"allocationPolicy\":{\n    \"AP_NOTFOUND\":\"Requested
    Allocation Policy '%s' is not found\",\n    \"AP_ALREADY_EXIST\":\"Requested Allocation
    Policy '%s' already exists\",\n    \"INVALID_AP_FMT\":\"Requested service id is
    invalid format '%s'\",\n    \"PAGESIZE_NEGAVE\":\"Page or Size can not be a negative
    number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested invalid page '%d'; Page
    should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested invalid size '%d' Page
    should be less than '%d'\",\n    \"CPU_LIMIT\":\"CPU value in millicore should be
    between '%d' and '%d'\",\n    \"MEMORY_M_LIMIT\":\"Memory values in MegaBytes should
    be between '%d' and '%d'\",\n    \"MEMORY_G_LIMIT\":\"Memory values in GigaBytes
    should be between '%d' and '%d'\",\n    \"MEMORY_SUFFIX\":\"Memory suffix should
    be one of 'E', 'P', 'T', 'G', 'M', 'K', 'Ei', 'Pi', 'Ti', 'Gi', 'Mi', 'Ki'.\",\n
    \   \"CPU_SUFFIX\":\"CPU suffix should be 'm'\",\n    \"INVALID_QUANTITY\":\"Value
    of '%s' contains invalid character '%s'\",\n    \"MEMORY_QUANTITY\":\"Memory limit
    '%s' should be greater than Request '%s'\",\n    \"CPU_QUANTITY\":\"CPU limit '%s'
    should be greater than Request '%s'\"\n  }\n\n}"
  internal_api.json: "{\n        \"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\",\n\t\t\"readDomainByID\":\"api/%s/domain/%s?organizationID=%s\",\n\t\t\"readConfigByName\":\"api/%s/config/%s?organizationID=%s\",\n\t\t\"readServiceByName\":\"api/%s/service?organizationID=%s&operation=ReadByName&svcName=%s\",\n\t\t\"readServiceGroupByID\":\"api/%s/v1/serviceGroup/%s\",\n\t\t\"readServiceGroupByVersion\":\"api/%s/v1/%s/serviceGroup/%s/version/%s\",\n\t\t\"readServiceGroupByTags\":\"api/%s/v1/%s/serviceGroup/%s/version?%s\",\n\t\t\"updateServiceGroupDependencyRef\":\"api-internal/%s/v1/%s/serviceGroup/%s/version/%s\",\n\t\t\"readBuildVersionByBuildID\":\"api/%s/v1/%s/build/%s\",\n\t\t\"readBuildVersionByTags\":\"api/%s/v1/%s/build?%s\",\n\t\t\"readIngressByID\":\"api/%s/ingress/%s?organizationID=%s\",\n\t\t\"readProfileByID\":\"api/%s/profile/%s?organizationID=%s\",\n\t\t\"readAllocationPolicyByID\":\"api/%s/v1/%s/allocationPolicy/%s\",\n\t\t\"readVolumeClaimPolicyByID\":\"api/%s/%s/volumeClaimPolicy/%s?organizationID=%s\",\n\t\t\"readVolumeByID\":\"api/%s/volume/%s?organizationID=%s\",\n\t\t\"readKubeByID\":\"api/%s/kube/%s?organizationID=%s\",\n\t\t\"readBuildByVersion\":\"api/%s/build/%s?organizationID=%s&operation=forDeployment\",\n\t\t\"readRegistryByID\":\"api/%s/registry/%s?organizationID=%s&operation=accessToken&provider=%s\",\n\t\t\"Updated\":\"updated\",\n\t\t\"readScalingPolicyByID\":\"api/%s/v1/%s/scalingPolicy/%s\",\n\t\t\"readDeploymentPolicyByID\":\"api/%s/v1/%s/deploymentPolicy/%s\",\n\t\t\"readNetworkPolicyByID\":\"api/%s/v1/%s/networkpolicy/%s\",\n\t\t\"readServiceByID\":\"api/%s/v1/%s/service/%s\",\n\t\t\"updateScalingPolicyDependencyRef\":\"api-internal/%s/v1/%s/scalingPolicy/%s\",\n\t\t\"updateDeploymentPolicyDependencyRef\":\"api-internal/%s/v1/%s/deploymentPolicy/%s\",\n\t\t\"updateNetworkPolicyDependencyRef\":\"api-internal/%s/v1/%s/networkpolicy/%s\",\n\t\t\"updateVolumeClaimPolicyDependencyRef\":\"api-internal/%s/%s/volumeClaimPolicy/%s\",\n\t\t\"updateServiceDependencyRef\":\"api-internal/%s/v1/%s/service/%s/%s\",\n\t\t\"updateAllocationPolicyDependencyRef\":\"api-internal/%s/v1/%s/allocationPolicy/%s\",\n\t\t\"readServiceVersionByID\":\"api/%s/v1/%s/service/%s/version/%s\",\n\t\t\"readServiceVersionByTags\":\"api/%s/v1/%s/service/%s/version?%s\",\n\t\t\"readConfigVersionByID\":\"api/%s/v1/%s/config/%s/version/%s\"\n\t},\t\n
    \       \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \       \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  Chart.yaml: |-
    apiVersion: v2
    name: HELM_CHART
    description: DESCRIPTION
  
    # A chart can be either an 'application' or a 'library' chart.
    #
    # Application charts are a collection of templates that can be packaged into versioned archives
    # to be deployed.
    #
    # Library charts provide useful utilities or functions for the chart developer. They're included as
    # a dependency of application charts to inject those utilities and functions into the rendering
    # pipeline. Library charts do not define any templates and therefore cannot be deployed.
    type: application
  
    # This is the chart version. This version number should be incremented each time you make changes
    # to the chart and its templates, including the app version.
    # Versions are expected to follow Semantic Versioning (https://semver.org/)
    version: 1.0.0
  
    # This is the version number of the application being deployed. This version number should be
    # incremented each time you make changes to the application. Versions are not expected to
    # follow Semantic Versioning. They should reflect the version the application is using.
    appVersion: APP_VERSION
  clusterrole.yaml: |-
    {{- if eq (include "gen.clusterrole" .) "true" -}}
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: gopaddle:nginx-ingress-clusterrole
    rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        - endpoints
        - nodes
        - pods
        - secrets
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - get
      - apiGroups:
        - ""
        resources:
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - ingresses
        - ingressclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - create
        - patch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - ingresses/status
        - ingressclasses
        verbs:
        - update
      - apiGroups:
        - ""
        resourceNames:
        - ingress-controller-leader
        resources:
        - configmaps
        verbs:
        - get
        - update
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - create
    {{- end }}
  helper.tpl: |
    {{/*
    Check ClusterRole Exist
    */}}
    {{- define "gen.clusterrole" -}}
    {{- $clusterrole := lookup "v1" "ClusterRole" "" "gopaddle:nginx-ingress-clusterrole" -}}
    {{- if $clusterrole -}}
            {{- printf "%s" true -}}
    {{- else -}}
            {{- printf "%s" false -}}
    {{- end -}}
    {{- end -}}
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-domainmanager-configmap-ieq7l.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: domainmanager-domainmanager-configmap-ieq7l
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: domainmanager-domainmanager-configmap-ieq7l
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
  name: domainmanager-domainmanager-configmap-ieq7l
  namespace: default
data:
  service_directory-kube.json: "{\n    \"license.ep\": {\n        \"host\": \"gpcore\",\n
    \       \"port\": \"8759\"\n    },\n    \"transaction.ep\": {\n        \"host\":
    \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"nodechecker.ep\": {\n    \t\"host\":\"nodechecker\",\n
    \   \t\"port\":\"8020\"\n  \t},\n     \"usermanager.ep\":{\n        \"host\": \"usermanager\",\n
    \       \"port\": \"8005\"\n    },\n    \"clustermanager.ep\":{\n        \"host\":
    \"clustermanager\",\n        \"port\": \"8013\"\n    },\n    \"cloudmanager.ep\":{\n
    \       \"host\": \"cloudmanager\",\n        \"port\": \"8018\"\n    }\n\n}\n"
  profiles-kube.json: "{  \n\t\"mongodb\":\n    {\n        \"db-name\": \"domainmanager\",\n
    \       \"db-endpoint\": [\n            \"mongodb:27017\"\n        ],\n        \"db-port\":
    \"27017\",\n        \"user-db\": \"admin\",\n        \"db-user\": \"admin\",\n        \"db-password\":
    \"cGFzc3dvcmQ\"\n    },\n    \"redis\":{\n        \"redis-endpoint\":\"redis\",\n
    \       \"redis-port\":\"6379\",\n        \"redis-password\":\"avraj\"\n    },\n\t\"logger\":{
    \ \n\t  \"logType\":\"debug\"\n\t}\n}"
  log_config.json: |
    {
      "formatters": {
        "domainmanager": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "domainmanager": {
          "class": "RotatingFileHandler",
          "filepath": "./domainmanager.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "domainmanager"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "domainmanager"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "domainmanager"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "domainmanager"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "domainmanager"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "domainmanager"
          ]
        }
      }
    }
  error_config.json: |-
    {
       "design":{
          "DESIGN_NOT_FOUND":"Requested design is not found",
          "ALREADY_EXIST":"Resource name '%s' already exists. Try using a different name.",
          "NAMING_CONVENTION":"'%s' violates the naming convention for design or component. Allowed names should match (^[a-z][a-z0-9-]*[a-z0-9]$)",
          "INVALID_OPERATION":"Invalid operation '%s'",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "CYCLIC_LINK":"Cyclic reference is not allowed",
          "COMPONENT_NOT_FOUND":"Requested component is not found",
          "UNABLE_MODIFY_TYPE":"Unable to delete or modify the component '%s'",
          "INVALID_DATA":"Invalid source control project '%s'",
          "ENV_ERROR":"Unsupported platform",
          "PORT_VALIDATION":"Invalid port format '%s. Allowed ports 1 to 65535",
          "MISSING_SCRIPT":"'%s' input is missing in component '%s'",
          "NULL_VALUE":"'%s' cannot be empty",
          "UNSUPPORTED_FILE":"Given input file format is not supported. Supported formats are TXT, ZIP, TARZ",
          "CODE_PUSH":"Publish design failed. Failed to push the service artifacts to source control",
          "DESIGN_UPDATE":"Design '%s' update failed",
          "TAG_CONVENTION":"Malformed JSON or tag validation failed '%s'. Allowed tags ^[a-zA-Z-_]+(,[a-zA-Z0-9-_]+)*",
          "COMPONENT_PENDING":"Component '%s' has some missing mandatory fields",
          "COMPONENT_NOT_LINKED":"Component '%s' is not linked",
          "SVC_TYPE_MODIFY":"Cannot modify '%s' in service '%s'",
          "ROOT_MORE_LINK":"Root node doesn't have more than one link",
          "SELF_LINK":"Cannot link component '%s' to itself",
          "ALREADY_LINKED":"Cannot link from component '%d' to component '%d'",
          "REPO_HANDLE_PATH":"Repository Url '%s' cannot be validated with account '%s'",
          "IP_VALIDATION":"Invalid IP Address '%s'",
          "SCALE_VALIDATION":"Deployments attributes for '%s' is missing. Allowed values ([0-9]+)",
          "UNSUPPORTED_DATA":"Invalid data '%s'; Supported data are [%s]",
          "INVALID_AUTO_FACT":"Malformed JSON or Invalid autoscale factor '%s'",
          "ALREADY_SCHEDULED":"Publish design '%s' is already in progress",
          "REGISTRY_ADD":"Please Select Registry for this Design"
       },
       "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "RESOURCE_NOT_FOUND_WITHOUT_NAME":"Resource does not exit",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG":"Something went wrong",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "INVALID_TYPE":"Token type is invalid",
          "INVALID_SCOPE":"Token scope is invalid",
          "LIMIT_EXCEED":"Token Creation Limit Exceed"
       }
    }
  internal_api.json: "{\n\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
---
# Source: gopaddle/charts/gp-core/templates/esearch-configmap-multi-arch.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: default
  labels:
    component: elasticsearch
data:
  elasticsearch.yml: |
    cluster.name: password-protected-efk
    node.name: node-1
    path.data: /usr/share/elasticsearch/data
    http:
      host: 0.0.0.0
      port: 9200
    bootstrap.memory_lock: true
    transport.host: 127.0.0.1
    xpack.license.self_generated.type: basic
    # Enable xpack.security which is provided in basic subscription
    xpack.security.enabled: true
    # Disable unused xpack features 
    xpack.monitoring.enabled: false
    xpack.graph.enabled: false
    xpack.watcher.enabled: false
    xpack.ml.enabled: false
---
# Source: gopaddle/charts/gp-core/templates/gateway-gateway-configmap-w4tc1.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: gateway-gateway-configmap-w4tc1
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway-gateway-configmap-w4tc1
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway-gateway-configmap-w4tc1
  namespace: default
data:
  validation.json: "{\n\t\"user\": {\n\t\t\"expectedFields\": [\n\t\t\t\"name\",\n\t\t\t\"emailID\",\n\t\t\t\"password\",\n\t\t\t\"phone\",\n\t\t\t\"country\"\n\t\t]\n\t}\n}"
  service_directory-kube.json: "{\n    \"license.ep\": {\n        \"host\": \"gpcore\",\n
    \       \"port\": \"8759\"\n    },\n    \"transaction.ep\": {\n        \"host\":
    \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"usermanager.ep\":{\n        \"host\":\"usermanager\",\n
    \       \"port\":\"8005\"\n    },\n    \"nodechecker.ep\": {\n    \t\"host\":\"nodechecker\",\n
    \   \t\"port\":\"8020\"\n  \t}\n}\n"
  log_config.json: |
    {
      "formatters": {
        "gateway": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "gateway": {
          "class": "RotatingFileHandler",
          "filepath": "./gateway.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "gateway"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "gateway"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "gateway"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "gateway"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "gateway"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "gateway"
          ]
        }
      }
    }
  error_config.json: |-
    {
       "all":{
          "DATA_PERSISTANCE": "Internal Error; (Failed to store data)",
          "DATA_RETRIVE": "Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER": "Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR": "Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND": "Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API": "Unable to communicate with external resources",
          "SOMETHING_WRONG": "Something went wrong",
          "ALREADY_EXIST": "'%s' already exists",
          "MISSING_FIELD": "Invalid input or missing mandatory field '%s'"
       },
       "user":{
          "EMAIL_ALREADY_EXISTS": "Email already exists. Sign in to continue",
          "INVALID_EMAIL": "Given email id is invalid. Please enter a valid email id.",
          "PASSWORD_DECRYPTION": "Failed in password decryption",
          "PASSWORD_STRENGTH": "Password length should be between 8-16 characters and should contain atleast 1 alphabet, 1 number and 1 special character",
          "INCORRECT_USER": "Incorrect username. Please try again.",
          "INCORRECT_PASSWORD": "Incorrect password. Please try again.",
          "ACCOUNT_UNVERIFIED": "Please verify your account"
       },
       "mail":{
          "INVALID_EMAIL_CODE": "Given mail verification code is invalid",
          "INVALID_PHONE_CODE": "Given phone verification code is invalid",
          "EXPIRED_EMAIL_CODE": "Given mail verification code has already expired",
          "EXPIRED_PHONE_CODE": "Given phone verification code has already expired"
       }
    }
  profiles-kube.json: |
    {
       "mongodb":{
          "db-name":"deploy_test",
          "db-endpoint":[
             "mongodb:27017"
          ],
          "db-port":"27017",
          "user-db":"admin",
          "db-user":"admin",
          "db-password":"JD72KDTJhLhfT7h4"
       },
       "redis":{
          "redis-endpoint":"redis",
          "redis-port":"6379",
          "redis-password":"avraj"
       },
       "signup-url":"NODE_IP",
       "proxy":{
          "helm":"http://deploymentmanager:8003",
          "marketplace":"http://marketplace:8023",
          "costusage":"http://costmanager:8011",
          "userProfile":"http://usermanager:8005",
          "build":"http://gpcore:8759",
          "codebase":"http://gpcore:8759",
          "default":"http://usermanager:8005",
          "template":"http://159.89.201.101:8002",
          "domain":"http://domainmanager:8004",
          "profile":"http://configmanager:8001",
          "user":"http://usermanager:8005",
          "users":"http://usermanager:8005",
          "signup":"http://usermanager:8005",
          "signin":"http://usermanager:8005",
          "signout":"http://usermanager:8005",
          "deploymentTemplate":"http://deploymentmanager:8003",
          "application":"http://deploymentmanager:8003",
          "volumeClaimPolicy":"http://configmanager:8001",
          "volume":"http://configmanager:8001",
          "config":"http://configmanager:8001",
          "service":"http://configmanager:8001",
          "serviceGroup":"http://deploymentmanager:8003",
          "deploymentPolicy":"http://configmanager:8001",
          "provisioner":"http://configmanager:8001",
          "scalingPolicy":"http://configmanager:8001",
          "allocationPolicy":"http://configmanager:8001",
          "storageClass":"http://configmanager:8001",
          "networkpolicy":"http://configmanager:8001",
          "goproxy":"http://kube.gopaddle.io:8080",
          "activity":"http://activitymanager:8009",
          "rule":"http://alertmanager:8012",
          "notification":"http://alertmanager:8012",
          "cluster":"http://clustermanager:8013",
          "noauth":"http://usermanager:8005",
          "acl":"http://usermanager:8005",
          "subusers":"http://usermanager:8005",
          "containerShell":"http://deploymentmanager:8017",
          "resentPhoneVerifyCode":"http://usermanager:8005",
          "userPhoneVerify":"http://usermanager:8005",
          "usersignin":"http://usermanager:8005",
          "subscription":"http://costmanager:8011",
          "cloudaccount":"http://cloudmanager:8018",
          "registry":"http://cloudmanager:8018",
          "cloudauth":"http://cloudmanager:8018",
          "license":"http://usermanager:8005",
          "billing":"http://costmanager:8011",
          "stripe":"http://paymentmanager:8021",
          "adminLogin":"http://appscanner:8022",
          "customer":"http://paymentmanager:8021",
          "offers":"http://costmanager:8011",
          "userOffers":"http://costmanager:8011",
          "appscanner":"http://appscanner:8022",
          "terraform":"http://clustertemplatemanager:8050",
          "project":"http://usermanager:8005",
          "release":"http://gpcore:8759",
          "codebaseAcceptor":"http://gpcore:8759",
          "codebaseRequestor":"http://gpcore:8759",
          "cdelivery":"http://gpcore:8759",
          "buildScanList":"http://gpcore:8759",
          "clusterMetrics":"http://clustermanager:8013",
          "serviceMetrics":"http://deploymentmanager:8003",
          "buildMetrics":"http://gpcore:8759",
          "volumeMetrics":"http://configmanager:8001",
          "albCluster":"http://clustermanager:8013",
          "buildStat":"http://gpcore:8759",
          "applicationList":"http://deploymentmanager:8003",
          "releaseList":"http://gpcore:8759",
          "servicePort":"http://deploymentmanager:8003",
          "averageBuildDuration":"http://gpcore:8759",
          "alert":"http://alertmanager:8012",
          "gpctlActivity":"http://activitymanager:8009",
          "subnetList":"http://clustermanager:8013",
          "subnet":"http://clustermanager:8013",
          "series":"http://activitymanager:8009",
          "quickstart":"http://quickstart:8002",
          "discover":"http://appscanner:8022",
          "recursiveDelete":"http://configmanager:8001"
       },
       "jwt_params":{
          "PrivateKeyPath":"/settings/keys/private_key",
          "PublicKeyPath":"/settings/keys/public_key.pub",
          "JWTExpirationDelta":"1"
       },
       "logger":{
          "logType":"debug"
       }
    }
---
# Source: gopaddle/charts/gp-core/templates/gpcore-core-configmap-5m85p.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: gpcore-core-configmap-5m85p
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gpcore-core-configmap-5m85p
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
  name: gpcore-core-configmap-5m85p
  namespace: default
data:
  service_directory-kube.json: |
    {
      "user.ep":{
        "host":"usermanager",
        "port":"8005"
      },
      "server.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "kube.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "codebase.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "builder.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "build_agent.ep":{
        "host":"buildagent",
        "port":"8000"
      },
      "failed_build_access.ep":{
        "host":"beta.gopaddle.io",
        "port":"4200"
      },
      "registry.ep":{
        "host":"cloudmanager",
        "port":"8018"
      },
      "platform.ep":{
        "host":"cloudmanager",
        "port":"8018"
      },
      "template.ep":{
        "host":"deploymentmanager",
        "port":"8003"
      },
      "tx.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "configmanager.ep":{
        "host":"configmanager",
        "port":"8001"
      },
      "notification.ep":{
        "host":"activitymanager",
        "port":"8009"
      },
      "clustermanager.ep":{
        "host":"clustermanager",
        "port":"8013"
      },
      "allocationpolicy.ep":{
        "host":"configmanager",
        "port":"8001"
      },
      "nodechecker.ep": {
        "host":"nodechecker",
        "port":"8020"
      },
      "billing.ep":{
        "host":"costmanager",
        "port":"8011"
      },
      "release.ep":{
        "host":"gpcore",
        "port":"8759"
      },
      "allocationpolicy.ep":{
        "host":"configmanager",
        "port":"8001"
      },
      "usermanager.ep":{
        "host":"usermanager",
        "port":"8005"
      },
      "cloudaccount.ep":{
        "host":"cloudmanager",
        "port":"8018"
      },
    "build.ep":{
        "host":"gpcore",
        "port":"8759"
      }
    }
  script.json: "{\n\t\"registry\": {\n\t\t\"GetAccessToken\": \"#!/bin/bash\\n\\nexport
    AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\\nexport AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\\nexport
    REGION=$REGION\\n\\naws ecr get-authorization-token --region us-east-1 --output
    text \\\\\\n    --query authorizationData[].authorizationToken | base64 -d | cut
    -d: -f2\\n\"\n\t}\n}"
  versionMatrix.json: |-
    {
      "supportedVersions": [
        "v1.6",
        "v1.7",
        "v1.8",
        "v1.9",
        "v1.10",
        "v1.11",
        "v1.12",
        "v1.13",
        "v1.14",
        "v1.15",
        "v1.16",
        "v1.17",
        "v1.18",
        "v1.19",
        "v1.20",
        "v1.21",
        "v1.22",
        "v1.23",
        "v1.24",
        "v1.25",
        "v1.26",
        "v1.27"
      ],
      "v1.6": {
        "deployment": [
          "apps/v1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.7": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.8": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.9": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.10": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "job":[
          "batch/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.11": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.12": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.13": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.14": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
    "v1.15": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.16": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.17": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.18": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.19": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.20": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.21": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.22": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.23": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.24": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.25": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.26": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      },
      "v1.27": {
        "deployment": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "rollBack": [
          "extensions/v1beta1"
        ],
        "statefulSet": [
          "apps/v1",
          "apps/v1beta1"
        ],
        "daemonSet": [
          "apps/v1"
        ],
        "replicaSet": [
          "extensions/v1beta1"
        ],
        "namespace": [
          "v1"
        ],
        "serviceAccount": [
          "v1"
        ],
        "networking": [
          "networking.k8s.io/v1"
        ],
        "service": [
          "v1"
        ],
        "pod": [
          "v1"
        ],
        "config": [
          "v1"
        ],
        "secret": [
          "v1"
        ],
        "ingress": [
          "extensions/v1beta1"
        ],
        "persistentVolume": [
          "v1"
        ],
        "persistentVolumeClaim": [
          "v1"
        ],
        "storageClass": [
          "storage.k8s.io/v1"
        ],
        "CSIDriver":[
          "storage.k8s.io/v1beta1"
        ],
        "job":[
          "batch/v1"
        ],
        "autoscaling": [
          "autoscaling/v1"
        ],
        "role": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "clusterRole": [
          "rbac.authorization.k8s.io/v1beta1",
          "rbac.authorization.k8s.io/v1"
        ],
        "node": [
          "v1"
        ]
      }
    }
  error_config.json: "{\n   \"user\":{\n      \"ACTIVATE_RESOURCE\":\"Please Activate
    Google Google Identity and Access Management API for your project under Google Developers
    Console\"\n   },\n   \"all\":{\n      \"DATA_PERSISTANCE\":\"Internal Error; (Failed
    to store data)\",\n      \"DATA_RETRIVE\":\"Internal Error; (Failed to retrive data)\",\n
    \     \"INTERNAL_SERVER\":\"Internal Error; Unable to communicate with internal-server\",\n
    \     \"INTERNAL_SERVER_ERROR\":\"Internal Error; Try after sometime\",\n      \"RESOURCE_NOT_FOUND\":\"Resource
    '%s' does not exist\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Resource does
    not exit\",\n      \"ERROR_HITTING_EXT_API\":\"Unable to communicate with external
    resources\",\n      \"ALREADY_EXIST\":\"'%s' already exists\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\",\n      \"INVALID_TYPE\":\"Token type is
    invalid\",\n      \"INVALID_SCOPE\":\"Token scope is invalid\",\n      \"LIMIT_EXCEED\":\"Token
    Creation Limit Exceed\",\n      \"UNMARSHAL_ERROR\":\"The field '%s' is a '%s' type,
    but the given value is '%s' type\",\n      \"UNKNOWN_UNMARSHAL_ERROR\":\"The expected
    type is a '%s', but the given value is '%s' type\",\n      \"DEPENDENCY_EXIST_RESOURCE\":\"This
    Resource has dependency\",\n      \"SOMETHING_WRONG\": \"Internal Error\",\n      \"INTERNAL_DB_COPY\":
    \"Could not format response from database object.\",\n      \"GEN_UNMARSHAL_ERROR\":\"Error
    in unmarshal '%s'\",\n      \"STRING_TO_INT_ERROR\":\"Error in converting string
    to int '%s'\",\n      \"FIELD_VALIDATION\":\"InvalidValidationError '%s'\",\n      \"MARSHAL_ERROR\":\"Error
    in marshaling '%s'\"\n   },\n   \"gke_infrastructure\":{\n      \"NO_CLUSTERS\":\"No
    kubernetes Clusters are available\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"kubernetes
    Cluster is not found\",\n      \"RESOURCE_NOT_FOUND\":\"kubernetes Cluster '%s'
    is not found\",\n      \"NO_CLUSTERS_AVAILABLE\":\"kubernetes Cluster not Enabled
    for this Account\",\n      \"ALREADY_EXIST\":\"kubernetes Cluster '%s' already exists\",\n
    \     \"ERROR_HITTING_EXT_API\":\"Unable to communicate with Google Cloud\",\n      \"ERROR_HITTING_EXT_API_AZURE\":\"Unable
    to communicate with Azure Cloud\",\n      \"ACTIVATE_RESOURCE\":\"Please activate
    Google Cloud Resource Manager APIs\",\n      \"ACTIVATE_AZURE_RESOURCE\":\"Please
    activate your Azure Subscriptons\",\n      \"SSHKEY_ACTIVATE\":\"Please Save Your
    Public SSH Key in General Settings Page\",\n      \"REX_VALIDATION\":\"%s should
    be in the format of %s\"\n   },\n   \"cDelivery\":{\n      \"RESOURCE_NOT_FOUND\":\"Source
    Control Account '%s' does not exist\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Source
    Control Account does not exist\",\n      \"ALREADY_EXIST\":\"Continuous Delivery
    for repository '%s' is already enabled\",\n      \"WEBHOOK_FAILED\":\"Error in injecting
    the webhook for '%s'\"\n   },\n   \"codebase\":{\n      \"NO_CODEBASE\":\"No Source
    Control accounts are available\",\n      \"RESOURCE_NOT_FOUND\":\"Source Control
    account '%s' does not exist\",\n      \"RESOURCE_NOT_FOUND_WITHOUT_NAME\":\"Source
    Control account does not exist\",\n      \"URL_NOT_FOUND\":\"Repository Url '%s'
    cannot be identified\",\n      \"NOT_AUTHENTICATED\":\"Repository Url '%s' cannot
    be authenticated with account '%s'\",\n      \"ALREADY_EXIST\":\"Source Control
    account '%s' already exists\",\n      \"ERROR_HITTING_EXT_API\":\"Unable to communicate
    with codebase service\",\n      \"BAD_CREDENTIALS\":\"Bad credentials; Source control
    Access Token may have been revoked for account '%s'\",\n      \"INVALID_CREDENTIALS\":\"Spefied
    repository does not seems to be public. You donot have permission to access it.\",\n
    \     \"EMPTY_REPO\":\"Specified repository is empty\",\n      \"TAG_NOT_FOUND\":\"Specified
    tag not found. Please enter valid Tag '%s'.\",\n      \"PRIVATE_URL\":\"It may be
    Private Url '%s'\",\n      \"INVALID_URL\":\"Invalid Repository Url '%s'\"\n   },\n
    \  \"release_build\":{\n      \"ERROR_HITTING_INT_API\":\"Unable to communicate
    with Internal Service\",\n      \"ERROR_HITTING_EXT_API\":\"Unable to communicate
    with External Service\",\n      \"NOT_FOUND\":\"There is no Result Found\",\n      \"INVALID_RELEASE\":\"Invalid
    Release '%s'\",\n      \"INVALID_BUILD\":\"Invalid Build '%s'\",\n      \"INVALID_PIPELINE\":\"Invalid
    Pipeline '%s'\",\n      \"INVALID_OPERATION\":\"Invalid operation '%s'\",\n      \"MISSING_FIELD\":\"Invalid
    input or missing mandatory field '%s'\"\n   },\n   \"platform\":{\n      \"ERROR_HITTING_INT_API\":\"Unable
    to communicate with Internal Service\",\n      \"ERROR_HITTING_EXT_API\":\"Unable
    to communicate with External Service\",\n      \"NOT_FOUND\":\"There is no Result
    Found\",\n      \"INVALID_RELEASE\":\"Invalid Release '%s'\",\n      \"INVALID_BUILD\":\"Invalid
    Build '%s'\",\n      \"INVALID_PIPELINE\":\"Invalid Pipeline '%s'\",\n      \"INVALID_OPERATION\":\"Invalid
    operation '%s'\",\n      \"MISSING_FIELD\":\"Invalid input or missing mandatory
    field '%s'\"\n   },\n   \"Metrics\":{\n      \"METRICS_NOTFOUND\":\"Requested projectID
    '%s' is not found\"  \n    },\n   \"All\":{  \n    \"SOMETHING_WRONG\": \"Internal
    Error\",\n    \"MISSING_FIELD\":\"Invalid input or missing mandatory field '%s'\",\n
    \   \"INVALID_ID\":\"Requested resource id '%s' is invalid format\",\n    \"UNMARSHAL_ERROR\":\"The
    field '%s' is a '%s' type, but the given value is '%s' type\",\n    \"UNKNOWN_UNMARSHAL_ERROR\":\"The
    expected type is a '%s', but the given value is '%s' type\",\n    \"PAGESIZE_NEGAVE\":\"Page
    or Size can not be a negative number { '%d', '%d' }\",\n    \"PPAGE_LIMIT\":\"Requested
    invalid page '%d'; Page should be less than '%d'\",\n    \"PSIZE_LIMIT\":\"Requested
    invalid size '%d' Page should be less than '%d'\"\n   },\n   \"Build\":{\n    \"BUILD_NOTFOUND\":\"The
    requested build '%s' is not found\",\n    \"INVALID_ARTIFACTTYPE\":\"The given service's
    artifact type is incompatible to build '%s'\",\n    \"BUILDAGENT_NOTRESPOND\":\"Build
    agent is not responding to Build server\",\n    \"ARTIFACT_EMPTY\":\"Artifacts is
    not configured for the service '%s' with version '%d'\",\n    \"BUILDLOG_NOTFOUND\":\"The
    build log is not available for the requested build id '%s'\",\n    \"BUILDSCANLOG_NOTFOUND\":\"The
    build scan log is not available for the requested build id '%s'\",\n    \"10MB_HEADER_MISSING\":\"The
    header value should be to set to header 'Content-Type' with 'application/octet-stream'
    if log size more than 10 MB\",\n    \"CLUSTER_ID_MISSING\":\"Cluster ID cannot be
    empty\",\n    \"ALLOCATION_POLICY_MISSING\":\"Alloctation Policy ID cannot be empty\",\n
    \   \"MAX_LIMIT\":\"Maximum build limit reached please try later\",\n    \"CONNECT_QUEUE\":\"Cannot
    connect into queue\",\n    \"PLACE_QUEUE\":\"Cannot place the build into queue\"\n
    \  },\n   \"cb\":{\n      \"DEP_REF_ALREADY_EXISTS\":\"This Depency Reference Id
    '%s' version '%s' is already exists\",\n      \"CODEBASE_EXISTS\":\"CODEBASE_EXISTS\",\n
    \     \"KEY_EXISTS\":\"This Key '%s' is already exists.please use another Key\",\n
    \     \"NAME_EXISTS\":\"This Name '%s' is already exists.please use another Name\",\n
    \     \"MANAGED_TYPE\":\"User cannot delete Managed CodeBaseAuth\",\n      \"CODEBASE_NOTFOUND\":\"The
    requested codebase '%s' is not found\",\n      \"INVALID_ARTIFACTTYPE\":\"The given
    service's artifact type is incompatible to build '%s'\",\n      \"BUILDAGENT_NOTRESPOND\":\"Build
    agent is not responding to Build server\",\n      \"ARTIFACT_EMPTY\":\"Artifacts
    is not configured for the service '%s' with version '%d'\",\n      \"BUILDLOG_NOTFOUND\":\"The
    build log is not available to requested build id '%s'\",\n      \"10MB_HEADER_MISSING\":\"The
    header value should be to set to header 'Content-Type' with 'application/octet-stream'
    if log size more than 10 MB\"\n     },\n     \"Topup\":{\n      \"TOPUP_NOTFOUND\":\"Requested
    accountID '%s' is not found\"\n    },\n    \"Release\":{\n       \"RELEASE_NOTFOUND\":
    \"Requested releaseID '%s' is not found\",\n       \"PROFILE_NAME_NOT_FOUND\":\"Requested
    ProfileID '%s' is not found\",\n       \"PROFILE_NAME_EXISTS\":\"This Profile Name
    '%s' already exists\",\n       \"CONTAINER_EXISITS\":\"This containerID '%s' already
    exists\",\n       \"REPO_CONTAINER_EXISITS\":\"This containerID '%s' already exists
    on releaseID '%s'\",\n       \"REPO_NOT_SUPPORTED\":\"This containerID '%s' is imagebased.
    Repository is only supported for 'dockerfileBased,codeBased'\",\n       \"ACCOUNT_NOT_ACTIVE\":
    \"Not an active account\",\n       \"MISMATCHED_ARTIFACTS\":\"Given update type
    '%s' is not matched with the existing service artifact type '%s'\",\n       \"ARTIFACT_UPDATE_EMPTY\":\"artifactConfig.%s
    field can not be empty if update type is %s\",\n       \"RELEASE_NAME_EXISTS\":\"This
    release Name '%s' already exists\",\n       \"MISSING_FIELD\":\"Invalid input or
    missing mandatory field '%s'\",\n       \"REGISTRY_VALIDATION_FAILED\":\"Failed
    in registry validation: %s\",\n       \"CI_NOT_APPLICABLE\":\"CI is enabled.But
    CI not applicable for Unregistered CodeBase Repository\",\n       \"CODEBASE_VALIDATION\":\"artifactConfig.CodebaseRepo.RegisteredCodebase
    is selected. So ServiceConfig.ArtifactConfig.CodebaseRepo.CodebaseID cannot be empty\",\n
    \      \"PRIVATE_SCM\": \"Requested SCM type is not supported for deck subscription
    type '%s'\",\n       \"VULNERABILITY_UPDATE_EXITSCAN\":\"vulnerabilityScan.ExitScan
    value is '%s' is not matched with existing vulnerabilityScan values '%s'\",\n       \"REPO_UPDATE_EMPTY\":\"%s
    field can not be empty\",\n       \"REPO_NOTFOUND\":\"Requested repo '%s' is not
    found in release '%s'\",\n       \"PROFILE_NOTFOUND\":\"Requested profile '%s' is
    not found in the distribution '%s'\",\n       \"DISTRIBUTION_SERVICE_NOTFOUND\":\"Requested
    service '%s' is not found in distribution '%s'\",\n       \"DISTRIBUTION_NOTFOUND\":\"Requested
    distribution '%s' is not found in release '%s'\",\n       \"REPO_VALIDATION_FAILED\":\"Failed
    in repo validation: %s\",\n       \"DISTRIBUTION_NAME_EXISTS\":\"This distribution
    Name '%s' already exists\",\n       \"CANT_DELETE_DISTRIBUTION\":\"Gopaddle's default
    distribution can't be removed\",\n       \"CANT_DELETE_PROFILE\":\"Gopaddle's default
    profile can't be removed\",\n       \"CANT_UPDATE_RELEASE\":\"Gopaddle's default
    release can't be updated\",\n       \"DISTRIBUTION_SERVICE_EXISTS\": \"Container
    '%s' already exists in distribution '%s'\"\n      }\n}"
  profiles-kube.json: "{\n  \"mongodb\":{\n    \"db-name\":\"gpcore\",\n    \"db-endpoint\":[\n
    \     \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n
    \   \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n  },\n  \"redis\":{\n
    \   \"redis-endpoint\":\"redis\",\n    \"redis-port\":\"6379\",\n    \"redis-password\":\"avraj\"\n
    \ },\n  \"rabbitmq\":{\n    \"mq-protocol\":\"amqp\",\n    \"mq-user\":\"admin\",\n
    \   \"mq-password\":\"cGFzc3dvcmQ\",\n    \"mq-ip\":\"NODE_IP\",\n    \"mq-port\":\"NODE_PORT\",\n
    \   \"mq-default-host\":\"/build\",\n    \"mq-worker-queue\":\"worker-queue\"\n
    \ },\n  \"rabbitmq-agent\":{\n    \"agentmq-protocol\":\"amqp\",\n    \"agentmq-user\":\"admin\",\n
    \   \"agentmq-password\":\"cGFzc3dvcmQ\",\n    \"agentmq-ip\":\"NODE_IP\",\n    \"agentmq-port\":\"NODE_PORT\",\n
    \   \"agentmq-default-host\":\"/build\",\n    \"agentmq-worker-queue\":\"worker-queue\"\n
    \ },\n  \"mqMaxAttempt\":\"5\",\n  \"build\":{\n    \"buildLogDir\":\"/buildlog\",\n
    \   \"buildScanLogDir\":\"/buildscanlog\",\n    \"buildImage\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/buildagent-v1:agent-1.14\",\n
    \   \"buildImage-arm64\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/buildagent-v1:agent-arm64-1.14\",\n
    \   \"kaniko-default\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/kaniko:v1.3.0\",\n
    \   \"kaniko-amd64\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/kaniko:amd64-v1.3.0\",\n
    \   \"kaniko-arm64\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/kaniko:arm64-v1.3.0\",\n
    \   \"kaniko-multi-arch\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/kaniko:multi-arch-v1.3.0\",\n
    \   \"trivyImage\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/trivy:0.18.3\",\n
    \   \"trivyImage-arm64\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/trivy:0.18.3-arm64\",\n
    \   \"craneImage\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/crane:debug\",\n
    \   \"craneImage-arm64\":\"611260657835.dkr.ecr.ap-southeast-2.amazonaws.com/crane:debug-arm64\"
    \ \n  },\n  \"signup-url\":\"DOMAIN_NAME\",\n  \"github\":{\n    \"github_endpoints\":{\n
    \     \"webhookURL\":\"WEBHOOK_NODE_IP\",\n      \"webhook_config_url\":\"/api/gwebhook\"\n
    \   },\n    \"repo_create_payload\":{\n      \"description\":\"This is repository
    created by Gopaddle\",\n      \"homepage\":\"DOMAIN_NAME\",\n      \"private\":false,\n
    \     \"has_issues\":true,\n      \"has_wiki\":true,\n      \"has_downloads\":true\n
    \   }\n  },\n  \"bitbucket\":{\n    \"bitbucket_endpoints\":{\n      \"webhookURL\":\"WEBHOOK_NODE_IP\",\n
    \     \"webhook_config_url\":\"/api/bwebhook\"\n    },\n    \"repo_create_payload\":{\n
    \     \"scm\":\"git\",\n      \"description\":\"This is repository created by Gopaddle\",\n
    \     \"is_private\":false,\n      \"has_issues\":true,\n      \"has_wiki\":true,\n
    \     \"fork_policy\":\"allow_forks\"\n    }\n  },\n  \"gitlab\":{\n    \"github_endpoints\":{\n
    \     \"webhookURL\":\"WEBHOOK_NODE_IP\",\n      \"webhook_config_url\":\"/api/gitlabWebhook\"\n
    \   },\n    \"repo_create_payload\":{\n      \"description\":\"This is repository
    created by Gopaddle\",\n      \"visibility_level\":10,\n      \"issues_enabled\":true,\n
    \     \"wiki_enabled\":true,\n      \"archived\":true\n    }\n  },\n  \"endpoints\":{\n
    \   \"google_endpoints\":{\n      \"refresh_token\":\"https://www.googleapis.com/oauth2/v3/token\",\n
    \     \"cluster_details\":\"https://console.developers.google.com/kubernetes/clusters/details\"\n
    \   },\n    \"github\":{\n      \"endpoints\":{\n        \"host\":\"https://github.com\",\n
    \       \"host_api\":\"https://api.github.com\"\n      },\n      \"saas_suffix\":{\n
    \       \"access_token\":\"/login/oauth/access_token\",\n        \"user_data\":\"/user\",\n
    \       \"create_repo\":\"/user/repos\",\n        \"getrepo\":\"/repos/:username/:reponame\",\n
    \       \"getcommit\":\"/repos/:username/:reponame/commits\",\n        \"push_content\":\"/repos/:username/:reponame/contents/:path\",\n
    \       \"tags\":\"/repos/:username/:reponame/tags\",\n        \"branches\":\"/repos/:username/:reponame/branches\",\n
    \       \"listing_repos\":\"/user/repos\",\n        \"pull_tarball\":\"/repos/:username/:reponame/tarball\",\n
    \       \"webhook\":\"/repos/:username/:reponame/hooks\",\n        \"webhook_get\":\"/repos/:username/:reponame/hooks/:hookID\",\n
    \       \"Remove_Git_Webhook\":\"/repos/:username/:reponame/hooks/:hookID\"\n      },\n
    \     \"onprem_suffix\":{\n        \"access_token\":\"/login/oauth/access_token\",\n
    \       \"user_data\":\"/api/v3/user\",\n        \"tags\":\"/api/v3/repos/:username/:reponame/tags\",\n
    \       \"getrepo\":\"/api/v3/repos/:username/:reponame\",\n        \"getcommit\":\"/api/v3/repos/:username/:reponame/commits\",\n
    \       \"branches\":\"/api/v3/repos/:username/:reponame/branches\",\n        \"listing_repos\":\"/api/v3/user/repos\",\n
    \       \"pull_tarball\":\"/api/v3/repos/:username/:reponame/tarball\",\n        \"webhook\":\"/api/v3/repos/:username/:reponame/hooks\",\n
    \       \"webhook_get\":\"/api/v3/repos/:username/:reponame/hooks/:hookID\",\n        \"Remove_Git_Webhook\":\"/api/v3/repos/:username/:reponame/hooks/:hookID\"\n
    \     },\n      \"urlvalidation\":[\n        \"https://:hostname/.*/(.*)\\\\.git\",\n
    \       \"git@:hostname:.*/(.*)\\\\.git\",\n        \"https://:hostname/(.*)/.*\\\\.git\",\n
    \       \"git@:hostname:(.*)/.*\\\\.git\"\n      ]\n    },\n    \"gitlab\":{\n      \"endpoints\":{\n
    \       \"host\":\"https://gitlab.com\",\n        \"host_api\":\"https://gitlab.com\"\n
    \     },\n      \"saas_suffix\":{\n        \"access_token\":\"/oauth/token\",\n
    \       \"user_data\":\"/api/v4/user\",\n        \"create_repo\":\"/api/v3/projects\",\n
    \       \"getrepo\":\"/api/v4/projects/:id\",\n        \"getcommit\":\"/api/v4/projects/:id/repository/commits\",\n
    \       \"push_content\":\"/api/v3/projects/:id/repository/files\",\n        \"tags\":\"/api/v4/projects/:id/repository/tags\",\n
    \       \"branches\":\"/api/v4/projects/:id/repository/branches\",\n        \"listing_repos\":\"/user/repos\",\n
    \       \"pull_tarball\":\"git clone -b 'branch' https://oauth2:access_token@:clone_url\",\n
    \       \"webhook\":\"/api/v4/projects/:id/hooks\",\n        \"webhook_get\":\"/api/v4/projects/:id/hooks/:hookID\",\n
    \       \"Remove_Git_Webhook\":\"/api/v4/projects/:id/hooks/:hookID\"\n      },\n
    \     \"onprem_suffix\":{\n        \"access_token\":\"/oauth/token\",\n        \"user_data\":\"/api/v4/user\",\n
    \       \"tags\":\"/api/v4/projects/:id/repository/tags\",\n        \"getrepo\":\"/api/v4/projects/:id\",\n
    \       \"getcommit\":\"/api/v4/projects/:id/repository/commits\",\n        \"branches\":\"/api/v4/projects/:id/repository/branches\",\n
    \       \"listing_repos\":\"/user/repos\",\n        \"pull_tarball\":\"git clone
    -b 'branch' https://oauth2:access_token@:clone_url\",\n        \"webhook\":\"/api/v4/projects/:id/hooks\",\n
    \       \"webhook_get\":\"/api/v4/projects/:id/hooks/:hookID\",\n        \"Remove_Git_Webhook\":\"/api/v4/projects/:id/hooks/:hookID\"\n
    \     },\n      \"urlvalidation\":[\n        \"https://:hostname/(.*?)/(.*?)\\\\.git\",\n
    \       \"git@:hostname:(.*)/(.*)\\\\.git\"\n      ]\n    },\n    \"bitbucket\":{\n
    \     \"endpoints\":{\n        \"host\":\"https://bitbucket.org\",\n        \"host_api\":\"https://api.bitbucket.org\"\n
    \     },\n      \"saas_suffix\":{\n        \"access_token\":\"/site/oauth2/access_token\",\n
    \       \"user_data\":\"/2.0/user\",\n        \"user_email\":\"/2.0/user/emails\",\n
    \       \"create_repo\":\"/2.0/repositories/:username/:reponame\",\n        \"getrepo\":\"/api/2.0/repositories/:username/:reponame\",\n
    \       \"getcommit\":\"/api/2.0/repositories/:username/:reponame/commits\",\n        \"tags\":\"/api/2.0/repositories/:username/:reponame/refs/tags\",\n
    \       \"branches\":\"/api/2.0/repositories/:username/:reponame/refs/branches\",\n
    \       \"listing_repos\":\"/!api/2.0/repositories/:username\",\n        \"pull_tarball\":\"/:username/:reponame/get/:origin.tar.gz\",\n
    \       \"webhook\":\"/2.0/repositories/:username/:reponame/hooks\",\n        \"webhook_get\":\"/2.0/repositories/:username/:reponame/hooks/:hookID\",\n
    \       \"Remove_Git_Webhook\":\"/2.0/repositories/:username/:reponame/hooks/:hookID\"\n
    \     },\n      \"onprem_suffix\":{\n        \"access_token\":\"/site/oauth2/access_token\",\n
    \       \"user_data\":\"/2.0/user\",\n        \"user_email\":\"/2.0/user/emails\",\n
    \       \"getrepo\":\"/api/2.0/repositories/:username/:reponame\",\n        \"tags\":\"/api/2.0/repositories/:username/:reponame/refs/tags\",\n
    \       \"branches\":\"/api/2.0/repositories/:username/:reponame/refs/branches\",\n
    \       \"listing_repos\":\"/!api/2.0/repositories/:username\",\n        \"pull_tarball\":\"/:username/:reponame/get/:origin.tar.gz\",\n
    \       \"webhook\":\"/api/v3/repos/:username/:reponame/hooks\",\n        \"webhook_get\":\"/2.0/repositories/:username/:reponame/hooks/:hookID\",\n
    \       \"Remove_Git_Webhook\":\"/2.0/repositories/:username/:reponame/hooks/:hookID\"\n
    \     },\n      \"urlvalidation\":[\n        \"https://.*@:hostname/(.*?)/(.*?)\\\\.git\",\n
    \       \"https://:hostname/(.*?)/(.*?)\\\\.git\",\n        \"git@:hostname:(.*)/(.*)\\\\.git\"\n
    \     ]\n    },\n    \"github_endpoints\":{\n      \"access_token\":\"https://github.com/login/oauth/access_token\",\n
    \     \"user_data\":\"https://api.github.com/user\",\n      \"create_repo\":\"https://api.github.com/user/repos\",\n
    \     \"push_content\":\"https://api.github.com/repos/:username/:reponame/contents/:path\",\n
    \     \"listing_tags\":\"https://api.github.com/repos/:username/:reponame/tags\",\n
    \     \"listing_branches\":\"https://api.github.com/repos/:username/:reponame/branches\",\n
    \     \"listing_repos\":\"https://api.github.com/user/repos\",\n      \"pull_tarball\":\"https://api.github.com/repos/:username/:reponame/tarball\",\n
    \     \"webhook\":\"https://api.github.com/repos/:username/:reponame/hooks\",\n
    \     \"webhook_get\":\"https://api.github.com/repos/:username/:reponame/hooks/:hookID\",\n
    \     \"Remove_Git_Webhook\":\"https://api.github.com/repos/:username/:reponame/hooks/:hookID\"\n
    \   },\n    \"bitbucket_endpoints\":{\n      \"access_token\":\"https://bitbucket.org/site/oauth2/access_token\",\n
    \     \"user_data\":\"https://api.bitbucket.org/2.0/user\",\n      \"user_email\":\"https://api.bitbucket.org/2.0/user/emails\",\n
    \     \"create_repo\":\"https://api.bitbucket.org/2.0/repositories/:username/:reponame\",\n
    \     \"push_content\":\"\",\n      \"listing_tags\":\"https://bitbucket.org/api/2.0/repositories/:username/:reponame//refs/tags\",\n
    \     \"listing_branches\":\"https://bitbucket.org/api/2.0/repositories/:username/:reponame/refs/branches\",\n
    \     \"listing_repos\":\"https://bitbucket.org/!api/2.0/repositories/:username\",\n
    \     \"pull_tarball\":\"https://bitbucket.org/:username/:reponame/get/:origin.tar.gz\",\n
    \     \"webhook_get\":\"https://api.bitbucket.org/2.0/repositories/:username/:reponame/hooks/:hookID\",\n
    \     \"webhook\":\"https://api.bitbucket.org/2.0/repositories/:username/:reponame/hooks\",\n
    \     \"Remove_Git_Webhook\":\"https://api.bitbucket.org/2.0/repositories/:username/:reponame/hooks/:hookID\"\n
    \   },\n    \"gitlab_endpoints\":{\n      \"access_token\":\"https://gitlab.com/oauth/token\",\n
    \     \"user_data\":\"https://gitlab.com/api/v4/user\",\n      \"create_repo\":\"https://gitlab.com/api/v4/projects\",\n
    \     \"push_content\":\"https://gitlab.com/api/v4/projects/:id/repository/files\",\n
    \     \"listing_tags\":\"https://gitlab.com/api/v4/projects/:id/repository/tags\",\n
    \     \"listing_branches\":\"https://gitlab.com/api/v4/projects/:id/repository/branches\",\n
    \     \"listing_repos\":\"https://api.github.com/user/repos\",\n      \"pull_tarball\":\"git
    clone :b https://oauth2:access_token@:clone_url\",\n      \"webhook\":\"https://gitlab.com/api/v4/projects/:id/hooks\",\n
    \     \"webhook_get\":\"https://gitlab.com/api/v4/projects/:id/hooks/:hookID\",\n
    \     \"Remove_Git_Webhook\":\"https://gitlab.com/api/v4/projects/:id/hooks/:hookID\"\n
    \   },\n    \"repo_create_payload\":{\n      \"scm\":\"git\",\n      \"description\":\"This
    is repository created by Gopaddle\",\n      \"is_private\":false,\n      \"has_issues\":true,\n
    \     \"has_wiki\":true,\n      \"fork_policy\":\"allow_forks\"\n    }\n  },\n  \"google\":{\n
    \   \"google_endpoints\":{\n      \"refresh_token\":\"https://www.googleapis.com/oauth2/v3/token\",\n
    \     \"cluster_details\":\"https://console.developers.google.com/kubernetes/clusters/details\"\n
    \   }\n  },\n  \"logger\":{\n    \"logType\":\"debug\"\n  }\n}\n"
  internal_api.json: "{\n        \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s&project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"aclProject\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?project=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t},\n
    \      \"project\":{\n\t\t\"url\":\"http://%s:%s/api-internal/%s/v1/projectlist\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
  cft_aws_kube.json: "{\n\t\"AWSTemplateFormatVersion\": \"2010-09-09\",\n\t\"Parameters\":
    {\n\t\t\"KubernetesMasterName\": {\n\t\t\t\"Default\": \"KUBEMASTER_NAME\",\n\t\t\t\"Description\":
    \"Enter the name for Kubernetes Master\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"MinLength\":
    \"1\",\n\t\t\t\"MaxLength\": \"64\",\n\t\t\t\"AllowedPattern\": \"[a-zA-Z][a-zA-Z0-9]*\",\n\t\t\t\"ConstraintDescription\":
    \"must begin with a letter and contain only alphanumeric characters.\"\n\t\t},\n\t\t\"KubernetesMinionsName\":
    {\n\t\t\t\"Default\": \"KubeMinion\",\n\t\t\t\"Description\": \"Enter the name for
    Kubernetes Minion\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"MinLength\": \"1\",\n\t\t\t\"MaxLength\":
    \"64\",\n\t\t\t\"AllowedPattern\": \"[a-zA-Z][a-zA-Z0-9]*\",\n\t\t\t\"ConstraintDescription\":
    \"must begin with a letter and contain only alphanumeric characters.\"\n\t\t},\n\t\t\"MinionsCount\":
    {\n\t\t\t\"Default\": \"MINIONS_COUNT\",\n\t\t\t\"Type\": \"Number\",\n\t\t\t\"MinValue\":
    \"1\",\n\t\t\t\"Description\": \"Enter the number of Minions you want to create(Default
    Maximum scaling size is 10):\"\n\t\t},\n\t\t\"MasterInstanceType\": {\n\t\t\t\"Description\":
    \"Enter the instance size for Kubernetes Master\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Default\":
    \"MASTER_INSTANCE_TYPE\",\n\t\t\t\"AllowedValues\": [\n\t\t\t\t\"t2.nano\",\n\t\t\t\t\"t2.micro\",\n\t\t\t\t\"t2.small\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"t2.medium\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"m4.large\",\n\t\t\t\t\"m4.xlarge\",\n\t\t\t\t\"m3.medium\",\n\t\t\t\t\"m3.large\",\n\t\t\t\t\"m3.xlarge\"\n\t\t\t],\n\t\t\t\"ConstraintDescription\":
    \"Select EC2 Instance Type from list.\"\n\t\t},\n\t\t\"MinionsInstanceType\": {\n\t\t\t\"Description\":
    \"Enter the instance size for Kubernetes Minions\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Default\":
    \"MINION_INSTANCE_TYPE\",\n\t\t\t\"AllowedValues\": [\n\t\t\t\t\"t2.nano\",\n\t\t\t\t\"t2.micro\",\n\t\t\t\t\"t2.small\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"t2.medium\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"m4.large\",\n\t\t\t\t\"m4.xlarge\",\n\t\t\t\t\"m3.medium\",\n\t\t\t\t\"m3.large\",\n\t\t\t\t\"m3.xlarge\"\n\t\t\t],\n\t\t\t\"ConstraintDescription\":
    \"Select EC2 Instance Type from list.\"\n\t\t},\n\t\t\"KeyPair\": {\n\t\t\t\"Default\":
    \"PUBLIC_KEY\",\n\t\t\t\"Description\": \"Select the KeyPair(For both Master and
    Minions)\",\n\t\t\t\"Type\": \"AWS::EC2::KeyPair::KeyName\",\n\t\t\t\"ConstraintDescription\":
    \"Can contain only ASCII characters.\"\n\t\t}\n\t},\n\t\"Mappings\": {\n\t\t\"RegionMap\":
    {\n\t\t\t\"us-east-1\": {\n\t\t\t\t\"masterImage\": \"ami-d14cefc7\",\n\t\t\t\t\"nodeImage\":
    \"ami-3825852e\"\n\t\t\t},\n\t\t\t\"us-east-2\": {\n\t\t\t\t\"masterImage\": \"ami-44725621\",\n\t\t\t\t\"nodeImage\":
    \"ami-07775362\"\n\t\t\t},\n\t\t\t\"us-west-1\": {\n\t\t\t\t\"masterImage\": \"ami-feb6ef9e\",\n\t\t\t\t\"nodeImage\":
    \"ami-ce81d8ae\"\n\t\t\t},\n\t\t\t\"us-west-2\": {\n\t\t\t\t\"masterImage\": \"ami-9c6de2fc\",\n\t\t\t\t\"nodeImage\":
    \"ami-44ad2224\"\n\t\t\t},\n\t\t\t\"ca-central-1\": {\n\t\t\t\t\"masterImage\":
    \"ami-4557ea21\",\n\t\t\t\t\"nodeImage\": \"ami-c35ae7a7\"\n\t\t\t},\n\t\t\t\"eu-west-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-a0281dc6\",\n\t\t\t\t\"nodeImage\": \"ami-359db753\"\n\t\t\t},\n\t\t\t\"eu-central-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-1e9c4b71\",\n\t\t\t\t\"nodeImage\": \"ami-f877a397\"\n\t\t\t},\n\t\t\t\"eu-west-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-d09287b4\",\n\t\t\t\t\"nodeImage\": \"ami-e7918483\"\n\t\t\t},\n\t\t\t\"ap-southeast-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-4765d624\",\n\t\t\t\t\"nodeImage\": \"ami-5c83303f\"\n\t\t\t},\n\t\t\t\"ap-southeast-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-639f9d00\",\n\t\t\t\t\"nodeImage\": \"ami-9e8785fd\"\n\t\t\t},\n\t\t\t\"ap-northeast-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-c8895aa6\",\n\t\t\t\t\"nodeImage\": \"ami-2f825141\"\n\t\t\t},\n\t\t\t\"ap-northeast-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-95cb9bf2\",\n\t\t\t\t\"nodeImage\": \"ami-db7121bc\"\n\t\t\t},\n\t\t\t\"ap-south-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-6ba3d304\",\n\t\t\t\t\"nodeImage\": \"ami-a8bfcfc7\"\n\t\t\t},\n\t\t\t\"sa-east-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-de5d3cb2\",\n\t\t\t\t\"nodeImage\": \"ami-7048291c\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Conditions\":
    {\n\t\t\"RegionIsUsEast1\": {\n\t\t\t\"Fn::Equals\": [\n\t\t\t\t{\n\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t},\n\t\t\t\t\"us-east-1\"\n\t\t\t]\n\t\t},\n\t\t\"RegionIsUsGovWest1\":
    {\n\t\t\t\"Fn::Equals\": [\n\t\t\t\t{\n\t\t\t\t\t\"Ref\": \"AWS::Region\"\n\t\t\t\t},\n\t\t\t\t\"us-gov-west-1\"\n\t\t\t]\n\t\t}\n\t},\n\t\"Resources\":
    {\n\t\t\"MasterRole\": {\n\t\t\t\"Type\": \"AWS::IAM::Role\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"AssumeRolePolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Principal\":
    {\n\t\t\t\t\t\t\t\t\"Service\": [\n\t\t\t\t\t\t\t\t\t\"ec2.amazonaws.com\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"sts:AssumeRole\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Path\":
    \"/\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MasterRolePolicies\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Policy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"PolicyName\":
    \"kubernetes-master\",\n\t\t\t\t\"PolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"ec2:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"elasticloadbalancing:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"s3:*\",\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"arn:aws:s3:::kubernetes-*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:Describe*\",\n\t\t\t\t\t\t\t\t\"cloudwatch:*\",\n\t\t\t\t\t\t\t\t\"logs:*\",\n\t\t\t\t\t\t\t\t\"sns:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"autoscaling:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Roles\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MasterRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"1660e688-e775-4dcd-809f-ce55b2d8b03d\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MasterInstanceProfile\":
    {\n\t\t\t\"Type\": \"AWS::IAM::InstanceProfile\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"Path\":
    \"/\",\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MasterRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"d9051f55-2638-4223-a528-f6bd637d69ce\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsRole\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Role\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AssumeRolePolicyDocument\":
    {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Principal\": {\n\t\t\t\t\t\t\t\t\"Service\": [\n\t\t\t\t\t\t\t\t\t\"ec2.amazonaws.com\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"sts:AssumeRole\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Path\":
    \"/\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsRolePolicies\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Policy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"PolicyName\":
    \"kubernetes-minion\",\n\t\t\t\t\"PolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    \"s3:*\",\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"ec2:Describe*\",\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    \"ec2:AttachVolume\",\n\t\t\t\t\t\t\t\"Resource\": \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"ec2:DetachVolume\",\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"autoscaling:TerminateInstanceInAutoScalingGroup\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:Describe*\",\n\t\t\t\t\t\t\t\t\"cloudwatch:*\",\n\t\t\t\t\t\t\t\t\"logs:*\",\n\t\t\t\t\t\t\t\t\"sns:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\":
    \"MinionsRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"f8ac3cb8-a0c7-4c09-aa17-7cbc5b714b14\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsInstanceProfile\":
    {\n\t\t\t\"Type\": \"AWS::IAM::InstanceProfile\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"Path\":
    \"/\",\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MinionsRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"34090e53-04bc-4369-b851-83b599731685\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"vpcc54420a1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPC\",\n\t\t\t\"DeletionPolicy\": \"Delete\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"CidrBlock\": \"172.20.0.0/16\",\n\t\t\t\t\"InstanceTenancy\": \"default\",\n\t\t\t\t\"EnableDnsSupport\":
    \"true\",\n\t\t\t\t\"EnableDnsHostnames\": \"true\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": \"kubernetes-vpc\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnet1c9c0378\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Subnet\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"172.20.0.0/24\",\n\t\t\t\t\"AvailabilityZone\": {\n\t\t\t\t\t\"Fn::Select\": [\n\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAZs\":
    \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"igw20b4ac45\":
    {\n\t\t\t\"Type\": \"AWS::EC2::InternetGateway\",\n\t\t\t\"Properties\": {},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"doptbe33a7db\":
    {\n\t\t\t\"Type\": \"AWS::EC2::DHCPOptions\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DomainName\":
    {\n\t\t\t\t\t\"Fn::If\": [\n\t\t\t\t\t\t\"RegionIsUsEast1\",\n\t\t\t\t\t\t\"ec2.internal\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::Join\":
    [\n\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\".compute.internal\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"DomainNameServers\":
    [\n\t\t\t\t\t\"AmazonProvidedDNS\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"acf8dcff-cfab-4941-a7de-9b8e445ae526\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"aclc90371ad\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAcl\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\":
    {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"6959c47d-40ad-410b-941f-8b5a5ef18e28\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"rtb349ed450\":
    {\n\t\t\t\"Type\": \"AWS::EC2::RouteTable\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\":
    {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"9e8c941e-b4aa-4474-b2a4-7951635e0175\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"asgkubernetesminiongroup\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"Cooldown\": \"600\",\n\t\t\t\t\"DesiredCapacity\": {\n\t\t\t\t\t\"Ref\":
    \"MinionsCount\"\n\t\t\t\t},\n\t\t\t\t\"HealthCheckGracePeriod\": \"0\",\n\t\t\t\t\"HealthCheckType\":
    \"EC2\",\n\t\t\t\t\"MaxSize\": \"5\",\n\t\t\t\t\"MinSize\": {\n\t\t\t\t\t\"Ref\":
    \"MinionsCount\"\n\t\t\t\t},\n\t\t\t\t\"VPCZoneIdentifier\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\":
    \"subnet1c9c0378\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"LaunchConfigurationName\":
    {\n\t\t\t\t\t\"Ref\": \"lckubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"Tags\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes\",\n\t\t\t\t\t\t\"PropagateAtLaunch\": true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": {\n\t\t\t\t\t\t\t\"Ref\": \"KubernetesMinionsName\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"PropagateAtLaunch\":
    true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"Role\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes-minion\",\n\t\t\t\t\t\t\"PropagateAtLaunch\": true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"TerminationPolicies\":
    [\n\t\t\t\t\t\"NewestInstance\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ScaleUpPolicy\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AdjustmentType\":
    \"ChangeInCapacity\",\n\t\t\t\t\"AutoScalingGroupName\": {\n\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"ScalingAdjustment\":
    \"1\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ScaleDownPolicy\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AdjustmentType\":
    \"ChangeInCapacity\",\n\t\t\t\t\"AutoScalingGroupName\": {\n\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"ScalingAdjustment\":
    \"-1\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"a190ec41-22f1-4585-bf34-2b1fe903485f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"scaleUpMemUtili\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AdjustmentType\":
    \"ChangeInCapacity\",\n\t\t\t\t\"AutoScalingGroupName\": {\n\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"ScalingAdjustment\":
    \"1\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"scaleDownMemUtili\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AdjustmentType\":
    \"ChangeInCapacity\",\n\t\t\t\t\"AutoScalingGroupName\": {\n\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"ScalingAdjustment\":
    \"-1\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"a190ec41-22f1-4585-bf34-2b1fe903485f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"lckubernetesminiongroup\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"IamInstanceProfile\": {\n\t\t\t\t\t\"Ref\": \"MinionsInstanceProfile\"\n\t\t\t\t},\n\t\t\t\t\"AssociatePublicIpAddress\":
    true,\n\t\t\t\t\"ImageId\": {\n\t\t\t\t\t\"Fn::FindInMap\": [\n\t\t\t\t\t\t\"RegionMap\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"nodeImage\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"InstanceType\":
    {\n\t\t\t\t\t\"Ref\": \"MinionsInstanceType\"\n\t\t\t\t},\n\t\t\t\t\"KeyName\":
    {\n\t\t\t\t\t\"Ref\": \"KeyPair\"\n\t\t\t\t},\n\t\t\t\t\"InstanceMonitoring\": \"true\",\n\t\t\t\t\"SecurityGroups\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"BlockDeviceMappings\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sda1\",\n\t\t\t\t\t\t\"Ebs\":
    {\n\t\t\t\t\t\t\t\"VolumeSize\": 50\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral3\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdf\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral2\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sde\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral0\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdc\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral1\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdd\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"UserData\":
    {\n\t\t\t\t\t\"Fn::Base64\": {\n\t\t\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\"#!/bin/bash
    -x \\n\",\n\t\t\t\t\t\t\t\t\"pid=`ps -ax | grep apt | awk '{ print $1 }'` \\n\",\n\t\t\t\t\t\t\t\t\"kill
    -9 $pid \\n\",\n\t\t\t\t\t\t\t\t\"apt-get update\\n\",\n\t\t\t\t\t\t\t\t\"apt-get
    install awscli -y\\n\",\n\t\t\t\t\t\t\t\t\"# Node monitoring and ScaleDown script
    \\n\",\n\t\t\t\t\t\t\t\t\"cd /opt/\\n\",\n\t\t\t\t\t\t\t\t\"wget https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/v1.5.3/minionsMonitoringAndScaleDown.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed
    -i 's/KUBE_MASTER_PASSWORD/REPLACE_MASTER_PASSWORD/g' minionsMonitoringAndScaleDown.sh\\n\",\n\t\t\t\t\t\t\t\t\"sleep
    15\\n\",\n\t\t\t\t\t\t\t\t\"bash minionsMonitoringAndScaleDown.sh\\n\",\n\t\t\t\t\t\t\t\t\"echo
    \\\"*************************Node monitoring and ScaleDown script Finished\\\"\\n\",\n\t\t\t\t\t\t\t\t\"#
    Kubeadm - Joining your nodes with master \\n\",\n\t\t\t\t\t\t\t\t\"kubeadm join
    --token=qwerty.asdfghjklmnbvcxz 172.20.0.9 \\n\",\n\t\t\t\t\t\t\t\t\"wget https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/setPassword.sh
    -P /opt/ \\n\",\n\t\t\t\t\t\t\t\t\"bash -x /opt/setPassword.sh \\n\",\n\t\t\t\t\t\t\t\t\"#
    Shell Access1 \\n\",\n\t\t\t\t\t\t\t\t\"# Shell Access2 \\n\",\n\t\t\t\t\t\t\t\t\"echo
    \\\"*************************Script Finished\\\"\\n\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"instancei5efd3af1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Instance\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"IamInstanceProfile\":
    {\n\t\t\t\t\t\"Ref\": \"MasterInstanceProfile\"\n\t\t\t\t},\n\t\t\t\t\"DisableApiTermination\":
    \"false\",\n\t\t\t\t\"InstanceInitiatedShutdownBehavior\": \"stop\",\n\t\t\t\t\"ImageId\":
    {\n\t\t\t\t\t\"Fn::FindInMap\": [\n\t\t\t\t\t\t\"RegionMap\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"masterImage\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"InstanceType\":
    {\n\t\t\t\t\t\"Ref\": \"MasterInstanceType\"\n\t\t\t\t},\n\t\t\t\t\"KeyName\": {\n\t\t\t\t\t\"Ref\":
    \"KeyPair\"\n\t\t\t\t},\n\t\t\t\t\"Monitoring\": \"false\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": {\n\t\t\t\t\t\t\t\"Ref\": \"KubernetesMasterName\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Role\",\n\t\t\t\t\t\t\"Value\": \"kubernetes-master\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Volumes\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Device\": \"/dev/xvdb\",\n\t\t\t\t\t\t\"VolumeId\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"volumevol05ecfdb3\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"NetworkInterfaces\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"DeleteOnTermination\": \"true\",\n\t\t\t\t\t\t\"DeviceIndex\":
    0,\n\t\t\t\t\t\t\"SubnetId\": {\n\t\t\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"PrivateIpAddresses\":
    [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"PrivateIpAddress\": \"172.20.0.9\",\n\t\t\t\t\t\t\t\t\"Primary\":
    \"true\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"GroupSet\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Ref\":
    \"sgkubernetesmasterkubernetes\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"AssociatePublicIpAddress\":
    \"true\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"UserData\": {\n\t\t\t\t\t\"Fn::Base64\":
    {\n\t\t\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\"#!/bin/bash
    -x \\n\",\n\t\t\t\t\t\t\t\t\"pid=`ps -ax | grep apt | awk '{ print $1 }'` \\n\",\n\t\t\t\t\t\t\t\t\"kill
    -9 $pid \\n\",\n\t\t\t\t\t\t\t\t\"apt-get update\\n\",\n\t\t\t\t\t\t\t\t\"apt-get
    install awscli -y\\n\",\n\t\t\t\t\t\t\t\t\"#Initializing your master \\n\",\n\t\t\t\t\t\t\t\t\"kubeadm
    init --token=qwerty.asdfghjklmnbvcxz --use-kubernetes-version=v1.5.3 \\n\",\n\t\t\t\t\t\t\t\t\"#Deploying
    the calico Network \\n\",\n\t\t\t\t\t\t\t\t\"kubectl apply -f https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/kubeadm/calico.yaml
    \\n\",\n\t\t\t\t\t\t\t\t\"#Deploying the Dashboard \\n\",\n\t\t\t\t\t\t\t\t\"kubectl
    create -f https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/kubeadm/dashboard.yaml
    \\n\",\n\t\t\t\t\t\t\t\t\"#Heapster for Monitoring\\n\",\n    \t\t\t\t\t\t\t\"kubectl
    create -f https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/kubeadm/Monitoring/heapster-controller.yaml
    \\n\",\n    \t\t\t\t\t\t\t\"kubectl create -f https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/kubeadm/Monitoring/heapster-service.yaml
    \\n\",\n\t\t\t\t\t\t\t\t\"#Setting K8s Master Password\\n\",\n\t\t\t\t\t\t\t\t\"rm
    -rf /etc/kubernetes/pass.csv \\n\",\n\t\t\t\t\t\t\t\t\"echo \\\"REPLACE_MASTER_PASSWORD,admin,admin\\\"
    >> /etc/kubernetes/pass.csv\\n\",\n\t\t\t\t\t\t\t\t\"sed -i 's|\\\"--insecure-bind-address=127.0.0.1\\\",|\\\"--insecure-bind-address=127.0.0.1\\\",\\\\n\\\\t
    \ \\\"--basic-auth-file=/etc/kubernetes/pass.csv\\\",|g' /etc/kubernetes/manifests/kube-apiserver.json
    \\n\",\n\t\t\t\t\t\t\t\t\"# Monitoring - Scaleup Script \\n\",\n\t\t\t\t\t\t\t\t\"cd
    /opt/\\n\",\n\t\t\t\t\t\t\t\t\"rm -rf scaleUp.sh \\n\",\n\t\t\t\t\t\t\t\t\"wget
    https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/v1.5.3/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"wget
    https://s3-us-west-2.amazonaws.com/bluemeric-bucket/kubernetes-bucket/v1.5.3/nodeDelete.sh\\n\",\n\t\t\t\t\t\t\t\t\"autoScalingGroupName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"autoScalingPolicyName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"scaleUpMemUtili\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"regionName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"asg_policy=(${autoScalingPolicyName//policyName\\\\//
    })\\n\",\n\t\t\t\t\t\t\t\t\"sed -i \\\"s/AUTOSCALING_GROUP/$autoScalingGroupName/g\\\"
    /opt/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed -i \\\"s/AUTOSCALING_GROUP/$autoScalingGroupName/g\\\"
    /opt/nodeDelete.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed -i \\\"s|POLICY_NAME|${asg_policy[1]}|g\\\"
    /opt/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed -i \\\"s/REGION_ID/$regionName/g\\\"
    /opt/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed -i \\\"s/REGION_ID/$regionName/g\\\"
    /opt/nodeDelete.sh\\n\",\n\t\t\t\t\t\t\t\t\"crontab -r\\n\",\n\t\t\t\t\t\t\t\t\"crontab
    -l > mycron\\n\",\n\t\t\t\t\t\t\t\t\"echo \\\"*/5 * * * * bash -x /opt/scaleUp.sh
    >> /tmp/scaleupScript.log\\\" >> mycron\\n\",\n\t\t\t\t\t\t\t\t\"echo \\\"*/2 *
    * * * bash -x /opt/nodeDelete.sh >> /tmp/nodeDelete.log\\\" >> mycron\\n\",\n\t\t\t\t\t\t\t\t\"crontab
    mycron\\n\",\n\t\t\t\t\t\t\t\t\"rm mycron\\n\",\n\t\t\t\t\t\t\t\t\"/etc/init.d/cron
    restart\\n\",\n\t\t\t\t\t\t\t\t\"sleep 10\\n\",\n\t\t\t\t\t\t\t\t\"date\\n\",\n\t\t\t\t\t\t\t\t\"echo
    \\\"*************************Script for Finished\\\"\\n\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"volumevol05ecfdb3\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Volume\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AvailabilityZone\":
    {\n\t\t\t\t\t\"Fn::Select\": [\n\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAZs\":
    \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Size\": \"20\",\n\t\t\t\t\"VolumeType\":
    \"gp2\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"Name\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes-master-pd\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"d75a7952-3adb-42bc-9364-b41cbd62f694\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sgkubernetesmasterkubernetes\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroup\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupDescription\":
    \"Kubernetes security group applied to master nodes\",\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sgkubernetesminionkubernetes\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroup\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupDescription\":
    \"Kubernetes security group applied to minion nodes\",\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"alarmScaleDown30\":
    {\n\t\t\t\"Type\": \"AWS::CloudWatch::Alarm\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"ActionsEnabled\":
    \"true\",\n\t\t\t\t\"ComparisonOperator\": \"LessThanOrEqualToThreshold\",\n\t\t\t\t\"EvaluationPeriods\":
    \"1\",\n\t\t\t\t\"MetricName\": \"CPUUtilization\",\n\t\t\t\t\"Namespace\": \"AWS/EC2\",\n\t\t\t\t\"Period\":
    \"60\",\n\t\t\t\t\"Statistic\": \"Average\",\n\t\t\t\t\"Threshold\": \"5.0\",\n\t\t\t\t\"AlarmActions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"ScaleDownPolicy\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Dimensions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"AutoScalingGroupName\",\n\t\t\t\t\t\t\"Value\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"9306acfd-ce94-4e5b-9a0b-abdf6978be27\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"alarmScaleUp90\":
    {\n\t\t\t\"Type\": \"AWS::CloudWatch::Alarm\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"ActionsEnabled\":
    \"true\",\n\t\t\t\t\"ComparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n\t\t\t\t\"EvaluationPeriods\":
    \"1\",\n\t\t\t\t\"MetricName\": \"CPUUtilization\",\n\t\t\t\t\"Namespace\": \"AWS/EC2\",\n\t\t\t\t\"Period\":
    \"60\",\n\t\t\t\t\"Statistic\": \"Average\",\n\t\t\t\t\"Threshold\": \"90.0\",\n\t\t\t\t\"AlarmActions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"ScaleUpPolicy\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Dimensions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"AutoScalingGroupName\",\n\t\t\t\t\t\t\"Value\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"5e4d5136-5e00-43f2-88ca-21e30deece4e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"memoryScaleDown35\":
    {\n\t\t\t\"Type\": \"AWS::CloudWatch::Alarm\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"ActionsEnabled\":
    \"true\",\n\t\t\t\t\"ComparisonOperator\": \"LessThanOrEqualToThreshold\",\n\t\t\t\t\"EvaluationPeriods\":
    \"1\",\n\t\t\t\t\"MetricName\": \"MemoryUtilization\",\n\t\t\t\t\"Namespace\": \"System/Linux\",\n\t\t\t\t\"Period\":
    \"60\",\n\t\t\t\t\"Statistic\": \"Average\",\n\t\t\t\t\"Threshold\": \"5.0\",\n\t\t\t\t\"AlarmActions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"scaleDownMemUtili\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Dimensions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"AutoScalingGroupName\",\n\t\t\t\t\t\t\"Value\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"9306acfd-ce94-4e5b-9a0b-abdf6978be27\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"memoryScaleUp85\":
    {\n\t\t\t\"Type\": \"AWS::CloudWatch::Alarm\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"ActionsEnabled\":
    \"true\",\n\t\t\t\t\"ComparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n\t\t\t\t\"EvaluationPeriods\":
    \"1\",\n\t\t\t\t\"MetricName\": \"MemoryUtilization\",\n\t\t\t\t\"Namespace\": \"System/Linux\",\n\t\t\t\t\"Period\":
    \"60\",\n\t\t\t\t\"Statistic\": \"Average\",\n\t\t\t\t\"Threshold\": \"85.0\",\n\t\t\t\t\"AlarmActions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"scaleUpMemUtili\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Dimensions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"AutoScalingGroupName\",\n\t\t\t\t\t\t\"Value\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"5e4d5136-5e00-43f2-88ca-21e30deece4e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"acl1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAclEntry\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"Egress\": \"true\",\n\t\t\t\t\"Protocol\": \"-1\",\n\t\t\t\t\"RuleAction\":
    \"allow\",\n\t\t\t\t\"RuleNumber\": \"100\",\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\":
    \"aclc90371ad\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"acl2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAclEntry\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"Protocol\": \"-1\",\n\t\t\t\t\"RuleAction\": \"allow\",\n\t\t\t\t\"RuleNumber\":
    \"100\",\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\": \"aclc90371ad\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"a78ed404-1093-4861-b6f4-69aa2239c66e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnetacl1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\": \"aclc90371ad\"\n\t\t\t\t},\n\t\t\t\t\"SubnetId\":
    {\n\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"4f4dff08-c6e1-4a40-a9b6-9f4cc01aeb1e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"gw1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPCGatewayAttachment\",\n\t\t\t\"DeletionPolicy\":
    \"Delete\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"InternetGatewayId\":
    {\n\t\t\t\t\t\"Ref\": \"igw20b4ac45\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"ca7bd359-c1e1-4bb5-9072-72863dda115f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnetroute2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"SubnetId\":
    {\n\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"21432f55-5655-4510-9808-5f41c2038c45\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"route2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Route\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DestinationCidrBlock\":
    \"10.246.0.0/24\",\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"InstanceId\":
    {\n\t\t\t\t\t\"Ref\": \"instancei5efd3af1\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"8116d1ab-9a68-4e1b-9285-760066ae1093\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"route4\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Route\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DestinationCidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"GatewayId\":
    {\n\t\t\t\t\t\"Ref\": \"igw20b4ac45\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"DependsOn\":
    \"gw1\",\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\":
    \"8da01726-6a8e-4e82-a06b-70625b5c229f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"dchpassoc1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"DhcpOptionsId\":
    {\n\t\t\t\t\t\"Ref\": \"doptbe33a7db\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"498bfac2-d655-40b5-a7b5-0aa042a544ce\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"7daf34f8-5dbd-4881-b65a-dfc596013f26\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t}\n\t\t},\n\t\t\"ingress3\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"22\",\n\t\t\t\t\"ToPort\": \"22\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress4\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"443\",\n\t\t\t\t\"ToPort\": \"443\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress5\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t}\n\t\t},\n\t\t\"ingress6\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"ba908a72-6c66-47f3-8cf0-f545febc44be\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress7\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"22\",\n\t\t\t\t\"ToPort\": \"22\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress8\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"8080\",\n\t\t\t\t\"ToPort\": \"8080\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress9\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"6443\",\n\t\t\t\t\"ToPort\": \"6443\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress10\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"4200\",\n\t\t\t\t\"ToPort\": \"4200\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"egress1\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupEgress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"CidrIp\": \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"egress2\": {\n\t\t\t\"Type\":
    \"AWS::EC2::SecurityGroupEgress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"CidrIp\": \"0.0.0.0/0\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Description\":
    \"Kubernetes Cluster Creation Template using AWS CloudFormation\",\n\t\"Outputs\":
    {\n\t\t\"K8sURL\": {\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"https://\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAtt\":
    [\n\t\t\t\t\t\t\t\t\"instancei5efd3af1\",\n\t\t\t\t\t\t\t\t\"PublicIp\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\":6443/ui\"\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Description\":
    \"Kubernetes Cluster Master IP Address\"\n\t\t},\n\t\t\"MasterIP\": {\n\t\t\t\"Description\":
    \"Master IP Address\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAtt\":
    [\n\t\t\t\t\t\t\t\t\"instancei5efd3af1\",\n\t\t\t\t\t\t\t\t\"PublicIp\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"Metadata\":
    {\n\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\"5e4d5136-5e00-43f2-88ca-21e30deece4e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isrelatedto\": [\n\t\t\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"9306acfd-ce94-4e5b-9a0b-abdf6978be27\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isrelatedto\": [\n\t\t\t\t\t\"a190ec41-22f1-4585-bf34-2b1fe903485f\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"d75a7952-3adb-42bc-9364-b41cbd62f694\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 330\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"acf8dcff-cfab-4941-a7de-9b8e445ae526\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 450\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 570\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"8dba90ed-bf34-433f-a7d9-ab8517543adb\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 780,\n\t\t\t\t\t\"height\": 780\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 60,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [\n\t\t\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\",\n\t\t\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\",\n\t\t\t\t\t\"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\t\"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"498bfac2-d655-40b5-a7b5-0aa042a544ce\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"acf8dcff-cfab-4941-a7de-9b8e445ae526\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    1\n\t\t\t},\n\t\t\t\"ca7bd359-c1e1-4bb5-9072-72863dda115f\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    1\n\t\t\t},\n\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 690,\n\t\t\t\t\t\"y\": 450\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 690\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"ismemberof\": [\n\t\t\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t],\n\t\t\t\t\"isrelatedto\":
    [\n\t\t\t\t\t\"34090e53-04bc-4369-b851-83b599731685\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 690,\n\t\t\t\t\t\"y\": 570\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"ba908a72-6c66-47f3-8cf0-f545febc44be\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"7daf34f8-5dbd-4881-b65a-dfc596013f26\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"9e8c941e-b4aa-4474-b2a4-7951635e0175\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 330,\n\t\t\t\t\t\"height\": 330\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 90,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"8da01726-6a8e-4e82-a06b-70625b5c229f\",\n\t\t\t\t\t\"8116d1ab-9a68-4e1b-9285-760066ae1093\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"8da01726-6a8e-4e82-a06b-70625b5c229f\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t],\n\t\t\t\t\"dependson\":
    [\n\t\t\t\t\t\"ca7bd359-c1e1-4bb5-9072-72863dda115f\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"6778df45-dbc1-460f-afef-073126f855c3\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 240,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"e91552bd-fc54-4bf7-b77a-70ba6e0a4ad1\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"6959c47d-40ad-410b-941f-8b5a5ef18e28\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 330,\n\t\t\t\t\t\"height\": 180\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 90,\n\t\t\t\t\t\"y\": 540\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"a78ed404-1093-4861-b6f4-69aa2239c66e\",\n\t\t\t\t\t\"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"a78ed404-1093-4861-b6f4-69aa2239c66e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 600\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 600\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 240,\n\t\t\t\t\t\"height\": 240\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 480,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"21432f55-5655-4510-9808-5f41c2038c45\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"9e8c941e-b4aa-4474-b2a4-7951635e0175\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"4f4dff08-c6e1-4a40-a9b6-9f4cc01aeb1e\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"6959c47d-40ad-410b-941f-8b5a5ef18e28\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 510,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"b6097bd5-5202-44b7-bff0-21e6c17648f8\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"isconnectedto\":
    [\n\t\t\t\t\t\"d75a7952-3adb-42bc-9364-b41cbd62f694\"\n\t\t\t\t],\n\t\t\t\t\"isrelatedto\":
    [\n\t\t\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\",\n\t\t\t\t\t\"d9051f55-2638-4223-a528-f6bd637d69ce\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\",\n\t\t\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"8116d1ab-9a68-4e1b-9285-760066ae1093\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 810\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isconnectedto\": [\n\t\t\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t],\n\t\t\t\t\"isassociatedwith\":
    [\n\t\t\t\t\t\"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"0295532e-d02f-457a-b66f-bf885a676894\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 990,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"references\": [\n\t\t\t\t\t\"a7b57808-5d45-43b0-bf47-aad86ca4c28e\"\n\t\t\t\t],\n\t\t\t\t\"dependson\":
    [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"a7b57808-5d45-43b0-bf47-aad86ca4c28e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1080,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"a190ec41-22f1-4585-bf34-2b1fe903485f\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 990,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1110,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1200,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"34090e53-04bc-4369-b851-83b599731685\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1320,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"f8ac3cb8-a0c7-4c09-aa17-7cbc5b714b14\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1440,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 640,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"d9051f55-2638-4223-a528-f6bd637d69ce\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 510,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"1660e688-e775-4dcd-809f-ce55b2d8b03d\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 750,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
  cft_aws_kube_v2.json: "{\n\t\"AWSTemplateFormatVersion\": \"2010-09-09\",\n\t\"Parameters\":
    {\n\t\t\"KubernetesMasterName\": {\n\t\t\t\"Default\": \"KUBEMASTER_NAME\",\n\t\t\t\"Description\":
    \"Enter the name for Kubernetes Master\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"MinLength\":
    \"1\",\n\t\t\t\"MaxLength\": \"64\",\n\t\t\t\"AllowedPattern\": \"[a-zA-Z][a-zA-Z0-9]*\",\n\t\t\t\"ConstraintDescription\":
    \"must begin with a letter and contain only alphanumeric characters.\"\n\t\t},\n\t\t\"KubernetesMinionsName\":
    {\n\t\t\t\"Default\": \"KubeMinion\",\n\t\t\t\"Description\": \"Enter the name for
    Kubernetes Minion\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"MinLength\": \"1\",\n\t\t\t\"MaxLength\":
    \"64\",\n\t\t\t\"AllowedPattern\": \"[a-zA-Z][a-zA-Z0-9]*\",\n\t\t\t\"ConstraintDescription\":
    \"must begin with a letter and contain only alphanumeric characters.\"\n\t\t},\n\t\t\"MinionsCount\":
    {\n\t\t\t\"Default\": \"MINIONS_COUNT\",\n\t\t\t\"Type\": \"Number\",\n\t\t\t\"MinValue\":
    \"1\",\n\t\t\t\"Description\": \"Enter the number of Minions you want to create(Default
    Maximum scaling size is 10):\"\n\t\t},\n\t\t\"MasterInstanceType\": {\n\t\t\t\"Description\":
    \"Enter the instance size for Kubernetes Master\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Default\":
    \"MASTER_INSTANCE_TYPE\",\n\t\t\t\"AllowedValues\": [\n\t\t\t\t\"t2.nano\",\n\t\t\t\t\"t2.micro\",\n\t\t\t\t\"t2.small\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"t2.medium\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"m4.large\",\n\t\t\t\t\"m4.xlarge\",\n\t\t\t\t\"m3.medium\",\n\t\t\t\t\"m3.large\",\n\t\t\t\t\"m3.xlarge\"\n\t\t\t],\n\t\t\t\"ConstraintDescription\":
    \"Select EC2 Instance Type from list.\"\n\t\t},\n\t\t\"MinionsInstanceType\": {\n\t\t\t\"Description\":
    \"Enter the instance size for Kubernetes Minions\",\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Default\":
    \"MINION_INSTANCE_TYPE\",\n\t\t\t\"AllowedValues\": [\n\t\t\t\t\"t2.nano\",\n\t\t\t\t\"t2.micro\",\n\t\t\t\t\"t2.small\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"t2.medium\",\n\t\t\t\t\"t2.large\",\n\t\t\t\t\"m4.large\",\n\t\t\t\t\"m4.xlarge\",\n\t\t\t\t\"m3.medium\",\n\t\t\t\t\"m3.large\",\n\t\t\t\t\"m3.xlarge\"\n\t\t\t],\n\t\t\t\"ConstraintDescription\":
    \"Select EC2 Instance Type from list.\"\n\t\t},\n\t\t\"KeyPair\": {\n\t\t\t\"Default\":
    \"PUBLIC_KEY\",\n\t\t\t\"Description\": \"Select the KeyPair(For both Master and
    Minions)\",\n\t\t\t\"Type\": \"AWS::EC2::KeyPair::KeyName\",\n\t\t\t\"ConstraintDescription\":
    \"Can contain only ASCII characters.\"\n\t\t}\n\t},\n\t\"Mappings\": {\n\t\t\"RegionMap\":
    {\n\t\t\t\"us-east-1\": {\n\t\t\t\t\"masterImage\": \"ami-d14cefc7\",\n\t\t\t\t\"nodeImage\":
    \"ami-3825852e\"\n\t\t\t},\n\t\t\t\"us-east-2\": {\n\t\t\t\t\"masterImage\": \"ami-44725621\",\n\t\t\t\t\"nodeImage\":
    \"ami-07775362\"\n\t\t\t},\n\t\t\t\"us-west-1\": {\n\t\t\t\t\"masterImage\": \"ami-feb6ef9e\",\n\t\t\t\t\"nodeImage\":
    \"ami-ce81d8ae\"\n\t\t\t},\n\t\t\t\"us-west-2\": {\n\t\t\t\t\"masterImage\": \"ami-9c6de2fc\",\n\t\t\t\t\"nodeImage\":
    \"ami-44ad2224\"\n\t\t\t},\n\t\t\t\"ca-central-1\": {\n\t\t\t\t\"masterImage\":
    \"ami-4557ea21\",\n\t\t\t\t\"nodeImage\": \"ami-c35ae7a7\"\n\t\t\t},\n\t\t\t\"eu-west-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-a0281dc6\",\n\t\t\t\t\"nodeImage\": \"ami-359db753\"\n\t\t\t},\n\t\t\t\"eu-central-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-1e9c4b71\",\n\t\t\t\t\"nodeImage\": \"ami-f877a397\"\n\t\t\t},\n\t\t\t\"eu-west-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-d09287b4\",\n\t\t\t\t\"nodeImage\": \"ami-e7918483\"\n\t\t\t},\n\t\t\t\"ap-southeast-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-08233021b7701c399\",\n\t\t\t\t\"nodeImage\": \"ami-0e4ef4cb6b69cbb19\"\n\t\t\t},\n\t\t\t\"ap-southeast-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-0f49491506e8848c1\",\n\t\t\t\t\"nodeImage\": \"ami-01ae776fb5018f463\"\n\t\t\t},\n\t\t\t\"ap-northeast-2\":
    {\n\t\t\t\t\"masterImage\": \"ami-c8895aa6\",\n\t\t\t\t\"nodeImage\": \"ami-2f825141\"\n\t\t\t},\n\t\t\t\"ap-northeast-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-95cb9bf2\",\n\t\t\t\t\"nodeImage\": \"ami-db7121bc\"\n\t\t\t},\n\t\t\t\"ap-south-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-6ba3d304\",\n\t\t\t\t\"nodeImage\": \"ami-a8bfcfc7\"\n\t\t\t},\n\t\t\t\"sa-east-1\":
    {\n\t\t\t\t\"masterImage\": \"ami-de5d3cb2\",\n\t\t\t\t\"nodeImage\": \"ami-7048291c\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Conditions\":
    {\n\t\t\"RegionIsUsEast1\": {\n\t\t\t\"Fn::Equals\": [\n\t\t\t\t{\n\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t},\n\t\t\t\t\"us-east-1\"\n\t\t\t]\n\t\t},\n\t\t\"RegionIsUsGovWest1\":
    {\n\t\t\t\"Fn::Equals\": [\n\t\t\t\t{\n\t\t\t\t\t\"Ref\": \"AWS::Region\"\n\t\t\t\t},\n\t\t\t\t\"us-gov-west-1\"\n\t\t\t]\n\t\t}\n\t},\n\t\"Resources\":
    {\n\t\t\"MasterRole\": {\n\t\t\t\"Type\": \"AWS::IAM::Role\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"AssumeRolePolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Principal\":
    {\n\t\t\t\t\t\t\t\t\"Service\": [\n\t\t\t\t\t\t\t\t\t\"ec2.amazonaws.com\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"sts:AssumeRole\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Path\":
    \"/\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MasterRolePolicies\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Policy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"PolicyName\":
    \"kubernetes-master\",\n\t\t\t\t\"PolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"ec2:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"elasticloadbalancing:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"s3:*\",\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"arn:aws:s3:::kubernetes-*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:Describe*\",\n\t\t\t\t\t\t\t\t\"cloudwatch:*\",\n\t\t\t\t\t\t\t\t\"logs:*\",\n\t\t\t\t\t\t\t\t\"sns:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"autoscaling:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Roles\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MasterRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"1660e688-e775-4dcd-809f-ce55b2d8b03d\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MasterInstanceProfile\":
    {\n\t\t\t\"Type\": \"AWS::IAM::InstanceProfile\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"Path\":
    \"/\",\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MasterRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"d9051f55-2638-4223-a528-f6bd637d69ce\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsRole\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Role\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AssumeRolePolicyDocument\":
    {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Principal\": {\n\t\t\t\t\t\t\t\t\"Service\": [\n\t\t\t\t\t\t\t\t\t\"ec2.amazonaws.com\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"sts:AssumeRole\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Path\":
    \"/\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsRolePolicies\":
    {\n\t\t\t\"Type\": \"AWS::IAM::Policy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"PolicyName\":
    \"kubernetes-minion\",\n\t\t\t\t\"PolicyDocument\": {\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\":
    [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    \"s3:*\",\n\t\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"ec2:Describe*\",\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    \"ec2:AttachVolume\",\n\t\t\t\t\t\t\t\"Resource\": \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"ec2:DetachVolume\",\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\":
    [\n\t\t\t\t\t\t\t\t\"autoscaling:TerminateInstanceInAutoScalingGroup\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:DescribeAutoScalingGroups\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:DescribeAutoScalingInstances\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:SetDesiredCapacity\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    [\n\t\t\t\t\t\t\t\t\"*\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\":
    \"Allow\",\n\t\t\t\t\t\t\t\"Action\": [\n\t\t\t\t\t\t\t\t\"autoscaling:Describe*\",\n\t\t\t\t\t\t\t\t\"cloudwatch:*\",\n\t\t\t\t\t\t\t\t\"logs:*\",\n\t\t\t\t\t\t\t\t\"sns:*\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"Resource\":
    \"*\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\":
    \"MinionsRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"f8ac3cb8-a0c7-4c09-aa17-7cbc5b714b14\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"MinionsInstanceProfile\":
    {\n\t\t\t\"Type\": \"AWS::IAM::InstanceProfile\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"Path\":
    \"/\",\n\t\t\t\t\"Roles\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"MinionsRole\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"34090e53-04bc-4369-b851-83b599731685\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"vpcc54420a1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPC\",\n\t\t\t\"DeletionPolicy\": \"Delete\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"CidrBlock\": \"172.20.0.0/16\",\n\t\t\t\t\"InstanceTenancy\": \"default\",\n\t\t\t\t\"EnableDnsSupport\":
    \"true\",\n\t\t\t\t\"EnableDnsHostnames\": \"true\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": \"kubernetes-vpc\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnet1c9c0378\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Subnet\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"172.20.0.0/24\",\n\t\t\t\t\"AvailabilityZone\": {\n\t\t\t\t\t\"Fn::Select\": [\n\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAZs\":
    \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"igw20b4ac45\":
    {\n\t\t\t\"Type\": \"AWS::EC2::InternetGateway\",\n\t\t\t\"Properties\": {},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"doptbe33a7db\":
    {\n\t\t\t\"Type\": \"AWS::EC2::DHCPOptions\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DomainName\":
    {\n\t\t\t\t\t\"Fn::If\": [\n\t\t\t\t\t\t\"RegionIsUsEast1\",\n\t\t\t\t\t\t\"ec2.internal\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::Join\":
    [\n\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\".compute.internal\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"DomainNameServers\":
    [\n\t\t\t\t\t\"AmazonProvidedDNS\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"acf8dcff-cfab-4941-a7de-9b8e445ae526\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"aclc90371ad\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAcl\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\":
    {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"6959c47d-40ad-410b-941f-8b5a5ef18e28\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"rtb349ed450\":
    {\n\t\t\t\"Type\": \"AWS::EC2::RouteTable\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\":
    {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"9e8c941e-b4aa-4474-b2a4-7951635e0175\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"asgkubernetesminiongroup\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"Cooldown\": \"600\",\n\t\t\t\t\"DesiredCapacity\": {\n\t\t\t\t\t\"Ref\":
    \"MinionsCount\"\n\t\t\t\t},\n\t\t\t\t\"HealthCheckGracePeriod\": \"0\",\n\t\t\t\t\"HealthCheckType\":
    \"EC2\",\n\t\t\t\t\"MaxSize\": \"5\",\n\t\t\t\t\"MinSize\": {\n\t\t\t\t\t\"Ref\":
    \"MinionsCount\"\n\t\t\t\t},\n\t\t\t\t\"VPCZoneIdentifier\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\":
    \"subnet1c9c0378\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"LaunchConfigurationName\":
    {\n\t\t\t\t\t\"Ref\": \"lckubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"Tags\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes\",\n\t\t\t\t\t\t\"PropagateAtLaunch\": true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": {\n\t\t\t\t\t\t\t\"Ref\": \"KubernetesMinionsName\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"PropagateAtLaunch\":
    true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"Role\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes-minion\",\n\t\t\t\t\t\t\"PropagateAtLaunch\": true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"TerminationPolicies\":
    [\n\t\t\t\t\t\"NewestInstance\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"scaleUpMemUtili\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AdjustmentType\":
    \"ChangeInCapacity\",\n\t\t\t\t\"AutoScalingGroupName\": {\n\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t},\n\t\t\t\t\"ScalingAdjustment\":
    \"1\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"lckubernetesminiongroup\":
    {\n\t\t\t\"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"IamInstanceProfile\": {\n\t\t\t\t\t\"Ref\": \"MinionsInstanceProfile\"\n\t\t\t\t},\n\t\t\t\t\"AssociatePublicIpAddress\":
    true,\n\t\t\t\t\"ImageId\": {\n\t\t\t\t\t\"Fn::FindInMap\": [\n\t\t\t\t\t\t\"RegionMap\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"nodeImage\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"InstanceType\":
    {\n\t\t\t\t\t\"Ref\": \"MinionsInstanceType\"\n\t\t\t\t},\n\t\t\t\t\"KeyName\":
    {\n\t\t\t\t\t\"Ref\": \"KeyPair\"\n\t\t\t\t},\n\t\t\t\t\"InstanceMonitoring\": \"true\",\n\t\t\t\t\"SecurityGroups\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"BlockDeviceMappings\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sda1\",\n\t\t\t\t\t\t\"Ebs\":
    {\n\t\t\t\t\t\t\t\"VolumeSize\": 50\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral3\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdf\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral2\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sde\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral0\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdc\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"VirtualName\":
    \"ephemeral1\",\n\t\t\t\t\t\t\"DeviceName\": \"/dev/sdd\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"UserData\":
    {\n\t\t\t\t\t\"Fn::Base64\": {\n\t\t\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\"#!/bin/bash
    -x \\n\",\n\t\t\t\t\t\t\t\t\"apt-get update\\n\",\n\t\t\t\t\t\t\t\t\"# Kubeadm -
    Joining your nodes with master \\n\",\n\t\t\t\t\t\t\t\t\"kubeadm join --token=REPLACE_TOKEN
    --node-name=$(hostname -f) 172.20.0.9:6443 \\n\",\n\t\t\t\t\t\t\t\t\"bash -x /opt/gp/setPassword.sh
    \\n\",\n\t\t\t\t\t\t\t\t\"sed -i 's/MASTER_PASSWORD/REPLACE_MASTER_PASSWORD/g' /opt/gp/scaleDown.sh\"\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"instancei5efd3af1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Instance\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"IamInstanceProfile\":
    {\n\t\t\t\t\t\"Ref\": \"MasterInstanceProfile\"\n\t\t\t\t},\n\t\t\t\t\"DisableApiTermination\":
    \"true\",\n\t\t\t\t\"InstanceInitiatedShutdownBehavior\": \"stop\",\n\t\t\t\t\"ImageId\":
    {\n\t\t\t\t\t\"Fn::FindInMap\": [\n\t\t\t\t\t\t\"RegionMap\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"masterImage\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"InstanceType\":
    {\n\t\t\t\t\t\"Ref\": \"MasterInstanceType\"\n\t\t\t\t},\n\t\t\t\t\"KeyName\": {\n\t\t\t\t\t\"Ref\":
    \"KeyPair\"\n\t\t\t\t},\n\t\t\t\t\"Monitoring\": \"false\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Name\",\n\t\t\t\t\t\t\"Value\": {\n\t\t\t\t\t\t\t\"Ref\": \"KubernetesMasterName\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"Role\",\n\t\t\t\t\t\t\"Value\": \"kubernetes-master\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Volumes\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Device\": \"/dev/xvdb\",\n\t\t\t\t\t\t\"VolumeId\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"volumevol05ecfdb3\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"NetworkInterfaces\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"DeleteOnTermination\": \"true\",\n\t\t\t\t\t\t\"DeviceIndex\":
    0,\n\t\t\t\t\t\t\"SubnetId\": {\n\t\t\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"PrivateIpAddresses\":
    [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"PrivateIpAddress\": \"172.20.0.9\",\n\t\t\t\t\t\t\t\t\"Primary\":
    \"true\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"GroupSet\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Ref\":
    \"sgkubernetesmasterkubernetes\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"AssociatePublicIpAddress\":
    \"true\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"UserData\": {\n\t\t\t\t\t\"Fn::Base64\":
    {\n\t\t\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\"#!/bin/bash
    -x \\n\",\n\t\t\t\t\t\t\t\t\"apt-get update\\n\",\n\t\t\t\t\t\t\t\t\"apt-get install
    awscli -y\\n\",\n\t\t\t\t\t\t\t\t\"#Initializing your master \\n\",\n\t\t\t\t\t\t\t\t\"touch
    /etc/kubernetes/pki/pass.csv \\n\",\n\t\t\t\t\t\t\t\t\"chmod 600 /etc/kubernetes/pki/pass.csv
    \\n\",\n\t\t\t\t\t\t\t\t\"sed -i 's/TOKEN/REPLACE_TOKEN/g' /opt/gp/masterConfiguration.sh
    \\n\",\n\t\t\t\t\t\t\t\t\"sed -i 's/pass/pki\\\\/pass/g' /opt/gp/masterConfiguration.sh
    \\n\",\n\t\t\t\t\t\t\t\t\"bash /opt/gp/masterConfiguration.sh \\n\",\n\t\t\t\t\t\t\t\t\"echo
    \\\"REPLACE_MASTER_PASSWORD,gopaddle-monitor,gopaddle-monitor\\\" >> /etc/kubernetes/pki/pass.csv
    \\n\",\n\t\t\t\t\t\t\t\t\"kubeadm init  --config=/opt/gp/kubeadm.yml \\n\",\n\t\t\t\t\t\t\t\t\"#Creating
    kube dir and copying config file \\n\",\n\t\t\t\t\t\t\t\t\"cp -i /etc/kubernetes/admin.conf
    /root/.kube/config \\n\",\n\t\t\t\t\t\t\t\t\"chown $(id -u):$(id -g) /root/.kube/config
    \\n\",\n\t\t\t\t\t\t\t\t\"aws s3 mb s3://kubernetes-ORGID-ACCID-KUBENAME --region=BUCKETREG
    \\n\",\n\t\t\t\t\t\t\t\t\"aws s3 cp /etc/kubernetes/admin.conf s3://kubernetes-ORGID-ACCID-KUBENAME
    --region=BUCKETREG \\n\",\n\t\t\t\t\t\t\t\t\"autoScalingGroupName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"autoScalingPolicyName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"scaleUpMemUtili\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"regionName=\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"Ref\":
    \"AWS::Region\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\t\"echo
    autoScalingGroupName: $autoScalingGroupName \\n\",\n\t\t\t\t\t\t\t\t\"#asg_policy=(${autoScalingPolicyName//policyName\\\\//
    })\\n\",\n\t\t\t\t\t\t\t\t\"#echo asg_policy: $asg_policy \\n\",\n\t\t\t\t\t\t\t\t\"sed
    -i \\\"s/AUTOSCALING-GROUP-NAME/$autoScalingGroupName/g\\\" /opt/gp/autoscaler.yml\\n\",\n\t\t\t\t\t\t\t\t\"#sed
    -i \\\"s/AUTOSCALING_GROUP/$autoScalingGroupName/g\\\" /opt/gp/nodeDelete.sh\\n\",\n\t\t\t\t\t\t\t\t\"#sed
    -i \\\"s|POLICY_NAME|${asg_policy[1]}|g\\\" /opt/gp/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"#sed
    -i \\\"s/REGION_ID/$regionName/g\\\" /opt/gp/scaleUp.sh\\n\",\n\t\t\t\t\t\t\t\t\"sed
    -i \\\"s/AWS-REGION/$regionName/g\\\" /opt/gp/autoscaler.yml\\n\",\n\t\t\t\t\t\t\t\t\"#Creating
    Read only Role for gopaddle-monitor\\n\",\n\t\t\t\t\t\t\t\t\"bash /opt/gp/gopaddleAddons.sh
    \\n\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"volumevol05ecfdb3\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Volume\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"AvailabilityZone\":
    {\n\t\t\t\t\t\"Fn::Select\": [\n\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAZs\":
    \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Size\": \"20\",\n\t\t\t\t\"VolumeType\":
    \"gp2\",\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"Name\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes-master-pd\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\": \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\":
    \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"d75a7952-3adb-42bc-9364-b41cbd62f694\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sgkubernetesmasterkubernetes\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroup\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupDescription\":
    \"Kubernetes security group applied to master nodes\",\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sgkubernetesminionkubernetes\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroup\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupDescription\":
    \"Kubernetes security group applied to minion nodes\",\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"Tags\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Key\":
    \"KubernetesCluster\",\n\t\t\t\t\t\t\"Value\": \"kubernetes\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"memoryScaleUp90\":
    {\n\t\t\t\"Type\": \"AWS::CloudWatch::Alarm\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"ActionsEnabled\":
    \"true\",\n\t\t\t\t\"ComparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n\t\t\t\t\"EvaluationPeriods\":
    \"1\",\n\t\t\t\t\"MetricName\": \"MemoryUtilization\",\n\t\t\t\t\"Namespace\": \"System/Linux\",\n\t\t\t\t\"Period\":
    \"300\",\n\t\t\t\t\"Statistic\": \"Average\",\n\t\t\t\t\"Threshold\": \"90.0\",\n\t\t\t\t\"AlarmActions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Ref\": \"scaleUpMemUtili\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Dimensions\":
    [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"AutoScalingGroupName\",\n\t\t\t\t\t\t\"Value\":
    {\n\t\t\t\t\t\t\t\"Ref\": \"asgkubernetesminiongroup\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"5e4d5136-5e00-43f2-88ca-21e30deece4e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"acl1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAclEntry\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"Egress\": \"true\",\n\t\t\t\t\"Protocol\": \"-1\",\n\t\t\t\t\"RuleAction\":
    \"allow\",\n\t\t\t\t\"RuleNumber\": \"100\",\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\":
    \"aclc90371ad\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"acl2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::NetworkAclEntry\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"CidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"Protocol\": \"-1\",\n\t\t\t\t\"RuleAction\": \"allow\",\n\t\t\t\t\"RuleNumber\":
    \"100\",\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\": \"aclc90371ad\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"a78ed404-1093-4861-b6f4-69aa2239c66e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnetacl1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"NetworkAclId\": {\n\t\t\t\t\t\"Ref\": \"aclc90371ad\"\n\t\t\t\t},\n\t\t\t\t\"SubnetId\":
    {\n\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"4f4dff08-c6e1-4a40-a9b6-9f4cc01aeb1e\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"gw1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPCGatewayAttachment\",\n\t\t\t\"DeletionPolicy\":
    \"Delete\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"InternetGatewayId\":
    {\n\t\t\t\t\t\"Ref\": \"igw20b4ac45\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"ca7bd359-c1e1-4bb5-9072-72863dda115f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"subnetroute2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"SubnetId\":
    {\n\t\t\t\t\t\"Ref\": \"subnet1c9c0378\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"21432f55-5655-4510-9808-5f41c2038c45\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"route2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Route\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DestinationCidrBlock\":
    \"10.246.0.0/24\",\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"InstanceId\":
    {\n\t\t\t\t\t\"Ref\": \"instancei5efd3af1\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"8116d1ab-9a68-4e1b-9285-760066ae1093\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"route4\":
    {\n\t\t\t\"Type\": \"AWS::EC2::Route\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"DestinationCidrBlock\":
    \"0.0.0.0/0\",\n\t\t\t\t\"RouteTableId\": {\n\t\t\t\t\t\"Ref\": \"rtb349ed450\"\n\t\t\t\t},\n\t\t\t\t\"GatewayId\":
    {\n\t\t\t\t\t\"Ref\": \"igw20b4ac45\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"DependsOn\":
    \"gw1\",\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\":
    \"8da01726-6a8e-4e82-a06b-70625b5c229f\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"dchpassoc1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"VpcId\": {\n\t\t\t\t\t\"Ref\": \"vpcc54420a1\"\n\t\t\t\t},\n\t\t\t\t\"DhcpOptionsId\":
    {\n\t\t\t\t\t\"Ref\": \"doptbe33a7db\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Metadata\":
    {\n\t\t\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\t\t\"id\": \"498bfac2-d655-40b5-a7b5-0aa042a544ce\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress1\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"7daf34f8-5dbd-4881-b65a-dfc596013f26\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress2\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t}\n\t\t},\n\t\t\"ingress3\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"22\",\n\t\t\t\t\"ToPort\": \"22\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress4\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"443\",\n\t\t\t\t\"ToPort\": \"443\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress5\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t}\n\t\t},\n\t\t\"ingress6\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"SourceSecurityGroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"SourceSecurityGroupOwnerId\":
    \"473641303166\"\n\t\t\t},\n\t\t\t\"Metadata\": {\n\t\t\t\t\"AWS::CloudFormation::Designer\":
    {\n\t\t\t\t\t\"id\": \"ba908a72-6c66-47f3-8cf0-f545febc44be\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ingress7\":
    {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"22\",\n\t\t\t\t\"ToPort\": \"22\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress8\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"8080\",\n\t\t\t\t\"ToPort\": \"8080\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress9\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"6443\",\n\t\t\t\t\"ToPort\": \"6443\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"ingress10\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupIngress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"tcp\",\n\t\t\t\t\"FromPort\": \"4200\",\n\t\t\t\t\"ToPort\": \"4200\",\n\t\t\t\t\"CidrIp\":
    \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"egress1\": {\n\t\t\t\"Type\": \"AWS::EC2::SecurityGroupEgress\",\n\t\t\t\"Properties\":
    {\n\t\t\t\t\"GroupId\": {\n\t\t\t\t\t\"Ref\": \"sgkubernetesmasterkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"CidrIp\": \"0.0.0.0/0\"\n\t\t\t}\n\t\t},\n\t\t\"egress2\": {\n\t\t\t\"Type\":
    \"AWS::EC2::SecurityGroupEgress\",\n\t\t\t\"Properties\": {\n\t\t\t\t\"GroupId\":
    {\n\t\t\t\t\t\"Ref\": \"sgkubernetesminionkubernetes\"\n\t\t\t\t},\n\t\t\t\t\"IpProtocol\":
    \"-1\",\n\t\t\t\t\"CidrIp\": \"0.0.0.0/0\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Description\":
    \"Kubernetes Cluster Creation Template using AWS CloudFormation\",\n\t\"Outputs\":
    {\n\t\t\"K8sURL\": {\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"https://\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAtt\":
    [\n\t\t\t\t\t\t\t\t\"instancei5efd3af1\",\n\t\t\t\t\t\t\t\t\"PublicIp\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\":6443/ui\"\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Description\":
    \"Kubernetes Cluster Master IP Address\"\n\t\t},\n\t\t\"MasterIP\": {\n\t\t\t\"Description\":
    \"Master IP Address\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\": [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAtt\":
    [\n\t\t\t\t\t\t\t\t\"instancei5efd3af1\",\n\t\t\t\t\t\t\t\t\"PublicIp\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"MinionsRoleName\":
    {\n\t\t\t\"Description\": \"Name of MinionsRole\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\":
    [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Fn::GetAtt\":
    [\n\t\t\t\t\t\t\t\t\"MinionsRole\",\n\t\t\t\t\t\t\t\t\"Arn\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"VpcID\":
    {\n\t\t\t\"Description\": \"ID of VPC\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Fn::Join\":
    [\n\t\t\t\t\t\"\",\n\t\t\t\t\t[\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Ref\":
    \"vpcc54420a1\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"Metadata\":
    {\n\t\t\"AWS::CloudFormation::Designer\": {\n\t\t\t\"5e4d5136-5e00-43f2-88ca-21e30deece4e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isrelatedto\": [\n\t\t\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"9306acfd-ce94-4e5b-9a0b-abdf6978be27\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isrelatedto\": [\n\t\t\t\t\t\"a190ec41-22f1-4585-bf34-2b1fe903485f\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"d75a7952-3adb-42bc-9364-b41cbd62f694\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 330\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"acf8dcff-cfab-4941-a7de-9b8e445ae526\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 450\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 570\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"8dba90ed-bf34-433f-a7d9-ab8517543adb\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 780,\n\t\t\t\t\t\"height\": 780\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 60,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [\n\t\t\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\",\n\t\t\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\",\n\t\t\t\t\t\"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\t\"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"498bfac2-d655-40b5-a7b5-0aa042a544ce\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"acf8dcff-cfab-4941-a7de-9b8e445ae526\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    1\n\t\t\t},\n\t\t\t\"ca7bd359-c1e1-4bb5-9072-72863dda115f\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"8dba90ed-bf34-433f-a7d9-ab8517543adb\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    1\n\t\t\t},\n\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 690,\n\t\t\t\t\t\"y\": 450\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 690\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"ismemberof\": [\n\t\t\t\t\t\"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t],\n\t\t\t\t\"isrelatedto\":
    [\n\t\t\t\t\t\"34090e53-04bc-4369-b851-83b599731685\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 690,\n\t\t\t\t\t\"y\": 570\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"ba908a72-6c66-47f3-8cf0-f545febc44be\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"7daf34f8-5dbd-4881-b65a-dfc596013f26\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"fed17564-3011-40cc-9f3d-81672947e416\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"f4e18814-35bc-494a-91e6-fafb0ec705ff\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"9e8c941e-b4aa-4474-b2a4-7951635e0175\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 330,\n\t\t\t\t\t\"height\": 330\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 90,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"8da01726-6a8e-4e82-a06b-70625b5c229f\",\n\t\t\t\t\t\"8116d1ab-9a68-4e1b-9285-760066ae1093\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"8da01726-6a8e-4e82-a06b-70625b5c229f\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t],\n\t\t\t\t\"dependson\":
    [\n\t\t\t\t\t\"ca7bd359-c1e1-4bb5-9072-72863dda115f\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"6778df45-dbc1-460f-afef-073126f855c3\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 240,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"e91552bd-fc54-4bf7-b77a-70ba6e0a4ad1\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"f713e70c-1a4d-4680-b4a2-f7b85e7458cc\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"6959c47d-40ad-410b-941f-8b5a5ef18e28\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 330,\n\t\t\t\t\t\"height\": 180\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 90,\n\t\t\t\t\t\"y\": 540\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"a78ed404-1093-4861-b6f4-69aa2239c66e\",\n\t\t\t\t\t\"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"a78ed404-1093-4861-b6f4-69aa2239c66e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 600\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"706f95a5-fb5e-428c-aa73-f9d3c56d4e50\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 600\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"6959c47d-40ad-410b-941f-8b5a5ef18e28\",\n\t\t\t\t\"embeds\": []\n\t\t\t},\n\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 240,\n\t\t\t\t\t\"height\": 240\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 480,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 2,\n\t\t\t\t\"parent\":
    \"8dba90ed-bf34-433f-a7d9-ab8517543adb\",\n\t\t\t\t\"embeds\": [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"21432f55-5655-4510-9808-5f41c2038c45\":
    {\n\t\t\t\t\"source\": {\n\t\t\t\t\t\"id\": \"9e8c941e-b4aa-4474-b2a4-7951635e0175\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"4f4dff08-c6e1-4a40-a9b6-9f4cc01aeb1e\": {\n\t\t\t\t\"source\":
    {\n\t\t\t\t\t\"id\": \"6959c47d-40ad-410b-941f-8b5a5ef18e28\"\n\t\t\t\t},\n\t\t\t\t\"target\":
    {\n\t\t\t\t\t\"id\": \"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t},\n\t\t\t\t\"z\":
    2\n\t\t\t},\n\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 510,\n\t\t\t\t\t\"y\": 210\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"b6097bd5-5202-44b7-bff0-21e6c17648f8\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"isconnectedto\":
    [\n\t\t\t\t\t\"d75a7952-3adb-42bc-9364-b41cbd62f694\"\n\t\t\t\t],\n\t\t\t\t\"isrelatedto\":
    [\n\t\t\t\t\t\"fed17564-3011-40cc-9f3d-81672947e416\",\n\t\t\t\t\t\"d9051f55-2638-4223-a528-f6bd637d69ce\",\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\",\n\t\t\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"8116d1ab-9a68-4e1b-9285-760066ae1093\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 120,\n\t\t\t\t\t\"y\": 150\n\t\t\t\t},\n\t\t\t\t\"z\": 3,\n\t\t\t\t\"parent\":
    \"9e8c941e-b4aa-4474-b2a4-7951635e0175\",\n\t\t\t\t\"embeds\": [],\n\t\t\t\t\"references\":
    [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 900,\n\t\t\t\t\t\"y\": 810\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isconnectedto\": [\n\t\t\t\t\t\"b6097bd5-5202-44b7-bff0-21e6c17648f8\"\n\t\t\t\t],\n\t\t\t\t\"isassociatedwith\":
    [\n\t\t\t\t\t\"01c4d03f-bbaf-4d9f-81c2-9cbe45c12a77\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"0295532e-d02f-457a-b66f-bf885a676894\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 990,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"references\": [\n\t\t\t\t\t\"a7b57808-5d45-43b0-bf47-aad86ca4c28e\"\n\t\t\t\t],\n\t\t\t\t\"dependson\":
    [\n\t\t\t\t\t\"e3ec9de7-4bb2-452d-a623-a6c94e9414ba\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"a7b57808-5d45-43b0-bf47-aad86ca4c28e\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1080,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"a190ec41-22f1-4585-bf34-2b1fe903485f\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 990,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"44a31cce-3c69-4cb3-bac2-2bf8fbf0604b\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1110,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"5df835e4-67ed-4967-8841-67a5de2b9cf4\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1200,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"34090e53-04bc-4369-b851-83b599731685\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1320,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"f8ac3cb8-a0c7-4c09-aa17-7cbc5b714b14\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 1440,\n\t\t\t\t\t\"y\": 90\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"34cc30af-a656-4bdf-985e-1cce4c861d0a\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 640,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    []\n\t\t\t},\n\t\t\t\"d9051f55-2638-4223-a528-f6bd637d69ce\": {\n\t\t\t\t\"size\":
    {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 510,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"1660e688-e775-4dcd-809f-ce55b2d8b03d\":
    {\n\t\t\t\t\"size\": {\n\t\t\t\t\t\"width\": 60,\n\t\t\t\t\t\"height\": 60\n\t\t\t\t},\n\t\t\t\t\"position\":
    {\n\t\t\t\t\t\"x\": 750,\n\t\t\t\t\t\"y\": -10\n\t\t\t\t},\n\t\t\t\t\"z\": 1,\n\t\t\t\t\"embeds\":
    [],\n\t\t\t\t\"isassociatedwith\": [\n\t\t\t\t\t\"062b2a90-29bd-4e7f-8512-2b9d87cd50ac\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
  log_config.json: |
    {
      "formatters": {
        "server": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        "application": {
          "format": "%(asctime)s %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "server": {
          "class": "RotatingFileHandler",
          "filepath": "./core.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "server"
        },
        "application": {
          "class": "RotatingFileHandler",
          "filepath": "./test.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "application"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "server"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "server"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "server"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "server"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "server"
          ]
        },
        "application": {
          "level": "INFO",
          "handlers": [
            "application"
          ]
        }
      }
    }
---
# Source: gopaddle/charts/gp-core/templates/influxdb-influxdb-configmap-ngvkq.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: influxdb-influxdb-configmap-ngvkq
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: influxdb-influxdb-configmap-ngvkq
    released-by: gopaddle
    servicegroup: influxdb-6hu2bvhe
  name: influxdb-influxdb-configmap-ngvkq
  namespace: default
data:
  influxdb.conf: "### Welcome to the InfluxDB configuration file.\n\n# The values in
    this file override the default values used by the system if\n# a config option is
    not specified. The commented out lines are the configuration\n# field and the default
    value used. Uncommenting a line and changing the value\n# will change the value
    used at runtime when the process is restarted.\n\n# Once every 24 hours InfluxDB
    will report usage data to usage.influxdata.com\n# The data includes a random ID,
    os, arch, version, the number of series and other\n# usage data. No data from user
    databases is ever transmitted.\n# Change this option to true to disable reporting.\n#
    reporting-disabled = false\n\n# Bind address to use for the RPC service for backup
    and restore.\n# bind-address = \"127.0.0.1:8088\"\n\n###\n### [meta]\n###\n### Controls
    the parameters for the Raft consensus group that stores metadata\n### about the
    InfluxDB cluster.\n###\n\n[meta]\n  # Where the metadata/raft database is stored\n
    \ dir = \"/var/lib/influxdb/meta\"\n\n  # Automatically create a default retention
    policy when creating a database.\n  retention-autocreate = false\n\n  # If log messages
    are printed for the meta service\n  # logging-enabled = true\n\n###\n### [data]\n###\n###
    Controls where the actual shard data for InfluxDB lives and how it is\n### flushed
    from the WAL. \"dir\" may need to be changed to a suitable place\n### for your system,
    but the WAL settings are an advanced configuration. The\n### defaults should work
    for most systems.\n###\n\n[data]\n  # The directory where the TSM storage engine
    stores TSM files.\n  dir = \"/var/lib/influxdb/data\"\n\n  # The directory where
    the TSM storage engine stores WAL files.\n  wal-dir = \"/var/lib/influxdb/wal\"\n\n
    \ # The amount of time that a write will wait before fsyncing.  A duration\n  #
    greater than 0 can be used to batch up multiple fsync calls.  This is useful for
    slower\n  # disks or when WAL write contention is seen.  A value of 0s fsyncs every
    write to the WAL.\n  # Values in the range of 0-100ms are recommended for non-SSD
    disks.\n  # wal-fsync-delay = \"0s\"\n\n\n  # The type of shard index to use for
    new shards.  The default is an in-memory index that is\n  # recreated at startup.
    \ A value of \"tsi1\" will use a disk based index that supports higher\n  # cardinality
    datasets.\n  # index-version = \"inmem\"\n\n  # Trace logging provides more verbose
    output around the tsm engine. Turning\n  # this on can provide more useful output
    for debugging tsm engine issues.\n  # trace-logging-enabled = false\n\n  # Whether
    queries should be logged before execution. Very useful for troubleshooting, but
    will\n  # log any sensitive data contained within a query.\n  # query-log-enabled
    = true\n\n  # Validates incoming writes to ensure keys only have valid unicode characters.\n
    \ # This setting will incur a small overhead because every key must be checked.\n
    \ # validate-keys = false\n\n  # Settings for the TSM engine\n\n  # CacheMaxMemorySize
    is the maximum size a shard's cache can\n  # reach before it starts rejecting writes.\n
    \ # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).\n  # Values
    without a size suffix are in bytes.\n  # cache-max-memory-size = \"1g\"\n\n  # CacheSnapshotMemorySize
    is the size at which the engine will\n  # snapshot the cache and write it to a TSM
    file, freeing up memory\n  # Valid size suffixes are k, m, or g (case insensitive,
    1024 = 1k).\n  # Values without a size suffix are in bytes.\n   cache-snapshot-memory-size
    = \"25m\"\n\n  # CacheSnapshotWriteColdDuration is the length of time at\n  # which
    the engine will snapshot the cache and write it to\n  # a new TSM file if the shard
    hasn't received writes or deletes\n  # cache-snapshot-write-cold-duration = \"10m\"\n\n
    \ # CompactFullWriteColdDuration is the duration at which the engine\n  # will compact
    all TSM files in a shard if it hasn't received a\n  # write or delete\n  # compact-full-write-cold-duration
    = \"4h\"\n\n  # The maximum number of concurrent full and level compactions that
    can run at one time.  A\n  # value of 0 results in 50% of runtime.GOMAXPROCS(0)
    used at runtime.  Any number greater\n  # than 0 limits compactions to that value.
    \ This setting does not apply\n  # to cache snapshotting.\n  # max-concurrent-compactions
    = 0\n\n  # CompactThroughput is the rate limit in bytes per second that we\n  #
    will allow TSM compactions to write to disk. Note that short bursts are allowed\n
    \ # to happen at a possibly larger value, set by CompactThroughputBurst\n  # compact-throughput
    = \"48m\"\n\n  # CompactThroughputBurst is the rate limit in bytes per second that
    we\n  # will allow TSM compactions to write to disk.\n  # compact-throughput-burst
    = \"48m\"\n\n  # If true, then the mmap advise value MADV_WILLNEED will be provided
    to the kernel with respect to\n  # TSM files. This setting has been found to be
    problematic on some kernels, and defaults to off.\n  # It might help users who have
    slow disks in some cases.\n  # tsm-use-madv-willneed = false\n\n  # Settings for
    the inmem index\n\n  # The maximum series allowed per database before writes are
    dropped.  This limit can prevent\n  # high cardinality issues at the database level.
    \ This limit can be disabled by setting it to\n  # 0.\n  # max-series-per-database
    = 1000000\n\n  # The maximum number of tag values per tag that are allowed before
    writes are dropped.  This limit\n  # can prevent high cardinality tag values from
    being written to a measurement.  This limit can be\n  # disabled by setting it to
    0.\n  # max-values-per-tag = 100000\n\n  # Settings for the tsi1 index\n\n  # The
    threshold, in bytes, when an index write-ahead log file will compact\n  # into an
    index file. Lower sizes will cause log files to be compacted more\n  # quickly and
    result in lower heap usage at the expense of write throughput.\n  # Higher sizes
    will be compacted less frequently, store more series in-memory,\n  # and provide
    higher write throughput.\n  # Valid size suffixes are k, m, or g (case insensitive,
    1024 = 1k).\n  # Values without a size suffix are in bytes.\n  # max-index-log-file-size
    = \"1m\"\n\n  # The size of the internal cache used in the TSI index to store previously
    \n  # calculated series results. Cached results will be returned quickly from the
    cache rather\n  # than needing to be recalculated when a subsequent query with a
    matching tag key/value \n  # predicate is executed. Setting this value to 0 will
    disable the cache, which may\n  # lead to query performance issues.\n  # This value
    should only be increased if it is known that the set of regularly used \n  # tag
    key/value predicates across all measurements for a database is larger than 100.
    An\n  # increase in cache size may lead to an increase in heap usage.\n  series-id-set-cache-size
    = 100\n\n###\n### [coordinator]\n###\n### Controls the clustering service configuration.\n###\n\n[coordinator]\n
    \ # The default time a write request will wait until a \"timeout\" error is returned
    to the caller.\n  # write-timeout = \"10s\"\n\n  # The maximum number of concurrent
    queries allowed to be executing at one time.  If a query is\n  # executed and exceeds
    this limit, an error is returned to the caller.  This limit can be disabled\n  #
    by setting it to 0.\n  # max-concurrent-queries = 0\n\n  # The maximum time a query
    will is allowed to execute before being killed by the system.  This limit\n  # can
    help prevent run away queries.  Setting the value to 0 disables the limit.\n  #
    query-timeout = \"0s\"\n\n  # The time threshold when a query will be logged as
    a slow query.  This limit can be set to help\n  # discover slow or resource intensive
    queries.  Setting the value to 0 disables the slow query logging.\n  # log-queries-after
    = \"0s\"\n\n  # The maximum number of points a SELECT can process.  A value of 0
    will make\n  # the maximum point count unlimited.  This will only be checked every
    second so queries will not\n  # be aborted immediately when hitting the limit.\n
    \ # max-select-point = 0\n\n  # The maximum number of series a SELECT can run.  A
    value of 0 will make the maximum series\n  # count unlimited.\n  # max-select-series
    = 0\n\n  # The maximum number of group by time bucket a SELECT can create.  A value
    of zero will max the maximum\n  # number of buckets unlimited.\n  # max-select-buckets
    = 0\n\n###\n### [retention]\n###\n### Controls the enforcement of retention policies
    for evicting old data.\n###\n\n[retention]\n  # Determines whether retention policy
    enforcement enabled.\n  # enabled = true\n\n  # The interval of time when retention
    policy enforcement checks run.\n  # check-interval = \"30m\"\n\n###\n### [shard-precreation]\n###\n###
    Controls the precreation of shards, so they are available before data arrives.\n###
    Only shards that, after creation, will have both a start- and end-time in the\n###
    future, will ever be created. Shards are never precreated that would be wholly\n###
    or partially in the past.\n\n[shard-precreation]\n  # Determines whether shard pre-creation
    service is enabled.\n  # enabled = true\n\n  # The interval of time when the check
    to pre-create new shards runs.\n  # check-interval = \"10m\"\n\n  # The default
    period ahead of the endtime of a shard group that its successor\n  # group is created.\n
    \ # advance-period = \"30m\"\n\n###\n### Controls the system self-monitoring, statistics
    and diagnostics.\n###\n### The internal database for monitoring data is created
    automatically if\n### if it does not already exist. The target retention within
    this database\n### is called 'monitor' and is also created with a retention period
    of 7 days\n### and a replication factor of 1, if it does not exist. In all cases
    the\n### this retention policy is configured as the default for the database.\n\n[monitor]\n
    \ # Whether to record statistics internally.\n  # store-enabled = true\n\n  # The
    destination database for recorded statistics\n  # store-database = \"_internal\"\n\n
    \ # The interval at which to record statistics\n  # store-interval = \"10s\"\n\n###\n###
    [http]\n###\n### Controls how the HTTP endpoints are configured. These are the primary\n###
    mechanism for getting data into and out of InfluxDB.\n###\n\n[http]\n  # Determines
    whether HTTP endpoint is enabled.\n  # enabled = true\n\n  # Determines whether
    the Flux query endpoint is enabled.\n  # flux-enabled = false\n\n  # Determines
    whether the Flux query logging is enabled.\n  # flux-log-enabled = false\n\n  #
    The bind address used by the HTTP service.\n  # bind-address = \":8086\"\n\n  #
    Determines whether user authentication is enabled over HTTP/HTTPS.\n  # auth-enabled
    = false\n\n  # The default realm sent back when issuing a basic auth challenge.\n
    \ # realm = \"InfluxDB\"\n\n  # Determines whether HTTP request logging is enabled.\n
    \ # log-enabled = true\n\n  # Determines whether the HTTP write request logs should
    be suppressed when the log is enabled.\n  # suppress-write-log = false\n\n  # When
    HTTP request logging is enabled, this option specifies the path where\n  # log entries
    should be written. If unspecified, the default is to write to stderr, which\n  #
    intermingles HTTP logs with internal InfluxDB logging.\n  #\n  # If influxd is unable
    to access the specified path, it will log an error and fall back to writing\n  #
    the request log to stderr.\n  # access-log-path = \"\"\n\n  # Filters which requests
    should be logged. Each filter is of the pattern NNN, NNX, or NXX where N is\n  #
    a number and X is a wildcard for any number. To filter all 5xx responses, use the
    string 5xx.\n  # If multiple filters are used, then only one has to match. The default
    is to have no filters which\n  # will cause every request to be printed.\n  # access-log-status-filters
    = []\n\n  # Determines whether detailed write logging is enabled.\n  # write-tracing
    = false\n\n  # Determines whether the pprof endpoint is enabled.  This endpoint
    is used for\n  # troubleshooting and monitoring.\n  # pprof-enabled = true\n\n  #
    Enables authentication on pprof endpoints. Users will need admin permissions\n  #
    to access the pprof endpoints when this setting is enabled. This setting has\n  #
    no effect if either auth-enabled or pprof-enabled are set to false.\n  # pprof-auth-enabled
    = false\n\n  # Enables a pprof endpoint that binds to localhost:6060 immediately
    on startup.\n  # This is only needed to debug startup issues.\n  # debug-pprof-enabled
    = false\n\n  # Enables authentication on the /ping, /metrics, and deprecated /status\n
    \ # endpoints. This setting has no effect if auth-enabled is set to false.\n  #
    ping-auth-enabled = false\n\n  # Determines whether HTTPS is enabled.\n  # https-enabled
    = false\n\n  # The SSL certificate to use when HTTPS is enabled.\n  # https-certificate
    = \"/etc/ssl/influxdb.pem\"\n\n  # Use a separate private key location.\n  # https-private-key
    = \"\"\n\n  # The JWT auth shared secret to validate requests using JSON web tokens.\n
    \ # shared-secret = \"\"\n\n  # The default chunk size for result sets that should
    be chunked.\n  # max-row-limit = 0\n\n  # The maximum number of HTTP connections
    that may be open at once.  New connections that\n  # would exceed this limit are
    dropped.  Setting this value to 0 disables the limit.\n  # max-connection-limit
    = 0\n\n  # Enable http service over unix domain socket\n  # unix-socket-enabled
    = false\n\n  # The path of the unix domain socket.\n  # bind-socket = \"/var/run/influxdb.sock\"\n\n
    \ # The maximum size of a client request body, in bytes. Setting this value to 0
    disables the limit.\n  # max-body-size = 25000000\n\n  # The maximum number of writes
    processed concurrently.\n  # Setting this to 0 disables the limit.\n  # max-concurrent-write-limit
    = 0\n\n  # The maximum number of writes queued for processing.\n  # Setting this
    to 0 disables the limit.\n  # max-enqueued-write-limit = 0\n\n  # The maximum duration
    for a write to wait in the queue to be processed.\n  # Setting this to 0 or setting
    max-concurrent-write-limit to 0 disables the limit.\n  # enqueued-write-timeout
    = 0\n\n\t# User supplied HTTP response headers\n\t#\n\t# [http.headers]\n\t#   X-Header-1
    = \"Header Value 1\"\n\t#   X-Header-2 = \"Header Value 2\"\n\n###\n### [logging]\n###\n###
    Controls how the logger emits logs to the output.\n###\n\n[logging]\n  # Determines
    which log encoder to use for logs. Available options\n  # are auto, logfmt, and
    json. auto will use a more a more user-friendly\n  # output format if the output
    terminal is a TTY, but the format is not as\n  # easily machine-readable. When the
    output is a non-TTY, auto will use\n  # logfmt.\n  # format = \"auto\"\n\n  # Determines
    which level of logs will be emitted. The available levels\n  # are error, warn,
    info, and debug. Logs that are equal to or above the\n  # specified level will be
    emitted.\n  # level = \"info\"\n\n  # Suppresses the logo output that is printed
    when the program is started.\n  # The logo is always suppressed if STDOUT is not
    a TTY.\n  # suppress-logo = false\n\n###\n### [subscriber]\n###\n### Controls the
    subscriptions, which can be used to fork a copy of all data\n### received by the
    InfluxDB host.\n###\n\n[subscriber]\n  # Determines whether the subscriber service
    is enabled.\n  # enabled = true\n\n  # The default timeout for HTTP writes to subscribers.\n
    \ # http-timeout = \"30s\"\n\n  # Allows insecure HTTPS connections to subscribers.
    \ This is useful when testing with self-\n  # signed certificates.\n  # insecure-skip-verify
    = false\n\n  # The path to the PEM encoded CA certs file. If the empty string, the
    default system certs will be used\n  # ca-certs = \"\"\n\n  # The number of writer
    goroutines processing the write channel.\n  # write-concurrency = 40\n\n  # The
    number of in-flight writes buffered in the write channel.\n  # write-buffer-size
    = 1000\n\n\n###\n### [[graphite]]\n###\n### Controls one or many listeners for Graphite
    data.\n###\n\n[[graphite]]\n  # Determines whether the graphite endpoint is enabled.\n
    \ # enabled = false\n  # database = \"graphite\"\n  # retention-policy = \"\"\n
    \ # bind-address = \":2003\"\n  # protocol = \"tcp\"\n  # consistency-level = \"one\"\n\n
    \ # These next lines control how batching works. You should have this enabled\n
    \ # otherwise you could get dropped metrics or poor performance. Batching\n  # will
    buffer points in memory if you have many coming in.\n\n  # Flush if this many points
    get buffered\n  # batch-size = 5000\n\n  # number of batches that may be pending
    in memory\n  # batch-pending = 10\n\n  # Flush at least this often even if we haven't
    hit buffer limit\n  # batch-timeout = \"1s\"\n\n  # UDP Read buffer size, 0 means
    OS default. UDP listener will fail if set above OS max.\n  # udp-read-buffer = 0\n\n
    \ ### This string joins multiple matching 'measurement' values providing more control
    over the final measurement name.\n  # separator = \".\"\n\n  ### Default tags that
    will be added to all metrics.  These can be overridden at the template level\n  ###
    or by tags extracted from metric\n  # tags = [\"region=us-east\", \"zone=1c\"]\n\n
    \ ### Each template line requires a template pattern.  It can have an optional\n
    \ ### filter before the template and separated by spaces.  It can also have optional
    extra\n  ### tags following the template.  Multiple tags should be separated by
    commas and no spaces\n  ### similar to the line protocol format.  There can be only
    one default template.\n  # templates = [\n  #   \"*.app env.service.resource.measurement\",\n
    \ #   # Default template\n  #   \"server.*\",\n  # ]\n\n###\n### [collectd]\n###\n###
    Controls one or many listeners for collectd data.\n###\n\n[[collectd]]\n  # enabled
    = false\n  # bind-address = \":25826\"\n  # database = \"collectd\"\n  # retention-policy
    = \"\"\n  #\n  # The collectd service supports either scanning a directory for multiple
    types\n  # db files, or specifying a single db file.\n  # typesdb = \"/usr/local/share/collectd\"\n
    \ #\n  # security-level = \"none\"\n  # auth-file = \"/etc/collectd/auth_file\"\n\n
    \ # These next lines control how batching works. You should have this enabled\n
    \ # otherwise you could get dropped metrics or poor performance. Batching\n  # will
    buffer points in memory if you have many coming in.\n\n  # Flush if this many points
    get buffered\n  # batch-size = 5000\n\n  # Number of batches that may be pending
    in memory\n  # batch-pending = 10\n\n  # Flush at least this often even if we haven't
    hit buffer limit\n  # batch-timeout = \"10s\"\n\n  # UDP Read buffer size, 0 means
    OS default. UDP listener will fail if set above OS max.\n  # read-buffer = 0\n\n
    \ # Multi-value plugins can be handled two ways.\n  # \"split\" will parse and store
    the multi-value plugin data into separate measurements\n  # \"join\" will parse
    and store the multi-value plugin as a single multi-value measurement.\n  # \"split\"
    is the default behavior for backward compatibility with previous versions of influxdb.\n
    \ # parse-multivalue-plugin = \"split\"\n###\n### [opentsdb]\n###\n### Controls
    one or many listeners for OpenTSDB data.\n###\n\n[[opentsdb]]\n  # enabled = false\n
    \ # bind-address = \":4242\"\n  # database = \"opentsdb\"\n  # retention-policy
    = \"\"\n  # consistency-level = \"one\"\n  # tls-enabled = false\n  # certificate=
    \"/etc/ssl/influxdb.pem\"\n\n  # Log an error for every malformed point.\n  # log-point-errors
    = true\n\n  # These next lines control how batching works. You should have this
    enabled\n  # otherwise you could get dropped metrics or poor performance. Only points\n
    \ # metrics received over the telnet protocol undergo batching.\n\n  # Flush if
    this many points get buffered\n  # batch-size = 1000\n\n  # Number of batches that
    may be pending in memory\n  # batch-pending = 5\n\n  # Flush at least this often
    even if we haven't hit buffer limit\n  # batch-timeout = \"1s\"\n\n###\n### [[udp]]\n###\n###
    Controls the listeners for InfluxDB line protocol data via UDP.\n###\n\n[[udp]]\n
    \ # enabled = false\n  # bind-address = \":8089\"\n  # database = \"udp\"\n  # retention-policy
    = \"\"\n\n  # InfluxDB precision for timestamps on received points (\"\" or \"n\",
    \"u\", \"ms\", \"s\", \"m\", \"h\")\n  # precision = \"\"\n\n  # These next lines
    control how batching works. You should have this enabled\n  # otherwise you could
    get dropped metrics or poor performance. Batching\n  # will buffer points in memory
    if you have many coming in.\n\n  # Flush if this many points get buffered\n  # batch-size
    = 5000\n\n  # Number of batches that may be pending in memory\n  # batch-pending
    = 10\n\n  # Will flush at least this often even if we haven't hit buffer limit\n
    \ # batch-timeout = \"1s\"\n\n  # UDP Read buffer size, 0 means OS default. UDP
    listener will fail if set above OS max.\n  # read-buffer = 0\n\n###\n### [continuous_queries]\n###\n###
    Controls how continuous queries are run within InfluxDB.\n###\n\n[continuous_queries]\n
    \ # Determines whether the continuous query service is enabled.\n  # enabled = true\n\n
    \ # Controls whether queries are logged when executed by the CQ service.\n  # log-enabled
    = true\n\n  # Controls whether queries are logged to the self-monitoring data store.\n
    \ # query-stats-enabled = false\n\n  # interval for how often continuous queries
    will be checked if they need to run\n  # run-interval = \"1s\"\n\n###\n### [tls]\n###\n###
    Global configuration settings for TLS in InfluxDB.\n###\n\n[tls]\n  # Determines
    the available set of cipher suites. See https://golang.org/pkg/crypto/tls/#pkg-constants\n
    \ # for a list of available ciphers, which depends on the version of Go (use the
    query\n  # SHOW DIAGNOSTICS to see the version of Go used to build InfluxDB). If
    not specified, uses\n  # the default settings from Go's crypto/tls package.\n  #
    ciphers = [\n  #   \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\",\n  #   \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\",\n
    \ # ]\n\n  # Minimum version of the tls protocol that will be negotiated. If not
    specified, uses the\n  # default settings from Go's crypto/tls package.\n  # min-version
    = \"tls1.2\"\n\n  # Maximum version of the tls protocol that will be negotiated.
    If not specified, uses the\n  # default settings from Go's crypto/tls package.\n
    \ # max-version = \"tls1.3\"\n\n"
---
# Source: gopaddle/charts/gp-core/templates/marketplace-marketplace-configmap-7dszg.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: marketplace-marketplace-configmap-7dszg
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    name: marketplace-marketplace-configmap-7dszg
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
  name: marketplace-marketplace-configmap-7dszg
  namespace: default
data:
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG":"Something went wrong",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type"
        },
        "notification":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "NFC_NOTFOUND":"Requested notificaiton channel '%s' is not found",
          "NFC_ALREADY_EXIST":"Requested notificaiton channel '%s' is already exist",
          "INVALID_NOTIFICATIONID_FMT":"Requested notification id '%s' is invalid formate"
        }
    }
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\"\n\t}\n}"
  profiles-kube.json: "{  \n   \"mongodb\":{  \n      \"db-name\":\"marketplace\",\n
    \     \"db-endpoint\":[  \n         \"mongodb:27017\"\n      ],\n      \"db-port\":\"27017\",\n
    \     \"user-db\":\"admin\",\n      \"db-user\":\"admin\",\n      \"db-password\":\"cGFzc3dvcmQ\"\n
    \  },\n   \"marketplace\":\"https://devmarketplace.gopaddle.io/\"\n }"
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n    },\n    \"deploymentmanager.ep\": {\n\t\t\"host\": \"deploymentmanager\",\n\t\t\"port\":
    \"8003\"\n    },\n    \"gpcore.ep\": {\n\t\t\"host\": \"gpcore\",\n\t\t\"port\":
    \"8759\"\n\t},\n\t\"usermanager.ep\":{\n\t\t\"host\":\"usermanager\",\n\t\t\"port\":\"8005\"\n\t
    \ },\n\t\"notification.ep\":{\n\t\t\"host\":\"activitymanager\",\n\t\t\"port\":\"8009\"\n\t},\n\t\"appscanner.ep\":{\n\t\t\"host\":\"appscanner\",\n\t\t\"port\":\"8022\"\n\t},\n\t\"nodechecker.ep\":{\n\t\t\"host\":\"nodechecker\",\n\t\t\"port\":\"8020\"\n\t}\n}"
---
# Source: gopaddle/charts/gp-core/templates/mongodb-mongo-configmap-hp8xu.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-mongo-configmap-hp8xu
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-mongo-configmap-hp8xu
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-mongo-configmap-hp8xu
  namespace: default
data:
  db.js: "#!/usr/bin/mongo\nconn = new Mongo();\n// Authentication \nclient = conn.getDB(\"admin\")\nclient.auth(USERNAME,PASSWORD)\nmongodb
    = client.getMongo()\n\n//////////////////////////////////////////////////////////\n//
    Project\nusermanager_db = mongodb.getDB('userdb')\nusermanager_db.createCollection(\"project\")\nusermanager_db.project.createIndex(
    {\"id\":1}, { unique: true } )\nusermanager_db.project.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"prj9e510b72e6738e4635e8541e2681143a5de1\",\n   \"name\":\"default\",\n
    \  \"organization\":\"gopaddle\",\n   \"createdTime\":  new Date(),\n   \"updatedTime\":
    \ new Date(),\n   \"defaultProject\":true\n}\n)\n\n\n////////////////////////////////////////////////////////\n//
    Release\ngpcore_db = mongodb.getDB('gpcore')\ngpcore_db.createCollection(\"Release\")\ngpcore_db.Release.createIndex(
    {\"id\":1}, { unique: true } )\ngpcore_db.Release.insert({\n   \"accountID\":\"1\",\n
    \  \"id\" : \"rel42aa4e1de98ffe4325eb9e4e01fd7212e31\",\n   \"project\":[\n      \"prj9e510b72e6738e4635e8541e2681143a5de1\"\n
    \  ],\n   \"name\":\"default\",\n   \"releaseTag\":\"default\",\n   \"createdTime\":
    \ new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultRelease\":true\n}\n)\n\n/////////////////////////////////////////////////////////\n//
    Distribution\ngpcore_db = mongodb.getDB('gpcore')\ngpcore_db.createCollection(\"Distribution\")\ngpcore_db.Distribution.createIndex(
    {\"id\":1}, { unique: true } )\ngpcore_db.Distribution.insert({\n\n\t\"accountID\"
    : \"1\",\n\t\"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n\t\"releaseID\"
    : \"rel42aa4e1de98ffe4325eb9e4e01fd7212e31\",\n\t\"id\" : \"disf0ae2269e981ce4cd3e9693e488317487b3\",\n\t\"name\"
    : \"default\",\n\t\"distributionTag\" : \"default\",\n        \"createdtime\":  new
    Date(),\n        \"updatedtime\":  new Date(),\n\t\"isDefaultDistribution\" : true\n}\n)\n\n\n///////////////////////////////////////////////////////////\n//
    Profile\ngpcore_db = mongodb.getDB('gpcore')\ngpcore_db.createCollection(\"Profile\")\ngpcore_db.Profile.createIndex(
    {\"id\":1}, { unique: true } )\ngpcore_db.Profile.insert({\n\n\t\"accountID\" :
    \"1\",\n\t\"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n\t\"releaseID\"
    : \"rel42aa4e1de98ffe4325eb9e4e01fd7212e31\",\n\t\"distributionID\" : \"disf0ae2269e981ce4cd3e9693e488317487b3\",\n\t\"id\"
    : \"pro6fa8031feae5ee4577e804ae5b73cc46475\",\n        \"createdtime\":  new Date(),\n
    \       \"updatedtime\":  new Date(),\n\t\"name\" : \"default\",\n\t\"defaultProfile\"
    : true\n}\n)\n\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//
    Initialize deployment manager\ndeploymentmanager_db = mongodb.getDB('deploymentmanager')\nvar
    testCollection = deploymentmanager_db.getCollectionNames()\nif ( testCollection.length
    != 0 ) {\n    print(\"Database configuration has been done already\")\n    quit()\n}\n\n\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//
    Initialize configmanager\nconfigmanager_db = mongodb.getDB('configmanager')\n\n//
    Allocation policy\nconfigmanager_db.createCollection(\"allocationPolicy\")\nconfigmanager_db.allocationPolicy.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.allocationPolicy.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"apff99b7adapf6b3ap46c8ap8c66ap2820a10cd123\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"createdTime\":  new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default\",\n   \"displayName\":\"default\",\n   \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGFsbG9jYXRpb25Qb2xpY3k=\",\n
    \  \"resources\":{\n      \"limits\":{\n         \"memory\":\"500M\",\n         \"cpu\":\"500m\"\n
    \     },\n      \"requests\":{\n         \"memory\":\"200M\",\n         \"cpu\":\"200m\"\n
    \     }\n   },\n   \"tags\":[\n      {\n         \"key\":\"default\",\n         \"value\":\"default\"\n
    \     }\n   ]\n})\n\n// Deployment policy\nconfigmanager_db.createCollection(\"deploymentPolicy\")\nconfigmanager_db.deploymentPolicy.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.deploymentPolicy.insert({\n   \"accountID\"
    : \"1\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"id\":\"dp4bb676e9dp25eedp44d1dpa31cdp2fe8f9e39123\",\n   \"createdTime\":  new
    Date(),\n   \"updatedTime\":  new Date(),\n   \"name\":\"default-stateless\",\n
    \  \"displayName\":\"default-stateless\",\n   \"type\":\"deployment\",\n   \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHN0YXRlbGVzcyBkZXBsb3ltZW50UG9saWN5\",\n
    \  \"property\":{\n      \"revisionHistory\":10,\n      \"deployment\":{\n         \"updateMethod\":\"rollingUpdate\",\n
    \        \"replicas\":1,\n         \"rollingUpdate\":{\n            \"maxUnavailable\":{\n
    \              \"type\":0,\n               \"intVal\":0\n            },\n            \"maxSurge\":{\n
    \              \"type\":0,\n               \"intVal\":1\n            }\n         }\n
    \     }\n   },\n   \"tags\":[\n      {\n         \"key\":\"default\",\n         \"value\":\"default\"\n
    \     }\n   ]\n})\nconfigmanager_db.deploymentPolicy.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"dp4bb676e9dp25eedp44d1dpa31cdp2fe8f9e31234\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"createdTime\":  new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default-stateful\",\n   \"displayName\":\"default-stateful\",\n   \"type\":\"stateful-set\",\n
    \  \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHN0YXRlZnVsIGRlcGxveW1lbnRQb2xpY3k=\",\n
    \  \"property\":{\n      \"revisionHistory\":2,\n      \"statefulset\":{\n         \"replicas\":1,\n
    \        \"updateMethod\":\"rollingUpdate\",\n         \"rollingUpdate\":{\n            \"partition\":0\n
    \        }\n      }\n   },\n   \"tags\":[\n      {\n         \"key\":\"default-stateful\",\n
    \        \"value\":\"default-stateful\"\n      }\n   ]\n})\n\n\n\n// NW policy\nconfigmanager_db.createCollection(\"nwpolicy\")\nconfigmanager_db.nwpolicy.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.nwpolicy.insert({\n   \"accountID\":\"1\",\n
    \  \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n   \"id\":\"np_0a11f0ddpdd84p42d9p93a0p484ae72bc123\",\n
    \  \"createdtime\":  new Date(),\n   \"updatedtime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default\",\n   \"displayName\":\"default\",\n   \"ingress\":[\n      {\n
    \        \"ports\":[\n            {\n               \"protocol\":\"TCP\",\n               \"port\":22\n
    \           }\n         ],\n         \"networkPolicyPeer\":[\n            {\n               \"IPBlock\":{\n
    \                 \"CIDR\":\"0.0.0.0/0\"\n               }\n            }\n         ]\n
    \     }\n   ],\n   \"egress\":[\n      {\n         \"ports\":[\n            {\n
    \              \"protocol\":\"TCP\",\n               \"port\":22\n            }\n
    \        ],\n         \"networkPolicyPeer\":[\n            {\n               \"IPBlock\":{\n
    \                 \"CIDR\":\"0.0.0.0/0\"\n               }\n            }\n         ]\n
    \     }\n   ]\n})\n\n// scaling policy\nconfigmanager_db.createCollection(\"scalingPolicy\")\nconfigmanager_db.scalingPolicy.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.scalingPolicy.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"sp043128dcsp5e65sp433espaa57sp1b7dfb22b123\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"createdTime\":  new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default\",\n   \"displayName\":\"default\",\n   \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHNjYWxpbmdQb2xpY3k=\",\n
    \  \"minReplicas\":2,\n   \"maxReplicas\":4,\n   \"metric\":[\n      {\n         \"type\":\"resource\",\n
    \        \"resource\":{\n            \"name\":\"cpu\",\n            \"targetAverageUtilization\":70\n
    \        }\n      },\n      {\n         \"type\":\"resource\",\n         \"resource\":{\n
    \           \"name\":\"memory\",\n            \"targetAverageUtilization\":70\n
    \        }\n      }\n   ]\n})\n\n\n// NW policy\nconfigmanager_db.createCollection(\"storageClass\")\nconfigmanager_db.storageClass.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.storageClass.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"pvb8796e65pv3f62pv4a28pv9538pvc8d8e0397123\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"createdTime\":  new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default-aws\",\n   \"displayName\":\"default-aws\",\n   \"type\":\"aws\",\n
    \  \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGF3cyBwcm92aXNpb25Qb2xpY3k=\",\n   \"parameter\":{\n
    \     \"awsEBS\":{\n         \"type\":\"io1\",\n         \"zones\":[\n            \"ap-southeast-1a\"\n
    \        ],\n         \"fsType\":\"ext4\"\n      }\n   },\n   \"reclaimPolicy\":\"delete\",\n
    \  \"tags\":[\n      {\n         \"key\":\"default\",\n         \"value\":\"default\"\n
    \     }\n   ]\n})\nconfigmanager_db.storageClass.insert({\n   \"accountID\":\"1\",\n
    \  \"id\":\"pvb8796e65pv3f62pv4a28pv9538pvc8d8e0391234\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"createdTime\":  new Date(),\n   \"updatedTime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default-gce\",\n   \"displayName\":\"default-gce\",\n   \"type\":\"gce\",\n
    \  \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGdjZSBwcm92aXNpb25Qb2xpY3k=\",\n   \"parameter\":{\n
    \     \"gcePD\":{\n         \"type\":\"pd-standard\",\n         \"zones\":[\n            \"us-central1-a\"\n
    \        ],\n         \"replicationType\":\"none\",\n         \"fsType\":\"ext4\"\n
    \     }\n   },\n   \"reclaimPolicy\":\"delete\",\n   \"tags\":[\n      {\n         \"key\":\"default\",\n
    \        \"value\":\"default\"\n      }\n   ]\n})\nconfigmanager_db.storageClass.insert({\n
    \  \"accountID\":\"1\",\n   \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n
    \  \"id\":\"pvb8796e65pv3f62pv4a28pv9538pvc8d8e0312345\",\n   \"createdTime\":  new
    Date(),\n   \"updatedTime\":  new Date(),\n   \"internalTrigger\":true,\n   \"type\":\"azure\",\n
    \  \"name\":\"default-azure\",\n   \"displayName\":\"default-azure\",\n   \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGF6dXJlIHByb3Zpc2lvblBvbGljeQ==\",\n
    \  \"parameter\":{\n      \"azureDISK\":{\n         \"storageAccountType\":\"Standard_LRS\",\n
    \        \"kind\":\"Managed\"\n      }\n   },\n   \"reclaimPolicy\":\"delete\",\n
    \  \"defaultPolicy\":true,\n   \"tags\":[\n      {\n         \"key\":\"default\",\n
    \        \"value\":\"default\"\n      }\n   ]\n})\n\n// Volume claim policy\nconfigmanager_db.createCollection(\"volumeClaimPolicy\")\nconfigmanager_db.volumeClaimPolicy.createIndex(
    {\"id\":1}, { unique: true } )\nconfigmanager_db.volumeClaimPolicy.insert({\n   \"accountid\":\"1\",\n
    \  \"project\" : [\n\t\t\"prj9e510b72e6738e4635e8541e2681143a5de1\"\n\t],\n   \"id\":\"efcd9e6dgd545g4ae1gb432gb32340592123\",\n
    \  \"createdtime\":  new Date(),\n   \"updatedtime\":  new Date(),\n   \"defaultPolicy\":true,\n
    \  \"name\":\"default\",\n   \"displayName\":\"default\",\n   \"accessMode\":\"ReadWriteOnce\",\n
    \  \"volumeMode\":\"Filesystem\",\n   \"resources\":{\n      \"limits\":\"50Gi\",\n
    \     \"requests\":\"10Gi\"\n   }\n})\n\n\n// User manager\nuserdb_db = mongodb.getDB('userdb')\n//
    user table\nuserdb_db.createCollection(\"user\")\nuserdb_db.user.createIndex( {\"id\":1},
    { unique: true } )\nvar passwordexpirydate = new Date()\nuserdb_db.user.insert({\n
    \   \"accountid\": \"1\",\n    \"username\": \"admin\",\n    \"emailid\": \"admin@gopaddle.io\",\n
    \   \"phonenumber\": \"+91 9886024530\",\n    \"isactive\":true,\n    \"isverified\":true,\n
    \   \"createdtime\":  new Date(),\n    \"updatedtime\":  new Date(),\n    \"authprovider\":\"gopaddle\",\n
    \   \"subscription\" : {\n\t\"userdeploymentcount\" : \"15\",\n\t\"userbuildcount\"
    : \"1\"\n    },\n    \"authdata\":{  \n        \"password\":\"oxZn+bc7PUL/kdiBbPqD+yfyxKYOywQsPgIE7GonDpH+OG8rqD8HhyigiB9GHGk/G6c6BHHzUvvJ1IBWv30ziq93OPu6OpIPa4DDsoU+h/2Ct+F+AzHdEsXrkSR+pduSHUJd0DBo8z82s7tjzfdatpTYMWn6XdspwPMBGzzBSqk=\",\n
    \       \"lastlogin\":  new Date(),\n        \"passwordexpirydate\":   new Date(passwordexpirydate.getTime()
    + 1000 * 3600 * 24 * 30),\n        \"resetpasswordtoken\":\"\",\n    },\n})\n\n//creating
    index in deploymentmanager\ndeploy_db=mongodb.getDB('deploymentmanager')\n//SGResourceLock
    table\ndeploy_db.createCollection('SGResourceLock')\ndeploy_db.SGResourceLock.createIndex({\"appID\":1,\"deploymentID\":1,\"deploymentVersion\":1,\"serviceGroupID\":1,\"serviceGroupVersion\":1},{unique:true});\n"
  dblite.js: "#!/usr/bin/mongo\nconn = new Mongo();\n// Authentication \nclient = conn.getDB(\"admin\")\nclient.auth(USERNAME,PASSWORD)\nmongodb
    = client.getMongo()\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//
    Initialize deployment manager\ndeploymentmanager_db = mongodb.getDB('deploymentmanager')\nvar
    testCollection = deploymentmanager_db.getCollectionNames()\nif ( testCollection.length
    != 0 ) {\n    print(\"Database configuration has been done already\")\n    quit()\n}\n\n\n//creating
    index in deploymentmanager\ndeploy_db=mongodb.getDB('deploymentmanager')\n//SGResourceLock
    table\ndeploy_db.createCollection('SGResourceLock')\ndeploy_db.SGResourceLock.createIndex({\"appID\":1,\"deploymentID\":1,\"deploymentVersion\":1,\"serviceGroupID\":1,\"serviceGroupVersion\":1},{unique:true});"
  init.sh: |+
    #/bin/bash
    sh -x
    ls /initscript
        if [[ ! -f  "{{ .Values.dataDir }}/init-done" ]]; then
          nohup /usr/local/bin/docker-entrypoint.sh mongod > /var/log/mongodb/mongodb.log 2>&1 &
          sleep 30
          if [ "$GP_EDITION" = "Enterprise" ]; then
            mongo --eval "var USERNAME = '$MONGO_INITDB_ROOT_USERNAME'; var PASSWORD = '$MONGO_INITDB_ROOT_PASSWORD';" /initscript/db.js
          else
            mongo --eval "var USERNAME = '$MONGO_INITDB_ROOT_USERNAME'; var PASSWORD = '$MONGO_INITDB_ROOT_PASSWORD';" /initscript/dblite.js
          fi
          touch "/data/db/init-done"
          sleep 10
        fi
        echo "Mongodb has been initialized!"
        # sleep 300
  
  
    tail -f /var/log/mongodb/mongodb.log
---
# Source: gopaddle/charts/gp-core/templates/mongodb-mongo-configmap-s79ue.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-mongo-configmap-s79ue
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-mongo-configmap-s79ue
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-mongo-configmap-s79ue
  namespace: default
data:
  mongod.conf: |2+
        # mongod.conf
  
        # for documentation of all options, see:
        #   http://docs.mongodb.org/manual/reference/configuration-options/
  
        # Where and how to store data.
        storage:
          dbPath: /data/db
          journal:
            enabled: true
        #  engine:
        #  mmapv1:
        #  wiredTiger:
  
        # where to write logging data.
        systemLog:
          destination: file
          logAppend: true
          path: /var/log/mongodb/mongod.log
  
        # network interfaces
        net:
          port: 27017
          bindIp: 0.0.0.0
  
  
        # how the process runs
        processManagement:
          timeZoneInfo: /usr/share/zoneinfo
  
        security:
          authorization: "enabled"
  
        #operationProfiling:
  
        #replication:
  
        #sharding:
  
        ## Enterprise-Only Options:
  
        #auditLog:
  
        #snmp:
---
# Source: gopaddle/charts/gp-core/templates/mongodb-mongo-init-configmap-346jg.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-mongo-init-configmap-346jg
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb-mongo-init-configmap-346jg
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb-mongo-init-configmap-346jg
  namespace: default
data:
  onprem-mongobackup.sh: |+
    #/bin/bash
    sh -x
    echo "Creating Dump Script"
    export PATH=$PATH:./root/.local/bin/
    mongodump -u admin -p cGFzc3dvcmQ
    tar -cvzf onprem-mongo.tar.gz dump
    rm -rf dump
    export dateFormat=`date +%m-%d-%Y`
    export PATH=$PATH:/root/.local/bin/
    which aws
    aws s3 cp onprem-mongo.tar.gz s3://onprem-mongodb-dump/`date +%m-%d-%Y`/onprem-mongo.tar.gz --sse aws:kms
    rm onprem-mongo.tar.gz
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-nodechecker-configmap-uw45f.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nodechecker-nodechecker-configmap-uw45f
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: nodechecker-nodechecker-configmap-uw45f
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
  name: nodechecker-nodechecker-configmap-uw45f
  namespace: default
data:
  profiles-kube.json: "{  \n\"mongodb\":{  \n    \"db-name\":\"nodechecker\",\n    \"db-endpoint\":[
    \ \n      \"mongodb:27017\"\n    ],\n    \"db-port\":\"27017\",\n    \"user-db\":\"admin\",\n
    \   \"db-user\":\"admin\",\n    \"db-password\":\"cGFzc3dvcmQ\"\n  }\n}\n"
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG":"Something went wrong",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type"
        },
        "nodevalidator":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "NV_NOTFOUND":"Requested nodevalidator channel '%s' is not found",
          "NV_ALREADY_EXIST":"Requested nodevalidator channel '%s' is already exist",
          "INVALID_NODEVALIDATOR_FMT":"Requested nodevalidator id '%s' is invalid formate"
        }
    }
  service_directory-kube.json: |
    {
        "usermanager.ep":{
            "host":"usermanager",
            "port":"8005"
        },
        "nodechecker.ep":{
            "host":"nodechecker",
            "port":"8020"
        },
        "licensemanager.ep":{
            "host": "license.gopaddle.io",
            "port": "8010"
        }
    }
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-paymentmanager-configmap-f3pct.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: paymentmanager-paymentmanager-configmap-f3pct
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: paymentmanager-paymentmanager-configmap-f3pct
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
  name: paymentmanager-paymentmanager-configmap-f3pct
  namespace: default
data:
  error_config.json: |-
    {
        "all":{
          "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
          "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
          "SOMETHING_WRONG": "Internal Error",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "ALREADY_EXIST":"'%s' already exists",
          "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
          "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
          "INVALID_VALUE":"Invalid input for field '%s'",
          "INVALID_TYPE":"Invalid input type for '%s'",
          "INPUT_MISMATCH":"Given input JSON structure is mismatched",
          "KEY_NOT_FOUND":" '%s' Key not found in Json",
          "VALUE_NOT_FOUND":" '%s' Value not found in Json",
          "UNSUPPORTED": "Given %s is not supported",
          "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
          "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type"
        },
        "stripe":{
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'",
          "NFC_NOTFOUND":"Requested notificaiton channel '%s' is not found",
          "NFC_ALREADY_EXIST":"Requested notificaiton channel '%s' is already exist",
          "INVALID_NOTIFICATIONID_FMT":"Requested notification id '%s' is invalid formate"
        }
    }
  internal_api.json: "{\n\t\"allAPI\":{\n\t\t\"readUserByID\":\"api/%s/user?organizationID=%s\"\n\t},\n\t\"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t}\n}\n"
  profiles-kube.json: "{  \n    \"mongodb\":{  \n      \"db-name\":\"paymentmanager\",\n
    \     \"db-endpoint\":[  \n        \"mongodb:27017\"\n      ],\n      \"db-port\":\"27017\",\n
    \     \"user-db\":\"admin\",\n      \"db-user\":\"admin\",\n      \"db-password\":\"cGFzc3dvcmQ\"\n
    \   },\n    \"redis\":{\n        \"redis-endpoint\":\"redis\",\n        \"redis-port\":\"6379\",\n
    \       \"redis-password\":\"avraj\"\n    }\n}"
  service_directory-kube.json: "{\n\t\"configmanager.ep\": {\n\t\t\"host\": \"configmanager\",\n\t\t\"port\":
    \"8001\"\n\t},\n\n\t\"costmanager.ep\": {\n\t\t\"host\": \"costmanager\",\n\t\t\"port\":
    \"8011\"\n\t},\n    \t\"usermanager.ep\": {\n\t\t\"host\": \"usermanager\",\n\t\t\"port\":
    \"8005\"\n\t}\n}"
---
# Source: gopaddle/charts/gp-core/templates/rabbitmq-rabbitmq-configmap-lc0ok.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rabbitmq-rabbitmq-configmap-lc0ok
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: rabbitmq-rabbitmq-configmap-lc0ok
    released-by: gopaddle
    servicegroup: rabbitmq-ijdwt5eu
  name: rabbitmq-rabbitmq-configmap-lc0ok
  namespace: default
data:
  rabbitmq.sh: "#!/bin/bash\nset -x\napt-get update -y\napt-get install jq -y\nrabbitmq-server
    > /var/log/rabbitmq/rabbitmq.log &\nsleep 60  \nrabbitmqctl add_vhost /activity\nrabbitmqctl
    add_vhost /apps\nrabbitmqctl add_vhost /build\nrabbitmqctl add_vhost /billing\nrabbitmqctl
    list_users\npresent = `rabbitmqctl list_users --formatter json | jq '.[] .user'
    | grep \"admin\"`\nexport present\nif [ -z \"$present\" ]\nthen\necho \"admin user
    doesnt exist.\"\nelse\necho \"admin user already exists. deleting the user.\"\nrabbitmqctl
    delete_user admin\nfi\nrabbitmqctl add_user admin 'cGFzc3dvcmQ'\nrabbitmqctl set_user_tags
    admin none\nrabbitmqctl set_permissions -p /activity admin \".*\" \".*\" \".*\"\nrabbitmqctl
    set_permissions -p /apps admin \".*\" \".*\" \".*\"\nrabbitmqctl set_permissions
    -p /build admin \".*\" \".*\" \".*\"\nrabbitmqctl set_permissions -p /billing admin
    \".*\" \".*\" \".*\"\ntail -f /var/log/rabbitmq/rabbitmq.log\n\n"
---
# Source: gopaddle/charts/gp-core/templates/redis-redis-configmap-4b01n.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis-redis-configmap-4b01n
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis-redis-configmap-4b01n
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis-redis-configmap-4b01n
  namespace: default
data:
  redis.sh: |
    #!/bin/sh
    set -xe
    mkdir /var/log/redis/ -p
    mkdir mkdir /var/lib/redis -p
    redis-server /usr/local/etc/redis/redis.conf
---
# Source: gopaddle/charts/gp-core/templates/redis-redis-configmap-kw0jo.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis-redis-configmap-kw0jo
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis-redis-configmap-kw0jo
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis-redis-configmap-kw0jo
  namespace: default
data:
  redis.conf: |+
    # Redis configuration file example.
    #
    # Note that in order to read the configuration file, Redis must be
    # started with the file path as first argument:
    #
    # ./redis-server /path/to/redis.conf
  
    # Note on units: when memory size is needed, it is possible to specify
    # it in the usual form of 1k 5GB 4M and so forth:
    #
    # 1k => 1000 bytes
    # 1kb => 1024 bytes
    # 1m => 1000000 bytes
    # 1mb => 1024*1024 bytes
    # 1g => 1000000000 bytes
    # 1gb => 1024*1024*1024 bytes
    #
    # units are case insensitive so 1GB 1Gb 1gB are all the same.
  
    ################################## INCLUDES ###################################
  
    # Include one or more other config files here.  This is useful if you
    # have a standard template that goes to all Redis servers but also need
    # to customize a few per-server settings.  Include files can include
    # other files, so use this wisely.
    #
    # Notice option "include" won't be rewritten by command "CONFIG REWRITE"
    # from admin or Redis Sentinel. Since Redis always uses the last processed
    # line as value of a configuration directive, you'd better put includes
    # at the beginning of this file to avoid overwriting config change at runtime.
    #
    # If instead you are interested in using includes to override configuration
    # options, it is better to use include as the last line.
    #
    # include /path/to/local.conf
    # include /path/to/other.conf
  
    ################################## NETWORK #####################################
  
    # By default, if no "bind" configuration directive is specified, Redis listens
    # for connections from all the network interfaces available on the server.
    # It is possible to listen to just one or multiple selected interfaces using
    # the "bind" configuration directive, followed by one or more IP addresses.
    #
    # Examples:
    #
    # bind 192.168.1.100 10.0.0.1
    # bind 127.0.0.1 ::1
    #
    # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
    # internet, binding to all the interfaces is dangerous and will expose the
    # instance to everybody on the internet. So by default we uncomment the
    # following bind directive, that will force Redis to listen only into
    # the IPv4 lookback interface address (this means Redis will be able to
    # accept connections only from clients running into the same computer it
    # is running).
    #
    # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
    # JUST COMMENT THE FOLLOWING LINE.
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bind 0.0.0.0
  
    # Protected mode is a layer of security protection, in order to avoid that
    # Redis instances left open on the internet are accessed and exploited.
    #
    # When protected mode is on and if:
    #
    # 1) The server is not binding explicitly to a set of addresses using the
    #    "bind" directive.
    # 2) No password is configured.
    #
    # The server only accepts connections from clients connecting from the
    # IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain
    # sockets.
    #
    # By default protected mode is enabled. You should disable it only if
    # you are sure you want clients from other hosts to connect to Redis
    # even if no authentication is configured, nor a specific set of interfaces
    # are explicitly listed using the "bind" directive.
    protected-mode yes
  
    # Accept connections on the specified port, default is 6379 (IANA #815344).
    # If port 0 is specified Redis will not listen on a TCP socket.
    port 6379
  
    # TCP listen() backlog.
    #
    # In high requests-per-second environments you need an high backlog in order
    # to avoid slow clients connections issues. Note that the Linux kernel
    # will silently truncate it to the value of /proc/sys/net/core/somaxconn so
    # make sure to raise both the value of somaxconn and tcp_max_syn_backlog
    # in order to get the desired effect.
    tcp-backlog 511
  
    # Unix socket.
    #
    # Specify the path for the Unix socket that will be used to listen for
    # incoming connections. There is no default, so Redis will not listen
    # on a unix socket when not specified.
    #
    # unixsocket /tmp/redis.sock
    # unixsocketperm 700
  
    # Close the connection after a client is idle for N seconds (0 to disable)
    timeout 0
  
    # TCP keepalive.
    #
    # If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
    # of communication. This is useful for two reasons:
    #
    # 1) Detect dead peers.
    # 2) Take the connection alive from the point of view of network
    #    equipment in the middle.
    #
    # On Linux, the specified value (in seconds) is the period used to send ACKs.
    # Note that to close the connection the double of the time is needed.
    # On other kernels the period depends on the kernel configuration.
    #
    # A reasonable value for this option is 300 seconds, which is the new
    # Redis default starting with Redis 3.2.1.
    tcp-keepalive 300
  
    ################################# GENERAL #####################################
  
    # By default Redis does not run as a daemon. Use 'yes' if you need it.
    # Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
    daemonize no
  
    # If you run Redis from upstart or systemd, Redis can interact with your
    # supervision tree. Options:
    #   supervised no      - no supervision interaction
    #   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
    #   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
    #   supervised auto    - detect upstart or systemd method based on
    #                        UPSTART_JOB or NOTIFY_SOCKET environment variables
    # Note: these supervision methods only signal "process is ready."
    #       They do not enable continuous liveness pings back to your supervisor.
    supervised no
  
    # If a pid file is specified, Redis writes it where specified at startup
    # and removes it at exit.
    #
    # When the server runs non daemonized, no pid file is created if none is
    # specified in the configuration. When the server is daemonized, the pid file
    # is used even if not specified, defaulting to "/var/run/redis.pid".
    #
    # Creating a pid file is best effort: if Redis is not able to create it
    # nothing bad happens, the server will start and run normally.
    pidfile /var/run/redis_6379.pid
  
    # Specify the server verbosity level.
    # This can be one of:
    # debug (a lot of information, useful for development/testing)
    # verbose (many rarely useful info, but not a mess like the debug level)
    # notice (moderately verbose, what you want in production probably)
    # warning (only very important / critical messages are logged)
    loglevel notice
  
    # Specify the log file name. Also the empty string can be used to force
    # Redis to log on the standard output. Note that if you use standard
    # output for logging but daemonize, logs will be sent to /dev/null
    logfile /var/log/redis/redis.log
  
    # To enable logging to the system logger, just set 'syslog-enabled' to yes,
    # and optionally update the other syslog parameters to suit your needs.
    # syslog-enabled no
  
    # Specify the syslog identity.
    # syslog-ident redis
  
    # Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
    # syslog-facility local0
  
    # Set the number of databases. The default database is DB 0, you can select
    # a different one on a per-connection basis using SELECT <dbid> where
    # dbid is a number between 0 and 'databases'-1
    databases 16
  
    ################################ SNAPSHOTTING  ################################
    #
    # Save the DB on disk:
    #
    #   save <seconds> <changes>
    #
    #   Will save the DB if both the given number of seconds and the given
    #   number of write operations against the DB occurred.
    #
    #   In the example below the behaviour will be to save:
    #   after 900 sec (15 min) if at least 1 key changed
    #   after 300 sec (5 min) if at least 10 keys changed
    #   after 60 sec if at least 10000 keys changed
    #
    #   Note: you can disable saving completely by commenting out all "save" lines.
    #
    #   It is also possible to remove all the previously configured save
    #   points by adding a save directive with a single empty string argument
    #   like in the following example:
    #
    #   save ""
  
    save 900 1
    save 300 10
    save 60 10000
  
    # By default Redis will stop accepting writes if RDB snapshots are enabled
    # (at least one save point) and the latest background save failed.
    # This will make the user aware (in a hard way) that data is not persisting
    # on disk properly, otherwise chances are that no one will notice and some
    # disaster will happen.
    #
    # If the background saving process will start working again Redis will
    # automatically allow writes again.
    #
    # However if you have setup your proper monitoring of the Redis server
    # and persistence, you may want to disable this feature so that Redis will
    # continue to work as usual even if there are problems with disk,
    # permissions, and so forth.
    stop-writes-on-bgsave-error yes
  
    # Compress string objects using LZF when dump .rdb databases?
    # For default that's set to 'yes' as it's almost always a win.
    # If you want to save some CPU in the saving child set it to 'no' but
    # the dataset will likely be bigger if you have compressible values or keys.
    rdbcompression yes
  
    # Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
    # This makes the format more resistant to corruption but there is a performance
    # hit to pay (around 10%) when saving and loading RDB files, so you can disable it
    # for maximum performances.
    #
    # RDB files created with checksum disabled have a checksum of zero that will
    # tell the loading code to skip the check.
    rdbchecksum yes
  
    # The filename where to dump the DB
    dbfilename dump.rdb
  
    # The working directory.
    #
    # The DB will be written inside this directory, with the filename specified
    # above using the 'dbfilename' configuration directive.
    #
    # The Append Only File will also be created inside this directory.
    #
    # Note that you must specify a directory here, not a file name.
    dir /var/lib/redis
  
    ################################# REPLICATION #################################
  
    # Master-Slave replication. Use slaveof to make a Redis instance a copy of
    # another Redis server. A few things to understand ASAP about Redis replication.
    #
    # 1) Redis replication is asynchronous, but you can configure a master to
    #    stop accepting writes if it appears to be not connected with at least
    #    a given number of slaves.
    # 2) Redis slaves are able to perform a partial resynchronization with the
    #    master if the replication link is lost for a relatively small amount of
    #    time. You may want to configure the replication backlog size (see the next
    #    sections of this file) with a sensible value depending on your needs.
    # 3) Replication is automatic and does not need user intervention. After a
    #    network partition slaves automatically try to reconnect to masters
    #    and resynchronize with them.
    #
    # slaveof <masterip> <masterport>
  
    # If the master is password protected (using the "requirepass" configuration
    # directive below) it is possible to tell the slave to authenticate before
    # starting the replication synchronization process, otherwise the master will
    # refuse the slave request.
    #
    # masterauth <master-password>
  
    # When a slave loses its connection with the master, or when the replication
    # is still in progress, the slave can act in two different ways:
    #
    # 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
    #    still reply to client requests, possibly with out of date data, or the
    #    data set may just be empty if this is the first synchronization.
    #
    # 2) if slave-serve-stale-data is set to 'no' the slave will reply with
    #    an error "SYNC with master in progress" to all the kind of commands
    #    but to INFO and SLAVEOF.
    #
    slave-serve-stale-data yes
  
    # You can configure a slave instance to accept writes or not. Writing against
    # a slave instance may be useful to store some ephemeral data (because data
    # written on a slave will be easily deleted after resync with the master) but
    # may also cause problems if clients are writing to it because of a
    # misconfiguration.
    #
    # Since Redis 2.6 by default slaves are read-only.
    #
    # Note: read only slaves are not designed to be exposed to untrusted clients
    # on the internet. It's just a protection layer against misuse of the instance.
    # Still a read only slave exports by default all the administrative commands
    # such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
    # security of read only slaves using 'rename-command' to shadow all the
    # administrative / dangerous commands.
    slave-read-only yes
  
    # Replication SYNC strategy: disk or socket.
    #
    # -------------------------------------------------------
    # WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
    # -------------------------------------------------------
    #
    # New slaves and reconnecting slaves that are not able to continue the replication
    # process just receiving differences, need to do what is called a "full
    # synchronization". An RDB file is transmitted from the master to the slaves.
    # The transmission can happen in two different ways:
    #
    # 1) Disk-backed: The Redis master creates a new process that writes the RDB
    #                 file on disk. Later the file is transferred by the parent
    #                 process to the slaves incrementally.
    # 2) Diskless: The Redis master creates a new process that directly writes the
    #              RDB file to slave sockets, without touching the disk at all.
    #
    # With disk-backed replication, while the RDB file is generated, more slaves
    # can be queued and served with the RDB file as soon as the current child producing
    # the RDB file finishes its work. With diskless replication instead once
    # the transfer starts, new slaves arriving will be queued and a new transfer
    # will start when the current one terminates.
    #
    # When diskless replication is used, the master waits a configurable amount of
    # time (in seconds) before starting the transfer in the hope that multiple slaves
    # will arrive and the transfer can be parallelized.
    #
    # With slow disks and fast (large bandwidth) networks, diskless replication
    # works better.
    repl-diskless-sync no
  
    # When diskless replication is enabled, it is possible to configure the delay
    # the server waits in order to spawn the child that transfers the RDB via socket
    # to the slaves.
    #
    # This is important since once the transfer starts, it is not possible to serve
    # new slaves arriving, that will be queued for the next RDB transfer, so the server
    # waits a delay in order to let more slaves arrive.
    #
    # The delay is specified in seconds, and by default is 5 seconds. To disable
    # it entirely just set it to 0 seconds and the transfer will start ASAP.
    repl-diskless-sync-delay 5
  
    # Slaves send PINGs to server in a predefined interval. It's possible to change
    # this interval with the repl_ping_slave_period option. The default value is 10
    # seconds.
    #
    # repl-ping-slave-period 10
  
    # The following option sets the replication timeout for:
    #
    # 1) Bulk transfer I/O during SYNC, from the point of view of slave.
    # 2) Master timeout from the point of view of slaves (data, pings).
    # 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).
    #
    # It is important to make sure that this value is greater than the value
    # specified for repl-ping-slave-period otherwise a timeout will be detected
    # every time there is low traffic between the master and the slave.
    #
    # repl-timeout 60
  
    # Disable TCP_NODELAY on the slave socket after SYNC?
    #
    # If you select "yes" Redis will use a smaller number of TCP packets and
    # less bandwidth to send data to slaves. But this can add a delay for
    # the data to appear on the slave side, up to 40 milliseconds with
    # Linux kernels using a default configuration.
    #
    # If you select "no" the delay for data to appear on the slave side will
    # be reduced but more bandwidth will be used for replication.
    #
    # By default we optimize for low latency, but in very high traffic conditions
    # or when the master and slaves are many hops away, turning this to "yes" may
    # be a good idea.
    repl-disable-tcp-nodelay no
  
    # Set the replication backlog size. The backlog is a buffer that accumulates
    # slave data when slaves are disconnected for some time, so that when a slave
    # wants to reconnect again, often a full resync is not needed, but a partial
    # resync is enough, just passing the portion of data the slave missed while
    # disconnected.
    #
    # The bigger the replication backlog, the longer the time the slave can be
    # disconnected and later be able to perform a partial resynchronization.
    #
    # The backlog is only allocated once there is at least a slave connected.
    #
    # repl-backlog-size 1mb
  
    # After a master has no longer connected slaves for some time, the backlog
    # will be freed. The following option configures the amount of seconds that
    # need to elapse, starting from the time the last slave disconnected, for
    # the backlog buffer to be freed.
    #
    # A value of 0 means to never release the backlog.
    #
    # repl-backlog-ttl 3600
  
    # The slave priority is an integer number published by Redis in the INFO output.
    # It is used by Redis Sentinel in order to select a slave to promote into a
    # master if the master is no longer working correctly.
    #
    # A slave with a low priority number is considered better for promotion, so
    # for instance if there are three slaves with priority 10, 100, 25 Sentinel will
    # pick the one with priority 10, that is the lowest.
    #
    # However a special priority of 0 marks the slave as not able to perform the
    # role of master, so a slave with priority of 0 will never be selected by
    # Redis Sentinel for promotion.
    #
    # By default the priority is 100.
    slave-priority 100
  
    # It is possible for a master to stop accepting writes if there are less than
    # N slaves connected, having a lag less or equal than M seconds.
    #
    # The N slaves need to be in "online" state.
    #
    # The lag in seconds, that must be <= the specified value, is calculated from
    # the last ping received from the slave, that is usually sent every second.
    #
    # This option does not GUARANTEE that N replicas will accept the write, but
    # will limit the window of exposure for lost writes in case not enough slaves
    # are available, to the specified number of seconds.
    #
    # For example to require at least 3 slaves with a lag <= 10 seconds use:
    #
    # min-slaves-to-write 3
    # min-slaves-max-lag 10
    #
    # Setting one or the other to 0 disables the feature.
    #
    # By default min-slaves-to-write is set to 0 (feature disabled) and
    # min-slaves-max-lag is set to 10.
  
    # A Redis master is able to list the address and port of the attached
    # slaves in different ways. For example the "INFO replication" section
    # offers this information, which is used, among other tools, by
    # Redis Sentinel in order to discover slave instances.
    # Another place where this info is available is in the output of the
    # "ROLE" command of a masteer.
    #
    # The listed IP and address normally reported by a slave is obtained
    # in the following way:
    #
    #   IP: The address is auto detected by checking the peer address
    #   of the socket used by the slave to connect with the master.
    #
    #   Port: The port is communicated by the slave during the replication
    #   handshake, and is normally the port that the slave is using to
    #   list for connections.
    #
    # However when port forwarding or Network Address Translation (NAT) is
    # used, the slave may be actually reachable via different IP and port
    # pairs. The following two options can be used by a slave in order to
    # report to its master a specific set of IP and port, so that both INFO
    # and ROLE will report those values.
    #
    # There is no need to use both the options if you need to override just
    # the port or the IP address.
    #
    # slave-announce-ip 5.5.5.5
    # slave-announce-port 1234
  
    ################################## SECURITY ###################################
  
    # Require clients to issue AUTH <PASSWORD> before processing any other
    # commands.  This might be useful in environments in which you do not trust
    # others with access to the host running redis-server.
    #
    # This should stay commented out for backward compatibility and because most
    # people do not need auth (e.g. they run their own servers).
    #
    # Warning: since Redis is pretty fast an outside user can try up to
    # 150k passwords per second against a good box. This means that you should
    # use a very strong password otherwise it will be very easy to break.
    #
    # requirepass foobared
    requirepass avraj
  
    # Command renaming.
    #
    # It is possible to change the name of dangerous commands in a shared
    # environment. For instance the CONFIG command may be renamed into something
    # hard to guess so that it will still be available for internal-use tools
    # but not available for general clients.
    #
    # Example:
    #
    # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
    #
    # It is also possible to completely kill a command by renaming it into
    # an empty string:
    #
    # rename-command CONFIG ""
    #
    # Please note that changing the name of commands that are logged into the
    # AOF file or transmitted to slaves may cause problems.
  
    ################################### LIMITS ####################################
  
    # Set the max number of connected clients at the same time. By default
    # this limit is set to 10000 clients, however if the Redis server is not
    # able to configure the process file limit to allow for the specified limit
    # the max number of allowed clients is set to the current file limit
    # minus 32 (as Redis reserves a few file descriptors for internal uses).
    #
    # Once the limit is reached Redis will close all the new connections sending
    # an error 'max number of clients reached'.
    #
    # maxclients 10000
  
    # Don't use more memory than the specified amount of bytes.
    # When the memory limit is reached Redis will try to remove keys
    # according to the eviction policy selected (see maxmemory-policy).
    #
    # If Redis can't remove keys according to the policy, or if the policy is
    # set to 'noeviction', Redis will start to reply with errors to commands
    # that would use more memory, like SET, LPUSH, and so on, and will continue
    # to reply to read-only commands like GET.
    #
    # This option is usually useful when using Redis as an LRU cache, or to set
    # a hard memory limit for an instance (using the 'noeviction' policy).
    #
    # WARNING: If you have slaves attached to an instance with maxmemory on,
    # the size of the output buffers needed to feed the slaves are subtracted
    # from the used memory count, so that network problems / resyncs will
    # not trigger a loop where keys are evicted, and in turn the output
    # buffer of slaves is full with DELs of keys evicted triggering the deletion
    # of more keys, and so forth until the database is completely emptied.
    #
    # In short... if you have slaves attached it is suggested that you set a lower
    # limit for maxmemory so that there is some free RAM on the system for slave
    # output buffers (but this is not needed if the policy is 'noeviction').
    #
    # maxmemory <bytes>
  
    # MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
    # is reached. You can select among five behaviors:
    #
    # volatile-lru -> remove the key with an expire set using an LRU algorithm
    # allkeys-lru -> remove any key according to the LRU algorithm
    # volatile-random -> remove a random key with an expire set
    # allkeys-random -> remove a random key, any key
    # volatile-ttl -> remove the key with the nearest expire time (minor TTL)
    # noeviction -> don't expire at all, just return an error on write operations
    #
    # Note: with any of the above policies, Redis will return an error on write
    #       operations, when there are no suitable keys for eviction.
    #
    #       At the date of writing these commands are: set setnx setex append
    #       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
    #       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
    #       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
    #       getset mset msetnx exec sort
    #
    # The default is:
    #
    # maxmemory-policy noeviction
  
    # LRU and minimal TTL algorithms are not precise algorithms but approximated
    # algorithms (in order to save memory), so you can tune it for speed or
    # accuracy. For default Redis will check five keys and pick the one that was
    # used less recently, you can change the sample size using the following
    # configuration directive.
    #
    # The default of 5 produces good enough results. 10 Approximates very closely
    # true LRU but costs a bit more CPU. 3 is very fast but not very accurate.
    #
    # maxmemory-samples 5
  
    ############################## APPEND ONLY MODE ###############################
  
    # By default Redis asynchronously dumps the dataset on disk. This mode is
    # good enough in many applications, but an issue with the Redis process or
    # a power outage may result into a few minutes of writes lost (depending on
    # the configured save points).
    #
    # The Append Only File is an alternative persistence mode that provides
    # much better durability. For instance using the default data fsync policy
    # (see later in the config file) Redis can lose just one second of writes in a
    # dramatic event like a server power outage, or a single write if something
    # wrong with the Redis process itself happens, but the operating system is
    # still running correctly.
    #
    # AOF and RDB persistence can be enabled at the same time without problems.
    # If the AOF is enabled on startup Redis will load the AOF, that is the file
    # with the better durability guarantees.
    #
    # Please check http://redis.io/topics/persistence for more information.
  
    appendonly no
  
    # The name of the append only file (default: "appendonly.aof")
  
    appendfilename "appendonly.aof"
  
    # The fsync() call tells the Operating System to actually write data on disk
    # instead of waiting for more data in the output buffer. Some OS will really flush
    # data on disk, some other OS will just try to do it ASAP.
    #
    # Redis supports three different modes:
    #
    # no: don't fsync, just let the OS flush the data when it wants. Faster.
    # always: fsync after every write to the append only log. Slow, Safest.
    # everysec: fsync only one time every second. Compromise.
    #
    # The default is "everysec", as that's usually the right compromise between
    # speed and data safety. It's up to you to understand if you can relax this to
    # "no" that will let the operating system flush the output buffer when
    # it wants, for better performances (but if you can live with the idea of
    # some data loss consider the default persistence mode that's snapshotting),
    # or on the contrary, use "always" that's very slow but a bit safer than
    # everysec.
    #
    # More details please check the following article:
    # http://antirez.com/post/redis-persistence-demystified.html
    #
    # If unsure, use "everysec".
  
    # appendfsync always
    appendfsync everysec
    # appendfsync no
  
    # When the AOF fsync policy is set to always or everysec, and a background
    # saving process (a background save or AOF log background rewriting) is
    # performing a lot of I/O against the disk, in some Linux configurations
    # Redis may block too long on the fsync() call. Note that there is no fix for
    # this currently, as even performing fsync in a different thread will block
    # our synchronous write(2) call.
    #
    # In order to mitigate this problem it's possible to use the following option
    # that will prevent fsync() from being called in the main process while a
    # BGSAVE or BGREWRITEAOF is in progress.
    #
    # This means that while another child is saving, the durability of Redis is
    # the same as "appendfsync none". In practical terms, this means that it is
    # possible to lose up to 30 seconds of log in the worst scenario (with the
    # default Linux settings).
    #
    # If you have latency problems turn this to "yes". Otherwise leave it as
    # "no" that is the safest pick from the point of view of durability.
  
    no-appendfsync-on-rewrite no
  
    # Automatic rewrite of the append only file.
    # Redis is able to automatically rewrite the log file implicitly calling
    # BGREWRITEAOF when the AOF log size grows by the specified percentage.
    #
    # This is how it works: Redis remembers the size of the AOF file after the
    # latest rewrite (if no rewrite has happened since the restart, the size of
    # the AOF at startup is used).
    #
    # This base size is compared to the current size. If the current size is
    # bigger than the specified percentage, the rewrite is triggered. Also
    # you need to specify a minimal size for the AOF file to be rewritten, this
    # is useful to avoid rewriting the AOF file even if the percentage increase
    # is reached but it is still pretty small.
    #
    # Specify a percentage of zero in order to disable the automatic AOF
    # rewrite feature.
  
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
  
    # An AOF file may be found to be truncated at the end during the Redis
    # startup process, when the AOF data gets loaded back into memory.
    # This may happen when the system where Redis is running
    # crashes, especially when an ext4 filesystem is mounted without the
    # data=ordered option (however this can't happen when Redis itself
    # crashes or aborts but the operating system still works correctly).
    #
    # Redis can either exit with an error when this happens, or load as much
    # data as possible (the default now) and start if the AOF file is found
    # to be truncated at the end. The following option controls this behavior.
    #
    # If aof-load-truncated is set to yes, a truncated AOF file is loaded and
    # the Redis server starts emitting a log to inform the user of the event.
    # Otherwise if the option is set to no, the server aborts with an error
    # and refuses to start. When the option is set to no, the user requires
    # to fix the AOF file using the "redis-check-aof" utility before to restart
    # the server.
    #
    # Note that if the AOF file will be found to be corrupted in the middle
    # the server will still exit with an error. This option only applies when
    # Redis will try to read more data from the AOF file but not enough bytes
    # will be found.
    aof-load-truncated yes
  
    ################################ LUA SCRIPTING  ###############################
  
    # Max execution time of a Lua script in milliseconds.
    #
    # If the maximum execution time is reached Redis will log that a script is
    # still in execution after the maximum allowed time and will start to
    # reply to queries with an error.
    #
    # When a long running script exceeds the maximum execution time only the
    # SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
    # used to stop a script that did not yet called write commands. The second
    # is the only way to shut down the server in the case a write command was
    # already issued by the script but the user doesn't want to wait for the natural
    # termination of the script.
    #
    # Set it to 0 or a negative value for unlimited execution without warnings.
    lua-time-limit 5000
  
    ################################ REDIS CLUSTER  ###############################
    #
    # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
    # in order to mark it as "mature" we need to wait for a non trivial percentage
    # of users to deploy it in production.
    # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    #
    # Normal Redis instances can't be part of a Redis Cluster; only nodes that are
    # started as cluster nodes can. In order to start a Redis instance as a
    # cluster node enable the cluster support uncommenting the following:
    #
    # cluster-enabled yes
  
    # Every cluster node has a cluster configuration file. This file is not
    # intended to be edited by hand. It is created and updated by Redis nodes.
    # Every Redis Cluster node requires a different cluster configuration file.
    # Make sure that instances running in the same system do not have
    # overlapping cluster configuration file names.
    #
    # cluster-config-file nodes-6379.conf
  
    # Cluster node timeout is the amount of milliseconds a node must be unreachable
    # for it to be considered in failure state.
    # Most other internal time limits are multiple of the node timeout.
    #
    # cluster-node-timeout 15000
  
    # A slave of a failing master will avoid to start a failover if its data
    # looks too old.
    #
    # There is no simple way for a slave to actually have a exact measure of
    # its "data age", so the following two checks are performed:
    #
    # 1) If there are multiple slaves able to failover, they exchange messages
    #    in order to try to give an advantage to the slave with the best
    #    replication offset (more data from the master processed).
    #    Slaves will try to get their rank by offset, and apply to the start
    #    of the failover a delay proportional to their rank.
    #
    # 2) Every single slave computes the time of the last interaction with
    #    its master. This can be the last ping or command received (if the master
    #    is still in the "connected" state), or the time that elapsed since the
    #    disconnection with the master (if the replication link is currently down).
    #    If the last interaction is too old, the slave will not try to failover
    #    at all.
    #
    # The point "2" can be tuned by user. Specifically a slave will not perform
    # the failover if, since the last interaction with the master, the time
    # elapsed is greater than:
    #
    #   (node-timeout * slave-validity-factor) + repl-ping-slave-period
    #
    # So for example if node-timeout is 30 seconds, and the slave-validity-factor
    # is 10, and assuming a default repl-ping-slave-period of 10 seconds, the
    # slave will not try to failover if it was not able to talk with the master
    # for longer than 310 seconds.
    #
    # A large slave-validity-factor may allow slaves with too old data to failover
    # a master, while a too small value may prevent the cluster from being able to
    # elect a slave at all.
    #
    # For maximum availability, it is possible to set the slave-validity-factor
    # to a value of 0, which means, that slaves will always try to failover the
    # master regardless of the last time they interacted with the master.
    # (However they'll always try to apply a delay proportional to their
    # offset rank).
    #
    # Zero is the only value able to guarantee that when all the partitions heal
    # the cluster will always be able to continue.
    #
    # cluster-slave-validity-factor 10
  
    # Cluster slaves are able to migrate to orphaned masters, that are masters
    # that are left without working slaves. This improves the cluster ability
    # to resist to failures as otherwise an orphaned master can't be failed over
    # in case of failure if it has no working slaves.
    #
    # Slaves migrate to orphaned masters only if there are still at least a
    # given number of other working slaves for their old master. This number
    # is the "migration barrier". A migration barrier of 1 means that a slave
    # will migrate only if there is at least 1 other working slave for its master
    # and so forth. It usually reflects the number of slaves you want for every
    # master in your cluster.
    #
    # Default is 1 (slaves migrate only if their masters remain with at least
    # one slave). To disable migration just set it to a very large value.
    # A value of 0 can be set but is useful only for debugging and dangerous
    # in production.
    #
    # cluster-migration-barrier 1
  
    # By default Redis Cluster nodes stop accepting queries if they detect there
    # is at least an hash slot uncovered (no available node is serving it).
    # This way if the cluster is partially down (for example a range of hash slots
    # are no longer covered) all the cluster becomes, eventually, unavailable.
    # It automatically returns available as soon as all the slots are covered again.
    #
    # However sometimes you want the subset of the cluster which is working,
    # to continue to accept queries for the part of the key space that is still
    # covered. In order to do so, just set the cluster-require-full-coverage
    # option to no.
    #
    # cluster-require-full-coverage yes
  
    # In order to setup your cluster make sure to read the documentation
    # available at http://redis.io web site.
  
    ################################## SLOW LOG ###################################
  
    # The Redis Slow Log is a system to log queries that exceeded a specified
    # execution time. The execution time does not include the I/O operations
    # like talking with the client, sending the reply and so forth,
    # but just the time needed to actually execute the command (this is the only
    # stage of command execution where the thread is blocked and can not serve
    # other requests in the meantime).
    #
    # You can configure the slow log with two parameters: one tells Redis
    # what is the execution time, in microseconds, to exceed in order for the
    # command to get logged, and the other parameter is the length of the
    # slow log. When a new command is logged the oldest one is removed from the
    # queue of logged commands.
  
    # The following time is expressed in microseconds, so 1000000 is equivalent
    # to one second. Note that a negative number disables the slow log, while
    # a value of zero forces the logging of every command.
    slowlog-log-slower-than 10000
  
    # There is no limit to this length. Just be aware that it will consume memory.
    # You can reclaim memory used by the slow log with SLOWLOG RESET.
    slowlog-max-len 128
  
    ################################ LATENCY MONITOR ##############################
  
    # The Redis latency monitoring subsystem samples different operations
    # at runtime in order to collect data related to possible sources of
    # latency of a Redis instance.
    #
    # Via the LATENCY command this information is available to the user that can
    # print graphs and obtain reports.
    #
    # The system only logs operations that were performed in a time equal or
    # greater than the amount of milliseconds specified via the
    # latency-monitor-threshold configuration directive. When its value is set
    # to zero, the latency monitor is turned off.
    #
    # By default latency monitoring is disabled since it is mostly not needed
    # if you don't have latency issues, and collecting data has a performance
    # impact, that while very small, can be measured under big load. Latency
    # monitoring can easily be enabled at runtime using the command
    # "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
    latency-monitor-threshold 0
  
    ############################# EVENT NOTIFICATION ##############################
  
    # Redis can notify Pub/Sub clients about events happening in the key space.
    # This feature is documented at http://redis.io/topics/notifications
    #
    # For instance if keyspace events notification is enabled, and a client
    # performs a DEL operation on key "foo" stored in the Database 0, two
    # messages will be published via Pub/Sub:
    #
    # PUBLISH __keyspace@0__:foo del
    # PUBLISH __keyevent@0__:del foo
    #
    # It is possible to select the events that Redis will notify among a set
    # of classes. Every class is identified by a single character:
    #
    #  K     Keyspace events, published with __keyspace@<db>__ prefix.
    #  E     Keyevent events, published with __keyevent@<db>__ prefix.
    #  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
    #  $     String commands
    #  l     List commands
    #  s     Set commands
    #  h     Hash commands
    #  z     Sorted set commands
    #  x     Expired events (events generated every time a key expires)
    #  e     Evicted events (events generated when a key is evicted for maxmemory)
    #  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
    #
    #  The "notify-keyspace-events" takes as argument a string that is composed
    #  of zero or multiple characters. The empty string means that notifications
    #  are disabled.
    #
    #  Example: to enable list and generic events, from the point of view of the
    #           event name, use:
    #
    #  notify-keyspace-events Elg
    #
    #  Example 2: to get the stream of the expired keys subscribing to channel
    #             name __keyevent@0__:expired use:
    #
    #  notify-keyspace-events Ex
    #
    #  By default all notifications are disabled because most users don't need
    #  this feature and the feature has some overhead. Note that if you don't
    #  specify at least one of K or E, no events will be delivered.
    notify-keyspace-events ""
  
    ############################### ADVANCED CONFIG ###############################
  
    # Hashes are encoded using a memory efficient data structure when they have a
    # small number of entries, and the biggest entry does not exceed a given
    # threshold. These thresholds can be configured using the following directives.
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
  
    # Lists are also encoded in a special way to save a lot of space.
    # The number of entries allowed per internal list node can be specified
    # as a fixed maximum size or a maximum number of elements.
    # For a fixed maximum size, use -5 through -1, meaning:
    # -5: max size: 64 Kb  <-- not recommended for normal workloads
    # -4: max size: 32 Kb  <-- not recommended
    # -3: max size: 16 Kb  <-- probably not recommended
    # -2: max size: 8 Kb   <-- good
    # -1: max size: 4 Kb   <-- good
    # Positive numbers mean store up to _exactly_ that number of elements
    # per list node.
    # The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
    # but if your use case is unique, adjust the settings as necessary.
    list-max-ziplist-size -2
  
    # Lists may also be compressed.
    # Compress depth is the number of quicklist ziplist nodes from *each* side of
    # the list to *exclude* from compression.  The head and tail of the list
    # are always uncompressed for fast push/pop operations.  Settings are:
    # 0: disable all list compression
    # 1: depth 1 means "don't start compressing until after 1 node into the list,
    #    going from either the head or tail"
    #    So: [head]->node->node->...->node->[tail]
    #    [head], [tail] will always be uncompressed; inner nodes will compress.
    # 2: [head]->[next]->node->node->...->node->[prev]->[tail]
    #    2 here means: don't compress head or head->next or tail->prev or tail,
    #    but compress all nodes between them.
    # 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
    # etc.
    list-compress-depth 0
  
    # Sets have a special encoding in just one case: when a set is composed
    # of just strings that happen to be integers in radix 10 in the range
    # of 64 bit signed integers.
    # The following configuration setting sets the limit in the size of the
    # set in order to use this special memory saving encoding.
    set-max-intset-entries 512
  
    # Similarly to hashes and lists, sorted sets are also specially encoded in
    # order to save a lot of space. This encoding is only used when the length and
    # elements of a sorted set are below the following limits:
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
  
    # HyperLogLog sparse representation bytes limit. The limit includes the
    # 16 bytes header. When an HyperLogLog using the sparse representation crosses
    # this limit, it is converted into the dense representation.
    #
    # A value greater than 16000 is totally useless, since at that point the
    # dense representation is more memory efficient.
    #
    # The suggested value is ~ 3000 in order to have the benefits of
    # the space efficient encoding without slowing down too much PFADD,
    # which is O(N) with the sparse encoding. The value can be raised to
    # ~ 10000 when CPU is not a concern, but space is, and the data set is
    # composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
    hll-sparse-max-bytes 3000
  
    # Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
    # order to help rehashing the main Redis hash table (the one mapping top-level
    # keys to values). The hash table implementation Redis uses (see dict.c)
    # performs a lazy rehashing: the more operation you run into a hash table
    # that is rehashing, the more rehashing "steps" are performed, so if the
    # server is idle the rehashing is never complete and some more memory is used
    # by the hash table.
    #
    # The default is to use this millisecond 10 times every second in order to
    # actively rehash the main dictionaries, freeing memory when possible.
    #
    # If unsure:
    # use "activerehashing no" if you have hard latency requirements and it is
    # not a good thing in your environment that Redis can reply from time to time
    # to queries with 2 milliseconds delay.
    #
    # use "activerehashing yes" if you don't have such hard requirements but
    # want to free memory asap when possible.
    activerehashing yes
  
    # The client output buffer limits can be used to force disconnection of clients
    # that are not reading data from the server fast enough for some reason (a
    # common reason is that a Pub/Sub client can't consume messages as fast as the
    # publisher can produce them).
    #
    # The limit can be set differently for the three different classes of clients:
    #
    # normal -> normal clients including MONITOR clients
    # slave  -> slave clients
    # pubsub -> clients subscribed to at least one pubsub channel or pattern
    #
    # The syntax of every client-output-buffer-limit directive is the following:
    #
    # client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
    #
    # A client is immediately disconnected once the hard limit is reached, or if
    # the soft limit is reached and remains reached for the specified number of
    # seconds (continuously).
    # So for instance if the hard limit is 32 megabytes and the soft limit is
    # 16 megabytes / 10 seconds, the client will get disconnected immediately
    # if the size of the output buffers reach 32 megabytes, but will also get
    # disconnected if the client reaches 16 megabytes and continuously overcomes
    # the limit for 10 seconds.
    #
    # By default normal clients are not limited because they don't receive data
    # without asking (in a push way), but just after a request, so only
    # asynchronous clients may create a scenario where data is requested faster
    # than it can read.
    #
    # Instead there is a default limit for pubsub and slave clients, since
    # subscribers and slaves receive data in a push fashion.
    #
    # Both the hard or the soft limit can be disabled by setting them to zero.
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
  
    # Redis calls an internal function to perform many background tasks, like
    # closing connections of clients in timeout, purging expired keys that are
    # never requested, and so forth.
    #
    # Not all tasks are performed with the same frequency, but Redis checks for
    # tasks to perform according to the specified "hz" value.
    #
    # By default "hz" is set to 10. Raising the value will use more CPU when
    # Redis is idle, but at the same time will make Redis more responsive when
    # there are many keys expiring at the same time, and timeouts may be
    # handled with more precision.
    #
    # The range is between 1 and 500, however a value over 100 is usually not
    # a good idea. Most users should use the default of 10 and raise this up to
    # 100 only in environments where very low latency is required.
    hz 10
  
    # When a child rewrites the AOF file, if the following option is enabled
    # the file will be fsync-ed every 32 MB of data generated. This is useful
    # in order to commit the file to the disk more incrementally and avoid
    # big latency spikes.
    aof-rewrite-incremental-fsync yes
---
# Source: gopaddle/charts/gp-core/templates/usermanager-usermanager-configmap-lb79t.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: usermanager-usermanager-configmap-lb79t
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: usermanager-usermanager-configmap-lb79t
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
  name: usermanager-usermanager-configmap-lb79t
  namespace: default
data:
  service_directory-kube.json: "{\n    \"license.ep\": {\n        \"host\": \"gpcore\",\n
    \       \"port\": \"8759\"\n    },\n    \"transaction.ep\": {\n        \"host\":
    \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"configmanager.ep\":{\n        \"host\":
    \"configmanager\",\n        \"port\": \"8001\"\n    },\n    \"usermanager.ep\":
    {\n    \t\"host\":\"usermanager\",\n    \t\"port\":\"8005\"\n  \t},\n    \"user.ep\":
    {\n    \t\"host\":\"usermanager\",\n    \t\"port\":\"8005\"\n  \t},\n    \"nodechecker.ep\":
    {\n    \t\"host\":\"nodechecker\",\n    \t\"port\":\"8020\"\n  \t},\n    \"billing.ep\":{\n
    \       \"host\":\"costmanager\",\n        \"port\":\"8011\"\n    },\n    \"paymentmanager.ep\":{\n
    \       \"host\":\"paymentmanager\",\n        \"port\":\"8021\"\n    },\n    \"release.ep\":{\n
    \       \"host\": \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"deploymentmanager.ep\":{\n
    \       \"host\": \"deploymentmanager\",\n        \"port\": \"8003\"\n    },\n    \"clustermanager.ep\":{\n
    \       \"host\": \"clustermanager\",\n        \"port\": \"8013\"\n    },\n    \"core.ep\":{\n
    \       \"host\": \"gpcore\",\n        \"port\": \"8759\"\n    },\n    \"cloudmanager.ep\":{\n
    \       \"host\": \"cloudmanager\",\n        \"port\": \"8018\"\n    },\n    \"domainmanager.ep\":{\n
    \       \"host\": \"domainmanager\",\n        \"port\": \"8004\"\n    }\n\n}\n"
  default-resources.json: "{\n    \"allocationPolicy\":{\n       \"internalTrigger\":true,\n
    \      \"name\":\"default\",\n       \"displayName\":\"default\",\n       \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGFsbG9jYXRpb25Qb2xpY3k=\",\n
    \      \"resources\":{\n          \"limits\":{\n             \"memory\":\"500M\",\n
    \            \"cpu\":\"500m\"\n          },\n          \"requests\":{\n             \"memory\":\"20M\",\n
    \            \"cpu\":\"20m\"\n          }\n       },\n       \"tags\":[\n          {\n
    \            \"key\":\"default\",\n             \"value\":\"default\"\n          }\n
    \      ]\n    },\n    \"scalingPolicy\":{\n       \"internalTrigger\":true,\n       \"name\":\"default\",\n
    \      \"displayName\":\"default\",\n       \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHNjYWxpbmdQb2xpY3k=\",\n
    \      \"minReplicas\":1,\n       \"maxReplicas\":2,\n       \"metric\":[\n          {\n
    \            \"type\":\"resource\",\n             \"resource\":{\n                \"name\":\"cpu\",\n
    \               \"targetAverageUtilization\":70\n             }\n          },\n
    \         {\n             \"type\":\"resource\",\n             \"resource\":{\n
    \               \"name\":\"memory\",\n                \"targetAverageUtilization\":70\n
    \            }\n          }\n       ]\n    },\n    \"networkPolicy\":{\n       \"internalTrigger\":true,\n
    \      \"name\":\"default\",\n       \"displayName\":\"default\",\n       \"ingress\":[\n
    \         {\n             \"ports\":[\n                {\n                   \"protocol\":\"TCP\",\n
    \                  \"port\":22\n                }\n             ],\n             \"networkPolicyPeer\":[\n
    \               {\n                   \"IPBlock\":{\n                      \"CIDR\":\"0.0.0.0/0\"\n
    \                  }\n                }\n             ]\n          }\n       ],\n
    \      \"egress\":[\n          {\n             \"ports\":[\n                {\n
    \                  \"protocol\":\"TCP\",\n                   \"port\":22\n                }\n
    \            ],\n             \"networkPolicyPeer\":[\n                {\n                   \"IPBlock\":{\n
    \                     \"CIDR\":\"0.0.0.0/0\"\n                   }\n                }\n
    \            ]\n          }\n       ]\n    },\n    \"volumeClaimPolicy\":{\n       \"internalTrigger\":true,\n
    \      \"name\":\"default\",       \n       \"displayName\":\"default\",\n       \"accessMode\":\"ReadWriteOnce\",\n
    \      \"volumeMode\":\"FileSystem\",\n       \"resources\":{\n          \"limits\":\"50Gi\",\n
    \         \"requests\":\"10Gi\"\n       }\n    },\n    \"provisionPolicy-aws\":{\n
    \      \"internalTrigger\":true,\n       \"name\":\"default-aws\",\n       \"displayName\":\"default-aws\",\n
    \      \"type\":\"aws\",\n       \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGF3cyBwcm92aXNpb25Qb2xpY3k=\",\n
    \      \"parameter\":{\n          \"awsEBS\":{\n             \"type\":\"io1\",\n
    \            \"zones\":[\n                \"ap-southeast-1\"\n             ],\n
    \            \"fsType\":\"ext4\"\n          }\n       },\n       \"reclaimPolicy\":\"delete\",\n
    \      \"tags\":[\n          {\n             \"key\":\"default\",\n             \"value\":\"default\"\n
    \         }\n       ]\n    },\n    \"provisionPolicy-gce\":{\n       \"internalTrigger\":true,\n
    \      \"name\":\"default-gce\",\n       \"displayName\":\"default-gce\",\n       \"type\":\"gce\",\n
    \      \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGdjZSBwcm92aXNpb25Qb2xpY3k=\",\n
    \      \"parameter\":{\n          \"gcePD\":{\n             \"type\":\"pd-standard\",\n
    \            \"zones\":[\n                \"us-central1-a\"\n             ],\n             \"replicationType\":\"none\",\n
    \            \"fsType\":\"ext4\"\n          }\n       },\n       \"reclaimPolicy\":\"delete\",\n
    \      \"tags\":[\n          {\n             \"key\":\"default\",\n             \"value\":\"default\"\n
    \         }\n       ]\n    },\n    \"provisionPolicy-azure\":{\n       \"internalTrigger\":true,\n
    \      \"type\":\"azure\",\n       \"name\":\"default-azure\",\n       \"displayName\":\"default-azure\",\n
    \      \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IGF6dXJlIHByb3Zpc2lvblBvbGljeQ==\",\n
    \      \"parameter\":{\n          \"azureDISK\":{\n             \"storageAccountType\":\"Standard_LRS\",\n
    \            \"kind\":\"Managed\"\n          }\n       },\n       \"reclaimPolicy\":\"delete\",\n
    \      \"defaultPolicy\":true,\n       \"tags\":[\n          {\n             \"key\":\"default\",\n
    \            \"value\":\"default\"\n          }\n       ]\n    },\n    \"deploymentPolicy-stateless\":{\n
    \      \"internalTrigger\":true,\n       \"name\":\"default-stateless\",\n       \"displayName\":\"default-stateless\",\n
    \      \"type\":\"deployment\",\n       \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHN0YXRlbGVzcyBkZXBsb3ltZW50UG9saWN5\",\n
    \      \"property\":{\n          \"revisionHistory\":10,\n          \"deployment\":{\n
    \            \"updateMethod\":\"rollingUpdate\",\n             \"replicas\":1,\n
    \            \"rollingUpdate\":{\n                \"maxUnavailable\":{\n                   \"type\":0,\n
    \                  \"intVal\":0\n                },\n                \"maxSurge\":{\n
    \                  \"type\":0,\n                   \"intVal\":1\n                }\n
    \            }\n          }\n       },\n       \"tags\":[\n          {\n             \"key\":\"default\",\n
    \            \"value\":\"default\"\n          }\n       ]\n    },\n    \"deploymentPolicy-stateful\":{\n
    \      \"internalTrigger\":true,\n       \"name\":\"default-stateful\",\n       \"displayName\":\"default-stateful\",\n
    \      \"type\":\"stateful-set\",\n       \"description\":\"Z29wYWRkbGUncyBkZWZhdWx0IHN0YXRlZnVsIGRlcGxveW1lbnRQb2xpY3k=\",\n
    \      \"property\":{\n          \"revisionHistory\":2,\n          \"statefulset\":{\n
    \            \"replicas\":1,\n             \"updateMethod\":\"rollingUpdate\",\n
    \            \"rollingUpdate\":{\n                \"partition\":0\n             }\n
    \         }\n       },\n       \"tags\":[\n          {\n             \"key\":\"default-stateful\",\n
    \            \"value\":\"default-stateful\"\n          }\n       ]\n    },\n    \"subscription\":{\n
    \      \"mode\":\"saas\",\n       \"subscription\":{\n          \"deck\":{\n             \"type\":\"free\"\n
    \         },\n          \"propeller\":{\n             \"type\":\"free\"\n          },\n
    \         \"gear\":{\n             \"type\":\"free\"\n          }\n       }\n    },\n
    \   \"liteSubscription\":{\n      \"mode\":\"lite\",\n      \"subscription\":{\n
    \        \"deck\":{\n            \"type\":\"free\"\n         },\n         \"propeller\":{\n
    \           \"type\":\"free\"\n         },\n         \"gear\":{\n            \"type\":\"free\"\n
    \        }\n      }\n   },\n    \"release\": {\n       \"name\":\"default\",\n       \"releaseTag\":\"default\",\n
    \      \"defaultRelease\":true\n    },\n    \"project\":{\n       \"name\":\"default\",\n
    \      \"organization\":\"gopaddle\",\n       \"defaultProject\":true\n    }\n }"
  profiles-kube.json: |
    {
        "mongodb":
        {
            "db-name": "userdb",
            "db-endpoint": [
                "mongodb:27017"
            ],
            "db-port": "27017",
            "user-db": "admin",
            "db-user": "admin",
            "db-password": "cGFzc3dvcmQ"
        },
        "redis":
        {
            "redis-endpoint":"redis",
            "redis-port":"6379",
            "redis-password":"avraj"
        },
        "jwt_params":
        {
            "PrivateKeyPath": "/settings/keys/beta/private_key",
            "PublicKeyPath": "/settings/keys/beta/public_key.pub",
            "JWTExpirationDelta": "12"
        },
        "mail_content":
        {
            "password-reset-url": "NODE_IP",
            "sendgrid_username": "anumantharaja",
            "sendgrid_password": "sendgrid123456789",
            "sendgrid_api_key": "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",
            "mail_from": "no-reply@gopaddle.io",
            "bccSenderName":"vinothiniraju",
            "bccmail":"vinothiniraju@gopaddle.io"
        },
        "logger":
        {
            "logType": "debug"
        },
        "userIconDirectory":
        {
            "iconDirectory": "/iconPath/%s/user/",
            "iconAPI": "/v1/user/icon/%s"
        },
         "mode":{
          "isOnPrem":"false"
       }
    }
  validation.json: "{\n\t\"user\": {\n\t\t\"createUserExpectedFields\": [\n\t\t\t\"userName\",\n\t\t\t\"emailId\",\n\t\t\t\"password\",\n\t\t\t\"mobileNumber\"\n\t\t],\n\t\t\"updatePasswordExpectedFields\":
    [\n\t\t\t\"oldPassword\",\n\t\t\t\"newPassword\",\n\t\t\t\"confirmNewPassword\"\n\t\t],\n\t\t\"sendResetPasswordLink\":
    [\n\t\t],\n\t\t\"resetPasswordExpectedFields\": [\n\t\t\t\"newPassword\",\n\t\t\t\"confirmNewPassword\",\n\t\t\t\"token\"\n\t\t],\n\t\t\"updateUserAttributes\":[\n\t\t\t\"password\",\n\t\t\t\"mobileNumber\",\n\t\t\t\"updateType\"\n\t\t]\n\t}\n}\n"
  log_config.json: |
    {
      "formatters": {
        "usermanager": {
          "format": "%(asctime)s %(levelname)s (%(filename)s:%(lineno)d) %(message)s",
          "datefmt": "%Y-%m-%d %H:%M:%S"
        }
      },
      "handlers": {
        "usermanager": {
          "class": "RotatingFileHandler",
          "filepath": "./usermanager.log",
          "mode": "O_APPEND",
          "bufferSize": 0,
          "bufferFlushTime": 30000,
          "inputChanSize": 1,
          "maxBytes": 104857600,
          "backupCount": 9,
          "formatter": "usermanager"
        }
      },
      "loggers": {
        "debug": {
          "level": "DEBUG",
          "handlers": [
            "usermanager"
          ]
        },
        "info": {
          "level": "INFO",
          "handlers": [
            "usermanager"
          ]
        },
        "warn": {
          "level": "WARN",
          "handlers": [
            "usermanager"
          ]
        },
        "error": {
          "level": "ERROR",
          "handlers": [
            "usermanager"
          ]
        },
        "fatal": {
          "level": "FATAL",
          "handlers": [
            "usermanager"
          ]
        }
      }
    }
  internal_api.json: "{\n    \"createCalls\":{\n        \"allocationPolicy\":\"api/%s/v1/%s/allocationPolicy\",\n
    \       \"scalingPolicy\":\"api/%s/v1/%s/scalingPolicy\",\n        \"volumeClaimPolicy\":\"api/%s/%s/volumeClaimPolicy\",\n
    \       \"networkPolicy\":\"api/%s/v1/%s/networkpolicy\",\n        \"deploymentPolicy-stateless\":\"api/%s/v1/%s/deploymentPolicy\",\n
    \       \"deploymentPolicy-stateful\":\"api/%s/v1/%s/deploymentPolicy\",\n        \"provisionPolicy-aws\":\"api/%s/v1/%s/storageClass\",\n
    \       \"provisionPolicy-gce\":\"api/%s/v1/%s/storageClass\",\n        \"provisionPolicy-azure\":\"api/%s/v1/%s/storageClass\",\n
    \       \"release\":\"api/%s/v1/%s/release\",\n        \"project\":\"api/%s/v1/project\"\n
    \   },\n    \"listCalls\":{\n        \"application\":\"api/%s/v1/%s/application?filters=status:notin-Deleted\",\n
    \       \"cluster\":\"api/%s/v1/%s/cluster\",\n        \"build\":\"api/%s/v1/%s/build?filters=status:Creating\"\n
    \   },\n    \"deleteCalls\":{\n        \"application\":\"api-in/%s/v1/%s/application?purge=true\",\n
    \       \"deploymentTemplate\":\"api-internal/%s/v1/%s/deploymentTemplate\",\n        \"services\":\"api-internal/%s/v1/%s/serviceGroup\",\n
    \       \"allocationPolicy\":\"api-internal/%s/v1/%s/allocationPolicy\",\n        \"scalingPolicy\":\"api-internal/%s/v1/%s/scalingPolicy\",\n
    \       \"volumeClaimPolicy\":\"api-internal/%s/%s/volumeClaimPolicy\",\n        \"networkPolicy\":\"api-internal/%s/v1/%s/networkpolicy\",\n
    \       \"deploymentPolicy\":\"api-internal/%s/v1/%s/deploymentPolicy\",\n        \"provisionPolicy\":\"api-internal/%s/v1/%s/storageClass\",\n
    \       \"volume\":\"api-internal/%s/v1/%s/volume\",\n        \"container\":\"api-internal/%s/v1/%s/service\",\n
    \       \"config\":\"api-internal/%s/v1/%s/config\",\n        \"release\":\"api-internal/%s/v1/%s/release\",\n
    \       \"registry\":\"api-in/%s/v1/%s/registry\",\n        \"cloudAccount\":\"api-in/%s/v1/%s/cloudaccount\",\n
    \       \"cloudAuthenticator\":\"api-in/%s/v1/%s/cloudauth\",\n        \"codebaseAccesptor\":\"api-internal/%s/v1/%s/codebaseAcceptor\",\n
    \       \"codebaseRequestor\":\"api-internal/%s/v1/%s/codebaseRequestor\",\n        \"build\":\"api-internal/%s/v1/%s/build\",\n
    \       \"domain\":\"api-in/%s/v1/%s/domain\"\n    },\n    \"acl\":{\n\t\t\"url\":\"http://%s:%s/api-in/%s/v1/acl?userid=%s\",\n\t\t\"port\":\"8005\"\n\t},\n\t\"nonrootuser\":{\n\t\t\"url\":\"http://%s:%s/api/%s/v1/subusers/%s\",\n\t\t\"port\":\"8005\"\n\t}\n}"
  error_config.json: |-
    {
       "all":{
          "DATA_PERSISTANCE": "Internal Error; (Failed to store data)",
          "DATA_RETRIVE": "Internal Error; (Failed to retrive data)",
          "INTERNAL_SERVER": "Internal Error; Unable to communicate with internal-server",
          "INTERNAL_SERVER_ERROR": "Internal Error; Try after sometime",
          "RESOURCE_NOT_FOUND": "Resource '%s' does not exist",
          "ERROR_HITTING_EXT_API": "Unable to communicate with external resources",
          "SOMETHING_WRONG": "Internal Error",
          "INTERNAL_DB_COPY": "Could not format response from database object.",
          "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
          "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
          "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
          "FIELD_VALIDATION":"InvalidValidationError '%s'",
          "ALREADY_EXIST": "'%s' already exists",
          "MISSING_FIELD": "Invalid input or missing mandatory field '%s'"
       },
       "user":{
          "EMAIL_ALREADY_EXISTS": "Email already exists. Sign in to continue",
          "INVALID_EMAIL": "Given email id is invalid. Please enter a valid email id.",
          "PASSWORD_DECRYPTION": "Failed in password decryption",
          "PASSWORD_STRENGTH": "Password length should be between 8-16 characters and should contain atleast 1 alphabet, 1 number and 1 special character",
          "INCORRECT_USER": "Incorrect username. Please try again.",
          "INCORRECT_EMAIL": "Incorrect EmailID. Please try again.",
          "USER_NOT_FOUND":"Requested user does not exist.",
          "INCORRECT_PASSWORD": "Incorrect password. Please try again.",
          "ACCOUNT_UNVERIFIED": "Please verify your account",
          "PASSWORD_EXPIRED": "Password expired. Please update your password to continue.",
          "PASSWORD_MISMATCH": "Given new password and confirm passwor does not match"
       },
       "mail":{
          "INVALID_EMAIL_CODE": "Given mail verification code is invalid",
          "INVALID_PHONE_CODE": "Given phone verification code is invalid",
          "EXPIRED_EMAIL_CODE": "Given mail verification code has already expired",
          "EXPIRED_PHONE_CODE": "Given phone verification code has already expired"
       },
       "license":{
          "LICENSE_NOTFOUND":"license not found"
       },
       "acl":{
          "ACL_NOTFOUND":"Requested acl '%s' is not found",
          "ACL_ALREADY_EXIST":"Requested acl '%s' is already exist",
          "INVALID_ACLID_FMT":"Requested ACLID '%s' is invalid formate",
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'"
       },
       "project":{
          "PROJECT_NOTFOUND":"Requested project '%s' is not found",
          "PROJECT_ALREADY_EXIST":"Requested project '%s' is already exist",
          "INVALID_PROJECTID_FMT":"Requested ProjectID '%s' is invalid formate",
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'"
       },
       "subusers":{
          "USER_NOTFOUND":"Requested user '%s' is not found",
          "USER_ALREADY_EXIST":"Requested user '%s' is already exist",
          "INVALID_USERID_FMT":"Requested UserID '%s' is invalid formate",
          "PAGESIZE_NEGAVE":"Page or Size can not be negative number { '%d', '%d' }",
          "PPAGE_LIMIT":"Requested invalid page '%d'; Page should be less than '%d'",
          "PSIZE_LIMIT":"Requested invalid size '%d' Page should be less than '%d'"
       }
    }
---
# Source: gopaddle/charts/gp-core/templates/webhook-webhook-configmap-enwj7.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: webhook-webhook-configmap-enwj7
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: webhook-webhook-configmap-enwj7
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
  name: webhook-webhook-configmap-enwj7
  namespace: default
data:
  profiles-kube.json: "{  \n    \"profiles\":{  \n       \"kube\":{  \n          \"host\":\"gpcore\",\n
    \         \"port\":\"8759\",\n          \"nodechecker-host\":\"nodechecker\",\n
    \         \"nodechecker-port\":\"8020\"\n       }\n    }\n }"
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build-rabbitmq-configmap-9a13l.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rabbitmq-build-rabbitmq-configmap-9a13l
    name: rabbitmq-build-rabbitmq-configmap-9a13l
    namespace: default
    servicegroup: rabbitmq-build-bz6w0o9l
    released-by: gopaddle
  name: rabbitmq-build-rabbitmq-configmap-9a13l
  namespace: default
data:
  rabbitmq.sh: "#!/bin/bash\nset -x\napt-get update -y\napt-get install jq -y\nrabbitmq-server
    > /var/log/rabbitmq/rabbitmq.log &\nsleep 60  \nrabbitmqctl add_vhost /activity\nrabbitmqctl
    add_vhost /apps\nrabbitmqctl add_vhost /build\nrabbitmqctl add_vhost /billing\nrabbitmqctl
    list_users\npresent = `rabbitmqctl list_users --formatter json | jq '.[] .user'
    | grep \"admin\"`\nexport present\nif [ -z \"$present\" ]\nthen\necho \"admin user
    doesnt exist.\"\nelse\necho \"admin user already exists. deleting the user.\"\nrabbitmqctl
    delete_user admin\nfi\nrabbitmqctl add_user admin 'cGFzc3dvcmQ'\nrabbitmqctl set_user_tags
    admin none\nrabbitmqctl set_permissions -p /activity admin \".*\" \".*\" \".*\"\nrabbitmqctl
    set_permissions -p /apps admin \".*\" \".*\" \".*\"\nrabbitmqctl set_permissions
    -p /build admin \".*\" \".*\" \".*\"\nrabbitmqctl set_permissions -p /billing admin
    \".*\" \".*\" \".*\"\ntail -f /var/log/rabbitmq/rabbitmq.log\n\n"
---
# Source: gopaddle/charts/gp-core/templates/activitymanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: activitymanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: activitymanager
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
  name: activitymanager
  namespace: default
spec:
  ports:
  - name: 8009-tcp
    port: 8009
    nodePort: 30006
    protocol: TCP
    targetPort: 8009
  selector:
    family: servicegroup
    servicegroup: activitymanager-muv5ktiw
  type: NodePort
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: alertmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: alertmanager
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
  name: alertmanager
  namespace: default
spec:
  ports:
  - name: 8012-tcp
    port: 8012
    protocol: TCP
    targetPort: 8012
  selector:
    family: servicegroup
    servicegroup: alertmanager-697i4d88
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/appscanner-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: appscanner
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appscanner
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
  name: appscanner
  namespace: default
spec:
  ports:
  - name: 8022-tcp
    port: 8022
    protocol: TCP
    targetPort: 8022
  selector:
    family: servicegroup
    servicegroup: appscanner-ugtwwlv3
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/appworker-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: appworker
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appworker
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
  name: appworker
  namespace: default
spec:
  ports:
  - name: 8010-tcp
    port: 8010
    protocol: TCP
    targetPort: 8010
  selector:
    family: servicegroup
    servicegroup: appworker-6iwtvs3g
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: cloudmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: cloudmanager
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
  name: cloudmanager
  namespace: default
spec:
  ports:
  - name: 8018-tcp
    port: 8018
    protocol: TCP
    targetPort: 8018
  selector:
    family: servicegroup
    servicegroup: cloudmanager-7kd52da1
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: clustermanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: clustermanager
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
  name: clustermanager
  namespace: default
spec:
  ports:
  - name: 8013-tcp
    port: 8013
    protocol: TCP
    targetPort: 8013
  selector:
    family: servicegroup
    servicegroup: clustermanager-lee5js63
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/configmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: configmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: configmanager
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
  name: configmanager
  namespace: default
spec:
  ports:
  - name: 8001-tcp
    port: 8001
    protocol: TCP
    targetPort: 8001
  selector:
    family: servicegroup
    servicegroup: configmanager-ntkg8uov
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/costmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: costmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: costmanager
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
  name: costmanager
  namespace: default
spec:
  ports:
  - name: 8011-tcp
    port: 8011
    nodePort: 30005
    protocol: TCP
    targetPort: 8011
  selector:
    family: servicegroup
    servicegroup: costmanager-olfgicj6
  type: NodePort
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: deploymentmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: deploymentmanager
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
  name: deploymentmanager
  namespace: default
spec:
  ports:
  - name: 8003-tcp
    port: 8003
    protocol: TCP
    targetPort: 8003
  - name: 8017-tcp
    port: 8017
    protocol: TCP
    targetPort: 8017
  selector:
    family: servicegroup
    servicegroup: deploymentmanager-7er149pa
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: domainmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: domainmanager
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
  name: domainmanager
  namespace: default
spec:
  ports:
  - name: 8004-tcp
    port: 8004
    protocol: TCP
    targetPort: 8004
  selector:
    family: servicegroup
    servicegroup: domainmanager-51g7q5yh
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/esearch-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: esearch
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: esearch
    released-by: gopaddle
    servicegroup: esearch-lz5zjizb
  name: esearch
  namespace: default
spec:
  ports:
  - name: 9200-tcp
    port: 9200
    protocol: TCP
    targetPort: 9200
  selector:
    family: servicegroup
    servicegroup: esearch-lz5zjizb
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/gateway-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gateway
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway
  namespace: default
spec:
  ports:
  - name: 8006-tcp
    port: 8006
    nodePort: 30004
    protocol: TCP
    targetPort: 8006
  - name: 8017-tcp
    port: 8017
    protocol: TCP
    targetPort: 8017
  - name: 8080-tcp
    port: 8080
    nodePort: 30003
    protocol: TCP
    targetPort: 8080
  selector:
    family: servicegroup
    servicegroup: gateway-i11oclpd
  type: NodePort
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/gpcore-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gpcore
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gpcore
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
  name: gpcore
  namespace: default
spec:
  ports:
  - name: 8759-tcp
    port: 8759
    protocol: TCP
    targetPort: 8759
  selector:
    family: servicegroup
    servicegroup: gpcore-bad4slye
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/influxdb-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: influxdb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: influxdb
    released-by: gopaddle
    servicegroup: influxdb-6hu2bvhe
  name: influxdb
  namespace: default
spec:
  ports:
  - name: 8086-tcp
    port: 8086
    protocol: TCP
    targetPort: 8086
  selector:
    family: servicegroup
    servicegroup: influxdb-6hu2bvhe
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/marketplace-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: marketplace
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    name: marketplace
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
  name: marketplace
  namespace: default
spec:
  ports:
  - name: 8023-tcp
    port: 8023
    protocol: TCP
    targetPort: 8023
  selector:
    family: servicegroup
    servicegroup: marketplace-q5j701mv
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/mongodb-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: mongodb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: mongodb
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
  name: mongodb
  namespace: default
spec:
  ports:
  - name: 27017-tcp
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    family: servicegroup
    servicegroup: mongodb-sr2ai9v6
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: nodechecker
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: nodechecker
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
  name: nodechecker
  namespace: default
spec:
  ports:
  - name: 8020-tcp
    port: 8020
    protocol: TCP
    targetPort: 8020
  selector:
    family: servicegroup
    servicegroup: nodechecker-zsww7hby
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: paymentmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: paymentmanager
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
  name: paymentmanager
  namespace: default
spec:
  ports:
  - name: 8021-tcp
    port: 8021
    protocol: TCP
    targetPort: 8021
  selector:
    family: servicegroup
    servicegroup: paymentmanager-3yqw8yo3
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/rabbitmq-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: rabbitmq
    released-by: gopaddle
    servicegroup: rabbitmq-ijdwt5eu
  name: rabbitmq
  namespace: default
spec:
  ports:
  - name: 5672-tcp
    port: 5672
    protocol: TCP
    targetPort: 5672
  selector:
    family: servicegroup
    servicegroup: rabbitmq-ijdwt5eu
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/redis-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: redis
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis
  namespace: default
spec:
  ports:
  - name: 6379-tcp
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    family: servicegroup
    servicegroup: redis-b1sjbz8a
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/usermanager-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: usermanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: usermanager
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
  name: usermanager
  namespace: default
spec:
  ports:
  - name: 8005-tcp
    port: 8005
    protocol: TCP
    targetPort: 8005
  selector:
    family: servicegroup
    servicegroup: usermanager-l9s3brcs
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/webhook-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: webhook
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: webhook
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
  name: webhook
  namespace: default
spec:
  ports:
  - name: 9090-tcp
    nodePort: 30007
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    family: servicegroup
    servicegroup: webhook-xvi1s6em
  type: NodePort
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build-externalsvc.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-build-external
    name: rabbitmq-build
    namespace: default
    released-by: gopaddle
    servicegroup: rabbitmq-build-bz6w0o9l
  name: rabbitmq-build-external
  namespace: default
spec:
  ports:
  - name: 5672-tcp
    nodePort: 30000
    port: 5672
    protocol: TCP
    targetPort: 0
  selector:
    family: servicegroup
    servicegroup: rabbitmq-build-bz6w0o9l
  type: NodePort
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-build
    name: rabbitmq-build
    namespace: default
    servicegroup: rabbitmq-build-bz6w0o9l
    released-by: gopaddle
  name: rabbitmq-build
  namespace: default
spec:
  ports:
  - name: 5672-tcp
    port: 5672
    protocol: TCP
    targetPort: 5672
  selector:
    family: servicegroup
    servicegroup: rabbitmq-build-bz6w0o9l
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: gopaddle/charts/gp-core/templates/activitymanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: activitymanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: activitymanager
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
    servicegroup-name: activitymanager
  name: activitymanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: activitymanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: activitymanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: activitymanager
        released-by: gopaddle
        servicegroup: activitymanager-muv5ktiw
        servicetype: gopaddle
      name: activitymanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > activitymanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          # echo "----------- start conatainer ------------"
          ./activitymanager kube > /var/log/gopaddle/activitymanager.log
          tail -f /var/log/gopaddle/activitymanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: activitymanager-activitymanager-envsecret-wuhue
        image: trov/activitymanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8009
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: activitymanager
        ports:
        - containerPort: 8009
          name: 8009-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8009
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: activitymanager-activitymanager-cmnt-8u0d1
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: activitymanager-activitymanager-configmap-ak577
        name: activitymanager-activitymanager-cmnt-8u0d1
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: alertmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: alertmanager
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
    servicegroup-name: alertmanager
  name: alertmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: alertmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: alertmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: alertmanager
        released-by: gopaddle
        servicegroup: alertmanager-697i4d88
        servicetype: gopaddle
      name: alertmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > alertmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./alertmanager kube > /var/log/gopaddle/alertmanager.log
          tail -f /var/log/gopaddle/alertmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: NODE_IP
          value: http://:30004
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: alertmanager-alertmanager-envsecret-04tog
        image: trov/alertmanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8012
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: alertmanager
        ports:
        - containerPort: 8012
          name: 8012-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8012
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: alertmanager-alertmanager-cmnt-qovc4
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: alertmanager-alertmanager-configmap-wkaqd
        name: alertmanager-alertmanager-cmnt-qovc4
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/appscanner-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: appscanner
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: appscanner
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
    servicegroup-name: appscanner
  name: appscanner
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: appscanner
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: appscanner
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: appscanner
        released-by: gopaddle
        servicegroup: appscanner-ugtwwlv3
        servicetype: gopaddle
      name: appscanner
    spec:
      affinity: {}
      containers:
      - args:
        - |
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > appscanner.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          # echo "----------- start conatainer ------------"
          ./appscanner kube > /var/log/gopaddle/appscanner.log
          tail -f /var/log/gopaddle/appscanner.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: appscanner-appscanner-envsecret-06oce
        image: trov/appscanner:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8022
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: appscanner
        ports:
        - containerPort: 8022
          name: 8022-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8022
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 400M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: appscanner-appscanner-cmnt-xvm8c
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: appscanner-appscanner-configmap-07ocv
        name: appscanner-appscanner-cmnt-xvm8c
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/appworker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: appworker
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: appworker
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
    servicegroup-name: appworker
  name: appworker
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: appworker
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: appworker
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: appworker
        released-by: gopaddle
        servicegroup: appworker-6iwtvs3g
        servicetype: gopaddle
      name: appworker
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > appworker.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          # echo "----------- start conatainer ------------"
          ./appworker kube > /var/log/gopaddle/appworker.log
          tail -f /var/log/gopaddle/appworker.log
        command:
        - /bin/sh
        - -c
        env:
        - name: rabbitmq_user
          value: "admin"
        - name: NODE_IP
          value: http://:30004
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: appworker-appworker-envsecret-ycm42
        image: trov/appworker:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8010
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: appworker
        ports:
        - containerPort: 8010
          name: 8010-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8010
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 400M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: appworker-appworker-cmnt-nt2cg
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: appworker-appworker-configmap-njdt6
        name: appworker-appworker-cmnt-nt2cg
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: cloudmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: cloudmanager
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
    servicegroup-name: cloudmanager
  name: cloudmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: cloudmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: cloudmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: cloudmanager
        released-by: gopaddle
        servicegroup: cloudmanager-7kd52da1
        servicetype: gopaddle
      name: cloudmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > cloudmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./cloudmanager kube > /var/log/gopaddle/cloudmanager.log
          tail -f /var/log/gopaddle/cloudmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: cloudmanager-cloudmanager-envsecret-onluv
        image: trov/cloudmanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8018
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: cloudmanager
        ports:
        - containerPort: 8018
          name: 8018-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8018
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: cloudmanager-cloudmanager-cmnt-15hlp
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: cloudmanager-cloudmanager-configmap-o3c6s
        name: cloudmanager-cloudmanager-cmnt-15hlp
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: clustermanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: clustermanager
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
    servicegroup-name: clustermanager
  name: clustermanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: clustermanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: clustermanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: clustermanager
        released-by: gopaddle
        servicegroup: clustermanager-lee5js63
        servicetype: gopaddle
      name: clustermanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > clustermanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          # echo "----------- start conatainer ------------"
          ./clustermanager kube > /var/log/gopaddle/clustermanager.log
          tail -f /var/log/gopaddle/clustermanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: NODE_IP
          value: http://:30004
        - name: GP_RELEASE
          value: gp-4.2
        - name: DEFAULT_BACKEND_IMAGE
          value: gcr.io/google_containers/defaultbackend:1.4
        envFrom:
        - secretRef:
            name: clustermanager-clustermanager-envsecret-ipy9y
        image: trov/clustermanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8013
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: clustermanager
        ports:
        - containerPort: 8013
          name: 8013-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8013
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 200M
          requests:
            cpu: 50m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: clustermanager-clustermanager-cmnt-ef4ac
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 272
          name: clustermanager-clustermanager-configmap-vadks
        name: clustermanager-clustermanager-cmnt-ef4ac
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/configmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: configmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: configmanager
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
    servicegroup-name: configmanager
  name: configmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: configmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: configmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: configmanager
        released-by: gopaddle
        servicegroup: configmanager-ntkg8uov
        servicetype: gopaddle
      name: configmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > configmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./configmanager kube > /var/log/gopaddle/configmanager.log
          tail -f /var/log/gopaddle/configmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: configmanager-configmanager-envsecret-n8xui
        image: trov/configmanager:multi-arch-4.2.7.lite.2
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: configmanager
        ports:
        - containerPort: 8001
          name: 8001-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: configmanager-configmanager-cmnt-atpo0
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: configmanager-configmanager-configmap-hxdat
        name: configmanager-configmanager-cmnt-atpo0
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/costmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: costmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: costmanager
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
    servicegroup-name: costmanager
  name: costmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: costmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: costmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: costmanager
        released-by: gopaddle
        servicegroup: costmanager-olfgicj6
        servicetype: gopaddle
      name: costmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > costmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./costmanager kube > /var/log/gopaddle/costmanager.log
          tail -f /var/log/gopaddle/costmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: costmanager-costmanager-envsecret-nq4hj
        image: trov/costmanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8011
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: costmanager
        ports:
        - containerPort: 8011
          name: 8011-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8011
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 500M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: costmanager-costmanager-cmnt-gatch
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: costmanager-costmanager-configmap-q1g1s
        name: costmanager-costmanager-cmnt-gatch
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: deploymentmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: deploymentmanager
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
    servicegroup-name: deploymentmanager
  name: deploymentmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: deploymentmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: deploymentmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: deploymentmanager
        released-by: gopaddle
        servicegroup: deploymentmanager-7er149pa
        servicetype: gopaddle
      name: deploymentmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > deploymentmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./deploymentmanager kube > /var/log/gopaddle/deploymentmanager.log
          tail -f /var/log/gopaddle/deploymentmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: rabbitmq_user
          value: "admin"
        - name: NODE_IP
          value: http://:30004
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: deploymentmanager-deploymanager-envsecret-ik60p
        image: trov/deploymanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: deploymanager
        ports:
        - containerPort: 8003
          name: 8003-tcp
          protocol: TCP
        - containerPort: 8017
          name: 8017-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 400M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: deploymentmanager-deploymanager-cmnt-z4ozd
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: deploymentmanager-deploymanager-configmap-ub0p4
        name: deploymentmanager-deploymanager-cmnt-z4ozd
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: domainmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: domainmanager
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
    servicegroup-name: domainmanager
  name: domainmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: domainmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: domainmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: domainmanager
        released-by: gopaddle
        servicegroup: domainmanager-51g7q5yh
        servicetype: gopaddle
      name: domainmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > domainmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./domainmanager kube > /var/log/gopaddle/domainmanager.log
          tail -f /var/log/gopaddle/domainmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: domainmanager-domainmanager-envsecret-bzb3z
        image: trov/domainmanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: domainmanager
        ports:
        - containerPort: 8004
          name: 8004-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: domainmanager-domainmanager-cmnt-8stzt
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: domainmanager-domainmanager-configmap-ieq7l
        name: domainmanager-domainmanager-cmnt-8stzt
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gateway
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: gateway
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
    servicegroup-name: gateway
  name: gateway
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gateway
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gateway
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: gateway
        released-by: gopaddle
        servicegroup: gateway-i11oclpd
        servicetype: gopaddle
      name: gateway
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > gateway.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./gateway kube > /var/log/gopaddle/gateway.log
          tail -f /var/log/gopaddle/gateway.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: gateway-gateway-envsecret-gctwp
        image: trov/gateway:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /status
            port: 8006
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: gateway
        ports:
        - containerPort: 8006
          name: 8006-tcp
          protocol: TCP
        - containerPort: 8017
          name: 8017-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /status
            port: 8006
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: gateway-gateway-cmnt-goefl
        - mountPath: /var/log/gopaddle/
          name: log
      - args:
        - |-
          #!/bin/bash
          sed -i 's,<\/head>,<script>window.VUE_APP_SERVER="'$BASE_SERVER'"<\/script><\/head>,g' index.html
          sed -i 's/<\/head>/<script>window.VUE_APP_GP_RELEASE="'$GP_RELEASE'"<\/script><\/head>/g' index.html
          sed -i 's/<\/head>/<script>window.VUE_APP_INSTALL_SOURCE="'$INSTALL_SOURCE'"<\/script><\/head>/g' index.html
          sed -i 's/<\/head>/<script>window.VUE_APP_GP_CLUSTER_TYPE="'$CLUSTER_TYPE'"<\/script><\/head>/g' index.html
          sed -i 's,<\/head>,<script>window.VUE_APP_GP_NODE_IP="'$NODE_IP'"<\/script><\/head>,g' index.html
          /node_modules/.bin/serve -s -l tcp://0.0.0.0:8080 > current_ui.log
          tail -f current_ui.log
        command:
        - /bin/sh
        - -c
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: GP_RELEASE
          value: "4.2.9"
        - name: BASE_SERVER
          value: http://:30004
        - name: INSTALL_SOURCE
          value: "lite"
        - name: NODE_IP
          value: http://:30004
        - name: CLUSTER_TYPE
          value: standard
        envFrom:
        - secretRef:
            name: gateway-gpkubeux-envsecret-ai5wl
        image: trov/gpkubeux:multi-arch-4.2.7.lite.2
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - curl http://localhost:8080
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: gpkubeux
        ports:
        - containerPort: 8080
          name: 8080-tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - curl http://localhost:8080
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 150m
            memory: 500M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: gateway-gateway-configmap-w4tc1
        name: gateway-gateway-cmnt-goefl
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/gpcore-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gpcore
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: gpcore
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
    servicegroup-name: gpcore
  name: gpcore
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gpcore
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gpcore
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: gpcore
        released-by: gopaddle
        servicegroup: gpcore-bad4slye
        servicetype: gopaddle
      name: gpcore
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add busybox-openrc
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > gpcore.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          # echo "----------- start conatainer ------------"
          ./gpcore kube > /var/log/gopaddle/gpcore.log
          tail -f /var/log/gopaddle/gpcore.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_PORT
          value: "5672"
        - name: NODE_IP
          value: rabbitmq-build.default.svc.cluster.local
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: DOMAIN_NAME
          value: http://:30004
        - name: WEBHOOK_NODE_IP
          value: http://:30007
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: gpcore-core-envsecret-51439
        image: trov/core:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8759
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: core
        ports:
        - containerPort: 8759
          name: 8759-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8759
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 400M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: gpcore-core-cmnt-ww9o5
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: gpcore-core-configmap-5m85p
        name: gpcore-core-cmnt-ww9o5
      - emptyDir: {}
        name: log
---
# Source: gopaddle/charts/gp-core/templates/marketplace-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: marketplace
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    family: servicegroup
    name: marketplace
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
    servicegroup-name: marketplace
  name: marketplace
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: marketplace
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: marketplace
        app-id: appsa666871dcdb46c48d7c939cc17107348e44b
        family: servicegroup
        name: marketplace
        released-by: gopaddle
        servicegroup: marketplace-q5j701mv
        servicetype: gopaddle
      name: marketplace
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > marketplace.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          chmod +x helm
          mv helm /usr/local/bin
          # echo "----------- start conatainer ------------"
          ./marketplace kube > /var/log/gopaddle/marketplace.log
          tail -f /var/log/gopaddle/marketplace.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: marketplace-marketplace-envsecret-rmadj
        image: trov/marketplace:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8023
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: marketplace
        ports:
        - containerPort: 8023
          name: 8023-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8023
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 500M
          requests:
            cpu: 100m
            memory: 200M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: marketplace-marketplace-cmnt-xeiho
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: marketplace-marketplace-configmap-7dszg
        name: marketplace-marketplace-cmnt-xeiho
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nodechecker
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: nodechecker
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
    servicegroup-name: nodechecker
  name: nodechecker
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nodechecker
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nodechecker
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: nodechecker
        released-by: gopaddle
        servicegroup: nodechecker-zsww7hby
      name: nodechecker
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > nodechecker.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./nodechecker kube > /var/log/gopaddle/nodechecker.log
          tail -f /var/log/gopaddle/nodechecker.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: nodechecker-nodechecker-envsecret-jdvy9
        image: trov/nodechecker:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8020
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: nodechecker
        ports:
        - containerPort: 8020
          name: 8020-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8020
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 200M
          requests:
            cpu: 50m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: nodechecker-nodechecker-cmnt-3vhqr
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: nodechecker-nodechecker-configmap-uw45f
        name: nodechecker-nodechecker-cmnt-3vhqr
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: paymentmanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: paymentmanager
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
    servicegroup-name: paymentmanager
  name: paymentmanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: paymentmanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: paymentmanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: paymentmanager
        released-by: gopaddle
        servicegroup: paymentmanager-3yqw8yo3
        servicetype: gopaddle
      name: paymentmanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > paymentmanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./paymentmanager kube > /var/log/gopaddle/paymentmanager.log
          tail -f /var/log/gopaddle/paymentmanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: paymentmanager-paymentmanager-envsecret-cgatk
        image: trov/paymentmanager:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8021
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: paymentmanager
        ports:
        - containerPort: 8021
          name: 8021-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8021
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: paymentmanager-paymentmanager-cmnt-sm2bk
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: paymentmanager-paymentmanager-configmap-f3pct
        name: paymentmanager-paymentmanager-cmnt-sm2bk
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: redis
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
    servicegroup-name: redis
  name: redis
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: redis
        released-by: gopaddle
        servicegroup: redis-b1sjbz8a
      name: redis
    spec:
      affinity: {}
      containers:
      - args:
        - sh
        - -c
        - chmod 0777 /initscript/redis.sh;sh -x /initscript/redis.sh
        env:
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: redis-redis-envsecret-6pack
        image: redis:3.2-alpine
        name: redis
        ports:
        - containerPort: 6379
          name: 6379-tcp
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /usr/local/etc/redis/
          name: redis-redis-cmnt-t52j6
        - mountPath: /initscript
          name: redis-redis-cmnt-vl1p8
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: redis-redis-configmap-kw0jo
        name: redis-redis-cmnt-t52j6
      - configMap:
          defaultMode: 420
          name: redis-redis-configmap-4b01n
        name: redis-redis-cmnt-vl1p8
status: {}
---
# Source: gopaddle/charts/gp-core/templates/usermanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: usermanager
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: usermanager
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
    servicegroup-name: usermanager
  name: usermanager
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: usermanager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: usermanager
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: usermanager
        released-by: gopaddle
        servicegroup: usermanager-l9s3brcs
        servicetype: gopaddle
      name: usermanager
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > usermanager.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./usermanager kube > /var/log/gopaddle/usermanager.log
          tail -f /var/log/gopaddle/usermanager.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: NODE_IP
          value: http://:30004
        - name: GP_RELEASE
          value: gp-4.2
        - name: HELM_INSTALLER_SOURCE
          value: 
        envFrom:
        - secretRef:
            name: usermanager-usermanager-envsecret-w8sg1
        image: trov/usermanager:multi-arch-4.2.9.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8005
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: usermanager
        ports:
        - containerPort: 8005
          name: 8005-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 8005
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: usermanager-usermanager-cmnt-29bp7
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: usermanager-usermanager-configmap-lb79t
        name: usermanager-usermanager-cmnt-29bp7
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: webhook
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: webhook
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
    servicegroup-name: webhook
  name: webhook
  namespace: default
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: webhook
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: webhook
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: webhook
        released-by: gopaddle
        servicegroup: webhook-xvi1s6em
        servicetype: gopaddle
      name: webhook
    spec:
      affinity: {}
      containers:
      - args:
        - |-
          #!/bin/bash
          apk add --no-cache openrc busybox-initscripts
          openrc
          touch /run/openrc/softlevel
          rc-service crond start
          cat <<EOF >/etc/periodic/15min/logcleanscript
          #!/bin/sh
          cd /var/log/gopaddle/
          rm -rf *.tar.gz
          tar -cvzf log.tar.gz *.log
          echo "" > webhook.log
          EOF
          chmod a+x /etc/periodic/15min/logcleanscript
          echo "0 0 * * * /etc/periodic/15min/logcleanscript > /var/log/cron.log 2>&1" >> logclean.cron
          /usr/bin/crontab logclean.cron

          ./webhook kube > /var/log/gopaddle/webhook.log
          tail -f /var/log/gopaddle/webhook.log
        command:
        - /bin/sh
        - -c
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: "spec.nodeName"
        - name: REPLICA_IP
          valueFrom:
            fieldRef:
              fieldPath: "status.podIP"
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: "status.hostIP"
        - name: APP_NAME
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: webhook-webhook-envsecret-1bzkl
        image: trov/webhook:multi-arch-4.2.7.lite.1
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        name: webhook
        ports:
        - containerPort: 9090
          name: 9090-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/status
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 10m
            memory: 50M
        securityContext: {}
        volumeMounts:
        - mountPath: /app/config
          name: webhook-webhook-cmnt-i74x0
        - mountPath: /var/log/gopaddle/
          name: log
      imagePullSecrets:
      - name: gcr-json-key
      securityContext: {}
      volumes:
      - configMap:
          defaultMode: 420
          name: webhook-webhook-configmap-enwj7
        name: webhook-webhook-cmnt-i74x0
      - emptyDir: {}
        name: log
status: {}
---
# Source: gopaddle/charts/gp-core/templates/activitymanager-hpa-65p5w.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: activitymanager-hpa-65p5w
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: activitymanager-hpa-65p5w
    released-by: gopaddle
    servicegroup: activitymanager-muv5ktiw
  name: activitymanager-hpa-65p5w
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: activitymanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/alertmanager-hpa-rzbbi.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: alertmanager-hpa-rzbbi
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: alertmanager-hpa-rzbbi
    released-by: gopaddle
    servicegroup: alertmanager-697i4d88
  name: alertmanager-hpa-rzbbi
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: alertmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/appscanner-hpa-06lb8.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: appscanner-hpa-06lb8
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appscanner-hpa-06lb8
    released-by: gopaddle
    servicegroup: appscanner-ugtwwlv3
  name: appscanner-hpa-06lb8
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: appscanner
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/appworker-hpa-tqc3q.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: appworker-hpa-tqc3q
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: appworker-hpa-tqc3q
    released-by: gopaddle
    servicegroup: appworker-6iwtvs3g
  name: appworker-hpa-tqc3q
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: appworker
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/cloudmanager-hpa-05b74.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: cloudmanager-hpa-05b74
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: cloudmanager-hpa-05b74
    released-by: gopaddle
    servicegroup: cloudmanager-7kd52da1
  name: cloudmanager-hpa-05b74
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: cloudmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/clustermanager-hpa-pyywg.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: clustermanager-hpa-pyywg
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: clustermanager-hpa-pyywg
    released-by: gopaddle
    servicegroup: clustermanager-lee5js63
  name: clustermanager-hpa-pyywg
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: clustermanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/configmanager-hpa-50f4w.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: configmanager-hpa-50f4w
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: configmanager-hpa-50f4w
    released-by: gopaddle
    servicegroup: configmanager-ntkg8uov
  name: configmanager-hpa-50f4w
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: configmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/costmanager-hpa-12c13.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: costmanager-hpa-12c13
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: costmanager-hpa-12c13
    released-by: gopaddle
    servicegroup: costmanager-olfgicj6
  name: costmanager-hpa-12c13
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: costmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/deploymentmanager-hpa-yl5rh.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: deploymentmanager-hpa-yl5rh
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: deploymentmanager-hpa-yl5rh
    released-by: gopaddle
    servicegroup: deploymentmanager-7er149pa
  name: deploymentmanager-hpa-yl5rh
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: deploymentmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/domainmanager-hpa-yf3nd.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: domainmanager-hpa-yf3nd
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: domainmanager-hpa-yf3nd
    released-by: gopaddle
    servicegroup: domainmanager-51g7q5yh
  name: domainmanager-hpa-yf3nd
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: domainmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/gateway-hpa-y5o12.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: gateway-hpa-y5o12
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gateway-hpa-y5o12
    released-by: gopaddle
    servicegroup: gateway-i11oclpd
  name: gateway-hpa-y5o12
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: gateway
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/gpcore-hpa-soj4a.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: gpcore-hpa-soj4a
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: gpcore-hpa-soj4a
    released-by: gopaddle
    servicegroup: gpcore-bad4slye
  name: gpcore-hpa-soj4a
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: gpcore
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/marketplace-hpa-ut6w1.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: marketplace-hpa-ut6w1
    app-id: appsa666871dcdb46c48d7c939cc17107348e44b
    name: marketplace-hpa-ut6w1
    released-by: gopaddle
    servicegroup: marketplace-q5j701mv
  name: marketplace-hpa-ut6w1
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: marketplace
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/nodechecker-hpa-tdm7x.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: nodechecker-hpa-tdm7x
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: nodechecker-hpa-tdm7x
    released-by: gopaddle
    servicegroup: nodechecker-zsww7hby
  name: nodechecker-hpa-tdm7x
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: nodechecker
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/paymentmanager-hpa-vvqrl.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: paymentmanager-hpa-vvqrl
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: paymentmanager-hpa-vvqrl
    released-by: gopaddle
    servicegroup: paymentmanager-3yqw8yo3
  name: paymentmanager-hpa-vvqrl
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: paymentmanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/redis-hpa-6pd34.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: redis-hpa-6pd34
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: redis-hpa-6pd34
    released-by: gopaddle
    servicegroup: redis-b1sjbz8a
  name: redis-hpa-6pd34
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: redis
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/usermanager-hpa-0tv1i.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: usermanager-hpa-0tv1i
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: usermanager-hpa-0tv1i
    released-by: gopaddle
    servicegroup: usermanager-l9s3brcs
  name: usermanager-hpa-0tv1i
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: usermanager
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/webhook-hpa-riga1.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  labels:
    app: webhook-hpa-riga1
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    name: webhook-hpa-riga1
    released-by: gopaddle
    servicegroup: webhook-xvi1s6em
  name: webhook-hpa-riga1
  namespace: default
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    kind: Deployment
    name: webhook
  targetCPUUtilizationPercentage: 70
status:
  currentReplicas: 0
  desiredReplicas: 0
---
# Source: gopaddle/charts/gp-core/templates/esearch-statefulset-multi-arch.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: esearch
  namespace: default
  labels:
    app: esearch
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: esearch
    released-by: gopaddle
    servicegroup: esearch-lz5zjizb
    servicegroup-name: esearch
spec:
  serviceName: esearch-headless
  replicas: 1
  selector:
    matchLabels:
      component: esearch
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: esearch
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: esearch
        released-by: gopaddle
        servicegroup: esearch-lz5zjizb
        component: esearch
      name: esearch
    spec:
      affinity: {}
      containers:
      - name: esearch
        image: elasticsearch:7.12.0
        imagePullPolicy: IfNotPresent
        env:
        - name: discovery.type
          value: single-node
        - name: ELASTIC_PASSWORD
          value: cGFzc3dvcmQ
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        volumeMounts:
        - name: elasticsearch-config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: data
          mountPath: /usr/share/elasticsearch/data
        resources:
          limits:
            cpu: "1"
            memory: 2G
          requests:
            cpu: 300m
            memory: 500M
      # Allow non-root user to access PersistentVolume
      securityContext:
        fsGroup: 0
      restartPolicy: Always
      volumes:
      - name: elasticsearch-config
        configMap:
          name: elasticsearch-config
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      labels:
        app: data
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        name: esearch
        released-by: gopaddle
        servicegroup: esearch-lz5zjizb
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        limits:
          storage: 20Gi
        requests:
          storage: 10Gi
      storageClassName: 
      volumeMode: Filesystem
    status: {}
---
# Source: gopaddle/charts/gp-core/templates/influxdb-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: influxdb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: influxdb
    released-by: gopaddle
    servicegroup: influxdb-6hu2bvhe
    servicegroup-name: influxdb
  name: influxdb
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: influxdb
  serviceName: influxdb-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: influxdb
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: influxdb
        released-by: gopaddle
        servicegroup: influxdb-6hu2bvhe
      name: influxdb
    spec:
      affinity: {}
      containers:
      - env:
        - name: INFLUXDB_ADMIN_PASSWORD
          value: "cGFzc3dvcmQ"
        - name: INFLUXDB_ADMIN_USER
          value: "admin"
        - name: INFLUXDB_HTTP_AUTH_ENABLED
          value: "true"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: influxdb-influxdb-envsecret-3nazp
        image: influxdb:1.7.10
        name: influxdb
        ports:
        - containerPort: 8086
          name: 8086-tcp
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: 100m
            memory: 100M
        securityContext: {}
        volumeMounts:
        - mountPath: /etc/influxdb
          name: influxdb-influxdb-cmnt-i0n8t
        - mountPath: /var/lib/influxdb
          name: data
      securityContext: {}
      subdomain: influxdb
      volumes:
      - configMap:
          defaultMode: 420
          name: influxdb-influxdb-configmap-ngvkq
        name: influxdb-influxdb-cmnt-i0n8t
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      labels:
        app: data
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        name: influxdb
        released-by: gopaddle
        servicegroup: influxdb-6hu2bvhe
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        limits:
          storage: 20Gi
        requests:
          storage: 10Gi
      storageClassName: 
      volumeMode: Filesystem
    status: {}
---
# Source: gopaddle/charts/gp-core/templates/mongodb-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: mongodb
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: mongodb
    released-by: gopaddle
    servicegroup: mongodb-sr2ai9v6
    servicegroup-name: mongodb
  name: mongodb
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: mongodb
  serviceName: mongodb-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mongodb
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: mongodb
        released-by: gopaddle
        servicegroup: mongodb-sr2ai9v6
      name: mongodb
    spec:
      affinity: {}
      containers:
      - args:
        - sh
        - -c
        - chmod 0777 /initscript/init.sh;/bin/bash -x /initscript/init.sh
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_LITE_USERNAME
          value: "lite"
        - name:  GP_EDITION
          value: "Lite"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: mongodb-mongo-envsecret-bd5xi
        image: mongo:4.0.4
        name: mongo
        ports:
        - containerPort: 27017
          name: 27017-tcp
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 2G
          requests:
            cpu: 100m
            memory: 500M
        securityContext: {}
        volumeMounts:
        - mountPath: /etc/mongodb/
          name: mongodb-mongo-cmnt-bwgdu
        - mountPath: /initscript
          name: mongodb-mongo-cmnt-g18zp
        - mountPath: /data/db
          name: data
        - mountPath: /backupscript
          name: backupscript
      initContainers:
      - args:
        - sh
        - -c
        - cp -a /cronjobscript/.  /backupscript/
        env:
        - name: GP_RELEASE
          value: gp-4.2
        - name:  GP_EDITION
          value: "Lite"
        envFrom:
        - secretRef:
            name: mongodb-mongo-init-envsecret-b99qs
        image: mongo:4.0.4
        name: mongo-init
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: 100m
            memory: 100M
        securityContext: {}
        volumeMounts:
        - mountPath: /cronjobscript
          name: mongodb-mongo-init-cmnt-6fl9r
        - mountPath: /backupscript
          name: backupscript
      securityContext: {}
      subdomain: mongodb
      volumes:
      - configMap:
          defaultMode: 420
          name: mongodb-mongo-init-configmap-346jg
        name: mongodb-mongo-init-cmnt-6fl9r
      - configMap:
          defaultMode: 420
          name: mongodb-mongo-configmap-s79ue
        name: mongodb-mongo-cmnt-bwgdu
      - configMap:
          defaultMode: 420
          name: mongodb-mongo-configmap-hp8xu
        name: mongodb-mongo-cmnt-g18zp
      - emptyDir: {}
        name: backupscript
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      labels:
        app: data
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        name: mongodb
        released-by: gopaddle
        servicegroup: mongodb-sr2ai9v6
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        limits:
          storage: 20Gi
        requests:
          storage: 10Gi
      storageClassName: 
      volumeMode: Filesystem
    status: {}
---
# Source: gopaddle/charts/gp-core/templates/rabbitmq-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq
    app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
    family: servicegroup
    name: rabbitmq
    released-by: gopaddle
    servicegroup: rabbitmq-ijdwt5eu
    servicegroup-name: rabbitmq
  name: rabbitmq
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: rabbitmq
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        family: servicegroup
        name: rabbitmq
        released-by: gopaddle
        servicegroup: rabbitmq-ijdwt5eu
      name: rabbitmq
    spec:
      affinity: {}
      containers:
      - args:
        - sh
        - -c
        - chmod 0777 /initscript/rabbitmq.sh;sh -x /initscript/rabbitmq.sh
        env:
        - name: RABBITMQ_DEFAULT_PASS
          value: "cGFzc3dvcmQ"
        - name: RABBITMQ_DEFAULT_USER
          value: "admin"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: rabbitmq-rabbitmq-envsecret-tgmx3
        image: rabbitmq:3.8.5
        name: rabbitmq
        ports:
        - containerPort: 5672
          name: 5672-tcp
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: 100m
            memory: 100M
        securityContext: {}
        volumeMounts:
        - mountPath: /initscript
          name: rabbitmq-rabbitmq-cmnt-5h2yx
        - mountPath: /var/lib/rabbitmq/
          name: data
      securityContext: {}
      subdomain: rabbitmq
      volumes:
      - configMap:
          defaultMode: 420
          name: rabbitmq-rabbitmq-configmap-lc0ok
        name: rabbitmq-rabbitmq-cmnt-5h2yx
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      labels:
        app: data
        app-id: appsab909ba8cbe61c46e1cb3f9c4dffd24b038a
        name: rabbitmq
        released-by: gopaddle
        servicegroup: rabbitmq-ijdwt5eu
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        limits:
          storage: 20Gi
        requests:
          storage: 10Gi
      storageClassName: 
      volumeMode: Filesystem
    status: {}
---
# Source: gopaddle/charts/gp-rabbitmq/templates/rabbitmq-build-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: rabbitmq-build
    family: servicegroup
    name: rabbitmq-build
    released-by: gopaddle
    namespace: default
    servicegroup: rabbitmq-build-bz6w0o9l
    servicegroup-name: rabbitmq-build
  name: rabbitmq-build
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: rabbitmq-build
  serviceName: rabbitmq-build
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: rabbitmq-build
        family: servicegroup
        name: rabbitmq-build
        namespace: default
        servicegroup: rabbitmq-build-bz6w0o9l
      name: rabbitmq-build
    spec:
      affinity: {}
      containers:
      - args:
        - sh
        - -c
        - chmod 0777 /initscript/rabbitmq.sh;sh -x /initscript/rabbitmq.sh
        env:
        - name: RABBITMQ_DEFAULT_PASS
          value: "cGFzc3dvcmQ"
        - name: RABBITMQ_DEFAULT_USER
          value: "admin"
        - name: GP_RELEASE
          value: gp-4.2
        envFrom:
        - secretRef:
            name: rabbitmq-build-rabbitmq-envsecret-4jqe5
        image: rabbitmq:3.8.5
        name: rabbitmq
        ports:
        - containerPort: 5672
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 2G
          requests:
            cpu: 100m
            memory: 500M
        securityContext: {}
        volumeMounts:
        - mountPath: /initscript
          name: rabbitmq-build-rabbitmq-cmnt-yq8sl
        - mountPath: /var/lib/rabbitmq/
          name: data
      securityContext: {}
      subdomain: rabbitmq-build
      volumes:
      - configMap:
          defaultMode: 420
          name: rabbitmq-build-rabbitmq-configmap-9a13l
        name: rabbitmq-build-rabbitmq-cmnt-yq8sl
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      labels:
        app: data
        name: rabbitmq-build
        namespace: default
        servicegroup: rabbitmq-build-bz6w0o9l
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        limits:
          storage: 20Gi
        requests:
          storage: 10Gi
      storageClassName: 
      volumeMode: Filesystem
    status: {}
---
# Source: gopaddle/charts/gp-core/templates/emailer-job.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: emailer-job
  namespace: default
spec:
  schedule: "* 19 * * 5"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - args:
            - |-
              #!/bin/bash
              ARCH=`uname -m` && \
                if [ "$ARCH" == "x86_64" ]; then \
                  cp ./kubeaudit.amd64 ./kubeaudit; \
                else \
                  echo "unknown arch" && \
                  cp ./kubeaudit.arm64 ./kubeaudit; \
                fi
              chmod +x ./kubeaudit ./emailservice ./runAudit.sh
              sh -x ./runAudit.sh
            command:
            - /bin/sh
            - -c
            env:
            - name: NODE_IP
              value: http://:30003
            - name: GP_RELEASE
              value: "4.2.9"
            image: trov/emailer:4.2.7.lite.17
            imagePullPolicy: IfNotPresent
            name: emailer
          restartPolicy: OnFailure
          imagePullSecrets:
          - name: gcr-json-key
