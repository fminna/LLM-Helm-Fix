---
# Source: radar-jdbc-connector/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-radar-jdbc-connector
  labels:
    helm.sh/chart: radar-jdbc-connector-0.5.1
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.5.2"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: radar-jdbc-connector-0.5.1
      app.kubernetes.io/name: radar-jdbc-connector
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/version: "10.5.2"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: cp-kafka
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: cp-schema-registry
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'default'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: timescaledb-postgresql
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  policyTypes:
  - Egress
---
# Source: radar-jdbc-connector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-radar-jdbc-connector
  labels:
    helm.sh/chart: radar-jdbc-connector-0.5.1
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.5.2"
    app.kubernetes.io/managed-by: Helm
data:
  connector.properties: |
    # Kafka connector configuration
    name = radar-jdbc-sink

    tasks.max = 2

    # General connection parameters
    connection.url=jdbc:postgresql://timescaledb-postgresql-headless:5432/grafana-metrics
    connection.user=grafana
    connection.password=password
    dialect.name = TimescaleDBDatabaseDialect
    max.retries = 15
    # Wait 10 minutes before retrying failed task
    retry.backoff.ms = 600000
    connection.attempts = 15
    # Wait 10 minutes before attempting connection
    connection.backoff.ms = 600000
    # Kafka connector configuration
    connector.class = io.confluent.connect.jdbc.JdbcSinkConnector
    insert.mode = upsert
    # Topics that will be consumed
    topics = android_phone_relative_location, android_phone_battery_level, connect_upload_altoida_summary, connect_fitbit_intraday_heart_rate, connect_fitbit_intraday_steps
    table.name.format = ${topic}
    auto.create = true
    pk.mode = record_value
    pk.fields = time, userId, projectId
    transforms=mergeKey,timestamp
    transforms.mergeKey.type=org.radarbase.kafka.connect.transforms.MergeKey
    transforms.timestamp.type=org.radarbase.kafka.connect.transforms.TimestampConverter
    transforms.timestamp.fields=time, timeReceived, timeCompleted, timestamp

    key.converter = io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url = http://cp-schema-registry:8081
    value.converter = io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url = http://cp-schema-registry:8081
    errors.log.enable = true
    errors.log.include.messages = true
    errors.tolerance = all
  healthcheck.sh: |
    #!/bin/sh
    STATUS=$(curl -sf localhost:8083/connectors/radar-jdbc-sink/status | grep -o '\"state\":\"[^\"]*\"')
    if echo "$STATUS" | tr '\\n' ',' | grep -q FAILED; then
      exit 1
    elif [ $(echo "$STATUS" | grep RUNNING | wc -l) -le 1 ]; then
      exit 1
    fi
---
# Source: radar-jdbc-connector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-radar-jdbc-connector
  labels:
    helm.sh/chart: radar-jdbc-connector-0.5.1
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.5.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8083
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
---
# Source: radar-jdbc-connector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-radar-jdbc-connector
  labels:
    helm.sh/chart: radar-jdbc-connector-0.5.1
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.5.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: radar-jdbc-connector
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/configmap: 6ca4b44eb302f439f8dade4a215970f7a27b37c0cde5ee98a098e3ac5d85ee14
      labels:
        app.kubernetes.io/name: radar-jdbc-connector
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - radar-jdbc-connector
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: radar-jdbc-connector
          securityContext:
            {}
          image: "radarbase/radar-jdbc-connector:10.5.2"
          imagePullPolicy: IfNotPresent
          env:
          - name: CONNECT_BOOTSTRAP_SERVERS
            value: "PLAINTEXT://cp-kafka-headless:9092"
          - name: CONNECT_REST_PORT
            value: "8083"
          - name: CONNECT_GROUP_ID
            value: "default"
          - name: CONNECT_CONFIG_STORAGE_TOPIC
            value: "default.config"
          - name: CONNECT_OFFSET_STORAGE_TOPIC
            value: "default.offsets"
          - name: CONNECT_STATUS_STORAGE_TOPIC
            value: "default.status"
          - name: CONNECT_KEY_CONVERTER
            value: "io.confluent.connect.avro.AvroConverter"
          - name: CONNECT_VALUE_CONVERTER
            value: "io.confluent.connect.avro.AvroConverter"
          - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
            value: "http://cp-schema-registry:8081"
          - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
            value: "http://cp-schema-registry:8081"
          - name: CONNECT_OFFSET_STORAGE_FILE_FILENAME
            value: "/var/lib/kafka-connect-jdbc/logs/connect.offsets"
          - name: CONNECT_REST_ADVERTISED_HOST_NAME
            value: "radar-jdbc-connector"
          - name: CONNECT_CONSUMER_MAX_POLL_RECORDS
            value: "500"
          - name: CONNECT_CONSUMER_MAX_POLL_INTERVAL_MS
            value: "300000"
          - name: CONNECT_CONSUMER_SESSION_TIMEOUT_MS
            value: "10000"
          - name: CONNECT_CONSUMER_HEARTBEAT_INTERVAL_MS
            value: "3000"
          - name: CONNECT_PLUGIN_PATH
            value: /usr/share/kafka-connect/plugins
          - name: CONNECT_LOG4J_ROOT_LOGLEVEL
            value: "INFO"
          - name: KAFKA_BROKERS
            value: "3"
          - name: CONNECT_LOG4J_LOGGERS
            value: "org.reflections=ERROR"
          - name: CONNECTOR_PROPERTY_FILE_PREFIX
            value: "radar-jdbc-sink/connector"
          - name: KAFKA_HEAP_OPTS
            value: "-Xms1500m"
          - name: CONNECT_SECURITY_PROTOCOL
            value: PLAINTEXT
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/kafka-connect/radar-jdbc-sink/healthcheck.sh
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/kafka-connect/radar-jdbc-sink/healthcheck.sh
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 1Gi
          volumeMounts:
            - name: config
              mountPath: /etc/kafka-connect/radar-jdbc-sink
      volumes:
        - name: config
          configMap:
            name: release-name-radar-jdbc-connector
---
# Source: radar-jdbc-connector/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-radar-jdbc-connector-test-connection"
  labels:
    helm.sh/chart: radar-jdbc-connector-0.5.1
    app.kubernetes.io/name: radar-jdbc-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "10.5.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-radar-jdbc-connector:8083']
  restartPolicy: Never
