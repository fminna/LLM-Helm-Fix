---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: kubefed-admission-webhook
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: default
  name: kubefed-admission-webhook-serving-cert
type: kubernetes.io/tls
stringData:
  tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDkTCCAnmgAwIBAgIQQ8g74JM7Uatq+78l626GRzANBgkqhkiG9w0BAQsFADAn\nMSUwIwYDVQQDExxrdWJlZmVkLWFkbWlzc2lvbi13ZWJob29rLWNhMB4XDTI0MDUx\nNTA4NDQzMloXDTM0MDUxMzA4NDQzMlowKTEnMCUGA1UEAxMecmVsZWFzZS1uYW1l\nLWFkbWlzc2lvbi13ZWJob29rMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEA2T4KKGdGCDd7dQJbq0IV6HkgMsNBWMGfIgJhh4U96PdYCj/h30rojCHLDWxx\n/2rGWCpCFfs+7pHRu67NNp54X3fa82nR+yhY+imAyN1fh3DFgLEtnIaOVmwEyWRb\nkj7GrQma5DADMY5faFNzWkG7fcBpccHiAKSOBBQ8J1dZXA8XWV80RatRLfm6ZCMv\nSetKWhxOOKr5B7Lcf3idj/B1KjwCtkC6oPzGILK0aga33EtNTBHiRr4OYTitxYVc\nwVvzH+o4cwG0vctAujbFxr4YqL/qivRDl4KOsmPFkzsqjkAIQFIvdPBDL115uUQd\np62YMj6JIq6rjv7VHX0dmO/1fQIDAQABo4G2MIGzMA4GA1UdDwEB/wQEAwIFoDAd\nBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNV\nHSMEGDAWgBTFrIS4oNy905pEWaNAAu0O1+vb0jBTBgNVHREETDBKgiFrdWJlZmVk\nLWFkbWlzc2lvbi13ZWJob29rLmRlZmF1bHSCJWt1YmVmZWQtYWRtaXNzaW9uLXdl\nYmhvb2suZGVmYXVsdC5zdmMwDQYJKoZIhvcNAQELBQADggEBAG5o+L84XO4M6NQq\n0NAYugvIN1TY36TLxmyyS5mBvPlsZ6c2MxRWC+/8fhrLb0Qm3qHKs7yv3GnMWABd\nACtaFul6fqJcbXvic97KT/+O/FVYpKzUz2OgzqDDFHUyeYEwGtYk4GoR9jIVd3ao\n6s/LG3lUXDz8+MATnp5QhwoEyU7yLxB9/Z6gmON2iz3CRpwA6nMyVTo9CbfsFD2E\nHa+GXh9UTqsyQRK+FYfIKww87mtc6sRR/3N3qqULd2I8pBK00FhOgf/j2kJ5DVTr\nWGoynZYEBY9apSBNQn32KwW/5aLqwwUNfljbSK37sVwYcoiGUGt3BowYY+M6Dbl4\n/xBvlBU=\n-----END CERTIFICATE-----\n"
  tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA2T4KKGdGCDd7dQJbq0IV6HkgMsNBWMGfIgJhh4U96PdYCj/h\n30rojCHLDWxx/2rGWCpCFfs+7pHRu67NNp54X3fa82nR+yhY+imAyN1fh3DFgLEt\nnIaOVmwEyWRbkj7GrQma5DADMY5faFNzWkG7fcBpccHiAKSOBBQ8J1dZXA8XWV80\nRatRLfm6ZCMvSetKWhxOOKr5B7Lcf3idj/B1KjwCtkC6oPzGILK0aga33EtNTBHi\nRr4OYTitxYVcwVvzH+o4cwG0vctAujbFxr4YqL/qivRDl4KOsmPFkzsqjkAIQFIv\ndPBDL115uUQdp62YMj6JIq6rjv7VHX0dmO/1fQIDAQABAoIBAQCZOhIOF3GlAAU7\nLbOcotszAqQ8Sc5AnSjx4v4JiWh2dmeJqy9UwNAvbvJ6gGATyKsnqn68ZF8qBH4L\nRCsIeFPs+mvbvmrWHMpNgJKOmt3zeQ5FTDMgsSOaP0xNBFU2XMLjb9/pTRgjjwkq\nW5oEMlLdSqbVDuyqiWaF6APZt9mWfN26Mhd5NPaR2KVBNV8YH9r8xlg+1FTSYrHZ\nhN9xrByd4SPll7BXTNb7AXnZP3S99qadsP7q936QOqN1UKzy6Jma/CcS3o0dcGm0\nX3nzO6oj5WNqZ6u7F3Ndafed53d/PR9lemkVWZwwzemT9px0XNNBbV2vFfCdVd7i\n8whqdRihAoGBAObY5j3GOuUARiLupQf4m6aCJ+2JjxqQfPBdgDWc5PkIK1BSVmbE\n2mPBWlSEVfoRdjRJDpvv4GiYEOLcZuwgvyhuqc59y1NsM14ZXJBkfGSnBbH9p8zD\niqPzTSzPV+iJ655pdehnVDsN7c02ZPpfC4bTDSOGcCByd0hs3KdS0CjVAoGBAPDp\np1XhHNp7hD7gnQQR+jJ4E6EUlhpcsl5OOiCSKzjpS5Lsk5WQd0KUMtaFGo73EZ17\nXpswbzhMadvTBs0/1g8Hl6Zx92UlR6GmkRTPZhB+9UzIrCgggR21hDwima/pYLXJ\nLq6KOuxX8SGMlwpHesbmNBwn1yjGYCwYS6S/R24JAoGAEQjIVJ6gEe3nPwSlIOVz\nduH72EdiS++FiKcdotck/ktgBtlMjuDPzLSj2cC6J23KbylE7rTQtmciN9tTrPDt\nqiogVaBqtIkzcSol7nG7zCGXBf9VtoJnZJm7hCb4sawbuuDFVpTpXkI03gO5h9Aj\npZtFSO3OsFZB/xIpZh9yRNECgYAVIwrxd/zGFow10BM2pjUjdHGUcm/xBC0KJSbo\ncKqmJaHh1CvmtXQhPUtwkuEPphG/lXFpgEhh0iJ/jPZNz8oCK5JcoicokqrEPg8A\nmmnEDL+M6xZftupdJu3hMM/3JSy9Ble4LJya2+RmIyWlWzwkc1IjHkO8ahtKAx+v\n5rBnsQKBgDAolH6U0/72h0FOmPMPNBhX/rq7/rSJvxJ6nEK3Ys+PfqpskvWVbJAO\nTdGru8kbnq7Eb/BFOGEfpCWHqlGHZlk0pCtOWUPIMb93HS4pEMHJq+VcqwFTI5hE\nVUAd5f9k07igVTjmcHcrputT9GBLHCjiBT3LSwHD3HKRMImQSQun\n-----END RSA PRIVATE KEY-----\n"
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kubefed-admin
rules:
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: kubefed-edit
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - create
  - patch
  - delete
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kubefed-view
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-role
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
# This role provides the necessary permissions to create admission reviews.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: system:kubefed:admission-requester

rules:
- apiGroups:
  - validation.core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - create
- apiGroups:
  - mutation.core.kubefed.io
  resources:
  - kubefedconfigs
  verbs:
  - create
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubefed-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefed-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# name using the namespace. This is needed because admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:auth-delegator

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
# This clusterrolebinding grants permissions for the admission webhook to create
# admission reviews on behalf of the system:anonymous user.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:anonymous-auth

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:kubefed:admission-requester

subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-config-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
# Only need access to these core namespaced resources in the KubeFed system
# namespace regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-admission-webhook-role
  namespace: default
rules:
- apiGroups:
  - core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Grant admission webhook access to core.kubefed.io in the KubeFed system
# namespace only, regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-admission-webhook-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-admission-webhook-role
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Allow the admission webhook to read the config for terminating
# authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique resource name in
# the kube-system namespace using the namespace. This is needed because
# admission-webhooks do not currently support the ability to have
# namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:apiextension-viewer

  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-admission-webhook
  namespace: default
spec:
  selector:
    kubefed-admission-webhook: "true"
  ports:
  - port: 443
    targetPort: 8443
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-controller-manager-metrics-service
  namespace: default
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  selector:
    kubefed-control-plane: "controller-manager"
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubefed-controller-manager
  namespace: default
  labels:
    kubefed-control-plane: controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      kubefed-control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      labels:
        kubefed-control-plane: controller-manager
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-controller
      containers:
      - command:
        - /hyperfed/controller-manager
        - "--v=2"
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        name: controller-manager
        ports:
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 3
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 64Mi
      terminationGracePeriodSeconds: 10
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: kubefed-admission-webhook
  labels:
    kubefed-admission-webhook: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      kubefed-admission-webhook: "true"
  template:
    metadata:
      labels:
        kubefed-admission-webhook: "true"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-admission-webhook
      containers:
      - name: admission-webhook
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - "/hyperfed/webhook"
        - "--secure-port=8443"
        - "--cert-dir=/var/serving-cert/"
        - "--v=8"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubefed-admission-webhook-serving-cert
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: clusterroles.rbac.authorization.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedClusterRole
    pluralName: federatedclusterroles
    scope: Cluster
    version: v1beta1
  propagation: Enabled
  targetType:
    group: rbac.authorization.k8s.io
    kind: ClusterRole
    pluralName: clusterroles
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: configmaps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedConfigMap
    pluralName: federatedconfigmaps
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ConfigMap
    pluralName: configmaps
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: deployments.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedDeployment
    pluralName: federateddeployments
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: Deployment
    pluralName: deployments
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: ingresses.networking.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedIngress
    pluralName: federatedingresses
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: networking.k8s.io
    kind: Ingress
    pluralName: ingresses
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: jobs.batch
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedJob
    pluralName: federatedjobs
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: batch
    kind: Job
    pluralName: jobs
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: namespaces
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedNamespace
    pluralName: federatednamespaces
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Namespace
    pluralName: namespaces
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: replicasets.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedReplicaSet
    pluralName: federatedreplicasets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: ReplicaSet
    pluralName: replicasets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: secrets
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedSecret
    pluralName: federatedsecrets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Secret
    pluralName: secrets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: serviceaccounts
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedServiceAccount
    pluralName: federatedserviceaccounts
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ServiceAccount
    pluralName: serviceaccounts
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: services
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedService
    pluralName: federatedservices
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Service
    pluralName: services
    scope: Namespaced
    version: v1
---
# Source: kubefed/charts/controllermanager/templates/kubefedconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedConfig
metadata:
  name: kubefed
  namespace: default
spec:
  scope: "Cluster"
  controllerDuration:
    availableDelay: "20s"
    unavailableDelay: "60s"
    cacheSyncTimeout: "5m"
  leaderElect:
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "5s"
    resourceLock: "configmaps"
  clusterHealthCheck:
    period: "10s"
    failureThreshold: 3
    successThreshold: 1
    timeout: "3s"
  syncController:
    maxConcurrentReconciles: 1
    adoptResources: "Enabled"
  statusController:
    maxConcurrentReconciles: 1
  featureGates:
  - name: PushReconciler
    configuration: "Enabled"
  - name: SchedulerPreferences
    configuration: "Enabled"
  # NOTE: Commented feature gate to fix https://github.com/kubernetes-sigs/kubefed/issues/1333
  #- name: RawResourceStatusCollection
  #  configuration: "Disabled"
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
# The same comments for ValidatingWebhookConfiguration apply here to
# MutatingWebhookConfiguration.
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: mutation.core.kubefed.io
  annotations:
webhooks:
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /default-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU9xZk0xVTI2NnJ0TUNOZ24yeUtMZU13RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMQpNVFV3T0RRME16SmFGdzB6TkRBMU1UTXdPRFEwTXpKYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMEQ3RzhIZkw2RjVJdG5iNnhpWTA4VmFLZktNZTExY0p1RHdZY1A3eVRtQVN3eHBNWWgzRDFjZUpsdmZXWAppcWVaNi8yMEgycHJIZFFKYUZCUFJEL25RYldEZm5xbGR2VUZaU1dwNXAwSzRZR1I4TmNmNkYyUkpZRThmNzhlCktWNWJXRndndDRKYTVRZU9zZzM4KzczRmpxcnptS1VWSVl5SmRwbm9qUk1DQi9zSFEyYllDb0RiWnpWK0w4NzQKT1pVVHE5cXJJUmttV0ZsdnhYL2gybUs5LzRDNk1JU3dreDZyS20zcno4N3d2T3J2N1FNNW1GUnZmYnk4c09UTApGSGMyRE1mNzZidHdiYWpEak9YSis1VThxRlB3eDZwYkZocno5YVVHRDZLTG45cmJOc1FjL29SZnhUTm5Edmg5CkhwRjBNR21yOVZpTzVxWFZUTjNuTFlNL0FnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVXhheUV1S0RjdmRPYVJGbWpRQUx0RHRmcjI5SXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRENkCmo2ZUQ2RXMvcGdKaFhUWkQ4aFlzak1sWWtFSFNXd0Jwd2YwVXZMVmNpamthd0tqOUJzVGZLNDVtcWVpOEZPWE0KOU9NUitPeDJYOFVWM0RPclpTbHo3SmhkNENxNDBoRnVDS2tDYnFMaVVkQTloRWZqbkw5U3c0R1dGMmlyNkdZeQpCc0ZaNjdoVmdXY0RaOVZZMXZpVHhUbzdkWEdqMWl6U1h6ZnBid3JGTEN4R3BjaCt1eFVBdFJBZW44eWlIR3E0CjZ6L3Vhd3d0R3czam9ETDRLaExkK3NHV3hhTGRwL0Z4Qk1tMFQrdExNY2lHY0Zyc3dwSGFNWDdlOGJWaTNkVEIKVDdGRjEwVTRCT2QyTjFFby9FYnh1THVoUE81ZGVQSklsS3BjTEUzbjV3YUwwbE4zUW1yTDA0N2VFaUJINHAwOApJVzV4KzZPeXR0dFNONnNwZ0FJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# using the namespace.
  name: validations.core.kubefed.io
  annotations:
webhooks:
- name: federatedtypeconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-federatedtypeconfigs
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU9xZk0xVTI2NnJ0TUNOZ24yeUtMZU13RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMQpNVFV3T0RRME16SmFGdzB6TkRBMU1UTXdPRFEwTXpKYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMEQ3RzhIZkw2RjVJdG5iNnhpWTA4VmFLZktNZTExY0p1RHdZY1A3eVRtQVN3eHBNWWgzRDFjZUpsdmZXWAppcWVaNi8yMEgycHJIZFFKYUZCUFJEL25RYldEZm5xbGR2VUZaU1dwNXAwSzRZR1I4TmNmNkYyUkpZRThmNzhlCktWNWJXRndndDRKYTVRZU9zZzM4KzczRmpxcnptS1VWSVl5SmRwbm9qUk1DQi9zSFEyYllDb0RiWnpWK0w4NzQKT1pVVHE5cXJJUmttV0ZsdnhYL2gybUs5LzRDNk1JU3dreDZyS20zcno4N3d2T3J2N1FNNW1GUnZmYnk4c09UTApGSGMyRE1mNzZidHdiYWpEak9YSis1VThxRlB3eDZwYkZocno5YVVHRDZLTG45cmJOc1FjL29SZnhUTm5Edmg5CkhwRjBNR21yOVZpTzVxWFZUTjNuTFlNL0FnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVXhheUV1S0RjdmRPYVJGbWpRQUx0RHRmcjI5SXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRENkCmo2ZUQ2RXMvcGdKaFhUWkQ4aFlzak1sWWtFSFNXd0Jwd2YwVXZMVmNpamthd0tqOUJzVGZLNDVtcWVpOEZPWE0KOU9NUitPeDJYOFVWM0RPclpTbHo3SmhkNENxNDBoRnVDS2tDYnFMaVVkQTloRWZqbkw5U3c0R1dGMmlyNkdZeQpCc0ZaNjdoVmdXY0RaOVZZMXZpVHhUbzdkWEdqMWl6U1h6ZnBid3JGTEN4R3BjaCt1eFVBdFJBZW44eWlIR3E0CjZ6L3Vhd3d0R3czam9ETDRLaExkK3NHV3hhTGRwL0Z4Qk1tMFQrdExNY2lHY0Zyc3dwSGFNWDdlOGJWaTNkVEIKVDdGRjEwVTRCT2QyTjFFby9FYnh1THVoUE81ZGVQSklsS3BjTEUzbjV3YUwwbE4zUW1yTDA0N2VFaUJINHAwOApJVzV4KzZPeXR0dFNONnNwZ0FJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - federatedtypeconfigs
    - federatedtypeconfigs/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedclusters.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedcluster
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU9xZk0xVTI2NnJ0TUNOZ24yeUtMZU13RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMQpNVFV3T0RRME16SmFGdzB6TkRBMU1UTXdPRFEwTXpKYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMEQ3RzhIZkw2RjVJdG5iNnhpWTA4VmFLZktNZTExY0p1RHdZY1A3eVRtQVN3eHBNWWgzRDFjZUpsdmZXWAppcWVaNi8yMEgycHJIZFFKYUZCUFJEL25RYldEZm5xbGR2VUZaU1dwNXAwSzRZR1I4TmNmNkYyUkpZRThmNzhlCktWNWJXRndndDRKYTVRZU9zZzM4KzczRmpxcnptS1VWSVl5SmRwbm9qUk1DQi9zSFEyYllDb0RiWnpWK0w4NzQKT1pVVHE5cXJJUmttV0ZsdnhYL2gybUs5LzRDNk1JU3dreDZyS20zcno4N3d2T3J2N1FNNW1GUnZmYnk4c09UTApGSGMyRE1mNzZidHdiYWpEak9YSis1VThxRlB3eDZwYkZocno5YVVHRDZLTG45cmJOc1FjL29SZnhUTm5Edmg5CkhwRjBNR21yOVZpTzVxWFZUTjNuTFlNL0FnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVXhheUV1S0RjdmRPYVJGbWpRQUx0RHRmcjI5SXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRENkCmo2ZUQ2RXMvcGdKaFhUWkQ4aFlzak1sWWtFSFNXd0Jwd2YwVXZMVmNpamthd0tqOUJzVGZLNDVtcWVpOEZPWE0KOU9NUitPeDJYOFVWM0RPclpTbHo3SmhkNENxNDBoRnVDS2tDYnFMaVVkQTloRWZqbkw5U3c0R1dGMmlyNkdZeQpCc0ZaNjdoVmdXY0RaOVZZMXZpVHhUbzdkWEdqMWl6U1h6ZnBid3JGTEN4R3BjaCt1eFVBdFJBZW44eWlIR3E0CjZ6L3Vhd3d0R3czam9ETDRLaExkK3NHV3hhTGRwL0Z4Qk1tMFQrdExNY2lHY0Zyc3dwSGFNWDdlOGJWaTNkVEIKVDdGRjEwVTRCT2QyTjFFby9FYnh1THVoUE81ZGVQSklsS3BjTEUzbjV3YUwwbE4zUW1yTDA0N2VFaUJINHAwOApJVzV4KzZPeXR0dFNONnNwZ0FJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedclusters
    - kubefedclusters/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU9xZk0xVTI2NnJ0TUNOZ24yeUtMZU13RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMQpNVFV3T0RRME16SmFGdzB6TkRBMU1UTXdPRFEwTXpKYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMEQ3RzhIZkw2RjVJdG5iNnhpWTA4VmFLZktNZTExY0p1RHdZY1A3eVRtQVN3eHBNWWgzRDFjZUpsdmZXWAppcWVaNi8yMEgycHJIZFFKYUZCUFJEL25RYldEZm5xbGR2VUZaU1dwNXAwSzRZR1I4TmNmNkYyUkpZRThmNzhlCktWNWJXRndndDRKYTVRZU9zZzM4KzczRmpxcnptS1VWSVl5SmRwbm9qUk1DQi9zSFEyYllDb0RiWnpWK0w4NzQKT1pVVHE5cXJJUmttV0ZsdnhYL2gybUs5LzRDNk1JU3dreDZyS20zcno4N3d2T3J2N1FNNW1GUnZmYnk4c09UTApGSGMyRE1mNzZidHdiYWpEak9YSis1VThxRlB3eDZwYkZocno5YVVHRDZLTG45cmJOc1FjL29SZnhUTm5Edmg5CkhwRjBNR21yOVZpTzVxWFZUTjNuTFlNL0FnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVXhheUV1S0RjdmRPYVJGbWpRQUx0RHRmcjI5SXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRENkCmo2ZUQ2RXMvcGdKaFhUWkQ4aFlzak1sWWtFSFNXd0Jwd2YwVXZMVmNpamthd0tqOUJzVGZLNDVtcWVpOEZPWE0KOU9NUitPeDJYOFVWM0RPclpTbHo3SmhkNENxNDBoRnVDS2tDYnFMaVVkQTloRWZqbkw5U3c0R1dGMmlyNkdZeQpCc0ZaNjdoVmdXY0RaOVZZMXZpVHhUbzdkWEdqMWl6U1h6ZnBid3JGTEN4R3BjaCt1eFVBdFJBZW44eWlIR3E0CjZ6L3Vhd3d0R3czam9ETDRLaExkK3NHV3hhTGRwL0Z4Qk1tMFQrdExNY2lHY0Zyc3dwSGFNWDdlOGJWaTNkVEIKVDdGRjEwVTRCT2QyTjFFby9FYnh1THVoUE81ZGVQSklsS3BjTEUzbjV3YUwwbE4zUW1yTDA0N2VFaUJINHAwOApJVzV4KzZPeXR0dFNONnNwZ0FJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "release-name-kubefed-config-hook"
  namespace: "default"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  setup.sh: |-
    #!/bin/bash
    set -euo pipefail

    kubectl patch kubefedconfig -n default kubefed --type='json' -p='[{"op": "add", "path": "/spec/featureGates", "value":[{"configuration": "Enabled","name":"PushReconciler"},{"configuration": "Disabled","name":"RawResourceStatusCollection"},{"configuration": "Enabled","name":"SchedulerPreferences"}]}]'

    echo "Kubefedconfig patched successfully!"

    kubectl rollout restart deployment/kubefed-controller-manager -n default
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["patch","get"]
  - apiGroups: ["core.kubefed.io"]
    resources: ["kubefedconfigs"]
    verbs: ["patch","get"]
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-hook
subjects:
  - kind: ServiceAccount
    name: kubefed-config-hook
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name-vxmhupeq75"
  namespace: "default"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/version: 0.8.1
    helm.sh/chart: "controllermanager-0.0.6"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  template:
    metadata:
      name: "release-name"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        helm.sh/chart: "controllermanager-0.0.6"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      restartPolicy: Never
      serviceAccountName: kubefed-config-hook
      automountServiceAccountToken: true
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.17.16"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/bash"]
        args: ["/opt/scripts/setup.sh"]
        volumeMounts:
        - name: "scripts"
          mountPath: "/opt/scripts"
      volumes:
      - name: "scripts"
        configMap:
          name: "release-name-kubefed-config-hook"
