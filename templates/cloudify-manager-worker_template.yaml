---
# Source: cloudify-manager-worker/templates/after_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: after-hook
data:
  after_hook.sh: |
    #!/usr/bin/env bash
    set -eux

    function parse_semver() {
      local token="$1"
      local major=0
      local minor=0
      local patch=0
      if egrep '^[0-9]+\.[0-9]+\.[0-9]+' <<<"$token" >/dev/null 2>&1 ; then
        # It has the correct syntax.
        local n=${token//[!0-9]/ }
        local a=(${n//\./ })
              major=${a[0]}
              minor=${a[1]}
              patch=${a[2]}
      fi
      echo "$major $minor $patch"
    }
    WORKER_VERSION_RAW=$(cfy --version | grep "Cloudify CLI" | sed -e 's|^.*Cloudify CLI \([0-9]*\.[0-9]*\.[0-9]*\).*$|\1|g')
    WORKER_VERSION=($(parse_semver "${WORKER_VERSION_RAW}"))

    FILE=/mnt/cloudify-data/init-completed
    CLOUDIFY_DATA_DIR="/mnt/cloudify-data"

    if [ -f "$FILE" ]; then
      echo "Init flag exists!"

      echo "Update DB schema, if new migrations exist for alembic, which are not executed yet"
      pushd $CLOUDIFY_DATA_DIR/latest/migrations
        CURRENT_DB_BEFORE=$(/opt/manager/env/bin/alembic current)
        echo "CURRENT_DB BEFORE: $CURRENT_DB_BEFORE"
        /opt/manager/env/bin/alembic upgrade head
        CURRENT_DB_AFTER=$(/opt/manager/env/bin/alembic current)
        echo "CURRENT_DB AFTER: $CURRENT_DB_AFTER"
      popd
      rm -rf /opt/manager/resources/cloudify/migrations
      cp -a --verbose $CLOUDIFY_DATA_DIR/latest/migrations $CLOUDIFY_DATA_DIR/manager/resources/cloudify
      
      if [[ "$CURRENT_DB_BEFORE" != "$CURRENT_DB_AFTER" ]] ;then
        echo "Upgrade of DB Schema discovered! Migraitions executed, restart of application will be in place!"
        echo "Restart cloudify manager because of Schema update"
        cfy_manager configure
      fi
    else 
        cfy_manager stop

        echo "Copy necessary files to Persistent Volume"
        cp -a --verbose /opt/mgmtworker/work/admin_token $CLOUDIFY_DATA_DIR/mgmtworker
        cp -a --verbose /opt/manager/rest-security.conf $CLOUDIFY_DATA_DIR/manager
        if [ -d "/opt/cloudify-composer" ]; then
          cp -a --verbose /opt/cloudify-composer/backend/conf/prod.json $CLOUDIFY_DATA_DIR/cloudify-composer
          cp -a --verbose /opt/cloudify-composer/backend/conf/db_ca.crt $CLOUDIFY_DATA_DIR/cloudify-composer
        fi
        if [ -d "/opt/cloudify-stage" ]; then
          cp -a --verbose /opt/cloudify-stage/conf/db_ca.crt $CLOUDIFY_DATA_DIR/cloudify-stage
          cp -a --verbose /opt/cloudify-stage/conf/manager.json $CLOUDIFY_DATA_DIR/cloudify-stage
        fi

        echo "Copy necessary directories to Persistent Volume"
        cp -a --verbose /opt/manager/resources $CLOUDIFY_DATA_DIR/manager
        cp -a --verbose /opt/mgmtworker/env/plugins $CLOUDIFY_DATA_DIR/mgmtworker
        if [ -d "/opt/cloudify-stage" ]; then
          cp -a --verbose /opt/cloudify-stage/dist/userData $CLOUDIFY_DATA_DIR/cloudify-stage
        fi
        
        touch "$CLOUDIFY_DATA_DIR/init-completed"

        echo "Removed unused directory"
        rm -rf --verbose /opt/manager/resources
        rm -rf --verbose /opt/mgmtworker/env/plugins
        if [ -d "/opt/cloudify-stage" ]; then
          rm -rf --verbose /opt/cloudify-stage/dist/userData
        fi

        echo "Removed unused files"
        rm -f --verbose /opt/mgmtworker/work/admin_token

        rm -f --verbose /opt/manager/rest-security.conf
        if [ -d "/opt/cloudify-composer" ]; then
          rm -f --verbose /opt/cloudify-composer/backend/conf/prod.json
          rm -f --verbose /opt/cloudify-composer/backend/conf/db_ca.crt
        fi
        if [ -d "/opt/cloudify-stage" ]; then
          rm -f --verbose /opt/cloudify-stage/conf/db_ca.crt
          rm -f --verbose /opt/cloudify-stage/conf/manager.json
        fi

        echo "Making symbolic links for directory"
        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/resources" /opt/manager/resources
        ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/plugins" /opt/mgmtworker/env/plugins
        if [ -d "/opt/cloudify-stage" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userData" /opt/cloudify-stage/dist/userData
        fi

        echo "Making symbolic links for files"
        ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/admin_token" /opt/mgmtworker/work/admin_token

        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/rest-security.conf" /opt/manager/rest-security.conf
        if [ -d "/opt/cloudify-composer" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/prod.json" /opt/cloudify-composer/backend/conf/prod.json
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/db_ca.crt" /opt/cloudify-composer/backend/conf/db_ca.crt
        fi
        if [ -d "/opt/cloudify-composer" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/db_ca.crt" /opt/cloudify-stage/conf/db_ca.crt
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/manager.json" /opt/cloudify-stage/conf/manager.json
        fi

        # Version-specific operations
        case ${WORKER_VERSION[0]} in
        7)
          # Config authorization.conf isn't necessary for CM>=7.x
          ;;
        *)
          cp -a --verbose /opt/manager/authorization.conf $CLOUDIFY_DATA_DIR/manager
          rm -f --verbose /opt/manager/authorization.conf
          ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/authorization.conf" /opt/manager/authorization.conf
          ;;
        esac

        cfy_manager start
    fi
---
# Source: cloudify-manager-worker/templates/before_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: before-hook
data:
  before_hook.sh: |
    #!/usr/bin/env bash
    set -eux

    function parse_semver() {
      local token="$1"
      local major=0
      local minor=0
      local patch=0
      if egrep '^[0-9]+\.[0-9]+\.[0-9]+' <<<"$token" >/dev/null 2>&1 ; then
        # It has the correct syntax.
        local n=${token//[!0-9]/ }
        local a=(${n//\./ })
              major=${a[0]}
              minor=${a[1]}
              patch=${a[2]}
      fi
      echo "$major $minor $patch"
    }
    WORKER_VERSION_RAW=$(cfy --version | grep "Cloudify CLI" | sed -e 's|^.*Cloudify CLI \([0-9]*\.[0-9]*\.[0-9]*\).*$|\1|g')
    WORKER_VERSION=($(parse_semver "${WORKER_VERSION_RAW}"))

    FILE=/mnt/cloudify-data/init-completed
    CLOUDIFY_DATA_DIR="/mnt/cloudify-data"
    OKTA=/mnt/cloudify-data/ssl/okta_certificate.pem

    mkdir -p /mnt/cloudify-data/manager
    mkdir -p /mnt/cloudify-data/mgmtworker
    mkdir -p /mnt/cloudify-data/latest
    if [ -d "/opt/cloudify-composer" ]; then
      mkdir -p /mnt/cloudify-data/cloudify-composer
    fi

    echo "Creating symbolic link for configs"
    rm -f --verbose /etc/cloudify/config.yaml
    ln -s --verbose "$CLOUDIFY_DATA_DIR/etc/config.yaml" /etc/cloudify/config.yaml
    chown cfyuser "$CLOUDIFY_DATA_DIR/etc/config.yaml"

    if [ -d "/opt/cloudify-stage" ]; then
      mkdir -p /mnt/cloudify-data/cloudify-stage
      rm -f --verbose /opt/cloudify-stage/conf/userConfig.json
      ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userConfig.json" /opt/cloudify-stage/conf/userConfig.json
    fi

    if [ -f "$FILE" ]; then
      echo "The Data exists on PV - creating symbolic links to files and folders on PV"

      if [ -f "$OKTA" ]; then
        mkdir -p /etc/cloudify/ssl
        ln -s --verbose "$OKTA" /etc/cloudify/ssl/okta_certificate.pem
      fi

      echo "Save latest migrations to latest folder, in case we need to apply newest DB schema for version upgrade"
      rm -rf $CLOUDIFY_DATA_DIR/latest/migrations
      cp -a --verbose  /opt/manager/resources/cloudify/migrations $CLOUDIFY_DATA_DIR/latest

      echo "Remove unused directory"
      rm -rf --verbose /opt/manager/resources
      rm -rf --verbose /opt/mgmtworker/env/plugins
      rm -rf --verbose /opt/cloudify-stage/dist/userData

      echo "Remove unused files"
      rm -f --verbose /opt/mgmtworker/work/admin_token
      rm -f --verbose /opt/manager/rest-security.conf
      if [ -d "/opt/cloudify-composer" ]; then
        rm -f --verbose /opt/cloudify-composer/backend/conf/prod.json
        rm -f --verbose /opt/cloudify-composer/backend/conf/db_ca.crt
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        rm -f --verbose /opt/cloudify-stage/conf/db_ca.crt
        rm -f --verbose /opt/cloudify-stage/conf/manager.json
      fi

      echo "Making symbolic links for files"
      ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/admin_token" /opt/mgmtworker/work/admin_token
      ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/rest-security.conf" /opt/manager/rest-security.conf
      if [ -d "/opt/cloudify-composer" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/prod.json" /opt/cloudify-composer/backend/conf/prod.json
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/db_ca.crt" /opt/cloudify-composer/backend/conf/db_ca.crt
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/db_ca.crt" /opt/cloudify-stage/conf/db_ca.crt
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/manager.json" /opt/cloudify-stage/conf/manager.json
      fi

      echo "Making symbolic links for directory"
      ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/resources" /opt/manager/resources
      ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/plugins" /opt/mgmtworker/env/plugins
      if [ -d "/opt/cloudify-stage" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userData" /opt/cloudify-stage/dist/userData
      fi

      echo "Set proper permissions for stage/composer files"
      if [ -d "/opt/cloudify-composer" ]; then
        chown composer_user /opt/cloudify-composer/backend/conf/prod.json
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        chown stage_user /opt/cloudify-stage/conf/manager.json
      fi

      # Version-specific operations
      case ${WORKER_VERSION[0]} in
      7)
        # Config authorization.conf isn't necessary for CM>=7.x
        ;;
      *)
        rm -f --verbose /opt/manager/authorization.conf
        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/authorization.conf" /opt/manager/authorization.conf
        ;;
      esac
      
    else
      echo "Copy config"
      if [ -f "$OKTA" ]; then
        mkdir -p /etc/cloudify/ssl
        ln -s --verbose "$OKTA" /etc/cloudify/ssl/okta_certificate.pem
      fi
    fi
---
# Source: cloudify-manager-worker/templates/cfy-log-monitor.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfy-log-monitoring
data:
  cfy_log_monitoring.sh: |
    #!/usr/bin/env bash    

    set -eu
    LOGS=/var/log/cloudify
    echo 'Start logging to output'
    
    ( umask 0 && truncate -s0 $LOGS/manager/cfy_manager.log )
    ( umask 0 && truncate -s0 $LOGS/amqp-postgres/amqp_postgres.log )
    ( umask 0 && truncate -s0 $LOGS/execution-scheduler/schedule r.log )
    ( umask 0 && truncate -s0 $LOGS/mgmtworker/mgmtworker.log )
    ( umask 0 && truncate -s0 $LOGS/nginx/{cloudify.access,access,cloudify.error,error,monitoring.access,monitoring.error}.log )
    ( umask 0 && truncate -s0 $LOGS/rest/{api-audit,api-gunicorn,audit,cloudify-rest-service,cloudify-api-service,gunicorn}.log )
    if [ -d "/opt/cloudify-composer" ]; then
      ( umask 0 && truncate -s0 $LOGS/composer/{app,errors}.log )
    fi
    if [ -d "/opt/cloudify-stage" ]; then
      ( umask 0 && truncate -s0 $LOGS/stage/server-{error,output}.log )
    fi

    tail -F --quiet $LOGS/manager/cfy_manager.log | sed "s|^|cfy_manager.log: |" &
    tail -F --quiet $LOGS/amqp-postgres/amqp_postgres.log | sed "s|^|amqp_postgres.log: |" &
    tail -F --quiet $LOGS/execution-scheduler/scheduler.log  | sed "s|^|scheduler.log: |" &
    tail -F --quiet $LOGS/mgmtworker/mgmtworker.log  | sed "s|^|mgmtworker.log: |" &
    tail -F --quiet $LOGS/nginx/cloudify.access.log | sed "s|^|cloudify.access.log: |" &
    tail -F --quiet $LOGS/nginx/access.log | sed "s|^|access.log: |" &
    tail -F --quiet $LOGS/nginx/cloudify.error.log | sed "s|^|cloudify.error.log: |" &
    tail -F --quiet $LOGS/nginx/error.log | sed "s|^|errors.log: |" &
    tail -F --quiet $LOGS/nginx/monitoring.access.log | sed "s|^|monitoring.access.log: |" &
    tail -F --quiet $LOGS/nginx/monitoring.error.log | sed "s|^|monitoring.error.log: |" &
    tail -F --quiet $LOGS/rest/api-audit.log | sed "s|^|api-audit.log: |" &
    tail -F --quiet $LOGS/rest/api-gunicorn.log | sed "s|^|api-gunicorn.log: |" &
    tail -F --quiet $LOGS/rest/audit.log | sed "s|^|audit.log: |" &
    tail -F --quiet $LOGS/rest/cloudify-rest-service.log | sed "s|^|cloudify-rest-service.log: |" &
    tail -F --quiet $LOGS/rest/cloudify-api-service.log | sed "s|^|cloudify-api-service.log: |" &
    if [ -d "/opt/cloudify-composer" ]; then
      tail -F --quiet $LOGS/composer/app.log | sed "s|^|app.log: |" &
      tail -F --quiet $LOGS/composer/errors.log | sed "s|^|errors.log: |" &
    fi
    if [ -d "/opt/cloudify-stage" ]; then
      tail -F --quiet $LOGS/stage/server-error.log | sed "s|^|server-errors.log: |" &
      tail -F --quiet $LOGS/stage/server-output.log | sed "s|^|server-output.log: |" &
    fi
    tail -F --quiet $LOGS/rest/gunicorn.log | sed "s|^|gunicorn.log: |"
---
# Source: cloudify-manager-worker/templates/cfy-starter.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfy-starter
data:
  cfy_starter.sh: |
    #!/usr/bin/env bash
    
    echo 'Start delay'
    sleep 0

    BEFORE_HOOK=/tmp/before_hook_completed
    AFTER_HOOK=/tmp/after_hook_completed

    if [ -f "$BEFORE_HOOK" ]; then
      echo 'before_hook already executed!'
    else 
      sh /tmp/cloudify/before_hook.sh
      touch /tmp/before_hook_completed
    fi

    
    sed -ie 's|if os.path.ismount(path)|if os.path.isdir(path) and os.path.ismount(path)|' /opt/cloudify/cfy_manager/lib/python3.11/site-packages/cfy_manager/utils/files.py
    
    echo 'Run cloudify manager'
    /usr/bin/cfy_manager image-starter

    if [ -f "$AFTER_HOOK" ]; then
      echo 'after_hook already executed!'
    else 
      sh /tmp/cloudify/after_hook.sh
      touch /tmp/after_hook_completed
    fi
---
# Source: cloudify-manager-worker/templates/cloudify-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudify-config
data:
  config.yaml: |
    manager:
      private_ip: cloudify-manager-worker.default.svc.cluster.local
      public_ip: cloudify-manager-worker.default.svc.cluster.local
      hostname: cloudify-manager-worker.default.svc.cluster.local
      cli_local_profile_host_name: localhost
      security:
        ssl_enabled: false
        admin_password: admin
      cluster_filesystem_replication: false
    cli:
      local_profile_host_name: localhost
    rabbitmq:
      username: cfy_user
      password: cfy_test_pass
      ca_path: /mnt/cloudify-data/ssl/ca.crt
      cert_path: /mnt/cloudify-data/ssl/tls.crt
      key_path: /mnt/cloudify-data/ssl/tls.key
      is_external: true
      cluster_members:
        rabbit1:
          networks:
            default: rabbitmq.default.svc.cluster.local
    postgresql_client:
      host: postgres-postgresql.default.svc.cluster.local
      server_db_name: postgres
      server_username: postgres
      server_password: cfy_test_pass
      cloudify_db_name: cloudify_db
      cloudify_username: cloudify
      cloudify_password: cloudify
      ca_path: /mnt/cloudify-data/ssl/ca.crt
      ssl_enabled: true
      ssl_client_verification: true
    postgresql_server:
      postgres_password: cfy_test_pass
      ca_path: /mnt/cloudify-data/ssl/ca.crt
      cert_path: /mnt/cloudify-data/ssl/tls.crt
      key_path: /mnt/cloudify-data/ssl/tls.key
    prometheus:
      ca_path: /mnt/cloudify-data/ssl/ca.crt
      cert_path: /mnt/cloudify-data/ssl/tls.crt
      key_path: /mnt/cloudify-data/ssl/tls.key
      scrape_interval: 5s
    ssl_inputs:
      postgresql_ca_cert_path: /mnt/cloudify-data/ssl/ca.crt
      postgresql_client_cert_path: /mnt/cloudify-data/ssl/tls.crt
      postgresql_client_key_path: /mnt/cloudify-data/ssl/tls.key
      ca_cert_path: /mnt/cloudify-data/ssl/ca.crt
      internal_cert_path: /mnt/cloudify-data/ssl/tls.crt
      internal_key_path: /mnt/cloudify-data/ssl/tls.key
      external_cert_path: /mnt/cloudify-data/ssl/tls.crt
      external_key_path: /mnt/cloudify-data/ssl/tls.key
      external_ca_cert_path: /mnt/cloudify-data/ssl/ca.crt
    composer:
      # If set to true, Cloudify Composer will not be installed
      skip_installation: false
    stage:
      skip_installation: false
    restservice:
      gunicorn:
        worker_count: 4
    mgmtworker:
      max_workers: 8
    validations:
      skip_validations: true
    sanity:
      skip_sanity: true
    services_to_install:
    - manager_service
    - monitoring_service
    service_management: supervisord
---
# Source: cloudify-manager-worker/templates/supervisord-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: supervisord-config
data:
  starter.conf: |
    [program:cloudify-starter]
    command=/tmp/cloudify/cfy_starter.sh
    stdout_logfile=/dev/fd/1
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/fd/2
    stderr_logfile_maxbytes=0
    startsecs=0
    autorestart=false

    [program:cron]
    command=/usr/sbin/crond -n
    autostart=true
    autorestart=true
    startsecs=30
    stderr_logfile=/var/log/cron.err.log
    stdout_logfile=/var/log/cron.out.log

    [program:log-monitor]
    command=/tmp/cloudify/cfy_log_monitoring.sh
    autostart=true
    autorestart=true
    startsecs=30
    stderr_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
---
# Source: cloudify-manager-worker/templates/user-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-config
data:
  userConfig.json: |
    {
      "maps": {
        "tilesUrlTemplate": "https://tiles.stadiamaps.com/tiles/osm_bright/${z}/${x}/${y}${r}.png?api_key=${accessToken}",
        "attribution": "&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors"
      },
      "proxy": {
        "timeouts": {
          "get": 30000,
          "post": 30000,
          "put": 30000,
          "delete": 10000
        },
        "maxBodySize": "2gb"
      },
      "auth":{
        "type": "local",
        "certPath": "",
        "loginPageUrl": "/console/login",
        "afterLogoutUrl": "/console/login"
      },
      "saml": {
        "enabled": false,
        "certPath": "",
        "ssoUrl": "",
        "portalUrl": ""
      },
      "whiteLabel": {
        "logoUrl": "",
        "mainColor": "#0077FC",
        "headerTextColor": "white",
        "showVersionDetails": true,
        "showFirstLoginHint": true,
        "loginPageHeaderColor": "white",
        "loginPageTextColor": "white",
        "sidebarColor": "#050229",
        "sidebarTextColor" : "white",
        "sidebarHoverActiveColor": "#1e1a3d",
        "sidebarHoverActiveTextColor": "#65adff",
        "customCssPath": ""
      },
      "widgets": {
        "allowedModules": ["lodash", "body", "elkjs"]
      }
    }
---
# Source: cloudify-manager-worker/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: cfy-worker-pvc
  annotations:
    volume.beta.kubernetes.io/storage-class: gp2
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
# Source: cloudify-manager-worker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cloudify-manager-worker
  labels:
    app.kubernetes.io/name: cloudify-manager-worker
    helm.sh/chart: cloudify-manager-worker-0.4.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https
    - port: 53333
      targetPort: 53333
      protocol: TCP
      name: internal-rest
    
  selector:
    app: cloudify-manager-worker
---
# Source: cloudify-manager-worker/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cloudify-manager-worker
  labels:
    name: cloudify-manager-worker
    app.kubernetes.io/name: cloudify-manager-worker
    helm.sh/chart: cloudify-manager-worker-0.4.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudify-manager-worker
  serviceName: cloudify-manager-worker
  minReadySeconds: 120
  template:
    metadata:
      annotations:
        {}
      labels:
        app: cloudify-manager-worker
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: false
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: prepare-configs
        image: busybox:1.34.1-uclibc
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 0.1
            memory: 50Mi
          requests:
            cpu: 0.1
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - CHOWN
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - DAC_OVERRIDE
            - DAC_READ_SEARCH
            - FOWNER
            - FSETID
            - SETUID
            - SETGID
            - SETFCAP
            - SETPCAP
            - AUDIT_WRITE
            drop:
            - ALL
          runAsNonRoot: false
          seccompProfile:
            type: RuntimeDefault
        env:
        volumeMounts:
          - name: cloudify-cfg-volume
            mountPath: /tmp/cloudify/config.yaml
            subPath: config.yaml
          - name: cloudify-data
            mountPath: /mnt/cloudify-data
        command:
          - /bin/sh
          - -c
          - |
            echo "Copying main config file"
            mkdir -p /mnt/cloudify-data/etc
            cp /tmp/cloudify/config.yaml /mnt/cloudify-data/etc/config.yaml
            replace_placeholder(){
                local PLACEHOLDER="$1"
                local VALUE="$2"
                if test -n "${VALUE}"; then
                  echo "Replacing placeholder ${PLACEHOLDER}"
                  sed -i -e "s|${PLACEHOLDER}|${VALUE}|g" /mnt/cloudify-data/etc/config.yaml
                fi
            }
            replace_placeholder "#{postgresServerPassword}" "${POSTGRES_SERVER_PASSWORD}"
            replace_placeholder "#{postgresCloudifyPassword}" "${POSTGRES_CLOUDIFY_PASSWORD}"
            replace_placeholder "#{rabbitmqPassword}" "${RABBITMQ_PASSWORD}"
            replace_placeholder "#{CfyAdminPassword}" "${CFY_ADMIN_PASSWORD}"
      - name: wait-for-dependencies
        image: busybox:1.34.1-uclibc
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 0.1
            memory: 50Mi
          requests:
            cpu: 0.1
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - CHOWN
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - DAC_OVERRIDE
            - DAC_READ_SEARCH
            - FOWNER
            - FSETID
            - SETUID
            - SETGID
            - SETFCAP
            - SETPCAP
            - AUDIT_WRITE
            drop:
            - ALL
          runAsNonRoot: false
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: POSTGRES_HOST
          value: postgres-postgresql
        - name: RABBIT_HOST
          value: rabbitmq
        command:
          - /bin/sh
          - -c
          - |
            timeout 10m /bin/sh -c '
              wait_for_service(){
                SERVICE="$1:$2"
                until nc -vz $SERVICE > /dev/null; do
                  >&2 echo "$SERVICE is unavailable - sleeping"
                  sleep 2
                done
                >&2 echo "$SERVICE is up"
              }
              wait_for_service ${POSTGRES_HOST} "5432"
              wait_for_service ${RABBIT_HOST} "15671"
            '
      containers:
      - name: cloudify-manager-worker
        image: cloudifyplatform/premium-cloudify-manager-worker:6.4.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v3.1/ok
            port: 80
            scheme: HTTP
          timeoutSeconds: 15
          successThreshold: 1
          periodSeconds: 30
          failureThreshold: 8
          initialDelaySeconds: 600
        readinessProbe:
          httpGet:
            path: /console
            port: 80
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 2
          periodSeconds: 10
          failureThreshold: 2
          initialDelaySeconds: 0
        startupProbe:
          httpGet:
            path: /console
            port: 80
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 1
          periodSeconds: 10
          failureThreshold: 30
          initialDelaySeconds: 30
        resources:
          limits:
            cpu: 3
            memory: 4.5Gi
          requests:
            cpu: 0.5
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - CHOWN
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - DAC_OVERRIDE
            - DAC_READ_SEARCH
            - FOWNER
            - FSETID
            - SETUID
            - SETGID
            - SETFCAP
            - SETPCAP
            - AUDIT_WRITE
            drop:
            - ALL
          runAsNonRoot: false
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /run
          name: run
        - mountPath: /run/lock
          name: runlock
        - name: supervisord-volume
          mountPath: /etc/supervisord.d/starter.conf
          subPath: starter.conf
        - name: cfy-starter-volume
          mountPath: /tmp/cloudify/cfy_starter.sh
          subPath: cfy_starter.sh
        - name: cfy-log-monitoring-volume
          mountPath: /tmp/cloudify/cfy_log_monitoring.sh
          subPath: cfy_log_monitoring.sh
        - name: before-hook-volume
          mountPath: /tmp/cloudify/before_hook.sh
          subPath: before_hook.sh
        - name: after-hook-volume
          mountPath: /tmp/cloudify/after_hook.sh
          subPath: after_hook.sh
        - name: cloudify-data
          mountPath: /mnt/cloudify-data
        - name: cfy-worker-certs
          mountPath: /mnt/cloudify-data/ssl/tls.crt
          subPath: tls.crt
        - name: cfy-worker-certs
          mountPath: /mnt/cloudify-data/ssl/tls.key
          subPath: tls.key
        - name: cfy-worker-certs
          mountPath: /mnt/cloudify-data/ssl/ca.crt
          subPath: ca.crt
        - name: stage-user-config-volume
          mountPath: /mnt/cloudify-data/cloudify-stage/userConfig.json
          subPath: userConfig.json
      volumes:
      # Define a volume where sigsci-agent will write temp data and share the socket file,
      # which is required with the root filesystem is mounted read only
      - name: run
        emptyDir:
          medium: Memory
          sizeLimit: "2Gi"
      - name: runlock
        emptyDir:
          medium: Memory
          sizeLimit: "2Gi"
      - name: cloudify-cfg-volume
        configMap:
          name: cloudify-config
      - name: stage-user-config-volume
        configMap:
          name: user-config
      - name: supervisord-volume
        configMap:
          name: supervisord-config
      - name: cfy-starter-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: cfy-starter
      - name: cfy-log-monitoring-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: cfy-log-monitoring
      - name: before-hook-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: before-hook
      - name: after-hook-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: after-hook
      - name: cfy-worker-certs
        secret:
          secretName: cfy-certs
      - name: cloudify-data
        persistentVolumeClaim:
          claimName: cfy-worker-pvc
