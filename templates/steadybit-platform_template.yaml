---
# Source: steadybit-platform/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-steadybit-platform
  namespace: default
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
  annotations:
    {}
---
# Source: steadybit-platform/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "U2ZJVllvOEM0MQ=="
  password: "ZXlyWDBwTkFmZA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: steadybit-platform/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-steadybit-platform-pull-secrets
  namespace: default
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6IHsiZG9ja2VyLnN0ZWFkeWJpdC5pbyI6IHsiYXV0aCI6ICJYem9sSVhNb1BHNXBiRDRwIn19fQ==
---
# Source: steadybit-platform/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-steadybit-platform
  namespace: default
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
type: Opaque
data:
---
# Source: steadybit-platform/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: steadybit-platform/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: steadybit-platform/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: release-name-steadybit-platform
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
spec:
  type: LoadBalancer
  ports:
    - port: 80
      name: ui-port
      protocol: TCP
      targetPort: 8080
    - port: 7878
      name: websocket-port
      protocol: TCP
      targetPort: 7878
  selector:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/instance: release-name
---
# Source: steadybit-platform/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: release-name-steadybit-platform
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
spec:
  replicas: 1
  minReadySeconds: 60
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: steadybit-platform
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "9090"
      labels:
        app.kubernetes.io/name: steadybit-platform
        app.kubernetes.io/version: 1.0.31
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: steadybit-platform-1.0.31
    spec:
      imagePullSecrets:
        - name: release-name-steadybit-platform-pull-secrets
      serviceAccountName: release-name-steadybit-platform
      containers:
        - name: steadybit-platform
          image: "docker.steadybit.io/steadybit/platform:2.0.18"
          imagePullPolicy: Always
          resources:
            requests:
              memory: 2Gi
              cpu: 2000m
            limits:
              memory: 4Gi
              cpu: 4000m
          ports:
            - name: ui-port
              containerPort: 8080
              protocol: TCP
            - name: websocket-port
              containerPort: 7878
              protocol: TCP
          volumeMounts:
          readinessProbe:
            httpGet:
              port: ui-port
              path: /api/health/readiness
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: ui-port
              path: /api/health/liveness
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            httpGet:
              port: ui-port
              path: /api/health/liveness
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 200
          envFrom:
            []
          env:
            - name: STEADYBIT_EXPERIMENT_EXECUTION_SHUTDOWN_CHECK_INTERVAL
              value: 10s
            - name: LOGGING_FORMAT
              value: "text"
            - name: STEADYBIT_TENANT_MODE
              value: "ONPREM"
            - name: STEADYBIT_TENANT_AGENTKEY
              valueFrom:
                secretKeyRef:
                  name: release-name-steadybit-platform
                  key: key
            - name: STEADYBIT_TENANT_KEY
              value: "onprem"
            - name: STEADYBIT_TENANT_NAME
              value: "onprem"
            - name: STEADYBIT_WEB_PUBLIC_EXPERIMENT_PORT
              value: "80"
            - name: SPRING_DATASOURCE_USERNAME
              value: steadybit
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://release-name-postgresql:5432/steadybit
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: "password"
            - name: STEADYBIT_AUTH_PROVIDER
              value: static
            - name: STEADYBIT_AUTH_STATIC_0_USERNAME
              value: admin
            - name: STEADYBIT_AUTH_STATIC_0_PASSWORD
              value: '{noop}admin'
---
# Source: steadybit-platform/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "steadybit"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "steadybit"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "steadybit" -d "dbname=steadybit" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "steadybit" -d "dbname=steadybit" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: steadybit-platform/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-steadybit-platform
  namespace: default
  labels:
    app.kubernetes.io/name: steadybit-platform
    app.kubernetes.io/version: 1.0.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: steadybit-platform-1.0.31
spec:
  rules:
    - http:
        paths:
          - pathType: Prefix
            path: /ws
            backend:
              service:
                name: release-name-steadybit-platform
                port:
                  number: 7878
          - pathType: Prefix
            path: /
            backend:
              service:
                name: release-name-steadybit-platform
                port:
                  number: 80
