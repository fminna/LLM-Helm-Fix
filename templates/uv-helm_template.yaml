---
# Source: uv-helm/templates/serviceAcc-exfo-user.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    chart: uv-helm-0.1.3
  name: sa-release-name-uv-helm
---
# Source: uv-helm/templates/uv-gl-secret.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5naXRsYWIuY29tIjp7InVzZXJuYW1lIjoidXYtcHVsbCIsInBhc3N3b3JkIjoiZ2xwYXQtREZWSlZ0b3hmekNaZTdrRTd3MXkiLCJhdXRoIjoiZFhZdGNIVnNiRHBuYkhCaGRDMUVSbFpLVm5SdmVHWjZRMXBsTjJ0Rk4zY3hlUT09In19fQ==
kind: Secret
metadata:
  name: release-name-uv-helm-gl-secret
type: kubernetes.io/dockerconfigjson
---
# Source: uv-helm/templates/uv-rh-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-uv-helm-rh-secret
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5yZWRoYXQuaW8iOnsiYXV0aCI6Ik9EQXlPVFV3Tm54MWRtVnlhV1pwWlhJdE1qRXVNRGd1TVRjd09EYzZaWGxLYUdKSFkybFBhVXBUVlhwVmVFMXBTamt1WlhsS2VtUlhTV2xQYVVreVRsUkZlbGw2U1hoWlZFazFUVVJKTUU5VWEzbFBWR3MwV2tSSmVFMUhVVFZOYlZFMVRqSlpOVTE1U2prdWRUSkpjRTFZTW5wVmRub3haRWMwVDJrMk9HRjFSM290U2xSck1HczVSbGhmVDJsSGFuaHNNVTV5TlVoaGJtUlJNa2RQUzI1NWIwNXZZVzFXZW1kWWFqVnRUbXRtZWxOUE5uQkdiM1JFVjNNM1pHaFpYMnBzVDBkdlYyTnFTMEpaWVc0d1RGWlVjMDlpUWtWNVkyWldSR3d5ZFZwMGRUSlhOa2hQUm1nNVQwSmFlV3QxYWtvMFZYcG5ZV2szWlZnd1lTMW9aSFU1U1RoTFQzVlZlR1JZVG1obVlWbzRVVmd0VUhCdFMzQjJVWEZYVmxkV1l6Rk5RazFxT0VnNFdYVkVWemhVUTIxa2FFUnJiMTlXUkhsWVFqZFVXV04xWTJoWFFtaHhWSFJ6V2xCVmN6QXpiRlZpUW5aNFEyZHFTR2R6V2xOSFNHdFJNMUl3VkdKNk0xQkhjbXRrV2kxWk1XNVJYMmxGYW5GV01EbHZVaTFXUkRsUWVHMVNhbmx1VjJoV1RubDFTWG8yWTFvMWVXRmlXVTFUU1VkVVpXaFBhMWhOWHpkdlNXUmxUR2sxVGtKSE5EZHFOM1pSTjNobVZUVktWbXRsUnpsNlJHaGZUVUZKTW14TU5rNUZTbE00UmxaUFRFUXhlVWQyWDNwVWJYTklhRmN3UWtSdFl6SlJSR3huTkRoR1luRjVRalIzY0dscGNsZHhMWHBDUWxKTGRFcFhWV3BYU2s5Q2FXRkNTMVZvYzFBM2FGVXplalJUVTNSME5VcE1kelZzVUVoS1FYRlhiVUppVHpOeE4xOHdWVVpTWWpOVGVUbFlRMlJQUm5Vd1oxZHJlWFkyVEZOQllsY3dTR1U0WkdsblpVbFJNR05CYkhwdlFtRXdWR1U0UTFkaVJ6UTVObVZLZGtGT1pISjVYMFZCVjFKd2VqQk5lWGxoZW5wVVNqRnBNMGQwTkZWd01FUlBXVGxQZEhKWFFqQm5hV05NUW5SR2NXUjVaRlpzZFZKdlJtSTRWVzUzVlRWQlUzRjJlbmREUWpsMGJ6TmlUREpYWjJkV1MxVnFNSE42VGtkeVUzSk5SVWh6T0VKR1ZtcGZTVGhLVDFKT1JFMTJaMkkxTkhCMWVGSklPWFp2TTJzMFQxaE1TR3RrWVZKamNEbDVVMEp2YTNKSlJrTndOVXc0Y1ZoaWNFTklUbFoyUzJ0SU1qbHFZazFwVnpRPSJ9fX0=
type: kubernetes.io/dockerconfigjson
---
# Source: uv-helm/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-uv-helm-configmap
data:
  http-stdout: |
    {
      "schedules": [
        {
          "cron": "0 * * * * * *",
          "tests": [
            {
              "http": {
                "url": ["https://www.facebook.com","https://www.microsoft.com"],
                "url_interval": 1000,
                "http_version": "V2.0",
                "security_protocol": "auto_negotiate",
                "user_agent": "Nova active Verifier",
                "page_download_mode": "complete_page",
                "username": "",
                "password": "",
                "dscp": 0,
                "dnsServer": "1.1.1.1",
                "proxy_host": "",
                "proxy_port": 443,
                "source_interface": null
              }
            }
          ]
        }
      ],
      "authorizer": {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NjczNDcxOTksImlhdCI6MTY2MDU4MjcxOH0.ZKJWZbbclNk7J7zhdiLgsf-tRqycNbvo0k6czn9XtWo"
      },
      "publisher": {
        "stdout": {
          "format": "json"
        }
      }
    }
  ott-stdout: |
    {
      "schedules": [
        {
          "cron": "0 * * * * * *",
          "tests": [
            {
              "ottvideo": {
                "buffer_target": 60000,
                "manifest_url": "http://192.168.50.12:8080/media/EXFO_know_your_network/manifest.m3u8",
                "video_filter": {
                  "min_width": 1920,
                  "min_height": 1080,
                  "min_framerate": 24,
                  "mime_types": [
                    "mp4",
                    "webm"
                  ]
                },
                "audio_filter": {
                  "min_sampling_rate": 40000,
                  "mime_types": [
                    "mp4",
                    "webm"
                  ]
                },
                "http_timeout": 30000,
                "segment_info": false,
                "max_duration": 30000
              }
            }
          ]
        }
      ],
      "authorizer": {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NjczNDcxOTksImlhdCI6MTY2MDU4MjcxOH0.ZKJWZbbclNk7J7zhdiLgsf-tRqycNbvo0k6czn9XtWo"
      },
      "publisher": {
        "stdout": {
          "format": "json"
        }
      }
    }
---
# Source: uv-helm/templates/serviceAcc-exfo-user.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-release-name-uv-helm 
rules:
- apiGroups:
  - security.openshift.io 
  resourceNames:
  - anyuid
  resources:
  - securitycontextconstraints
  verbs: 
  - use
---
# Source: uv-helm/templates/serviceAcc-exfo-user.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: roleBind-release-name-uv-helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-release-name-uv-helm
subjects:
- kind: ServiceAccount
  name: sa-release-name-uv-helm
---
# Source: uv-helm/templates/uverifier.deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: release-name-uv-helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: uv-helm
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: uv-helm
        app.kubernetes.io/instance: release-name
    spec: 
      imagePullSecrets:
        - name: release-name-uv-helm-rh-secret
      containers:
        - name: uv-helm
          image: "registry.connect.redhat.com/exfo/uverifier:21.08.17087"
          volumeMounts:
            - name: config-vol
              mountPath: /conf
          command:
            - /bin/sh
            - '-c'          
          args:
            - /opt/exfo/uverifier/bin/uverifier-ott --config /conf/ott-stdout.json
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          lifecycle:
            preStop:
              exec:
                command:
                  - cat 
                  - '/conf/ott-stdout.json'
          livenessProbe:
            exec:
              command:
                - cat
                - '/conf/ott-stdout.json'
          readinessProbe:
            exec:
              command:
                - cat
                - '/conf/ott-stdout.json'
            initialDelaySeconds: 5
            periodSeconds: 5
      serviceAccountName: sa-release-name-uv-helm
      automountServiceAccountToken: false
      volumes:
         - name: config-vol
           configMap:
            name: release-name-uv-helm-configmap
            items:
              - key: ott-stdout
                path: ott-stdout.json
      restartPolicy: Always
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: instance
                  operator: In
                  values:
                  - uv-helm
              topologyKey: kubernetes.io/hostname
---
# Source: uv-helm/templates/tests/check_config_json.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-uv-helm-check-testconfig"
  labels:
    helm.sh/chart: uv-helm-0.1.3
    app.kubernetes.io/name: uv-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  imagePullSecrets:
    - name: "uv-helm-rh-secret"
  containers:
    - name: "release-name-uv-helm-con-testconfig"
      image: registry.access.redhat.com/rhel-minimal:7.9-758
      imagePullPolicy: Always
      volumeMounts:
         - name: config-vol
           mountPath: /conf
      command:
         - /bin/sh
         - '-c'
      args: ['cat /conf/ott-stdout.json']
  volumes:
    - name: config-vol
      configMap:
        name: release-name-uv-helm-configmap
        items:
          - key: ott-stdout
            path: ott-stdout.json
  restartPolicy: Never
