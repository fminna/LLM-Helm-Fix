{"generationTime":"0001-01-01T00:00:00Z","clusterAPIServerInfo":null,"clusterCloudProvider":"","customerGUID":"","clusterName":"","reportGUID":"","jobID":"","summaryDetails":{"controls":{"C-0002":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0002","name":"Prevent containers from allowing command execution","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0007":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0007","name":"Roles with delete capabilities","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0012":{"statusInfo":{"status":"passed"},"controlID":"C-0012","name":"Applications credentials in configuration files","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Secrets","id":"Cat-3"}},"C-0013":{"statusInfo":{"status":"failed"},"controlID":"C-0013","name":"Non-root containers","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0014":{"statusInfo":{"status":"passed"},"controlID":"C-0014","name":"Access Kubernetes dashboard","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":2,"category":{"name":"Access control","id":"Cat-2"}},"C-0015":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0015","name":"List Kubernetes secrets","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Access control","id":"Cat-2"}},"C-0016":{"statusInfo":{"status":"failed"},"controlID":"C-0016","name":"Allow privilege escalation","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0017":{"statusInfo":{"status":"failed"},"controlID":"C-0017","name":"Immutable container filesystem","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":3,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0020":{"statusInfo":{"status":"passed"},"controlID":"C-0020","name":"Mount service principal","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Workload","id":"Cat-5"}},"C-0030":{"statusInfo":{"status":"failed"},"controlID":"C-0030","name":"Ingress and Egress blocked","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Network","id":"Cat-4"}},"C-0031":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0031","name":"Delete Kubernetes events","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Access control","id":"Cat-2"}},"C-0034":{"statusInfo":{"status":"failed"},"controlID":"C-0034","name":"Automatic mapping of service account","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":6,"category":{"name":"Secrets","id":"Cat-3"}},"C-0035":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0035","name":"Administrative Roles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0037":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0037","name":"CoreDNS poisoning","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Access control","id":"Cat-2"}},"C-0038":{"statusInfo":{"status":"passed"},"controlID":"C-0038","name":"Host PID/IPC privileges","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0041":{"statusInfo":{"status":"passed"},"controlID":"C-0041","name":"HostNetwork access","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Network","id":"Cat-4"}}},"C-0042":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0042","name":"SSH server running inside container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":3,"category":{"name":"Workload","id":"Cat-5"}},"C-0044":{"statusInfo":{"status":"passed"},"controlID":"C-0044","name":"Container hostPort","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Network","id":"Cat-4"}},"C-0045":{"statusInfo":{"status":"passed"},"controlID":"C-0045","name":"Writable hostPath mount","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Storage","id":"Cat-8"}}},"C-0046":{"statusInfo":{"status":"passed"},"controlID":"C-0046","name":"Insecure capabilities","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0048":{"statusInfo":{"status":"passed"},"controlID":"C-0048","name":"HostPath mount","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Storage","id":"Cat-8"}}},"C-0053":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0053","name":"Access container service account","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0054":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0054","name":"Cluster internal networking","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Network","id":"Cat-4"}},"C-0055":{"statusInfo":{"status":"failed"},"controlID":"C-0055","name":"Linux hardening","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":4,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0057":{"statusInfo":{"status":"passed"},"controlID":"C-0057","name":"Privileged container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0059":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0059","name":"CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5"}},"C-0063":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0063","name":"Portforwarding privileges","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0068":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0068","name":"PSP enabled","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":1,"category":{"name":"Control plane","id":"Cat-1"}},"C-0187":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0187","name":"Minimize wildcard use in Roles and ClusterRoles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Access control","id":"Cat-2"}},"C-0188":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0188","name":"Minimize access to create pods","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0260":{"statusInfo":{"status":"failed"},"controlID":"C-0260","name":"Missing network policy","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":5,"category":{"name":"Network","id":"Cat-4"}},"C-0262":{"statusInfo":{"status":"passed"},"controlID":"C-0262","name":"Anonymous access enabled","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Control plane","id":"Cat-1","subCategory":{"name":"Supply chain","id":"Cat-6"}}},"C-0270":{"statusInfo":{"status":"failed"},"controlID":"C-0270","name":"Ensure CPU limits are set","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":1,"failedResources":1,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Resource management","id":"Cat-7"}}},"C-0271":{"statusInfo":{"status":"failed"},"controlID":"C-0271","name":"Ensure memory limits are set","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":1,"failedResources":1,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Resource management","id":"Cat-7"}}}},"status":"failed","frameworks":[{"controls":{"C-0002":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0002","name":"Prevent containers from allowing command execution","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0007":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0007","name":"Roles with delete capabilities","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0012":{"statusInfo":{"status":"passed"},"controlID":"C-0012","name":"Applications credentials in configuration files","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Secrets","id":"Cat-3"}},"C-0013":{"statusInfo":{"status":"failed"},"controlID":"C-0013","name":"Non-root containers","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0015":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0015","name":"List Kubernetes secrets","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Access control","id":"Cat-2"}},"C-0035":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0035","name":"Administrative Roles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0038":{"statusInfo":{"status":"passed"},"controlID":"C-0038","name":"Host PID/IPC privileges","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0041":{"statusInfo":{"status":"passed"},"controlID":"C-0041","name":"HostNetwork access","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Network","id":"Cat-4"}}},"C-0048":{"statusInfo":{"status":"passed"},"controlID":"C-0048","name":"HostPath mount","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Storage","id":"Cat-8"}}},"C-0057":{"statusInfo":{"status":"passed"},"controlID":"C-0057","name":"Privileged container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0063":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0063","name":"Portforwarding privileges","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0187":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0187","name":"Minimize wildcard use in Roles and ClusterRoles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Access control","id":"Cat-2"}},"C-0188":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0188","name":"Minimize access to create pods","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0260":{"statusInfo":{"status":"failed"},"controlID":"C-0260","name":"Missing network policy","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":5,"category":{"name":"Network","id":"Cat-4"}},"C-0262":{"statusInfo":{"status":"passed"},"controlID":"C-0262","name":"Anonymous access enabled","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Control plane","id":"Cat-1","subCategory":{"name":"Supply chain","id":"Cat-6"}}}},"name":"ClusterScan","status":"failed","version":"","ResourceCounters":{"passedResources":2,"failedResources":2,"skippedResources":0,"excludedResources":0},"score":20,"complianceScore":86.666664},{"controls":{"C-0002":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0002","name":"Prevent containers from allowing command execution","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0007":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0007","name":"Roles with delete capabilities","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0012":{"statusInfo":{"status":"passed"},"controlID":"C-0012","name":"Applications credentials in configuration files","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Secrets","id":"Cat-3"}},"C-0014":{"statusInfo":{"status":"passed"},"controlID":"C-0014","name":"Access Kubernetes dashboard","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":2,"category":{"name":"Access control","id":"Cat-2"}},"C-0015":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0015","name":"List Kubernetes secrets","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Access control","id":"Cat-2"}},"C-0020":{"statusInfo":{"status":"passed"},"controlID":"C-0020","name":"Mount service principal","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Workload","id":"Cat-5"}},"C-0031":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0031","name":"Delete Kubernetes events","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Access control","id":"Cat-2"}},"C-0035":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0035","name":"Administrative Roles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0037":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0037","name":"CoreDNS poisoning","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Access control","id":"Cat-2"}},"C-0042":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0042","name":"SSH server running inside container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":3,"category":{"name":"Workload","id":"Cat-5"}},"C-0045":{"statusInfo":{"status":"passed"},"controlID":"C-0045","name":"Writable hostPath mount","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Storage","id":"Cat-8"}}},"C-0048":{"statusInfo":{"status":"passed"},"controlID":"C-0048","name":"HostPath mount","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Storage","id":"Cat-8"}}},"C-0053":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0053","name":"Access container service account","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0054":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0054","name":"Cluster internal networking","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Network","id":"Cat-4"}},"C-0057":{"statusInfo":{"status":"passed"},"controlID":"C-0057","name":"Privileged container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0059":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0059","name":"CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5"}},"C-0068":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0068","name":"PSP enabled","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":1,"category":{"name":"Control plane","id":"Cat-1"}}},"name":"MITRE","status":"passed","version":"","ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"score":0,"complianceScore":100},{"controls":{"C-0002":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0002","name":"Prevent containers from allowing command execution","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":5,"category":{"name":"Access control","id":"Cat-2"}},"C-0012":{"statusInfo":{"status":"passed"},"controlID":"C-0012","name":"Applications credentials in configuration files","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Secrets","id":"Cat-3"}},"C-0013":{"statusInfo":{"status":"failed"},"controlID":"C-0013","name":"Non-root containers","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0016":{"statusInfo":{"status":"failed"},"controlID":"C-0016","name":"Allow privilege escalation","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0017":{"statusInfo":{"status":"failed"},"controlID":"C-0017","name":"Immutable container filesystem","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":3,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0030":{"statusInfo":{"status":"failed"},"controlID":"C-0030","name":"Ingress and Egress blocked","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":6,"category":{"name":"Network","id":"Cat-4"}},"C-0034":{"statusInfo":{"status":"failed"},"controlID":"C-0034","name":"Automatic mapping of service account","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":6,"category":{"name":"Secrets","id":"Cat-3"}},"C-0035":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0035","name":"Administrative Roles","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":6,"category":{"name":"Access control","id":"Cat-2"}},"C-0038":{"statusInfo":{"status":"passed"},"controlID":"C-0038","name":"Host PID/IPC privileges","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0041":{"statusInfo":{"status":"passed"},"controlID":"C-0041","name":"HostNetwork access","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Network","id":"Cat-4"}}},"C-0044":{"statusInfo":{"status":"passed"},"controlID":"C-0044","name":"Container hostPort","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Network","id":"Cat-4"}},"C-0046":{"statusInfo":{"status":"passed"},"controlID":"C-0046","name":"Insecure capabilities","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":7,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0054":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0054","name":"Cluster internal networking","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":4,"category":{"name":"Network","id":"Cat-4"}},"C-0055":{"statusInfo":{"status":"failed"},"controlID":"C-0055","name":"Linux hardening","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":2,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":100,"complianceScore":0,"scoreFactor":4,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0057":{"statusInfo":{"status":"passed"},"controlID":"C-0057","name":"Privileged container","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":2,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Node escape","id":"Cat-9"}}},"C-0059":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0059","name":"CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5"}},"C-0068":{"statusInfo":{"status":"passed","subStatus":"irrelevant"},"controlID":"C-0068","name":"PSP enabled","status":"passed","resourceIDs":{},"ResourceCounters":{"passedResources":0,"failedResources":0,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":0,"complianceScore":100,"scoreFactor":1,"category":{"name":"Control plane","id":"Cat-1"}},"C-0270":{"statusInfo":{"status":"failed"},"controlID":"C-0270","name":"Ensure CPU limits are set","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":1,"failedResources":1,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Resource management","id":"Cat-7"}}},"C-0271":{"statusInfo":{"status":"failed"},"controlID":"C-0271","name":"Ensure memory limits are set","status":"failed","resourceIDs":{},"ResourceCounters":{"passedResources":1,"failedResources":1,"skippedResources":0,"excludedResources":0},"subStatusCounters":{"ignoredResources":0},"score":50,"complianceScore":50,"scoreFactor":8,"category":{"name":"Workload","id":"Cat-5","subCategory":{"name":"Resource management","id":"Cat-7"}}}},"name":"NSA","status":"failed","version":"","ResourceCounters":{"passedResources":0,"failedResources":4,"skippedResources":0,"excludedResources":0},"score":41.48936,"complianceScore":65.789474}],"resourcesSeverityCounters":{"criticalSeverity":0,"highSeverity":2,"mediumSeverity":12,"lowSeverity":2},"controlsSeverityCounters":{"criticalSeverity":0,"highSeverity":2,"mediumSeverity":6,"lowSeverity":1},"ResourceCounters":{"passedResources":2,"failedResources":4,"skippedResources":0,"excludedResources":0},"score":34.645668,"complianceScore":77.94118},"resources":[{"resourceID":"path=2503519115/api=/v1/default/ServiceAccount/rhdh-kubernetes-plugin","object":{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"name":"rhdh-kubernetes-plugin","namespace":"default"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:0"},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}},{"resourceID":"path=2486741496/api=/v1/default/ServiceAccount/helm-manager","object":{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"name":"helm-manager","namespace":"default"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:1"},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}},{"resourceID":"path=2537074353/api=rbac.authorization.k8s.io/v1//ClusterRoleBinding/rhdh-kubernetes-plugin","object":{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"name":"rhdh-kubernetes-plugin"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"view"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:2","subjects":[{"kind":"ServiceAccount","name":"rhdh-kubernetes-plugin","namespace":"default"}]},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}},{"resourceID":"path=2520296734/api=rbac.authorization.k8s.io/v1//ClusterRoleBinding/helm-manager-admin","object":{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"name":"helm-manager-admin"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cluster-admin"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:3","subjects":[{"kind":"ServiceAccount","name":"helm-manager","namespace":"default"}]},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","object":{"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{"helm.sh/hook":"test"},"labels":{"app.kubernetes.io/instance":"release-name","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/version":"1.1.x","helm.sh/chart":"redhat-trusted-application-pipeline-1.0.0"},"name":"rhtap-release-name-test"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:8","spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"release-name","app.kubernetes.io/managed-by":"Helm","helm.sh/chart":"redhat-trusted-application-pipeline-1.0.0"},"name":"release-name-test"},"spec":{"automountServiceAccountToken":true,"containers":[{"name":"test-namespace","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\npipeline_id=\"$(cat \u003c\u003c EOF | kubectl create -f - | cut -d' ' -f 1\n        \n  apiVersion: tekton.dev/v1\n  kind: PipelineRun\n  metadata:\n    generateName: rhtap-test-config-\n    annotations:\n      helm.sh/chart: \"redhat-trusted-application-pipeline-1.0.0\"\n  spec:\n    pipelineSpec:\n      tasks:\n      - name: argocd-login-check\n        taskRef:\n          resolver: cluster\n          params:\n            - name: kind\n              value: task\n            - name: name\n              value: argocd-login-check\n            - name: namespace\n              value: default\n  \nEOF\n)\"\necho -n \"* Pipeline $pipeline_id: \"\nwhile ! kubectl get \"$pipeline_id\" | grep --extended-regex --quiet \" False | True \"; do\n  echo -n \".\"\n  sleep 2\ndone\nif kubectl get \"$pipeline_id\" | grep --quiet \" True \"; then\n  kubectl delete \"$pipeline_id\" \u003e /dev/null\n  echo \"OK\"\nelse\n  echo \"Failed\"\n  exit 1\nfi\n"],"resources":{"limits":{"cpu":"100m","memory":"256Mi"},"requests":{"cpu":"20m","memory":"128Mi"}}},{"name":"test-gitops","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nERRORS=()\n\nrollout_status() {\n  local namespace=\"${1}\"\n  local deployment=\"${2}\"\n\n  if ! kubectl --namespace=\"${namespace}\" --timeout=\"5m\" \\\n    rollout status deployment \"${deployment}\"; then\n    fail \"'${namespace}/${deployment}' is not deployed as expected!\"\n  fi\n}\n\ncheck_gitops_operator_health() {\n  echo \"[INFO] Checking OpenShift GitOps health...\"\n\n  # wait until tekton pipelines operator is created\n  echo \"Waiting for OpenShift Pipelines Operator to be created...\"\n  timeout 2m bash \u003c\u003c-EOF\n  until oc get deployment openshift-gitops-operator-controller-manager -n openshift-operators; do\n    echo -n \".\"\n    sleep 5\n  done\nEOF\n  oc rollout status -n openshift-operators deployment/openshift-gitops-operator-controller-manager --timeout 10m\n\n  # wait until all the deployments in the openshift-gitops namespace are ready:\n  rollout_status \"openshift-gitops\" \"cluster\"\n  rollout_status \"openshift-gitops\" \"kam\"\n  rollout_status \"openshift-gitops\" \"openshift-gitops-applicationset-controller\"\n  rollout_status \"openshift-gitops\" \"openshift-gitops-dex-server\"\n  rollout_status \"openshift-gitops\" \"openshift-gitops-redis\"\n  rollout_status \"openshift-gitops\" \"openshift-gitops-repo-server\"\n  rollout_status \"openshift-gitops\" \"openshift-gitops-server\"\n\n\n  # Check argocd instance creation\n  oc delete ns test-argocd --ignore-not-found --wait\n  oc create ns test-argocd\n\n  cat \u003c\u003c EOF | oc apply -f -\n  apiVersion: argoproj.io/v1beta1\n  kind: ArgoCD\n  metadata:\n      name: argocd\n      namespace: test-argocd\nEOF\n\n  while [ \"$(oc -n test-argocd get pod | grep -c argocd-)\" -ne 4 ]; do\n    sleep 5\n  done\n  oc wait --for=condition=Ready -n test-argocd pod --timeout=15m  -l 'app.kubernetes.io/name in (argocd-application-controller,argocd-redis,argocd-repo-server,argocd-server)'\n\n  oc delete ns test-argocd\n}\n\ncheck_rhtap_argocd_health() {\n  echo \"[INFO] Checking RHTAP ArgoCD instance health...\"\n  RHTAP_ARGOCD_INSTANCE=\"rhtap-argocd\"\n  NAMESPACE=\"default\"\n  PREFIX=\"$RHTAP_ARGOCD_INSTANCE-$NAMESPACE-argocd-\"\n  # Make sure the rhtap ArgoCD instance has permission on the cluster\n  echo -n \"* ArgoCD clusterroles: \"\n  if [ \"$(oc get clusterroles -o name | grep -c \"/$PREFIX\")\" = \"3\" ]; then\n    echo \"OK\"\n  else\n    echo \"FAIL\"\n    ERRORS+=(\"ClusterRoles for ArgoCD not found.\")\n  fi\n  echo -n \"* ArgoCD clusterrolebindings: \"\n  if [ \"$(oc get clusterrolebindings -o name | grep -c \"/$PREFIX\")\" = \"3\" ]; then\n    echo \"OK\"\n  else\n    echo \"FAIL\"\n    ERRORS+=(\"ClusterRoleBindings for ArgoCD not found.\")\n  fi\n}\n\ncheck_gitops_operator_health\ncheck_rhtap_argocd_health\n\nif [ \"${#ERRORS[@]}\" != \"0\" ]; then\n  for MSG in \"${ERRORS[@]}\"; do\n    echo \"[ERROR]$MSG\" \u003e\u00262\n  done\n  exit 1\nfi\n"],"resources":{"limits":{"cpu":"100m","memory":"256Mi"},"requests":{"cpu":"20m","memory":"128Mi"}}},{"name":"test-pipelines","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nrollout_status() {\n  local namespace=\"${1}\"\n  local deployment=\"${2}\"\n\n  if ! kubectl --namespace=\"${namespace}\" --timeout=\"5m\" \\\n    rollout status deployment \"${deployment}\"; then\n    fail \"'${namespace}/${deployment}' is not deployed as expected!\"\n  fi\n}\n\ncheck_rhtap_pipelines_health() {\n  echo \"[INFO] Checking OpenShift Pipelines health...\"\n\n  # wait until tekton pipelines operator is created\n  echo \"Waiting for OpenShift Pipelines Operator to be created...\"\n  timeout 2m bash \u003c\u003c-EOF\n  until oc get deployment openshift-pipelines-operator -n openshift-operators; do\n    echo -n \".\"\n    sleep 5\n  done\nEOF\n  oc rollout status -n openshift-operators deployment/openshift-pipelines-operator --timeout 10m\n\n  # wait until clustertasks tekton CRD is properly deployed\n  timeout 10m bash \u003c\u003c-EOF\n  until oc get crd tasks.tekton.dev; do\n    sleep 5\n  done\nEOF\n\n  timeout 2m bash \u003c\u003c-EOF\n  until oc get deployment tekton-pipelines-controller -n openshift-pipelines; do\n    sleep 5\n  done\nEOF\n  rollout_status \"openshift-pipelines\" \"tekton-pipelines-controller\"\n  rollout_status \"openshift-pipelines\" \"tekton-pipelines-webhook\"\n}\n\ncheck_rhtap_pipelines_health\n"],"resources":{"limits":{"cpu":"100m","memory":"256Mi"},"requests":{"cpu":"20m","memory":"128Mi"}}},{"name":"test-trusted-artifact-signer","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nrollout_status() {\n  local namespace=\"${1}\"\n  local deployment=\"${2}\"\n\n  if ! kubectl --namespace=\"${namespace}\" --timeout=\"5m\" \\\n    rollout status deployment \"${deployment}\"; then\n    fail \"'${namespace}/${deployment}' is not deployed as expected!\"\n  fi\n}\n\ndeployments=(ctlog fulcio-server rekor-redis rekor-server trillian-db trillian-logserver trillian-logsigner tuf)\nfor deploy in \"${deployments[@]}\"; do\n  rollout_status \"default\" \"${deploy}\"\ndone\n"],"resources":{"limits":{"cpu":"100m","memory":"256Mi"},"requests":{"cpu":"20m","memory":"128Mi"}}},{"name":"test-trusted-profile-analyzer","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nrollout_status() {\n  local namespace=\"${1}\"\n  local deployment=\"${2}\"\n\n  if ! kubectl --namespace=\"${namespace}\" --timeout=\"5m\" \\\n    rollout status deployment \"${deployment}\"; then\n    fail \"'${namespace}/${deployment}' is not deployed as expected!\"\n  fi\n}\n\necho \"Installing utils: \"\n\ncurl -Lso /usr/local/bin/cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 \u0026\u0026 chmod +x /usr/local/bin/cosign\ncurl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin\n\necho \"Checking deployments...\"\ndeployments=(bombastic-api bombastic-collector bombastic-indexer documentation guac-graphql spog-api spog-ui v11y-api v11y-indexer vexination-api vexination-collector vexination-indexer)\nfor deploy in \"${deployments[@]}\"; do\n  rollout_status \"default\" \"${deploy}\"\ndone\n\necho \"Upload SBOM to TPA...\"\ncosign download sbom registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9:1.0.1-1710487708 \u003e sbom.json\nsyft convert sbom.json -o cyclonedx-json@1.3=sbom-1-3.json\nkeycloak_host=$(kubectl -n default get route -l app.kubernetes.io/component=keycloak -o jsonpath='{.items[0].spec.host}')\n\ntpa_oidc_walker_client_secret=${TPA__OIDC__WALKER_CLIENT_SECRET}\ntpa_token=$(curl -d 'client_id=walker' \\\n  -d \"client_secret=${tpa_oidc_walker_client_secret}\" \\\n  -d 'grant_type=client_credentials' \\\n  \"https://${keycloak_host}/realms/chicken/protocol/openid-connect/token\" | jq .access_token -r)\n\nbombastic_api_host=$(oc -n default get route --selector app.kubernetes.io/name=bombastic-api -o jsonpath='{.items[].spec.host}')\n\ncurl -H 'content-type: application/json' -H \"authorization: Bearer ${tpa_token}\" -H 'transfer-encoding: chunked' --data @sbom-1-3.json \"https://${bombastic_api_host}/api/v1/sbom?id=rh-syft-0-105-0\" | tee result.log\n# Check if the SBOM was uploaded successfully\nif ! grep -q \"Successfully uploaded SBOM\" result.log; then\n    echo \"SBOM was not uploaded successfully!\"\n    exit 1\nfi\n"],"resources":{"limits":{"cpu":"100m","memory":"256Mi"},"requests":{"cpu":"20m","memory":"128Mi"}}}],"restartPolicy":"Never","serviceAccountName":"helm-manager"}}}},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","object":{"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{"helm.sh/hook":"post-install, post-upgrade","helm.sh/hook-delete-policy":"before-hook-creation"},"labels":{"app.kubernetes.io/instance":"release-name","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/version":"1.1.x","helm.sh/chart":"redhat-trusted-application-pipeline-1.0.0"},"name":"rhtap-release-name-configure"},"sourcePath":"templates/redhat-trusted-application-pipeline_template.yaml:7","spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"release-name","app.kubernetes.io/managed-by":"Helm","helm.sh/chart":"redhat-trusted-application-pipeline-1.0.0"},"name":"release-name-configure"},"spec":{"containers":[{"name":"configure-developer-hub","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\necho -n \"Installing utils: \"\ndnf install -y diffutils \u003e /dev/null 2\u003e/dev/null\necho -n \".\"\n\n# Installing Helm...\ncurl --fail --silent --show-error --location \\\n  https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 \\\n    | bash \u003e/dev/null\necho \"OK\"\n\nYQ_VERSION=\"v4.40.5\"\ncurl --fail --location --output \"/usr/bin/yq\" --silent --show-error \"https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64\"\nchmod +x \"/usr/bin/yq\"\n\nCHART=\"rhtap\"\nNAMESPACE=\"default\"\n\necho -n \"* Generating 'app-config.extra.yaml': \"\nAPPCONFIGEXTRA=\"app-config.extra.yaml\"\ntouch \"$APPCONFIGEXTRA\"\necho -n \".\"\n\ncat \u003c\u003c _EOF_ \u003e\u003e \"$APPCONFIGEXTRA\"\nauth:\n  environment: production\n  providers:\n    github:\n      production:\n        clientId: ${GITHUB__APP__CLIENT_ID}\n        clientSecret: ${GITHUB__APP__CLIENT_SECRET}\n    gitlab:\n      production:\n        clientId: ${GITLAB__OAUTH__CLIENT_ID}\n        clientSecret: ${GITLAB__OAUTH__CLIENT_SECRET}\ncatalog:\n  locations:\n  - target: ${DEVELOPER_HUB__CATALOG__URL}\n    type: url\n  rules:\n  - allow:\n    - Component\n    - System\n    - Group\n    - Resource\n    - Location\n    - Template\n    - API\nintegrations:\n  github:\n  - apps:\n    - appId: ${GITHUB__APP__APP_ID}\n      clientId: ${GITHUB__APP__CLIENT_ID}\n      clientSecret: ${GITHUB__APP__CLIENT_SECRET}\n      privateKey: |\n        ${GITHUB__APP__PRIVATE_KEY}\n      webhookSecret: ${GITHUB__APP__WEBHOOK_SECRET}\n      webhookUrl: GITHUB__APP__WEBHOOK_URL\n    host: github.com\n  gitlab:\n  - host: gitlab.com\n    token: ${GITLAB_TOKEN}\ntechdocs:\n  builder: local\n  generator:\n    runIn: local\n  publisher:\n    type: local\n_EOF_\necho -n \".\"\n\n\n# ArgoCD integration\nwhile [ \"$(kubectl get secret \"$CHART-argocd-secret\" --ignore-not-found -o name | wc -l)\" != \"1\" ]; do\n  echo -ne \"_\"\n  sleep 2\ndone\nkubectl get secret \"$CHART-argocd-secret\" -o yaml \u003e argocd_secret.yaml\necho -n \".\"\n\nARGOCD_API_TOKEN=\"$(yq '.data.api-token | @base64d' argocd_secret.yaml)\"\nARGOCD_HOSTNAME=\"$(yq '.data.hostname | @base64d' argocd_secret.yaml)\"\nARGOCD_PASSWORD=\"$(yq '.data.password | @base64d' argocd_secret.yaml)\"\nARGOCD_USER=\"$(yq '.data.user | @base64d' argocd_secret.yaml)\"\ncat \u003c\u003c _EOF_ \u003e\u003e \"$APPCONFIGEXTRA\"\nargocd:\n  username: $ARGOCD_USER\n  password: $ARGOCD_PASSWORD\n  waitCycles: 25\n  appLocatorMethods:\n    - type: 'config'\n      instances:\n        - name: default\n          url: https://$ARGOCD_HOSTNAME\n          token: $ARGOCD_API_TOKEN\n_EOF_\n\n# Tekton integration\nwhile [ \"$(kubectl get secret \"$CHART-pipelines-secret\" --ignore-not-found -o name | wc -l)\" != \"1\" ]; do\n  echo -ne \"_\"\n  sleep 2\ndone\nPIPELINES_PAC_URL=\"$(kubectl get secret \"$CHART-pipelines-secret\" -o yaml | yq '.data.webhook-url | @base64d')\"\nyq -i \".integrations.github[0].apps[0].webhookUrl = \\\"$PIPELINES_PAC_URL\\\"\" \"$APPCONFIGEXTRA\"\necho \"OK\"\n\necho -n \"* Generating values.yaml: \"\nHELM_VALUES=\"/tmp/developer-hub-values.yaml\"\n\ncat \u003c\u003cEOF \u003e${HELM_VALUES}\nglobal:\n  dynamic:\n    includes:\n    - dynamic-plugins.default.yaml\n    plugins:\n    - disabled: false\n      package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd\n      pluginConfig:\n        dynamicPlugins:\n          frontend:\n            roadiehq.backstage-plugin-argo-cd:\n              mountPoints:\n              - config:\n                  if:\n                    allOf:\n                    - isArgocdAvailable\n                  layout:\n                    gridColumnEnd:\n                      lg: span 8\n                      xs: span 12\n                importName: EntityArgoCDOverviewCard\n                mountPoint: entity.page.overview/cards\n              - config:\n                  if:\n                    allOf:\n                    - isArgocdAvailable\n                  layout:\n                    gridColumn: 1 / -1\n                importName: EntityArgoCDHistoryCard\n                mountPoint: entity.page.cd/cards\n    - disabled: false\n      package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic\n    - disabled: false\n      package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic\n    - disabled: false\n      package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic\n    - disabled: false\n      package: ./dynamic-plugins/dist/backstage-plugin-techdocs\n    - disabled: false\n      package: ./dynamic-plugins/dist/backstage-plugin-kubernetes\n    - disabled: false\n      package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic\n      pluginConfig:\n        kubernetes:\n          clusterLocatorMethods:\n          - clusters:\n            - authProvider: serviceAccount\n              name: rhdh-kubernetes-plugin\n              serviceAccountToken: \u003ctoken\u003e\n              skipTLSVerify: true\n              url: https://kubernetes.default.svc\n            type: config\n          customResources:\n          - apiVersion: v1\n            group: route.openshift.io\n            plural: routes\n          - apiVersion: v1\n            group: tekton.dev\n            plural: pipelineruns\n          - apiVersion: v1\n            group: tekton.dev\n            plural: taskruns\n          serviceLocatorMethod:\n            type: multiTenant\n    - disabled: false\n      package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay\n    - disabled: false\n      package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton\n      pluginConfig:\n        dynamicPlugins:\n          frontend:\n            janus-idp.backstage-plugin-tekton:\n              mountPoints:\n              - config:\n                  if:\n                    allOf:\n                    - isTektonCIAvailable\n                  layout:\n                    gridColumn: 1 / -1\n                    gridRowStart: 1\n                importName: TektonCI\n                mountPoint: entity.page.ci/cards\n    - disabled: false\n      package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology\nupstream:\n  backstage:\n    extraAppConfig:\n    - configMapRef: redhat-developer-hub-app-config-extra\n      filename: app-config.extra.yaml\nEOF\n\necho -n \".\"\nKUBERNETES_CLUSTER_FQDN=\"$(\n  kubectl get routes -n openshift-pipelines pipelines-as-code-controller -o jsonpath='{.spec.host}' | \\\n  cut -d. -f 2-\n)\"\nexport KUBERNETES_CLUSTER_FQDN\nyq --inplace '.global.clusterRouterBase = strenv(KUBERNETES_CLUSTER_FQDN)' \"$HELM_VALUES\"\necho \"OK\"\n\n\n################################################################################\n# Tekton plugin configuration\n################################################################################\nexport K8S_SA_TOKEN=$(\n  SECRET_NAME=$(kubectl get secrets --namespace \"$NAMESPACE\" -o name | grep rhdh-kubernetes-plugin-token- | cut -d/ -f2 | head -1)\n  kubectl get secret --namespace \"$NAMESPACE\" \"$SECRET_NAME\" -o jsonpath={.data.token} | base64 -d\n)\nyq -i '\n  (\n    (\n      (.global.dynamic.plugins[] | select(.package == \"./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic\")) |\n      .pluginConfig.kubernetes.clusterLocatorMethods[].clusters[]\n    ) |\n    select(.name == \"rhdh-kubernetes-plugin\") |\n    .serviceAccountToken\n  ) = strenv(K8S_SA_TOKEN)\n' \"$HELM_VALUES\"\n\n\necho -n \"* Installing Developer Hub: \"\nkubectl create configmap redhat-developer-hub-app-config-extra \\\n  --from-file=app-config.extra.yaml=\"$APPCONFIGEXTRA\" \\\n  -o yaml \\\n  --dry-run=client | kubectl apply -f - \u003e/dev/null\necho -n \".\"\nhelm repo add developer-hub https://charts.openshift.io/ \u003e/dev/null\necho -n \".\"\nif ! helm upgrade \\\n  --install \\\n  --devel \\\n  --namespace=${NAMESPACE} \\\n  --values=\"$HELM_VALUES\" \\\n  --version=~1.1 \\\n  redhat-developer-hub \\\n  developer-hub/redhat-developer-hub \u003e/dev/null; then\n  echo \"ERROR while installing chart!\"\n  exit 1\nfi\necho \"OK\"\n\necho -n \"* Waiting for route: \"\nuntil kubectl get route \"redhat-developer-hub\" -o name \u003e/dev/null ; do\n  echo -n \".\"\n  sleep 3\ndone\nHOSTNAME=\"$(kubectl get routes \"redhat-developer-hub\" -o jsonpath=\"{.spec.host}\")\"\necho -n \".\"\nif [ \"$(kubectl get secret \"$CHART-developer-hub-secret\" -o name --ignore-not-found | wc -l)\" = \"0\" ]; then\n  kubectl create secret generic \"$CHART-developer-hub-secret\" \\\n    --from-literal=\"hostname=$HOSTNAME\" \u003e/dev/null\nfi\necho \"OK\"\n\n# Wait for the UI to fully boot once before modifying the configuration.\n# This should avoid issues with DB migrations being interrupted and generating locks.\n# Once RHIDP-1691 is solved that safeguard could be removed.\necho -n \"* Waiting for UI: \"\nuntil curl --fail --insecure --location --output /dev/null --silent \"https://$HOSTNAME\"; do\n  echo -n \"_\"\n  sleep 3\ndone\necho \"OK\"\n\n\n################################################################################\n# Configure TLS\n################################################################################\necho -n \"* Waiting for deployment: \"\nuntil kubectl get deployment redhat-developer-hub -o name \u003e/dev/null ; do\n  echo -n \"_\"\n  sleep 3\ndone\necho \"OK\"\n\nORIGNAL_POD=$(kubectl get pods -l app.kubernetes.io/name=developer-hub -o name)\n\nDEPLOYMENT=\"/tmp/deployment.yaml\"\nDEPLOYMENT_PATCHED=\"/tmp/deployment.patched.yaml\"\noc get deployment/redhat-developer-hub -o yaml \u003e\"$DEPLOYMENT\"\ncp \"$DEPLOYMENT\" \"$DEPLOYMENT_PATCHED\"\n\necho -n \"* Configuring TLS:\"\n# Update env var.\nif [ \"$(yq '.spec.template.spec.containers[0].env[] | select(.name == \"NODE_EXTRA_CA_CERTS\") | length' \"$DEPLOYMENT_PATCHED\")\" == \"2\" ]; then\n    YQ_EXPRESSION='\n(\n    .spec.template.spec.containers[].env[] |\n    select(.name == \"NODE_EXTRA_CA_CERTS\") | .value\n) = \"/ingress-cert/ca.crt\"\n'\nelse\n    YQ_EXPRESSION='.spec.template.spec.containers[0].env += {\"name\": \"NODE_EXTRA_CA_CERTS\", \"value\": \"/ingress-cert/ca.crt\"}'\nfi\nyq --inplace \"$YQ_EXPRESSION\" \"$DEPLOYMENT_PATCHED\"\necho -n \".\"\n# Update volume mount\nif [ \"$(yq '.spec.template.spec.containers[0].volumeMounts[] | select(.name == \"kube-root-ca\") | length' \"$DEPLOYMENT_PATCHED\")\" == \"2\" ]; then\n    YQ_EXPRESSION='\n(\n    .spec.template.spec.containers[].volumeMounts[] |\n    select(.name == \"kube-root-ca\") | .mountPath\n) = \"/ingress-cert\"\n'\nelse\n    YQ_EXPRESSION='.spec.template.spec.containers[0].volumeMounts += {\"name\": \"kube-root-ca\", \"mountPath\": \"/ingress-cert\"}'\nfi\nyq --inplace \"$YQ_EXPRESSION\" \"$DEPLOYMENT_PATCHED\"\necho -n \".\"\n# Update volume\nif [ \"$(yq '.spec.template.spec.volumes[] | select(.name == \"kube-root-ca\") | length' \"$DEPLOYMENT_PATCHED\")\" == \"2\" ]; then\n    YQ_EXPRESSION='\n(\n    .spec.template.spec.volumes[] |\n    select(.name == \"kube-root-ca\") | .configMap\n) = {\"name\": \"kube-root-ca.crt\", \"defaultMode\": 420}\n'\nelse\n    YQ_EXPRESSION='.spec.template.spec.volumes += {\"name\": \"kube-root-ca\", \"configMap\": {\"name\": \"kube-root-ca.crt\", \"defaultMode\": 420}}'\nfi\nyq --inplace \"$YQ_EXPRESSION\" \"$DEPLOYMENT_PATCHED\"\necho \"OK\"\n\necho -n \"* Updating deployment: \"\nyq -i 'sort_keys(..)' \"$DEPLOYMENT\"\nyq -i 'sort_keys(..)' \"$DEPLOYMENT_PATCHED\"\nif ! diff --brief \"$DEPLOYMENT\" \"$DEPLOYMENT_PATCHED\" \u003e/dev/null; then\n    oc apply -f \"$DEPLOYMENT_PATCHED\" \u003e/dev/null 2\u003e\u00261\n\n    # Wait for the configuration to be deployed\n    while kubectl get \"$ORIGNAL_POD\" -o name \u003e/dev/null 2\u003e\u00261 ; do\n        echo -n \"_\"\n        sleep 2\n    done\n    echo \"OK\"\nelse\n    echo \"Configuration already up to date\"\nfi\n\n\necho -n \"* Waiting for UI: \"\nuntil curl --fail --insecure --location --output /dev/null --silent \"https://$HOSTNAME\"; do\n  echo -n \"_\"\n  sleep 3\ndone\necho \"OK\"\n\necho\necho \"Configuration successful\"\n\n\n  \n"],"resources":{}},{"name":"configure-gitops","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/sh","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\necho -n \"* Installing 'argocd' CLI: \"\ncurl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nchmod 555 argocd\n./argocd version --client | head -1 | cut -d' ' -f2\n\nCRD=\"argocds\"\necho -n \"* Waiting for '$CRD' CRD: \"\nwhile [ $(kubectl api-resources | grep -c \"^$CRD \") = \"0\" ] ; do\n  echo -n \".\"\n  sleep 3\ndone\necho \"OK\"\n\n#\n# All actions must be idempotent\n#\nCHART=\"rhtap\"\nNAMESPACE=\"default\"\nRHTAP_ARGOCD_INSTANCE=\"$CHART-argocd\"\n\necho -n \"* Waiting for gitops operator deployment: \"\nuntil kubectl get argocds.argoproj.io -n openshift-gitops openshift-gitops -o jsonpath={.status.phase} | grep -q \"^Available$\"; do\n  echo -n \"_\"\n  sleep 2\ndone\necho \"OK\"\n\necho -n \"* Creating ArgoCD instance for RHTAP: \"\ncat \u003c\u003cEOF | kubectl apply -n \"$NAMESPACE\" -f - \u003e/dev/null\n      \n---\napiVersion: argoproj.io/v1beta1\nkind: ArgoCD\nmetadata:\n  name: rhtap-argocd\nspec:\n  server:\n    autoscale:\n      enabled: false\n    grpc:\n      ingress:\n        enabled: false\n    ingress:\n      enabled: false\n    resources:\n      limits:\n        cpu: 500m\n        memory: 256Mi\n      requests:\n        cpu: 125m\n        memory: 128Mi\n    route:\n      enabled: true\n      tls:\n        insecureEdgeTerminationPolicy: Redirect\n        termination: reencrypt\n    service:\n      type: ''\n  grafana:\n    enabled: false\n    ingress:\n      enabled: false\n    resources:\n      limits:\n        cpu: 500m\n        memory: 256Mi\n      requests:\n        cpu: 250m\n        memory: 128Mi\n    route:\n      enabled: false\n  monitoring:\n    enabled: false\n  notifications:\n    enabled: false\n  prometheus:\n    enabled: false\n    ingress:\n      enabled: false\n    route:\n      enabled: false\n  initialSSHKnownHosts: {}\n  sso:\n    dex:\n      openShiftOAuth: true\n      resources:\n        limits:\n          cpu: 500m\n          memory: 256Mi\n        requests:\n          cpu: 250m\n          memory: 128Mi\n    provider: dex\n  applicationSet:\n    resources:\n      limits:\n        cpu: '2'\n        memory: 1Gi\n      requests:\n        cpu: 250m\n        memory: 512Mi\n    webhookServer:\n      ingress:\n        enabled: false\n      route:\n        enabled: false\n  rbac:\n    defaultPolicy: ''\n    policy: |\n      g, system:cluster-admins, role:admin\n      g, cluster-admins, role:admin\n    scopes: '[groups]'\n  repo:\n    resources:\n      limits:\n        cpu: '1'\n        memory: 1Gi\n      requests:\n        cpu: 250m\n        memory: 256Mi\n  resourceExclusions: |\n    - apiGroups:\n      - tekton.dev\n      clusters:\n      - '*'\n      kinds:\n      - TaskRun\n      - PipelineRun\n  ha:\n    enabled: false\n    resources:\n      limits:\n        cpu: 500m\n        memory: 256Mi\n      requests:\n        cpu: 250m\n        memory: 128Mi\n  tls:\n    ca: {}\n  redis:\n    resources:\n      limits:\n        cpu: 500m\n        memory: 256Mi\n      requests:\n        cpu: 250m\n        memory: 128Mi\n  controller:\n    processors: {}\n    resources:\n      limits:\n        cpu: \"2\"\n        memory: 6Gi\n      requests:\n        cpu: \"1\"\n        memory: 3Gi\n  extraConfig:\n    accounts.admin: apiKey, login\n\nEOF\nuntil kubectl get argocds.argoproj.io -n \"$NAMESPACE\" \"$RHTAP_ARGOCD_INSTANCE\" --ignore-not-found -o jsonpath={.status.phase} | grep -q \"^Available$\"; do\n  echo -n \"_\"\n  sleep 2\ndone\necho -n \".\"\nuntil kubectl get route -n \"$NAMESPACE\" \"$RHTAP_ARGOCD_INSTANCE-server\" \u003e/dev/null 2\u003e\u00261; do\n  echo -n \"_\"\n  sleep 2\ndone\necho \"OK\"\n\necho -n \"* ArgoCD admin user: \"\nif [ \"$(kubectl get secret \"$RHTAP_ARGOCD_INSTANCE-secret\" -o name --ignore-not-found | wc -l)\" = \"0\" ]; then\n    ARGOCD_HOSTNAME=\"$(kubectl get route -n \"$NAMESPACE\" \"$RHTAP_ARGOCD_INSTANCE-server\" --ignore-not-found -o jsonpath={.spec.host})\"\n    echo -n \".\"\n    ARGOCD_PASSWORD=\"$(kubectl get secret -n \"$NAMESPACE\" \"$RHTAP_ARGOCD_INSTANCE-cluster\" -o jsonpath=\"{.data.admin\\.password}\" | base64 --decode)\"\n    echo -n \".\"\n    ./argocd login \"$ARGOCD_HOSTNAME\" --grpc-web --insecure --username admin --password \"$ARGOCD_PASSWORD\" \u003e/dev/null\n    echo -n \".\"\n    ARGOCD_API_TOKEN=\"$(./argocd account generate-token --account \"admin\")\"\n    echo -n \".\"\n    kubectl create secret generic \"$RHTAP_ARGOCD_INSTANCE-secret\" \\\n      --from-literal=\"api-token=$ARGOCD_API_TOKEN\" \\\n      --from-literal=\"hostname=$ARGOCD_HOSTNAME\" \\\n      --from-literal=\"password=$ARGOCD_PASSWORD\" \\\n      --from-literal=\"user=admin\" \\\n      \u003e /dev/null\nfi\necho \"OK\"\n\n      \necho -n \"* Waiting for openshift-pipelines: \"\nwhile ! kubectl get namespace openshift-pipelines --ignore-not-found \u003e /dev/null; do\n  echo -n \".\"\n  sleep 2\ndone\necho \"OK\"\n\nCRDS=( pipelines tasks )\nfor CRD in \"${CRDS[@]}\"; do\n  echo -n \"* Waiting for '$CRD' CRD: \"\n  while [ $(kubectl api-resources | grep -c \"^$CRD \") = \"0\" ] ; do\n    echo -n \".\"\n    sleep 2\n  done\n  echo \"OK\"\ndone\n\necho -n \"* Waiting for openshift-pipelines webhook service: \"\nwhile true; do\n  # Try instanciating a task\n  cat \u003c\u003c EOF | kubectl apply -f - --dry-run=server \u003e/dev/null 2\u003e\u00261 \u0026\u0026 break\napiVersion: tekton.dev/v1\nkind: Task\nmetadata:\n  name: deleteme-task\nspec:\n  description: \u003e-\n    Test task to validate that Tekton is installed.\n  steps:\n    - image: \"registry.redhat.io/openshift4/ose-tools-rhel8:latest\"\n      name: setup\n      script: |\n        #!/usr/bin/env bash\n        echo \"OK\"\n      workingDir: /tmp\nEOF\n  echo -n \".\"\n  sleep 2\ndone\necho \"OK\"\n\n\necho -n \"* Configuring Tasks: \"\ncat \u003c\u003c EOF | kubectl apply -f - \u003e/dev/null\n      \napiVersion: tekton.dev/v1\nkind: Task\nmetadata:\n  name: argocd-login-check\nspec:\n  description: \u003e-\n    Check the argocd login credentials.\n  steps:\n    - env:\n      - name: ARGOCD_HOSTNAME\n        valueFrom:\n          secretKeyRef:\n            name: rhtap-argocd-secret\n            key: hostname\n      - name: ARGOCD_PASSWORD\n        valueFrom:\n          secretKeyRef:\n            name: rhtap-argocd-secret\n            key: password\n      - name: ARGOCD_USER\n        valueFrom:\n          secretKeyRef:\n            name: rhtap-argocd-secret\n            key: user\n      image: registry.access.redhat.com/ubi9/ubi-minimal\n      name: check-argocd-login\n      script: |\n        #!/usr/bin/env bash\n        set -o errexit\n        set -o nounset\n        set -o pipefail\n\n        echo -n \"* Installing 'argocd' CLI: \"\n        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\n        chmod 555 argocd\n        ./argocd version --client | head -1 | cut -d' ' -f2\n\n        ./argocd login \"\\$ARGOCD_HOSTNAME\" --grpc-web --insecure --username \"\\$ARGOCD_USER\" --password \"\\$ARGOCD_PASSWORD\"\n      workingDir: /tmp\n\nEOF\necho \"OK\"\n\necho\necho \"Configuration successful\"\n\n  \n"],"resources":{}},{"name":"configure-namespace","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\n      \necho -n \"* Waiting for openshift-pipelines: \"\nwhile ! kubectl get namespace openshift-pipelines --ignore-not-found \u003e /dev/null; do\n  echo -n \".\"\n  sleep 2\ndone\necho \"OK\"\n\nCRDS=( pipelines tasks )\nfor CRD in \"${CRDS[@]}\"; do\n  echo -n \"* Waiting for '$CRD' CRD: \"\n  while [ $(kubectl api-resources | grep -c \"^$CRD \") = \"0\" ] ; do\n    echo -n \".\"\n    sleep 2\n  done\n  echo \"OK\"\ndone\n\necho -n \"* Waiting for openshift-pipelines webhook service: \"\nwhile true; do\n  # Try instanciating a task\n  cat \u003c\u003c EOF | kubectl apply -f - --dry-run=server \u003e/dev/null 2\u003e\u00261 \u0026\u0026 break\napiVersion: tekton.dev/v1\nkind: Task\nmetadata:\n  name: deleteme-task\nspec:\n  description: \u003e-\n    Test task to validate that Tekton is installed.\n  steps:\n    - image: \"registry.redhat.io/openshift4/ose-tools-rhel8:latest\"\n      name: setup\n      script: |\n        #!/usr/bin/env bash\n        echo \"OK\"\n      workingDir: /tmp\nEOF\n  echo -n \".\"\n  sleep 2\ndone\necho \"OK\"\n\n\nCHART=\"rhtap\"\nNAMESPACE=\"default\"\n\necho -n \"* Configuring Tasks: \"\nwhile ! kubectl get secrets -n openshift-pipelines signing-secrets \u003e/dev/null 2\u003e\u00261; do\n  echo -n \"_\"\n  sleep 2\ndone\necho -n \".\"\nCOSIGN_SIGNING_PUBLIC_KEY=\"\"\nwhile [ -z \"${COSIGN_SIGNING_PUBLIC_KEY:-}\" ]; do\n  echo -n \"_\"\n  sleep 2\n  COSIGN_SIGNING_PUBLIC_KEY=$(kubectl get secrets -n openshift-pipelines signing-secrets -o jsonpath='{.data.cosign\\.pub}' 2\u003e/dev/null)\ndone\ncat \u003c\u003c EOF | kubectl apply -f - \u003e/dev/null\n        \n  apiVersion: tekton.dev/v1\n  kind: Task\n  metadata:\n    name: rhtap-dev-namespace-setup\n    annotations:\n      helm.sh/chart: \"redhat-trusted-application-pipeline-1.0.0\"\n  spec:\n    description: \u003e-\n      Create the required resources for redhat-trusted-application-pipeline tasks to run in a namespace.\n    params:\n      - default: \\${GITOPS__GIT_TOKEN}\n        description: |\n          Git token\n        name: git_token\n        type: string\n      \n      \n      \n      \n      - default: \"\\${GITLAB_TOKEN}\"\n        description: |\n          GitLab Personal Access Token\n        name: gitlab_token\n        type: string\n      - default: \"\\${GITHUB__APP__WEBHOOK_SECRET}\"\n        description: |\n          Pipelines as Code webhook secret\n        name: pipelines_webhook_secret\n        type: string\n      - default: \\${QUAY__DOCKERCONFIGJSON}\n        description: |\n          Image registry token\n        name: quay_dockerconfigjson\n        type: string\n      - default: \\${ACS__CENTRAL_ENDPOINT}\n        description: |\n          StackRox Central address:port tuple\n          (example - rox.stackrox.io:443)\n        name: acs_central_endpoint\n        type: string\n      - default: \\${ACS__API_TOKEN}\n        description: |\n          StackRox API token with CI permissions\n        name: acs_api_token\n        type: string\n    steps:\n      - env:\n        - name: GIT_TOKEN\n          value: \\$(params.git_token)\n        - name: GITLAB_TOKEN\n          value: \\$(params.gitlab_token)\n        - name: PIPELINES_WEBHOOK_SECRET\n          value: \\$(params.pipelines_webhook_secret)\n        - name: QUAY_DOCKERCONFIGJSON\n          value: \\$(params.quay_dockerconfigjson)\n        - name: ROX_API_TOKEN\n          value: \\$(params.acs_api_token)\n        - name: ROX_ENDPOINT\n          value: \\$(params.acs_central_endpoint)\n        image: \"registry.redhat.io/openshift4/ose-tools-rhel8:latest\"\n        name: setup\n        script: |\n          #!/usr/bin/env bash\n          set -o errexit\n          set -o nounset\n          set -o pipefail\n        \n  \n          SECRET_NAME=\"cosign-pub\"\n          if [ -n \"$COSIGN_SIGNING_PUBLIC_KEY\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            cat \u003c\u003cEOF | kubectl apply -f - \u003e/dev/null\n          apiVersion: v1\n          data:\n            cosign.pub: $COSIGN_SIGNING_PUBLIC_KEY\n          kind: Secret\n          metadata:\n            labels:\n              app.kubernetes.io/instance: default\n              app.kubernetes.io/part-of: tekton-chains\n              helm.sh/chart: redhat-trusted-application-pipeline-1.0.0\n              operator.tekton.dev/operand-name: tektoncd-chains\n            name: \\$SECRET_NAME\n          type: Opaque\n          EOF\n            echo \"OK\"\n          fi\n  \n          SECRET_NAME=\"gitlab-auth-secret\"\n          if [ -n \"\\$GITLAB_TOKEN\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            kubectl create secret generic \"\\$SECRET_NAME\" \\\n              --from-literal=password=\\$GITLAB_TOKEN \\\n              --from-literal=username=oauth2 \\\n              --type=kubernetes.io/basic-auth \\\n              --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true \u003e/dev/null\n            kubectl annotate secret \"\\$SECRET_NAME\" \"helm.sh/chart=redhat-trusted-application-pipeline-1.0.0\" \u003e/dev/null\n            echo \"OK\"\n          fi\n  \n          SECRET_NAME=\"gitops-auth-secret\"\n          if [ -n \"\\$GIT_TOKEN\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            kubectl create secret generic \"\\$SECRET_NAME\" \\\n              --from-literal=password=\\$GIT_TOKEN \\\n              --type=kubernetes.io/basic-auth \\\n              --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true \u003e/dev/null\n            kubectl annotate secret \"\\$SECRET_NAME\" \"helm.sh/chart=redhat-trusted-application-pipeline-1.0.0\" \u003e/dev/null\n            echo \"OK\"\n          fi\n  \n          SECRET_NAME=\"pipelines-secret\"\n          if [ -n \"\\$PIPELINES_WEBHOOK_SECRET\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            kubectl create secret generic \"\\$SECRET_NAME\" \\\n              --from-literal=webhook.secret=\\$PIPELINES_WEBHOOK_SECRET \\\n              --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true \u003e/dev/null\n            kubectl annotate secret \"\\$SECRET_NAME\" \"helm.sh/chart=redhat-trusted-application-pipeline-1.0.0\" \u003e/dev/null\n            echo \"OK\"\n          fi\n          \n          SECRET_NAME=\"rhtap-image-registry-token\"\n          if [ -n \"\\$QUAY_DOCKERCONFIGJSON\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            DATA=$(mktemp)\n            echo -n \"\\$QUAY_DOCKERCONFIGJSON\" \u003e\"\\$DATA\"\n            kubectl create secret docker-registry \"\\$SECRET_NAME\" \\\n              --from-file=.dockerconfigjson=\"\\$DATA\" --dry-run=client -o yaml | \\\n              kubectl apply --filename - --overwrite=true \u003e/dev/null\n            rm \"\\$DATA\"\n            echo -n \".\"\n            kubectl annotate secret \"\\$SECRET_NAME\" \"helm.sh/chart=redhat-trusted-application-pipeline-1.0.0\" \u003e/dev/null\n            echo -n \".\"\n            while ! kubectl get serviceaccount pipeline \u003e/dev/null \u0026\u003e2; do\n              sleep 2\n              echo -n \"_\"\n            done\n            for SA in default pipeline; do\n              kubectl patch serviceaccounts \"\\$SA\" --patch \"\n            secrets:\n              - name: \\$SECRET_NAME\n            imagePullSecrets:\n              - name: \\$SECRET_NAME\n            \" \u003e/dev/null\n              echo -n \".\"\n            done\n            echo \"OK\"\n          fi\n          \n          SECRET_NAME=\"rox-api-token\"\n          if [ -n \"\\$ROX_API_TOKEN\" ] \u0026\u0026 [ -n \"\\$ROX_ENDPOINT\" ]; then\n            echo -n \"* \\$SECRET_NAME secret: \"\n            kubectl create secret generic \"\\$SECRET_NAME\" \\\n              --from-literal=rox-api-endpoint=\\$ROX_ENDPOINT \\\n              --from-literal=rox-api-token=\\$ROX_API_TOKEN \\\n              --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true \u003e/dev/null\n            kubectl annotate secret \"\\$SECRET_NAME\" \"helm.sh/chart=redhat-trusted-application-pipeline-1.0.0\" \u003e/dev/null\n            echo \"OK\"\n          fi\n  \n          echo\n          echo \"Namespace is ready to execute redhat-trusted-application-pipeline pipelines\"\n        workingDir: /tmp\n  \nEOF\necho -n \".\"\ncat \u003c\u003c EOF | kubectl apply -f - \u003e/dev/null\n        \n  apiVersion: tekton.dev/v1\n  kind: Task\n  metadata:\n    name: rhtap-pe-info\n    annotations:\n      helm.sh/chart: \"redhat-trusted-application-pipeline-1.0.0\"\n  spec:\n    description: \u003e-\n      Display the configuration information needed by the Platform\n      Engineer to configure the RHDH.\n    steps:\n      - env:\n        - name: ARGOCD_HOSTNAME\n          valueFrom:\n            secretKeyRef:\n              name: rhtap-argocd-secret\n              key: hostname\n        - name: ARGOCD_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: rhtap-argocd-secret\n              key: api-token\n        - name: DEVELOPER_HUB_HOSTNAME\n          valueFrom:\n            secretKeyRef:\n              name: rhtap-developer-hub-secret\n              key: hostname\n        - name: PIPELINES_PAC_GH_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: rhtap-pipelines-secret\n              key: webhook-github-secret\n        - name: PIPELINES_PAC_URL\n          valueFrom:\n            secretKeyRef:\n              name: rhtap-pipelines-secret\n              key: webhook-url\n        image: \"registry.redhat.io/openshift4/ose-tools-rhel8:latest\"\n        name: setup\n        script: |\n          #!/usr/bin/env bash\n          set -o errexit\n          set -o nounset\n          set -o pipefail\n  \n          # Output information in YAML so that it can easily be\n          # post-processed if necessary.\n          cat \u003c\u003c _EOF_\n          gitops:\n            api-token: \\$ARGOCD_TOKEN\n            hostname: \\$ARGOCD_HOSTNAME\n          developer-hub:\n            hostname: \\$DEVELOPER_HUB_HOSTNAME\n          pipelines:\n            pipelines-as-code:\n              github:\n                # The docs URL explains how to setup the GitHub Application.\n                # Set dummy values for the homepage URL and webhook URL, and\n                # replace them with the final values after the chart is installed.\n                docs-url: https://pipelinesascode.com/docs/install/github_apps/\n                homepage-url: https://\\$DEVELOPER_HUB_HOSTNAME\n                callback-url: https://\\$DEVELOPER_HUB_HOSTNAME/api/auth/github/handler/frame\n                webhook-url: \\$PIPELINES_PAC_URL\n                secret: \\$PIPELINES_PAC_GH_SECRET\n          _EOF_\n        workingDir: /tmp\n  \nEOF\necho -n \".\"\necho \"OK\"\n\n\n      \nDEV_NAMESPACE_LIST=(\n \"rhtap-app-development\" \"rhtap-app-stage\" \"rhtap-app-prod\"\n\n)\n\necho -n \"* Waiting for resources: \"\nwhile ! kubectl get tasks \"$CHART-dev-namespace-setup\" \u003e/dev/null 2\u003e\u00261; do\n  echo -n \"_\"\n  sleep 2\ndone\necho \"OK\"\n\nfor DEV_NAMESPACE in \"${DEV_NAMESPACE_LIST[@]}\"; do\n  echo -n \"* Creating '$DEV_NAMESPACE' namespace: \"\n  kubectl create namespace \"$DEV_NAMESPACE\" --dry-run=client -o yaml | kubectl apply -f - \u003e/dev/null\n  echo -n \".\"\n  kubectl annotate namespace \"$DEV_NAMESPACE\" \"argocd.argoproj.io/managed-by=$CHART-argocd\" \u003e/dev/null\n  echo \"OK\"\n  echo -n \"* Configuring '$DEV_NAMESPACE' namespace: \"\n  cat \u003c\u003c EOF | sed \"s|^metadata:.*|\\0\\n  namespace: $DEV_NAMESPACE|\" | kubectl create --filename - \u003e/dev/null\n\napiVersion: tekton.dev/v1\nkind: PipelineRun\nmetadata:\n  generateName: rhtap-dev-namespace-setup-\n  annotations:\n    helm.sh/chart: \"redhat-trusted-application-pipeline-1.0.0\"\nspec:\n  pipelineSpec:\n    tasks:\n      - name: configure-namespace\n        taskRef:\n          resolver: cluster\n          params:\n            - name: kind\n              value: task\n            - name: name\n              value: rhtap-dev-namespace-setup\n            - name: namespace\n              value: default\n\nEOF\n  echo \"OK\"\ndone\n\n\n\necho\necho \"Configuration successful\"\n\n  \n"],"resources":{}},{"name":"configure-pipelines","image":"quay.io/redhat-appstudio/appstudio-utils:dbbdd82734232e6289e8fbae5b4c858481a7c057","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nCRD=\"tektonconfigs\"\necho -n \"* Waiting for '$CRD' CRD: \"\nwhile [ $(kubectl api-resources | grep -c \"^$CRD \") = \"0\" ] ; do\n  echo -n \".\"\n  sleep 3\ndone\necho \"OK\"\n\n#\n# All actions MUST be idempotent\n#\nCHART=\"rhtap\"\nPIPELINES_NAMESPACE=\"openshift-pipelines\"\n\necho -n \"* Waiting for pipelines operator deployment: \"\nuntil kubectl get namespace \"$PIPELINES_NAMESPACE\" \u003e/dev/null 2\u003e\u00261; do\n  echo -n \".\"\n  sleep 3\ndone\nuntil kubectl get route -n \"$PIPELINES_NAMESPACE\" pipelines-as-code-controller \u003e/dev/null 2\u003e\u00261; do\n  echo -n \".\"\n  sleep 3\ndone\necho \"OK\"\n\necho -n \"* Update the TektonConfig resource: \"\nuntil kubectl get tektonconfig config \u003e/dev/null 2\u003e\u00261; do\n  echo -n \".\"\n  sleep 3\ndone\nkubectl patch tektonconfig config --type 'merge' --patch '        \n  {\n    \"spec\": {\n      \"pipeline\": {\n        \"enable-bundles-resolver\": true,\n        \"enable-cluster-resolver\": true,\n        \"enable-custom-tasks\": true,\n        \"enable-git-resolver\": true,\n        \"enable-hub-resolver\": true,\n        \"enable-tekton-oci-bundles\": true\n      },\n      \"chain\": {\n        \"artifacts.oci.storage\": \"oci\",\n        \"artifacts.pipelinerun.format\": \"in-toto\",\n        \"artifacts.pipelinerun.storage\": \"oci\",\n        \"artifacts.taskrun.format\": \"in-toto\",\n        \"artifacts.taskrun.storage\": \"oci\",\n        \"transparency.enabled\": \"true\",\n        \"transparency.url\": \"http://rekor-server.default.svc\"\n      },\n      \"platforms\": {\n        \"openshift\": {\n          \"pipelinesAsCode\": {\n            \"settings\": {\n              \"remember-ok-to-test\": \"false\"\n            }\n          }\n        }\n      }\n    }\n  }\n  ' \u003e/dev/null\necho \"OK\"\n\necho -n \"* Configuring Chains secret: \"\nSECRET=\"signing-secrets\"\nif [ \"$(kubectl get secret -n \"$PIPELINES_NAMESPACE\" \"$SECRET\" -o jsonpath='{.data}' --ignore-not-found --allow-missing-template-keys)\" == \"\" ]; then\n  # Delete secret/signing-secrets if already exists since by default cosign creates immutable secrets\n  echo -n \".\"\n  kubectl delete secrets  -n \"$PIPELINES_NAMESPACE\" \"$SECRET\" --ignore-not-found=true\n\n  # To make this run conveniently without user input let's create a random password\n  echo -n \".\"\n  RANDOM_PASS=$( openssl rand -base64 30 )\n\n  # Generate the key pair secret directly in the cluster.\n  # The secret should be created as immutable.\n  echo -n \".\"\n  env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair \"k8s://$PIPELINES_NAMESPACE/$SECRET\" \u003e/dev/null\nfi\n# If the secret is not marked as immutable, make it so.\nif [ \"$(kubectl get secret -n \"$PIPELINES_NAMESPACE\" \"$SECRET\" -o jsonpath='{.immutable}')\" != \"true\" ]; then\n  echo -n \".\"\n  kubectl patch secret -n \"$PIPELINES_NAMESPACE\" \"$SECRET\" --dry-run=client -o yaml \\\n    --patch='{\"immutable\": true}' \\\n  | kubectl apply -f - \u003e/dev/null\nfi\necho \"OK\"\n\n\necho -n \"* Configuring Pipelines-as-Code: \"\nif [ \"$(kubectl get secret \"$CHART-pipelines-secret\" -o name --ignore-not-found | wc -l)\" = \"0\" ]; then\n  echo -n \".\"\n  WEBHOOK_SECRET=\"\\${GITHUB__APP__WEBHOOK_SECRET}\"\n  kubectl create secret generic \"$CHART-pipelines-secret\" \\\n    --from-literal=\"webhook-github-secret=$WEBHOOK_SECRET\" \\\n    --from-literal=\"webhook-url=$(kubectl get routes -n \"$PIPELINES_NAMESPACE\" pipelines-as-code-controller -o jsonpath=\"https://{.spec.host}\")\" \u003e/dev/null\nelse\n  WEBHOOK_SECRET=\"$(kubectl get secret \"$CHART-pipelines-secret\" ) -o jsonpath=\"{.data.webhook-github-secret}\" | base64 -d\"\nfi\nif [ \"$(kubectl get secret -n \"$PIPELINES_NAMESPACE\" \"pipelines-as-code-secret\" -o name --ignore-not-found | wc -l)\" = \"0\" ]; then\n  echo -n \".\"\n  kubectl -n \"$PIPELINES_NAMESPACE\" create secret generic pipelines-as-code-secret \\\n    --from-literal github-application-id=\"${GITHUB__APP__APP_ID}\" \\\n    --from-literal github-private-key=\"$(echo \"JHtHSVRIVUJfX0FQUF9fUFJJVkFURV9LRVl9Cg==\" | base64 -d)\" \\\n    --from-literal webhook.secret=\"$WEBHOOK_SECRET\" \\\n    --dry-run=client -o yaml | kubectl apply -f - \u003e/dev/null\nfi\necho \"OK\"\n\n\necho\necho \"Configuration successful\"\n\n  \n"],"resources":{}},{"name":"configure-trusted-artifact-signer","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\nCHART=\"rhtap\"\n\necho -n \"* Configure OIDC: \"\n\ngit clone https://github.com/securesign/sigstore-ocp.git \u003e/dev/null\necho -n \".\"\noc apply --kustomize sigstore-ocp/keycloak/operator/base\necho -n \".\"\nfor CR in keycloaks keycloakclients keycloakrealms keycloakusers; do\n  while [ $(kubectl api-resources | grep -c \"^$CR \") = \"0\" ] ; do\n    echo -n \"_\"\n    sleep 2\n  done\n  echo -n \".\"\ndone\noc apply --kustomize sigstore-ocp/keycloak/resources/base --dry-run=client -o yaml\noc apply --kustomize sigstore-ocp/keycloak/resources/base\necho -n \".\"\nexport FULCIO__OIDC__CLIENT_ID=\"trusted-artifact-signer\"\nexport FULCIO__OIDC__TYPE=\"email\"\nFULCIO__OIDC__URL=\"\"\nwhile [ -z \"$FULCIO__OIDC__URL\" ]; do\n  FULCIO__OIDC__URL=\"$(kubectl get routes -n keycloak-system keycloak -o jsonpath=\"{.spec.host}\" --ignore-not-found)\"\n  sleep 2\ndone\nexport FULCIO__OIDC__URL=\"https://$FULCIO__OIDC__URL/auth/realms/trusted-artifact-signer\"\n\nexport FULCIO__ORG_EMAIL=\"${TAS__SECURESIGN__FULCIO__ORG_EMAIL}\"\nexport FULCIO__ORG_NAME=\"${TAS__SECURESIGN__FULCIO__ORG_NAME}\"\necho \"OK\"\n\nCRDS=( securesigns )\nfor CRD in \"${CRDS[@]}\"; do\n  echo -n \"* Waiting for '$CRD' CRD: \"\n  while [ $(kubectl api-resources | grep -c \"^$CRD \") = \"0\" ] ; do\n    echo -n \"_\"\n    sleep 2\n  done\n  echo \"OK\"\ndone\n\necho -n \"* Configure SecureSign instance: \"\ncat \u003c\u003cEOF | kubectl apply -f - \u003e/dev/null\n\napiVersion: rhtas.redhat.com/v1alpha1\nkind: Securesign\nmetadata:\n  name: rhtap-securesign\n  labels:\n    app.kubernetes.io/instance: securesign-sample\n    app.kubernetes.io/name: securesign-sample\n    app.kubernetes.io/part-of: trusted-artifact-signer\n  namespace: default\nspec:\n  fulcio:\n    certificate:\n      commonName: fulcio.hostname\n      organizationEmail: ${FULCIO__ORG_EMAIL}\n      organizationName: ${FULCIO__ORG_NAME}\n    config:\n      OIDCIssuers:\n        - Issuer: \"${FULCIO__OIDC__URL}\"\n          ClientID: ${FULCIO__OIDC__CLIENT_ID}\n          IssuerURL: \"${FULCIO__OIDC__URL}\"\n          Type: ${FULCIO__OIDC__TYPE}\n    externalAccess:\n      enabled: true\n    monitoring:\n      enabled: false\n  rekor:\n    externalAccess:\n      enabled: true\n    signer:\n      kms: secret\n    monitoring:\n      enabled: false\n  trillian:\n    database:\n      create: true\n  tuf:\n    externalAccess:\n      enabled: true\n    keys:\n      - name: rekor.pub\n      - name: ctfe.pub\n      - name: fulcio_v1.crt.pem\n    port: 80\n\nEOF\necho \"OK\"\n\necho\necho \"Configuration successful\"\n\n\n  \n"],"resources":{}},{"name":"configure-trusted-profile-analyzer","image":"registry.redhat.io/openshift4/ose-tools-rhel8:latest","command":["/bin/bash","-c","set -o errexit\nset -o nounset\nset -o pipefail\n\n\ncd /tmp\n\n# Installing Helm...\ncurl --fail --silent --show-error --location \\\n  https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 \\\n    | bash\n\n# Storing the attributes \".trusted-profile-analyzer\" from \"values.yaml\" as a\n# standalone file, employed later on as input for the trustification Charts.\ndeclare -r TRUSTIFICATION_VALUES=\"/tmp/trustification-values.yaml\"\n\ncat \u003c\u003cEOF \u003e${TRUSTIFICATION_VALUES}\n---\neventBus:\n  bootstrapServers: tpa-infrastructure-kafka:9092\n  config:\n    mechanism: PLAIN\n    password:\n      valueFrom:\n        secretKeyRef:\n          key: client-passwords\n          name: tpa-infrastructure-kafka-user-passwords\n    securityProtocol: SASL_PLAINTEXT\n    username: user1\n  type: kafka\nguac:\n  database:\n    host: tpa-infrastructure-postgresql\n    name: guac\n    password: ${TPA__GUAC__PASSWORD}\n    sslMode: disable\n    username: guac\n  initDatabase:\n    host: tpa-infrastructure-postgresql\n    name: postgres\n    password:\n      valueFrom:\n        secretKeyRef:\n          key: postgres-password\n          name: tpa-infrastructure-postgresql\n    sslMode: disable\n    username: postgres\ningress:\n  className: openshift-default\nkafka:\n  controller:\n    containerSecurityContext:\n      enabled: false\n    podSecurityContext:\n      enabled: false\n  enabled: true\n  kraft:\n    clusterId: 3nA2qspzReOmcxqlkmITAA\n  provisioning:\n    containerSecurityContext:\n      enabled: false\n    podSecurityContext:\n      enabled: false\nkeycloak:\n  auth:\n    adminPassword: ${TPA__KEYCLOAK__ADMIN_PASSWORD}\n    adminUser: admin\n  containerSecurityContext:\n    enabled: false\n  enabled: true\n  ingress:\n    annotations:\n      route.openshift.io/termination: reencrypt\n    enabled: true\n    ingressClassName: openshift-default\n    servicePort: https\n  podSecurityContext:\n    enabled: false\n  postgresql:\n    auth:\n      password: ${TPA__POSTGRES__TPA_PASSWORD}\n      postgresPassword: ${TPA__POSTGRES__POSTGRES_PASSWORD}\n      username: trusted-profile-analyzer\n    primary:\n      containerSecurityContext:\n        enabled: false\n      podSecurityContext:\n        enabled: false\n  production: true\n  proxy: reencrypt\n  service:\n    annotations:\n      service.beta.openshift.io/serving-cert-secret-name: sso-tls\n  tls:\n    enabled: true\n    existingSecret: sso-tls\n    usePem: true\nminio:\n  containerSecurityContext:\n    enabled: false\n  enabled: true\n  persistence:\n    size: 5Gi\n  podSecurityContext:\n    enabled: false\n  rootPassword: ${TPA__MINIO__ROOT_PASSWORD}\nmodules:\n  bombasticWalker:\n    sources:\n      redhat:\n        acceptV3Signatures: true\n        fixLicenses: true\n        job:\n          schedule: 0 * * * *\n        signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4\n        url: https://access.redhat.com/security/data/sbom/beta/\n  vexinationWalker:\n    sources:\n      redhat:\n        acceptV3Signatures: true\n        ignoreDistributions:\n        - https://access.redhat.com/security/data/csaf/v2/advisories/\n        job:\n          schedule: 0 * * * *\n        url: https://www.redhat.com/.well-known/csaf/provider-metadata.json\noidc:\n  clients:\n    frontend: {}\n    testingManager:\n      clientSecret:\n        value: ${TPA__OIDC__TESTING_MANAGER_CLIENT_SECRET}\n    testingUser:\n      clientSecret:\n        value: ${TPA__OIDC__TESTING_USER_CLIENT_SECRET}\n    walker:\n      clientSecret:\n        value: ${TPA__OIDC__WALKER_CLIENT_SECRET}\nopenshift:\n  useServiceCa: true\nstorage:\n  accessKey:\n    valueFrom:\n      secretKeyRef:\n        key: root-user\n        name: tpa-infrastructure-minio\n  endpoint: http://tpa-infrastructure-minio:9000\n  secretKey:\n    valueFrom:\n      secretKeyRef:\n        key: root-password\n        name: tpa-infrastructure-minio\ntracing:\n  enabled: false\nEOF\n\n\n# Same namespace where the \"rhtap\" is being released\ndeclare -r NAMESPACE=\"default\"\n# Primary openshift domain name, other apps will be exposed via wildcards\ndeclare -r INGRESS_DOMAIN=$(\n    oc --namespace=openshift-ingress-operator \\\n      get ingresscontrollers.operator.openshift.io default \\\n        --output=jsonpath='{.status.domain}'\n)\n# suffix for applications with a fully qualified domain\ndeclare -r APP_DOMAIN=\"-${NAMESPACE}.${INGRESS_DOMAIN}\"\n\n# Cloning the trustification repository, and resetting to a known commit\n# before rollout.\ngit clone https://github.com/trustification/trustification.git\npushd trustification \u0026\u0026\n  # Desired commit for trustification charts.\n  git checkout v1.0.0-TP1 \u0026\u0026\n    # Adding the bitnami repository for \"trustification-infrastructure\"\n    # dependencies.\n    helm repo add bitnami https://charts.bitnami.com/bitnami\n\n    # Preparing Helm dependencies for both charts...\n    pushd deploy/k8s/charts/trustification-infrastructure \u0026\u0026\n      helm dependency build\n    popd\n    pushd deploy/k8s/charts/trustification \u0026\u0026\n      helm dependency build\n    popd\n\n    pushd deploy/k8s \u0026\u0026\n      # Installing the infrastructure needed for trustification first, and\n      # only when infrastructure is ready the trustification rollout\n      # starts...\n      if ! helm upgrade \\\n        --install \\\n        --namespace=${NAMESPACE} \\\n        --timeout=10m \\\n        --values=${TRUSTIFICATION_VALUES} \\\n        --set-string=keycloak.ingress.hostname=sso${APP_DOMAIN} \\\n        --set-string=appDomain=${APP_DOMAIN} \\\n        --debug \\\n        tpa-infrastructure \\\n        charts/trustification-infrastructure; then\n        echo \"ERROR: Installing trustification-infrastructure chart!\"\n        exit 1\n      fi\n    \n      if ! helm upgrade \\\n          --install \\\n          --namespace=${NAMESPACE} \\\n          --timeout=10m \\\n          --values=${TRUSTIFICATION_VALUES} \\\n          --set-string=keycloak.ingress.hostname=sso${APP_DOMAIN} \\\n          --set-string appDomain=${APP_DOMAIN} \\\n          --debug \\\n          tpa \\\n          charts/trustification; then\n        echo \"ERROR: Installing trustification chart!\"\n        exit 1\n      fi\n    popd\npopd\necho \"OK\"\n\necho\necho \"Configuration successful\"\n"],"resources":{}}],"restartPolicy":"Never","serviceAccountName":"helm-manager"}}}},"source":{"path":"/Applications/Utilities/repos/LLM-Helm-Fix","relativePath":"templates/redhat-trusted-application-pipeline_template.yaml","fileType":"YAML","lastCommit":{"hash":"22425b39f798b4a650e9422f378873671f6eb8cd","date":"2024-05-18T19:04:42+02:00","committerName":"Francesco Minna","committerEmail":"fra1995m@gmail.com","message":"charts stats\n"}}}],"attributes":null,"results":[{"resourceID":"path=2503519115/api=/v1/default/ServiceAccount/rhdh-kubernetes-plugin","controls":[{"controlID":"C-0034","name":"Automatic mapping of service account","status":{"status":"failed"},"rules":[{"name":"automount-service-account","status":"failed","subStatus":"","paths":[{"resourceID":"path=2503519115/api=/v1/default/ServiceAccount/rhdh-kubernetes-plugin","fixPath":{"path":"automountServiceAccountToken","value":"false"}}]}]}]},{"resourceID":"path=2486741496/api=/v1/default/ServiceAccount/helm-manager","controls":[{"controlID":"C-0034","name":"Automatic mapping of service account","status":{"status":"failed"},"rules":[{"name":"automount-service-account","status":"failed","subStatus":"","paths":[{"resourceID":"path=2486741496/api=/v1/default/ServiceAccount/helm-manager","fixPath":{"path":"automountServiceAccountToken","value":"false"}}]}]}]},{"resourceID":"path=2537074353/api=rbac.authorization.k8s.io/v1//ClusterRoleBinding/rhdh-kubernetes-plugin","controls":[{"controlID":"C-0262","name":"Anonymous access enabled","status":{"status":"passed"},"rules":[{"name":"anonymous-access-enabled","status":"passed","subStatus":""}]}]},{"resourceID":"path=2520296734/api=rbac.authorization.k8s.io/v1//ClusterRoleBinding/helm-manager-admin","controls":[{"controlID":"C-0262","name":"Anonymous access enabled","status":{"status":"passed"},"rules":[{"name":"anonymous-access-enabled","status":"passed","subStatus":""}]}]},{"prioritizedResource":{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","priorityVector":[{"attackTrackName":"workload-external-track","type":"control","vector":[{"controlID":"C-0260","category":"Lateral Movement (Network)","tags":["security"]}],"score":5.5,"severity":2},{"attackTrackName":"workload-external-track","type":"control","vector":[{"controlID":"C-0017","category":"Persistence","tags":["security","compliance","smartRemediation"]}],"score":3.3000000000000003,"severity":1}],"score":8.8,"severity":2},"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","controls":[{"controlID":"C-0038","name":"Host PID/IPC privileges","status":{"status":"passed"},"rules":[{"name":"host-pid-ipc-privileges","status":"passed","subStatus":""}]},{"controlID":"C-0014","name":"Access Kubernetes dashboard","status":{"status":"passed"},"rules":[{"name":"rule-access-dashboard-wl-v1","status":"passed","subStatus":""}]},{"controlID":"C-0017","name":"Immutable container filesystem","status":{"status":"failed"},"rules":[{"name":"immutable-container-filesystem","status":"failed","subStatus":"","paths":[{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.readOnlyRootFilesystem","value":"true"}}]}]},{"controlID":"C-0046","name":"Insecure capabilities","status":{"status":"passed"},"rules":[{"controlConfigurations":{"insecureCapabilities":["SETPCAP","NET_ADMIN","NET_RAW","SYS_MODULE","SYS_RAWIO","SYS_PTRACE","SYS_ADMIN","SYS_BOOT","MAC_OVERRIDE","MAC_ADMIN","PERFMON","ALL","BPF"]},"name":"insecure-capabilities","status":"passed","subStatus":""}]},{"controlID":"C-0270","name":"Ensure CPU limits are set","status":{"status":"passed"},"rules":[{"name":"resources-cpu-limits","status":"passed","subStatus":""}]},{"controlID":"C-0016","name":"Allow privilege escalation","status":{"status":"failed"},"rules":[{"name":"rule-allow-privilege-escalation","status":"failed","subStatus":"","paths":[{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.allowPrivilegeEscalation","value":"false"}}]}]},{"controlID":"C-0041","name":"HostNetwork access","status":{"status":"passed"},"rules":[{"name":"host-network-access","status":"passed","subStatus":""}]},{"controlID":"C-0044","name":"Container hostPort","status":{"status":"passed"},"rules":[{"name":"container-hostPort","status":"passed","subStatus":""}]},{"controlID":"C-0055","name":"Linux hardening","status":{"status":"failed"},"rules":[{"name":"linux-hardening","status":"failed","subStatus":"","paths":[{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}}]}]},{"controlID":"C-0048","name":"HostPath mount","status":{"status":"passed"},"rules":[{"name":"alert-any-hostpath","status":"passed","subStatus":""}]},{"controlID":"C-0057","name":"Privileged container","status":{"status":"passed"},"rules":[{"name":"rule-privilege-escalation","status":"passed","subStatus":""}]},{"controlID":"C-0013","name":"Non-root containers","status":{"status":"failed"},"rules":[{"name":"non-root-containers","status":"failed","subStatus":"","paths":[{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[1].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[0].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[2].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[3].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2369298163/api=batch/v1//Job/rhtap-release-name-test","fixPath":{"path":"spec.template.spec.containers[4].securityContext.runAsGroup","value":"1000"}}]}]},{"controlID":"C-0012","name":"Applications credentials in configuration files","status":{"status":"passed"},"rules":[{"controlConfigurations":{"sensitiveKeyNames":["aws_access_key_id","aws_secret_access_key","azure_batchai_storage_account","azure_batchai_storage_key","azure_batch_account","azure_batch_key","secret","key","password","pwd","token","jwt","bearer","credential"],"sensitiveKeyNamesAllowed":[],"sensitiveValues":["BEGIN \\w+ PRIVATE KEY","PRIVATE KEY","eyJhbGciO","JWT","Bearer","_key_","_secret_"],"sensitiveValuesAllowed":[]},"name":"rule-credentials-in-env-var","status":"passed","subStatus":""}]},{"controlID":"C-0034","name":"Automatic mapping of service account","status":{"status":"passed"},"rules":[{"name":"automount-service-account","status":"passed","subStatus":""}]},{"controlID":"C-0020","name":"Mount service principal","status":{"status":"passed"},"rules":[{"name":"alert-mount-potential-credentials-paths","status":"passed","subStatus":""}]},{"controlID":"C-0045","name":"Writable hostPath mount","status":{"status":"passed"},"rules":[{"name":"alert-rw-hostpath","status":"passed","subStatus":""}]},{"controlID":"C-0260","name":"Missing network policy","status":{"status":"failed"},"rules":[{"name":"ensure_network_policy_configured_in_labels","status":"failed","subStatus":""}]},{"controlID":"C-0030","name":"Ingress and Egress blocked","status":{"status":"failed"},"rules":[{"name":"ingress-and-egress-blocked","status":"failed","subStatus":""}]},{"controlID":"C-0271","name":"Ensure memory limits are set","status":{"status":"passed"},"rules":[{"name":"resources-memory-limits","status":"passed","subStatus":""}]}]},{"prioritizedResource":{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","priorityVector":[{"attackTrackName":"service-destruction","type":"control","vector":[{"controlID":"C-0271","category":"Denial of service","tags":["compliance","devops","security"]}],"score":8.8,"severity":3},{"attackTrackName":"service-destruction","type":"control","vector":[{"controlID":"C-0270","category":"Denial of service","tags":["compliance","devops","security"]}],"score":8.8,"severity":3},{"attackTrackName":"workload-external-track","type":"control","vector":[{"controlID":"C-0260","category":"Lateral Movement (Network)","tags":["security"]}],"score":5.5,"severity":2},{"attackTrackName":"workload-external-track","type":"control","vector":[{"controlID":"C-0017","category":"Persistence","tags":["security","compliance","smartRemediation"]}],"score":3.3000000000000003,"severity":1}],"score":26.400000000000002,"severity":3},"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","controls":[{"controlID":"C-0038","name":"Host PID/IPC privileges","status":{"status":"passed"},"rules":[{"name":"host-pid-ipc-privileges","status":"passed","subStatus":""}]},{"controlID":"C-0014","name":"Access Kubernetes dashboard","status":{"status":"passed"},"rules":[{"name":"rule-access-dashboard-wl-v1","status":"passed","subStatus":""}]},{"controlID":"C-0017","name":"Immutable container filesystem","status":{"status":"failed"},"rules":[{"name":"immutable-container-filesystem","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.readOnlyRootFilesystem","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.readOnlyRootFilesystem","value":"true"}}]}]},{"controlID":"C-0046","name":"Insecure capabilities","status":{"status":"passed"},"rules":[{"controlConfigurations":{"insecureCapabilities":["SETPCAP","NET_ADMIN","NET_RAW","SYS_MODULE","SYS_RAWIO","SYS_PTRACE","SYS_ADMIN","SYS_BOOT","MAC_OVERRIDE","MAC_ADMIN","PERFMON","ALL","BPF"]},"name":"insecure-capabilities","status":"passed","subStatus":""}]},{"controlID":"C-0270","name":"Ensure CPU limits are set","status":{"status":"failed"},"rules":[{"name":"resources-cpu-limits","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].resources.limits.cpu","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].resources.limits.cpu","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].resources.limits.cpu","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].resources.limits.cpu","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].resources.limits.cpu","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].resources.limits.cpu","value":"YOUR_VALUE"}}]}]},{"controlID":"C-0016","name":"Allow privilege escalation","status":{"status":"failed"},"rules":[{"name":"rule-allow-privilege-escalation","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.allowPrivilegeEscalation","value":"false"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.allowPrivilegeEscalation","value":"false"}}]}]},{"controlID":"C-0041","name":"HostNetwork access","status":{"status":"passed"},"rules":[{"name":"host-network-access","status":"passed","subStatus":""}]},{"controlID":"C-0044","name":"Container hostPort","status":{"status":"passed"},"rules":[{"name":"container-hostPort","status":"passed","subStatus":""}]},{"controlID":"C-0055","name":"Linux hardening","status":{"status":"failed"},"rules":[{"name":"linux-hardening","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.seccompProfile","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.seLinuxOptions","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.capabilities.drop[0]","value":"YOUR_VALUE"}}]}]},{"controlID":"C-0048","name":"HostPath mount","status":{"status":"passed"},"rules":[{"name":"alert-any-hostpath","status":"passed","subStatus":""}]},{"controlID":"C-0057","name":"Privileged container","status":{"status":"passed"},"rules":[{"name":"rule-privilege-escalation","status":"passed","subStatus":""}]},{"controlID":"C-0013","name":"Non-root containers","status":{"status":"failed"},"rules":[{"name":"non-root-containers","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].securityContext.runAsGroup","value":"1000"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.runAsNonRoot","value":"true"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].securityContext.runAsGroup","value":"1000"}}]}]},{"controlID":"C-0012","name":"Applications credentials in configuration files","status":{"status":"passed"},"rules":[{"controlConfigurations":{"sensitiveKeyNames":["aws_access_key_id","aws_secret_access_key","azure_batchai_storage_account","azure_batchai_storage_key","azure_batch_account","azure_batch_key","secret","key","password","pwd","token","jwt","bearer","credential"],"sensitiveKeyNamesAllowed":[],"sensitiveValues":["BEGIN \\w+ PRIVATE KEY","PRIVATE KEY","eyJhbGciO","JWT","Bearer","_key_","_secret_"],"sensitiveValuesAllowed":[]},"name":"rule-credentials-in-env-var","status":"passed","subStatus":""}]},{"controlID":"C-0034","name":"Automatic mapping of service account","status":{"status":"passed"},"rules":[{"name":"automount-service-account","status":"passed","subStatus":""}]},{"controlID":"C-0020","name":"Mount service principal","status":{"status":"passed"},"rules":[{"name":"alert-mount-potential-credentials-paths","status":"passed","subStatus":""}]},{"controlID":"C-0045","name":"Writable hostPath mount","status":{"status":"passed"},"rules":[{"name":"alert-rw-hostpath","status":"passed","subStatus":""}]},{"controlID":"C-0260","name":"Missing network policy","status":{"status":"failed"},"rules":[{"name":"ensure_network_policy_configured_in_labels","status":"failed","subStatus":""}]},{"controlID":"C-0030","name":"Ingress and Egress blocked","status":{"status":"failed"},"rules":[{"name":"ingress-and-egress-blocked","status":"failed","subStatus":""}]},{"controlID":"C-0271","name":"Ensure memory limits are set","status":{"status":"failed"},"rules":[{"name":"resources-memory-limits","status":"failed","subStatus":"","paths":[{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[0].resources.limits.memory","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[1].resources.limits.memory","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[2].resources.limits.memory","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[3].resources.limits.memory","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[4].resources.limits.memory","value":"YOUR_VALUE"}},{"resourceID":"path=2587407210/api=batch/v1//Job/rhtap-release-name-configure","fixPath":{"path":"spec.template.spec.containers[5].resources.limits.memory","value":"YOUR_VALUE"}}]}]}]}],"metadata":{"targetMetadata":{"gitRepoContextMetadata":{"provider":"github","repo":"LLM-Helm-Fix","owner":"fminna","branch":"main","remoteURL":"https://github.com/fminna/LLM-Helm-Fix","lastCommit":{"hash":"58081b17c30dcf7edd5f95a1e7ba1d4057a23572","date":"0001-01-01T00:00:00Z"},"localRootPath":"/Applications/Utilities/repos/LLM-Helm-Fix"}},"clusterMetadata":{},"scanMetadata":{"targetType":"Framework","kubescapeVersion":"v3.0.1","formatVersion":"v2","formats":["json"],"targetNames":["clusterscan","mitre","nsa"],"failThreshold":100,"scanningTarget":3,"submit":true}},"paginationInfo":{"chunkNumber":0,"isLastChunk":false},"customerGUIDGenerated":false}