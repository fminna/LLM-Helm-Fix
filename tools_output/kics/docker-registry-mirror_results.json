{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 138,
	"files_parsed": 1,
	"lines_parsed": 134,
	"lines_ignored": 4,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 3,
		"INFO": 0,
		"LOW": 10,
		"MEDIUM": 10,
		"TRACE": 0
	},
	"total_counter": 23,
	"total_bom_resources": 0,
	"start": "2024-06-26T02:11:12.813777+02:00",
	"end": "2024-06-26T02:11:14.945107+02:00",
	"paths": [
		"templates/docker-registry-mirror_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "dea07b7bec5b6a79450719bc1b4d561620ddc67de519588a68a185801d5bfb54",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "69c89ea75bc04825f18fb25455f0dfabe8510aaf8aeebc835a094186faa75a9c",
					"line": 130,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{release-name-docker-registry-mirror-config}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{release-name-docker-registry-mirror-config}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{release-name-docker-registry-mirror-config}}.readOnly is undefined"
				},
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "412fac13218e51e1c07b2fbcb98fc92a2a1c8cf3eca8a7a7bf1cb5c42441f84c",
					"line": 128,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{data}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{data}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.volumeMounts.name={{data}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "b67c0edd21a6789e0087200f9ae943ce41a29434dac4e409b248c714549f5998",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.securityContext.runAsUser=1000",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "af6219e8bec98d67a9c2a0a422d7991f1a83317f55c4396eed23403f347c814c",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "0ba79a136ec447d6f826026b81353342cfc9672449445da17eb48107175ee0dc",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "0b924641cbedc2860eb5aa27dfefa908592424829aed8e9d5118f4aff7a7bf25",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "acd1c973760afd095de26036005c35830fa8b8e44f5582e028f9cdb14cf1ca49",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "33bb4c369edbd691cd0096a1257c75669f7b49710d013f1c8ead7d7b3e28fd29",
					"line": 93,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "8c0aea17f3c1306c1a1bcef958c07ffdd33924d69e6a3ab4ab681cebc7b71c1a",
					"line": 20,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-docker-registry-mirror-config",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-docker-registry-mirror-config}}",
					"search_line": 20,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "3ec9e9507de8e1a276ef545174a3bbab20b5593fedc5b64069a93205d1c175b6",
					"line": 52,
					"resource_type": "Service",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{release-name-docker-registry-mirror}}",
					"search_line": 52,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "94d1e151e77bdd9b6002e991f0d6cbc6f33cb948fcdfe8b7bc582d3886a8abdd",
					"line": 73,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{release-name-docker-registry-mirror}}",
					"search_line": 73,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "Secret",
					"resource_name": "release-name-docker-registry-mirror-secret",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Secret}}.metadata.name={{release-name-docker-registry-mirror-secret}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "056f121b9f031dee6de948819ab660b83bd750907a78a51c705c753ea7cbb1c6",
					"line": 115,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry-mirror has limits defined",
					"actual_value": "spec.template.spec.containers.name=docker-registry-mirror doesn't have limits defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "bc065e23be2d3a0bc02e074b3d50528d98eab5d1442da2c4f27308c1406c6d0a",
					"line": 115,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry-mirror.resources should have requests defined",
					"actual_value": "spec.template.spec.containers.name=docker-registry-mirror.resources doesn't have requests defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "e80536c623c0e62798cd31560fe8bf000cc26b96de544b81a445ba80cacbe092",
					"line": 100,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "db87c6ce8385dbafa70897bbf1936ded4da64859898730a9f71d2d4263c81c99",
					"line": 91,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.metadata",
					"search_line": 91,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{docker-registry-mirror}}",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{docker-registry-mirror}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "34372e5f23456b413eb0e3511b063131e9dd4b40395258bb356a1972039e84d4",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.containers.name=docker-registry-mirror",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.containers.name=docker-registry-mirror.securityContext should be set",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.containers.name=docker-registry-mirror.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "aba69dba28122cb44aeb5e32a1ba89f424df19750e90bef4b93ea7e03342076c",
					"line": 52,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "39018300a653ccbf464ad4fb41821aa5a24301eda5edc9383950594f0b58bb64",
					"line": 52,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "d3559f27e1b5cd704ae2a2abdd619be812212ae7d88bdff2bd757f8d442bf2a8",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name=docker-registry-mirror",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry-mirror has a security context",
					"actual_value": "spec.template.spec.containers.name=docker-registry-mirror does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "aec2a1d840a86c8278b98b47a23142ec482f55bcdf3cbd92860184036782e934",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.name={{docker-registry-mirror}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		},
		{
			"query_name": "Secrets As Environment Variables",
			"query_id": "3d658f8b-d988-41a0-a841-40043121de1e",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Secret Management",
			"experimental": false,
			"description": "Container should not use secrets as environment variables",
			"description_id": "99365a7d",
			"files": [
				{
					"file_name": "templates/docker-registry-mirror_template.yaml",
					"similarity_id": "d4be5db9a4c6a626cfe978b806ab37604d899dc99569867134392f2e62f6901b",
					"line": 120,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry-mirror",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry-mirror}}.spec.template.spec.containers.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.containers.name={{docker-registry-mirror}}.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef' should be undefined",
					"actual_value": "'spec.template.spec.containers.name={{docker-registry-mirror}}.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef' is defined"
				}
			]
		}
	]
}
