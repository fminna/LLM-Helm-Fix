{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 42,
	"files_parsed": 1,
	"lines_parsed": 40,
	"lines_ignored": 2,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 11,
		"MEDIUM": 11,
		"TRACE": 0
	},
	"total_counter": 23,
	"total_bom_resources": 0,
	"start": "2024-05-17T21:07:23.211002+02:00",
	"end": "2024-05-17T21:07:25.345052+02:00",
	"paths": [
		"templates/my-test-chart_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "9928934d15371c47ee26be03a27ccf91cd0cba0ee177768f79684ec014507d69",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "8c4751a18f7d9b2bc1a559846b12e0bf4dbf4bd0bc5c83fb3c17e273963bb6bb",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "9ea4da04e40c23d2402382962f106323e208e1f96d7dfb63f2ad7267f5b14def",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "e62b2b3b93f480e5cfa8dc64546b9b033294d201a61c538521f5913b413e9c1d",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "6cb13e01da3a2973db4fd74bea2fd65d5b2344dc1ee2c891ffdb23467378b9b6",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "eea24521b99bdf7ebe7019376b344a607b3eee5bddd1fc1afee10fdae81a321a",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "4a2bfb27cb533d8cd17ee6561fa51fbce622058d7216fca9b069bfa04b16e351",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "f39c8f416235d049370be706852acad3af30b3721278e51ccc7f93520df721c7",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "613d0fd5e2904efcbef955d296d7840e62f3574c6329f7191a1abb0be35c867b",
					"line": 35,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Service With External Load Balancer",
			"query_id": "26763a1c-5dda-4772-b507-5fca7fb5f165",
			"query_url": "https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Networking and Firewall",
			"experimental": false,
			"description": "Service has an external load balancer, which may cause accessibility from other networks and the Internet",
			"description_id": "2e090344",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "db41c36a938735cffe584f2fd86a70150c1919f48cc0541edc12d696e26aec01",
					"line": 6,
					"resource_type": "Service",
					"resource_name": "my-nginx-service-beta",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{my-nginx-service-beta}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'metadata.annotations' should be set",
					"actual_value": "'metadata.annotations' is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "3acfd8532ba5b41089cd8a297067d407f06a63ed05e70ee2c0a6b9da1058cca4",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{nginx-deployment}}.namespace",
					"search_line": 23,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "Service",
					"resource_name": "my-nginx-service-beta",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{my-nginx-service-beta}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "1e266e1dcdefbbf00afdfd45e35608541a908785c348ecf25a329dfda371eacf",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name=nginx",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=nginx has resources defined",
					"actual_value": "spec.template.spec.containers.name=nginx doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "79d4b88f079df900308cc2ff7428ac6cfc0315f2292a88e66fc74c4b6101b0e1",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name=nginx",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=nginx should have resources defined",
					"actual_value": "spec.template.spec.containers.name=nginx doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Deployment Has No PodAntiAffinity",
			"query_id": "a31b7b82-d994-48c4-bd21-3bab6c31827a",
			"query_url": "https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Check if Deployment resources don't have a podAntiAffinity policy, which prevents multiple pods from being scheduled on the same node.",
			"description_id": "22146f41",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "3eddf74e12d8bd8f605a7ffa9539e9b5d987e69279f3cd7cd1c8e2024966459b",
					"line": 35,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.affinity' should be set",
					"actual_value": "'spec.template.spec.affinity' is undefined"
				}
			]
		},
		{
			"query_name": "Deployment Without PodDisruptionBudget",
			"query_id": "b23e9b98-0cb6-4fc9-b257-1f3270442678",
			"query_url": "https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Deployments should be assigned with a PodDisruptionBudget to ensure high availability",
			"description_id": "df941cb9",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "26eab3f3ef5f396baa5e8034753b1bb6775effe5be2e99c8f6c69fa290fc6347",
					"line": 29,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.selector.matchLabels",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name=nginx-deployment is targeted by a PodDisruptionBudget",
					"actual_value": "metadata.name=nginx-deployment is not targeted by a PodDisruptionBudget"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "15cd4442594bec871e00e5fc1e088c16634de6c92153e8397c7a4c03a1b4155a",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "ecb75dfe22da04d22d3b51c62024e3a1edcccd05932e4f1a05239107b13a7a7a",
					"line": 32,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{nginx}}",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{nginx}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "64ee8403d3da4ffc06210c099f9ab6dea05398b5b9ba5ec840cc37f86264822e",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.containers.name=nginx",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.containers.name=nginx.securityContext should be set",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.containers.name=nginx.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "9e5a6e2a4208950d58048fcf0ad7fd2c3d818a2f9322e8b35d36a3adfe6865b9",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}",
					"search_line": 23,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{nginx-deployment}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "f9e0ea6cae54bc44a1114e85123943fa1f704c62100745748a3e8168092d9391",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}",
					"search_line": 23,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{nginx-deployment}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "cec505f2090c8938fc013de883b98c2610472e738d09ce7018b4604cad486d97",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name=nginx",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=nginx has a security context",
					"actual_value": "spec.template.spec.containers.name=nginx does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/my-test-chart_template.yaml",
					"similarity_id": "31c5c5748abbf8a7a451beffc95837afecd903e925172a1c68c2b1f63153bc89",
					"line": 37,
					"resource_type": "Deployment",
					"resource_name": "nginx-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{nginx-deployment}}.spec.template.spec.containers.name={{nginx}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
