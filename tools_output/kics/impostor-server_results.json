{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 205,
	"files_parsed": 1,
	"lines_parsed": 203,
	"lines_ignored": 2,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 3,
		"INFO": 0,
		"LOW": 3,
		"MEDIUM": 4,
		"TRACE": 0
	},
	"total_counter": 10,
	"total_bom_resources": 0,
	"start": "2024-05-17T21:59:35.602262+02:00",
	"end": "2024-05-17T21:59:37.573063+02:00",
	"paths": [
		"templates/impostor-server_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "307671c9c1df6578d5481571e040c30e517770236203bb9c465e1e84c32f35c0",
					"line": 129,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{devshm}}.readOnly",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{devshm}}.readOnly is true",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{devshm}}.readOnly is false"
				},
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "f7c4e0815524f00656c78fe1e9927f2ebd1b367c6dc5f452a49433cb2eb55b33",
					"line": 138,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varlogs}}.readOnly",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varlogs}}.readOnly is true",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varlogs}}.readOnly is false"
				},
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "c3013f561d384f16d838dce6a07906e728fd332092e02f86f72492c3f04d1d93",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varrun}}.readOnly",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varrun}}.readOnly is true",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.volumeMounts.name={{varrun}}.readOnly is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "fe3c16951ea84b5e12f0597c4ac67784868762270b19e0f461d183900718fe8d",
					"line": 152,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.securityContext.runAsUser=568",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "0afe8374ec4afb2119f7f8ede0609ec11d44d526d3485c5245fa1fd56c539c31",
					"line": 116,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.spec.containers.name={{release-name-impostor-server}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "Service",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "dc01837aee8e1524e2a6c2bbc7960233a05cb48993f03d4927b926c90f3999d5",
					"line": 36,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-impostor-server}}.namespace",
					"search_line": 36,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "fe75e80ac049e94ff248e516ee1ad571b8514c38fdde7727b9ca63feca36e664",
					"line": 69,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-impostor-server}}.spec.template.metadata",
					"search_line": 69,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{release-name-impostor-server}}",
					"actual_value": "metadata.name={{release-name-impostor-server}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{release-name-impostor-server}}"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "989e9f8e05f3abd7351c20b4b34867ec31a0f972583e8f6be80e4fbbd3f74d52",
					"line": 36,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-impostor-server}}",
					"search_line": 36,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-impostor-server}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/impostor-server_template.yaml",
					"similarity_id": "ad878a918fe85fb76f7ad68aa6360b0a6565f90cd5e1f7b180548f92872c7bc1",
					"line": 36,
					"resource_type": "Deployment",
					"resource_name": "release-name-impostor-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-impostor-server}}",
					"search_line": 36,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-impostor-server}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-impostor-server}} does not have a 'ResourceQuota' policy associated"
				}
			]
		}
	]
}
