{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 132,
	"files_parsed": 1,
	"lines_parsed": 126,
	"lines_ignored": 6,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 0,
		"INFO": 0,
		"LOW": 7,
		"MEDIUM": 3,
		"TRACE": 0
	},
	"total_counter": 10,
	"total_bom_resources": 0,
	"start": "2024-05-17T23:33:08.197472+02:00",
	"end": "2024-05-17T23:33:10.106049+02:00",
	"paths": [
		"templates/url-shortener-redis_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "266c0be7312a6d1486e8efa32f6a69ab3494881577adfd7de073eb7fb38b9226",
					"line": 107,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext.runAsUser=2000",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "9c3bdd0d4a53117d92fcea086fb28986c01c66826cb17672473c4ee055625a90",
					"line": 84,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "3a6e13a4ac4d995ef6d276cc0bec5dbbd7d2f7d9814203d5400a00bd65d3dfd4",
					"line": 106,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "b4538e9ac2989d897a953cc6885226f02b72b8906921946cd98f5eaca5ebbe77",
					"line": 84,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{redis-sts}}.spec.template.spec.containers.name={{redis}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "930fafec9f1239abc0d63b11faf9dab0bdcc62c13020e3f79e0d2a5ffc37552c",
					"line": 76,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{redis}}",
					"actual_value": "metadata.name={{redis-sts}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{redis}}"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "2b64b321230328e889161d14d8a2b9905319fb5f516f6592221561b10ab1f923",
					"line": 67,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}",
					"search_line": 67,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{redis-sts}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "d28a914005c1fb9924746efb30b3b6963d9778ad29fe1b78b0752c5cccf4a16d",
					"line": 67,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}",
					"search_line": 67,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{redis-sts}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "StatefulSet Has No PodAntiAffinity",
			"query_id": "d740d048-8ed3-49d3-b77b-6f072f3b669e",
			"query_url": "https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Check if StatefulSet resources don't have a podAntiAffinity policy, which prevents multiple pods from being scheduled on the same node.",
			"description_id": "f0d30dd9",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "d7b5c713ccbe535518918b193d775331bf167fc7b37dc2693e4c578d1d894842",
					"line": 79,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.affinity' should be set",
					"actual_value": "'spec.template.spec.affinity' is undefined"
				}
			]
		},
		{
			"query_name": "StatefulSet Requests Storage",
			"query_id": "8cf4671a-cf3d-46fc-8389-21e7405063a2",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "A StatefulSet requests volume storage.",
			"description_id": "6210afe6",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "f307e361814bfa1c7f23981d79e68a02eda598ce73c0a89a2bad816c92d8225f",
					"line": 131,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{redis-sts}}.spec.volumeClaimTemplates.spec.resources.requests.storage=1Gi",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{redis-sts}}.spec.volumeClaimTemplates.spec.resources.requests.storage should not be set",
					"actual_value": "metadata.name={{redis-sts}}.spec.volumeClaimTemplates.spec.resources.requests.storage is set to 1Gi"
				}
			]
		},
		{
			"query_name": "StatefulSet Without PodDisruptionBudget",
			"query_id": "1db3a5a5-bf75-44e5-9e44-c56cfc8b1ac5",
			"query_url": "https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "StatefulSets should be assigned with a PodDisruptionBudget to ensure high availability",
			"description_id": "f3c77130",
			"files": [
				{
					"file_name": "templates/url-shortener-redis_template.yaml",
					"similarity_id": "9727ae71a1e3adb2c650140fb49827b7073d58f69af2be8656150f7e60bcf966",
					"line": 71,
					"resource_type": "StatefulSet",
					"resource_name": "redis-sts",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{redis-sts}}.spec.selector.matchLabels",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name=redis-sts is targeted by a PodDisruptionBudget",
					"actual_value": "metadata.name=redis-sts is not targeted by a PodDisruptionBudget"
				}
			]
		}
	]
}
