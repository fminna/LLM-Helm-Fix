{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 123,
	"files_parsed": 1,
	"lines_parsed": 119,
	"lines_ignored": 4,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 8,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 18,
	"total_bom_resources": 0,
	"start": "2024-06-26T00:52:53.375012+02:00",
	"end": "2024-06-26T00:52:55.430595+02:00",
	"paths": [
		"templates/template-service_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "f17ad99abe84d9459ac1c1d133da860161eb2e4b4cc9fd1a8ab06278bc849d42",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}",
					"search_line": 96,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "ec4f55ca54845556929314a5a610a1bc6c36d9968cb39e5d08b0dd150ce3cb18",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}",
					"search_line": 96,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "4542f7d83e7ebd82baf129b64d1ee400c0c2b159286c46c1f27799e11fa61a77",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "c41d80e3c7ee9cb41dd292cba57cb721740bbe428200153b9d93d0c23b417871",
					"line": 95,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "bf4070daff6ef8bcd116477f2911b5d5016ef0addc60fc064f0d5fab50263938",
					"line": 95,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "de755385671ff5bc97fb731c7ea525368e16fbf028419319bbd785e737e76fc8",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "87ca382c339e45e4d42c82e75589a5e49e33e517d26adb4e7b15fa82d69891f3",
					"line": 89,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "ServiceAccount",
					"resource_name": "release-name-template-service",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ServiceAccount}}.metadata.name={{release-name-template-service}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "9b85d122c5c8f4b877a9185274e7f47797b50d2ce07cc848f8b53694cc3a3b77",
					"line": 62,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{template-service}}.namespace",
					"search_line": 62,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "dd237f5745eb3edf3c3d74f8addb44e226ed905062fa9ecc472eee3915ff39d6",
					"line": 38,
					"resource_type": "Service",
					"resource_name": "release-name-service",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{release-name-service}}",
					"search_line": 38,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "ee260f400a93b9728c9de1481bd4507851c43d618b7ddc2cb66626dbea7c68d0",
					"line": 28,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "release-name-template-service-crossplane-rb",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-template-service-crossplane-rb}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'release-name-template-service-crossplane-rb' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'release-name-template-service-crossplane-rb' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "809b15e2e391dfedd9feb2d4aa6b79f2b6415cffd54ef2732f08e2c15bf9d588",
					"line": 99,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "8ad4e042c68316b8c71f9ac9e21ab3f2db59a48aca4406a8bed202037edeb6dd",
					"line": 80,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{template-service}}",
					"actual_value": "metadata.name={{template-service}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{template-service}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "17c27f487ff82521e7a5fee7baa73c2e59c1c5c8d16b5eb76d870d07301b82cd",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.containers.name={{template-service}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.containers.name={{template-service}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{template-service}}.spec.containers.name={{template-service}}.securityContext.capabilities is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "6c01af44e363952934887fda82f3594c7f1cd8a5e021936ef682490fc48c963b",
					"line": 62,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}",
					"search_line": 62,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{template-service}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "722a70158a53535e9864f6887f5cd2870d44cfc0f0dbd228cef3837fa16835f9",
					"line": 62,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}",
					"search_line": 62,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{template-service}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "3521879ca57c5ad28cd7555f079c1249245e7e1decdf57d799b815754cec041b",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}",
					"search_line": 96,
					"search_value": "",
					"expected_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		},
		{
			"query_name": "Secrets As Environment Variables",
			"query_id": "3d658f8b-d988-41a0-a841-40043121de1e",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Secret Management",
			"experimental": false,
			"description": "Container should not use secrets as environment variables",
			"description_id": "99365a7d",
			"files": [
				{
					"file_name": "templates/template-service_template.yaml",
					"similarity_id": "aefeb198dc556fc64a8cbe91d96406490d71f012bae5a5688cf8897eacb87dff",
					"line": 112,
					"resource_type": "Deployment",
					"resource_name": "template-service",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{template-service}}.spec.template.spec.containers.name={{template-service}}.envFrom",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.containers.name={{template-service}}.envFrom.secretRef' should be undefined",
					"actual_value": "'spec.template.spec.containers.name={{template-service}}.envFrom.secretRef' is defined"
				}
			]
		}
	]
}
