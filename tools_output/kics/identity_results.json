{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 259,
	"files_parsed": 1,
	"lines_parsed": 247,
	"lines_ignored": 12,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 2,
		"INFO": 0,
		"LOW": 8,
		"MEDIUM": 12,
		"TRACE": 0
	},
	"total_counter": 22,
	"total_bom_resources": 0,
	"start": "2024-05-17T20:17:21.826838+02:00",
	"end": "2024-05-17T20:17:23.748434+02:00",
	"paths": [
		"/usr/local/opt/kics/share/kics/assets/queries",
		"templates/identity_template.yaml"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "a87af450c30c27a1f1793f17dfc5e8a9551820911b4128ad9e5b4da263a53556",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "1296c149db3c06267e75c87eba5ac7cfb065f934602a6d36e7659b67f8293584",
					"line": 217,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.volumeMounts.name={{config}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.volumeMounts.name={{config}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.volumeMounts.name={{config}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "fe6faffeb5fb39db4bfb1ea02ac9d5c33ae3f036f94d8d9f439215ba263c1765",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "a098bc091c60bde4fcaac0ce331ff0d061316e6396781eb7bb9685cf37c6cd52",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "c021e6411937d16547dd5b98d1f99de905cc55f8e2fb3fc9d54edce3f02dc550",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "01eaf97ca804d8a2f0069bfc84e7333751f692acaf4ef2d499812d8468944546",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "b7e512c35d3c561acbf2496621cd7bda7e7eac1b7ca566bd79fe423dd26906e2",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "b84d7ffe3b3e77169abdf81a280088a06f909453b1022f7cff5afa9d601ecdf7",
					"line": 172,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "69e13d7c5e1a9d07a57a9f92f7c5af4bd53adf776e2512e3522cd59d61e20d0f",
					"line": 10,
					"resource_type": "ServiceAccount",
					"resource_name": "identity",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity}}.namespace",
					"search_line": 10,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "b5f051f2df85ecf5f311bf6c863ff9bbc869584819defe982d0a4ca4348cd5e9",
					"line": 126,
					"resource_type": "Service",
					"resource_name": "identity-service",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity-service}}.namespace",
					"search_line": 126,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "1e2fecfabd03cc171a80882de84ca792c2a9dc5b7a6f0d167b5b466735a2e02c",
					"line": 45,
					"resource_type": "ConfigMap",
					"resource_name": "identity-configmap",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity-configmap}}.namespace",
					"search_line": 45,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "592075fcd561b46ec2d9e2e789eadd62c226937d239b9fc744040edca24153cc",
					"line": 25,
					"resource_type": "Secret",
					"resource_name": "identity-tls",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity-tls}}.namespace",
					"search_line": 25,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "78522dbf7f808fdd9c9ed46811b8537b67204b803607ac3b44983cd06d30868d",
					"line": 228,
					"resource_type": "Ingress",
					"resource_name": "identity-ingress",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity-ingress}}.namespace",
					"search_line": 228,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "adffb3fee613704e1b55b49a81d4947058577cb3c50fae018bbbfebb0faba35a",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity}}.namespace",
					"search_line": 153,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "df2c34d962e1cf6e152dbacd55c80b4781beba802c53a711969b75635c1f2b61",
					"line": 111,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "garden.sapcloud.io:identity",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{garden.sapcloud.io:identity}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'garden.sapcloud.io:identity' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'garden.sapcloud.io:identity' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "9606d92d508602ad77d1b25fad1fa99adf84a97948a273f01ee304d89bf37105",
					"line": 191,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "1ce889f9e0271d18edeaa6a19844ab28446727d7b24213e729ab524ac05f7a1a",
					"line": 167,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.metadata",
					"search_line": 167,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{dex}}",
					"actual_value": "metadata.name={{identity}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{dex}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "31ec82d6d3401b6eaa82099c964b7e4e27da501f7d2acb2fe43ab93a6e7860ae",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.containers.name=dex",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.containers.name=dex.securityContext should be set",
					"actual_value": "metadata.name={{identity}}.spec.containers.name=dex.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "a6f8d594c1d2d76f811b46d5a5795882630761ad1d7ca4ef5250b39e6e477177",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}",
					"search_line": 153,
					"search_value": "",
					"expected_value": "metadata.name={{identity}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{identity}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "68f40b3cf2c7b5feaf436d5a90eb0a4706397621a3c15ad224228ee0628a0db8",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}",
					"search_line": 153,
					"search_value": "",
					"expected_value": "metadata.name={{identity}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{identity}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "41f43c187cadc128395ddf5db69e13675d2ed3bee6b1114e0703944f4a8f2b5c",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name=dex",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=dex has a security context",
					"actual_value": "spec.template.spec.containers.name=dex does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/identity_template.yaml",
					"similarity_id": "3c098bafaafba6b6abc6d1accaa84b619d0a4b4c7676bd6c93b3d0e6322bc762",
					"line": 185,
					"resource_type": "Deployment",
					"resource_name": "identity",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{identity}}.spec.template.spec.containers.name={{dex}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
