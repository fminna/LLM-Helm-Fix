{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 120,
	"files_parsed": 1,
	"lines_parsed": 115,
	"lines_ignored": 5,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 13,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 23,
	"total_bom_resources": 0,
	"start": "2024-06-26T00:24:53.89185+02:00",
	"end": "2024-06-26T00:24:55.737002+02:00",
	"paths": [
		"templates/register-server_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "fb89b0555579b0d4647039cd6869073381b10cb1af75fcecec4641626ce4cd72",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "1a159ba8dec106f31a7e1220468c244dd38b084570d91b4b304e5d37e4153d85",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "51017b250c4568b98848e239f7fa9d072c92aee6d13422aecba05f38794c3756",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "5863d28c75b18af8c4a068ae6a82d906ff9a41352896500f803b5ba947b4b8f5",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "e16272196f155cf12c505909a5359a7d64deaf25349c6e026bfa2faaa73dc2a9",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "66f70ac7464be5970461288ea4e8d2b9e0d5305ba1aed60c3df1ca4396aa351b",
					"line": 65,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "3d245361eb8e2f528907e46b644bb889f98ea442f521ec836ef1ab746a4e7cd7",
					"line": 48,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{register-server}}",
					"search_line": 48,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "ServiceAccount",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ServiceAccount}}.metadata.name={{register-server}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "30ea57df4850f53f43dcefc40a2ed4aff867807e52067802b252127e38ee890a",
					"line": 106,
					"resource_type": "Ingress",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Ingress}}.metadata.name={{register-server}}",
					"search_line": 106,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "e6a9e891f82a3a30854338285f78ed67736b2e6c2577a1a48744c56dc24d66d4",
					"line": 28,
					"resource_type": "Service",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{register-server}}",
					"search_line": 28,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "8b8792a088bbfa4a7647125eabecfb47c986002a149e19ceb6a205ee106f4581",
					"line": 88,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.resources.limits",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=register-server has CPU limits",
					"actual_value": "spec.template.spec.containers.name=register-server doesn't have CPU limits"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "8fb1ba6fff8bd0c97f86671974c5f36ad1b525fe18843c70a57742753d5dd1fe",
					"line": 90,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.resources.requests",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name={{register-server}}.resources.requests should have CPU requests",
					"actual_value": "spec.template.spec.containers.name={{register-server}}.resources.requests doesn't have CPU requests"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "a746c87b9b823ba151607b821ddcd8fe6aff2f710a20e4fb178e3cbb9284bba9",
					"line": 16,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "register-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{register-server}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'register-server' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'register-server' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Invalid Image Tag",
			"query_id": "583053b7-e632-46f0-b989-f81ff8045385",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Supply-Chain",
			"experimental": false,
			"description": "Image tag must be defined and not be empty or equal to latest.",
			"description_id": "30154626",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "fbffd9d9c19441089a24b843573a522e4b628d7ec0fc7b01484b8e745ef24fba",
					"line": 68,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.image",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.image tag is provided and not latest",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.image tag is not provided or latest"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "6ee5e92eceda86af5145f9d737e93fa51517041d43f3ff0f0b1e0e71e130498a",
					"line": 62,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{register-server}}",
					"actual_value": "metadata.name={{register-server}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{register-server}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "a4d6b5bbe732c376154b1dabe6c089f77d6a228c164c65520cc83807e5124583",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.containers.name=register-server",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.containers.name=register-server.securityContext should be set",
					"actual_value": "metadata.name={{register-server}}.spec.containers.name=register-server.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Object Is Using A Deprecated API Version",
			"query_id": "94b76ea5-e074-4ca2-8a03-c5a606e30645",
			"query_url": "https://kubernetes.io/docs/reference/using-api/deprecation-guide/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Kubernetes APIs evolve over time and are sometimes removed with newer releases. To prevent incompatibilities when upgrading Kubernetes, deprecated APIs should be replaced with newer and more stable API versions.",
			"description_id": "d5c30c5b",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "f27c7dfa5bb3547a1647fad969a794011bdad8f5970811ab86c3c8d82b376b1c",
					"line": 103,
					"resource_type": "Ingress",
					"resource_name": "register-server",
					"issue_type": "IncorrectValue",
					"search_key": "apiVersion={{extensions/v1beta1}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.apiVersion of Ingress should be {{networking.k8s.io/v1}}",
					"actual_value": "metadata.name={{register-server}}.apiVersion of Ingress  is deprecated and is {{extensions/v1beta1}}"
				},
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "6e0642ec58c4f7cf07ed3afd8858165fd14d5b0b3934e26e0a743e200b102736",
					"line": 10,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "register-server",
					"issue_type": "IncorrectValue",
					"search_key": "apiVersion={{rbac.authorization.k8s.io/v1beta1}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.apiVersion of ClusterRoleBinding should be {{rbac.authorization.k8s.io/v1}}",
					"actual_value": "metadata.name={{register-server}}.apiVersion of ClusterRoleBinding  is deprecated and is {{rbac.authorization.k8s.io/v1beta1}}"
				},
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "e8f47da4ae71549185191e9f241709501122219d45d410f2d09ec8b7a992dcf8",
					"line": 45,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "IncorrectValue",
					"search_key": "apiVersion={{apps/v1beta2}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.apiVersion of Deployment should be {{apps/v1}}",
					"actual_value": "metadata.name={{register-server}}.apiVersion of Deployment  is deprecated and is {{apps/v1beta2}}"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "40b227f532de7c07063b8c50e231b37229f076175cfc9308e983066af6a2f350",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{register-server}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "7dc18f17a8118bcb9c60d935f1a8ae3ace1a3c0191f38aded8149434883e6d2f",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{register-server}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "78b35a3faa69033a99243643bb1e7ee091df88f382217b81af7a901b9a2f742b",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name=register-server",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=register-server has a security context",
					"actual_value": "spec.template.spec.containers.name=register-server does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/register-server_template.yaml",
					"similarity_id": "8f58a7dd96a9c37686e6fec9f8c270298dc7fc84adadddc5274912b26129f5e1",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "register-server",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{register-server}}.spec.template.spec.containers.name={{register-server}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
