{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 92,
	"files_parsed": 1,
	"lines_parsed": 88,
	"lines_ignored": 4,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 5,
		"INFO": 0,
		"LOW": 6,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 20,
	"total_bom_resources": 0,
	"start": "2024-06-26T01:46:10.83624+02:00",
	"end": "2024-06-26T01:46:12.903486+02:00",
	"paths": [
		"templates/aws-secrets_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "80a0f9f01d8b74167727a5d93464238aee104beec1151a2230ddba2946244319",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "1afc2179bd36087345e303b5f515575b2c386763bcedaba03fadb53c88f936ab",
					"line": 78,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{providervol}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{providervol}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{providervol}}.readOnly is undefined"
				},
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "78802809e186a66906c0afc0c4b290ebc01f1203107dc2ad41787066b305be5a",
					"line": 79,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{mountpoint-dir}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{mountpoint-dir}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.volumeMounts.name={{mountpoint-dir}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Workload Mounting With Sensitive OS Directory",
			"query_id": "5308a7a8-06f8-45ac-bf10-791fe21de46e",
			"query_url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Workload is mounting a volume with sensitive OS Directory",
			"description_id": "73339cde",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "99932fe07f984cc65cf90c2e9ec2d0034fa06d29f4c3bf1c1779a24071278287",
					"line": 88,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.volumes.name={{mountpoint-dir}}.hostPath.path",
					"search_line": 88,
					"search_value": "",
					"expected_value": "Workload name 'csi-secrets-store-provider-aws' of kind 'DaemonSet' should not mount a host sensitive OS directory '/var/lib/kubelet/pods' with hostPath",
					"actual_value": "Workload name 'csi-secrets-store-provider-aws' of kind 'DaemonSet' is mounting a host sensitive OS directory '/var/lib/kubelet/pods' with hostPath"
				},
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "92b1a74ecec22acfbb70ebdf61e5b88d652d04994330f3bf27b860182ddc8254",
					"line": 85,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.volumes.name={{providervol}}.hostPath.path",
					"search_line": 85,
					"search_value": "",
					"expected_value": "Workload name 'csi-secrets-store-provider-aws' of kind 'DaemonSet' should not mount a host sensitive OS directory '/etc/kubernetes/secrets-store-csi-providers' with hostPath",
					"actual_value": "Workload name 'csi-secrets-store-provider-aws' of kind 'DaemonSet' is mounting a host sensitive OS directory '/etc/kubernetes/secrets-store-csi-providers' with hostPath"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "e022739300c49bb6415a454549c8c8e00c087c545398ddd9dc1c6251a44cc3fd",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "668471ec0975d99b47e661696f084223460728dbd4d9f3225890a3e6fb212f4a",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "9a8cda43a88efbac6cb65a7e285eabb65e2f1fc4ea14460aeb79d8eb7a321d4d",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "7288d978ab532a51fe445e4f04916623659392aa88c94884b0de3d90ae0ede63",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "9fbbbaeb0484a5f0276a160a7065ee715beb7db259d312c402dc5e6927cdcba7",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "b00a592ce52929292e99eb8694e1600b959de5f40c3b000788d1c91000394ab6",
					"line": 60,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Shared Host Network Namespace",
			"query_id": "6b6bdfb3-c3ae-44cb-88e4-7405c1ba2c8a",
			"query_url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Container should not share the host network namespace",
			"description_id": "50e5de80",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "10518b5929d343e1ddbd87cc1de80e43c4032a3a1bf102fe11dc685fc948d3ec",
					"line": 62,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.hostNetwork",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.hostNetwork' should be set to false or undefined",
					"actual_value": "'spec.template.spec.hostNetwork' is true"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "29895e763cad8002756d6cad487a02a65c47ca19e4945214e5b29ff0f7e4b393",
					"line": 46,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.namespace",
					"search_line": 46,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to kube-system"
				},
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "ServiceAccount",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to kube-system"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "af67e720c6118877a718305667a558f24b4feb953d573ce248c383c8c9f7f6e6",
					"line": 57,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{provider-aws-installer}}",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{provider-aws-installer}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "2704c1ee8f2bcf5c7c47773716d29a01ad6534f476a8fd39b296cc7885fa8be3",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.containers.name=provider-aws-installer",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.containers.name=provider-aws-installer.securityContext should be set",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.containers.name=provider-aws-installer.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "5ab0365a4d07d7ef06059c4f06863f4bec03b391b99b309a1705b665bff0643c",
					"line": 46,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}",
					"search_line": 46,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "d7ef3a5582ff18cc8d4b24fb8857be4ac30f0571302f50a2864dbd136398670c",
					"line": 46,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}",
					"search_line": 46,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "e121eb9c6e609e9960492802236df975b5f6fecd44a8705cce0967c945e0eabf",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name=provider-aws-installer",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=provider-aws-installer has a security context",
					"actual_value": "spec.template.spec.containers.name=provider-aws-installer does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/aws-secrets_template.yaml",
					"similarity_id": "46ca3a4e4fffc6612cf9c2e3cebe905db2d9b19b567aaf5a17a5e03e83248200",
					"line": 64,
					"resource_type": "DaemonSet",
					"resource_name": "csi-secrets-store-provider-aws",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{csi-secrets-store-provider-aws}}.spec.template.spec.containers.name={{provider-aws-installer}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
