{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 199,
	"files_parsed": 1,
	"lines_parsed": 189,
	"lines_ignored": 10,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 2,
		"INFO": 0,
		"LOW": 6,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 17,
	"total_bom_resources": 0,
	"start": "2024-06-26T03:19:20.509223+02:00",
	"end": "2024-06-26T03:19:22.574754+02:00",
	"paths": [
		"templates/dt-kubewatch_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "6e0e4f83e0e21a0699511b32db60b696bdadd736c4a55944fa3ec5668e35f11d",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "4a5cd7ea1a13eca89d0980a201cc5681aa56837ac7062b117a729645f80223b3",
					"line": 183,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.volumeMounts.name={{kubewatch-config-map}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.volumeMounts.name={{kubewatch-config-map}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.volumeMounts.name={{kubewatch-config-map}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "690da462c5b3c13c19ad454ef82e3a7dfa3e1dad14873ee115016837bf450080",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "408db4a80423d2d8ed0eb221e80f11029dcf3194c8e37619764af398b661ad24",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "fea06f43a3a1fac6f0940493c883a031b5acefde43d8ae905d000828a97b64b1",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "3052deea877b52007deff861b398acadd7cf1371e60ea3561b870fd22b9ead67",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "ebd4ca6448f52c002aec2222ec740389ea00310d2cb7bbd5c01216d9d9c51cff",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "2a73f5daa7d0d91a393c899fff1b26a64bb2206c6f4718d0f034d11d38b8d507",
					"line": 168,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "8f2e7e68edee857966f6443a72feb813aa2d78eccecf0579b725661aea5c8b61",
					"line": 26,
					"resource_type": "ConfigMap",
					"resource_name": "kubewatch-config",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{kubewatch-config}}.namespace",
					"search_line": 26,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "281e972b043f8898441189d887b4c8d836e96c9d2cbc6ec76da5f3e2f2708e73",
					"line": 13,
					"resource_type": "ServiceAccount",
					"resource_name": "kubewatch",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{kubewatch}}.namespace",
					"search_line": 13,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "883bbf6a608e59789d3c59d7e486f6b76653c703db73c00687f43de42331d08c",
					"line": 152,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{kubewatch}}.namespace",
					"search_line": 152,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "7be010b9ff52e93c341c85d188346b2fd5b67dba93f46f8442f6a09526370172",
					"line": 161,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.metadata",
					"search_line": 161,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{kubewatch}}",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{kubewatch}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "d9cc4b359e5633a631a0e89ba37675e4641c69f753f4ad65b77805fc21ee16f8",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.containers.name=kubewatch",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.containers.name=kubewatch.securityContext should be set",
					"actual_value": "metadata.name={{kubewatch}}.spec.containers.name=kubewatch.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "5b4a57465eb7cbe3f6ee2b96b929e48ac272e62f1ecc8fb8e1eb3bbbf46410f4",
					"line": 152,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}",
					"search_line": 152,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{kubewatch}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "41f688203a60c9aba9bde32b24618d74888fa9384b8bad1e4c03e57c6a7761f7",
					"line": 152,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}",
					"search_line": 152,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{kubewatch}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "ed8fedacc5663a042fe7313f9555a7cdb9af5d7ce0acecbbc9fc8aafff2871ea",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name=kubewatch",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=kubewatch has a security context",
					"actual_value": "spec.template.spec.containers.name=kubewatch does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/dt-kubewatch_template.yaml",
					"similarity_id": "bfccda139d92aead309becef591961579ca72a56c950a41b02595ed843a7d574",
					"line": 170,
					"resource_type": "Deployment",
					"resource_name": "kubewatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{kubewatch}}.spec.template.spec.containers.name={{kubewatch}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
