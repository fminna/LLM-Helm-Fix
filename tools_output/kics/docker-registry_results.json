{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 134,
	"files_parsed": 1,
	"lines_parsed": 130,
	"lines_ignored": 4,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 3,
		"INFO": 0,
		"LOW": 10,
		"MEDIUM": 10,
		"TRACE": 0
	},
	"total_counter": 23,
	"total_bom_resources": 0,
	"start": "2024-05-18T00:13:26.184979+02:00",
	"end": "2024-05-18T00:13:28.095158+02:00",
	"paths": [
		"templates/docker-registry_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "57e8d03378dc23bbbe8f5e5656e8761a04e4b7f4d8e81ba59b606a6adf2541ad",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "5e397a90855fd453047d8e72864e358cefb45b9f2843abe191eb059b8140163c",
					"line": 126,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{release-name-docker-registry-config}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{release-name-docker-registry-config}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{release-name-docker-registry-config}}.readOnly is undefined"
				},
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "62a17c1f17b3597b9c9ecd01ebf4d0339a34950acb0dffefd923dc9f79a059a3",
					"line": 124,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{data}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{data}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.volumeMounts.name={{data}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "3beb87c4c129cb7ef9dba9af736ff041340d1acac5c65de6dd1c46c7af659004",
					"line": 94,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.securityContext.runAsUser=1000",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "ca6da6c26f16edb5123a6f5f6fae5bc8413b63e6a9fb80fefe49db03115fa654",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "ce2f379a717bd0339b1943cca1cd34b025bcf8db0e060fb50b93a75945d6d68f",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "34308e3c2ac117e80ac054f416392d6440e85e2f4be7d0178db0422488e0e8a9",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "72be59a6320fb194d99d093a0aae9520515ec31adce7f7826de8dc7a56922580",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "06e4918a22099e50ab2dc0305d7688a2190acd96653248c22eff8870175acb18",
					"line": 91,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "cb9be538b90587ab2e7e9d2d41fe97d94e6d208354d0ca904c3e74e4d9dee506",
					"line": 50,
					"resource_type": "Service",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{release-name-docker-registry}}",
					"search_line": 50,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "8c0aea17f3c1306c1a1bcef958c07ffdd33924d69e6a3ab4ab681cebc7b71c1a",
					"line": 20,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-docker-registry-config",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-docker-registry-config}}",
					"search_line": 20,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "Secret",
					"resource_name": "release-name-docker-registry-secret",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Secret}}.metadata.name={{release-name-docker-registry-secret}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "c60cc3aff40f4972fbfd7a093e1cf2d86ae004d86bb755e4d03cbb86834d79cc",
					"line": 71,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{release-name-docker-registry}}",
					"search_line": 71,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "13342cce9c5f3ff2ea1fae6a1803db7ab78c282a05e579f986d98eabb9fb8027",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry has limits defined",
					"actual_value": "spec.template.spec.containers.name=docker-registry doesn't have limits defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "710d0284a0beaaca25216139959ffdf2611df06003ec2738dbe8f7ed72fb88e0",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry.resources should have requests defined",
					"actual_value": "spec.template.spec.containers.name=docker-registry.resources doesn't have requests defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "c6279f3265e6ebcb839323fcdda414223c9318328dc4caf578be90d30a922125",
					"line": 98,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "8a8f65b8d82c42db4bab419275e899e42dd30dc235e484583ee798123e474eb3",
					"line": 89,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.metadata",
					"search_line": 89,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{docker-registry}}",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{docker-registry}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "475bd6bd48ccd1b28796fd8097c0e87b4a0fee1443f6125247172d72d238c987",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.containers.name=docker-registry",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.containers.name=docker-registry.securityContext should be set",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.containers.name=docker-registry.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "1bf3c29986a63299216f00ae20a0993a202b510b135514332ae1eaef6d5929ac",
					"line": 50,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-docker-registry}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "323b027b5e9cea3250f41b23a2c2962a0ce10f226bdf9e0234fef0a6ab71e8eb",
					"line": 50,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-docker-registry}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "53c822759f9925d658bd8809d5893a0c629d22d1fbae366f71d8cf9e311aa681",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name=docker-registry",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=docker-registry has a security context",
					"actual_value": "spec.template.spec.containers.name=docker-registry does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "65d7795ab32db006fd13567290b4b6618720b2ed2a7dd8f2a970edab955645fd",
					"line": 96,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.name={{docker-registry}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		},
		{
			"query_name": "Secrets As Environment Variables",
			"query_id": "3d658f8b-d988-41a0-a841-40043121de1e",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Secret Management",
			"experimental": false,
			"description": "Container should not use secrets as environment variables",
			"description_id": "99365a7d",
			"files": [
				{
					"file_name": "templates/docker-registry_template.yaml",
					"similarity_id": "379d624833848dfd75cfc8f76622973b48d5bee2297dded90237eb5fc26e9b73",
					"line": 118,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-registry",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-registry}}.spec.template.spec.containers.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.containers.name={{docker-registry}}.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef' should be undefined",
					"actual_value": "'spec.template.spec.containers.name={{docker-registry}}.env.name={{REGISTRY_HTTP_SECRET}}.valueFrom.secretKeyRef' is defined"
				}
			]
		}
	]
}
