{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 162,
	"files_parsed": 1,
	"lines_parsed": 153,
	"lines_ignored": 9,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 2,
		"INFO": 0,
		"LOW": 9,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 20,
	"total_bom_resources": 0,
	"start": "2024-05-17T22:13:42.255831+02:00",
	"end": "2024-05-17T22:13:44.187714+02:00",
	"paths": [
		"templates/localpath_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "96fdfcd81b0b804e27b7f1c26d378b075165a9122d2d96ce0116c0697c5bbc85",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "f03e3c69502637398a281fe3feabc087113fc6f45f0ddbf7398d853645e4760f",
					"line": 151,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.volumeMounts.name={{config-volume}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.volumeMounts.name={{config-volume}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.volumeMounts.name={{config-volume}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "29c735e2fc0d3e7caec883e0c6565966e9870a12b8df6c10dab9e507c3443615",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "75a0a9847adf6079ef947df9587f4a0eb9ec2352491fdf46572481bafcd9cc83",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "21d02355cc98a8f3759591eeaf155f1d82da05384057482c88055b1e52cb6ee0",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "6ae243d67d7f5487b6c976ddcfc303563b5b258ee5fb6d173935f17a78b62120",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "9846428d85d970c502c588db5a42ea4a8859eb63728caf797a2e3fb5eea2f1f7",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Permissive Access to Create Pods",
			"query_id": "592ad21d-ad9b-46c6-8d2d-fad09d62a942",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#privilege-escalation-prevention-and-bootstrapping",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "The permission to create pods in a cluster should be restricted because it allows privilege escalation.",
			"description_id": "c78cb1a7",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "327975aa26f1ff79291d3a74624b8b2ed9627df4d7e4e2cb29a26cfcd1f8c480",
					"line": 106,
					"resource_type": "Role",
					"resource_name": "local-path-provisioner-role",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{local-path-provisioner-role}}.rules.verbs.create",
					"search_line": 106,
					"search_value": "",
					"expected_value": "metadata.name=local-path-provisioner-role.rules.verbs should not contain the value 'create' when metadata.name=local-path-provisioner-role.rules.resources contains the value 'pods'",
					"actual_value": "metadata.name=local-path-provisioner-role.rules.verbs contains the value 'create' and metadata.name=local-path-provisioner-role.rules.resources contains the value 'pods'"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "69d12a03647c93c821591c0b7b954c760376e912f518b4e83205c998f0a6e3a3",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "3ae2e6259c08f6fb3ef5b163f552a42d14b0eb60b6e2d14fbfea9d02efdb08ee",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "637a597b111cf3ba94763b106a6790c2f9cd928887fc6e64c1f9446489bfa6d1",
					"line": 138,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "29c4bbdf39e02d1dba19d9468c79ede968f178a352a7dfa15f2afaecb978f496",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name=local-path-provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=local-path-provisioner has resources defined",
					"actual_value": "spec.template.spec.containers.name=local-path-provisioner doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "63aeb894574b906c63df97bad7b7b5afbfecbfb54a2b34045cf0cf01881f6f97",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name=local-path-provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=local-path-provisioner should have resources defined",
					"actual_value": "spec.template.spec.containers.name=local-path-provisioner doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "d052cb0e156a56c1f4743b62edb9d4892d2e6105bece1ec698b0d9f08ade1322",
					"line": 143,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "2a06fb7c6b74aade638a97b2f6c9da10057413afbbf1b9f7871e56749bd8c7e0",
					"line": 135,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{local-path-provisioner}}",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{local-path-provisioner}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "75be4896efa6f6f4d75fdc068640f91a1e61742111e31b2e22872c64c45e71f2",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.containers.name=local-path-provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.containers.name=local-path-provisioner.securityContext should be set",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.containers.name=local-path-provisioner.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "37f16770682060739c239d1e686fd6b66efdea467108cc5e2f67327c2c68895d",
					"line": 128,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}",
					"search_line": 128,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{local-path-provisioner}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "7f29b8d4a1c524a6e071910073d3dfc3e1c13ad994dd416ffffe4a1b9d1addd1",
					"line": 128,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}",
					"search_line": 128,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{local-path-provisioner}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "ed450c97fd61d5a4325f75a5d73fb033ed287ab825bbb06c5afe42c3ea924b0a",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name=local-path-provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=local-path-provisioner has a security context",
					"actual_value": "spec.template.spec.containers.name=local-path-provisioner does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/localpath_template.yaml",
					"similarity_id": "d962e2c950d2b504e7051ccd924ea945747303b927aff112fe008ab7fec87b3e",
					"line": 141,
					"resource_type": "Deployment",
					"resource_name": "local-path-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{local-path-provisioner}}.spec.template.spec.containers.name={{local-path-provisioner}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
