{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 122,
	"files_parsed": 1,
	"lines_parsed": 117,
	"lines_ignored": 5,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 9,
		"MEDIUM": 10,
		"TRACE": 0
	},
	"total_counter": 20,
	"total_bom_resources": 0,
	"start": "2024-06-26T02:22:04.105094+02:00",
	"end": "2024-06-26T02:22:06.24375+02:00",
	"paths": [
		"templates/imaginary_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "abe0b8aba9f6afc515c784df286416e7c41ed08d4271498d09a686cf7ae557f8",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "48fdfd00a690ae7c4f91b924d8698b393de23c3d21b49ed554a40dd80f9840ca",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "38e28fc507b83b0f670c714464786287e56ae69204eb957dbf6643c2d75c5d3f",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "dc3d021052cfedd4acadcf789464133138bbd3a92e3eb293072718e7021acf04",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "a51fb508b9bbbf9c10e9f165781d317d1494b56f7a45ab578367d84940ddf33e",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "ffd2b521fd63337623da19a4d91f866c4cd0257dc642adbac637356b36216028",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "b39324ec8b3887254580e6c0320865f6a006a348ad29a48559495a6d0c3cffba",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "9592f6bef55000f51ab75bb1808856242e04dc6cae7a9691362a13fae9e81aff",
					"line": 74,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "b9eb42e5d6318ebbbf08e0762182193a387e26abb01d462e9f74cb7ef1740fd8",
					"line": 58,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-imaginary}}.namespace",
					"search_line": 58,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "dc01837aee8e1524e2a6c2bbc7960233a05cb48993f03d4927b926c90f3999d5",
					"line": 36,
					"resource_type": "Service",
					"resource_name": "release-name-imaginary",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-imaginary}}.namespace",
					"search_line": 36,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "6b3dadf62e36f9de05061ac5d18116f0869dad41a0e62154151afe7797bbd6ac",
					"line": 21,
					"resource_type": "Secret",
					"resource_name": "release-name-imaginary-secret",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-imaginary-secret}}.namespace",
					"search_line": 21,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "b5ba004b7d6e8337eadbef68a26e2398a2e7daa1aa20ae4f78a7480a02c8fc8e",
					"line": 83,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=imaginary has limits defined",
					"actual_value": "spec.template.spec.containers.name=imaginary doesn't have limits defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "ba1b7db87a227bcc7efbe901111c2293231dfb082dc5f266ce03916ab67699c6",
					"line": 83,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=imaginary.resources should have requests defined",
					"actual_value": "spec.template.spec.containers.name=imaginary.resources doesn't have requests defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "87d0f3d3efdc25ea9acea2a3caef6cebbca92cc1f78b46bab0d88dd0f0525eab",
					"line": 78,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "1bce903ca1861c96f8a23df5e7658be7460d134117536e0c51d76576234bed8d",
					"line": 72,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.metadata",
					"search_line": 72,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{imaginary}}",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{imaginary}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "3ae10834c1d5a6e11fecfd54d683a2e6dcfb12e930a52f38b0c8de033c6248b8",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.containers.name=imaginary",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.containers.name=imaginary.securityContext should be set",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.containers.name=imaginary.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "164c63a4017391c10ff1a1834481a8ecc4cd3b86b88e39efaa09c2cfd3773033",
					"line": 58,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}",
					"search_line": 58,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-imaginary}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "d7a396da5d014f0cfd69c62bbdac22590e2d55535fa7f99959fb5668f95f0e07",
					"line": 58,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}",
					"search_line": 58,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-imaginary}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "049604bdcdd5203c119ffad5c4588fb82c7abcd240d2de571df588a3ac8982be",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name=imaginary",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=imaginary has a security context",
					"actual_value": "spec.template.spec.containers.name=imaginary does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/imaginary_template.yaml",
					"similarity_id": "4c792833a297d599295d3bba713cd8c22c853522b1270b3f0c01c0463b8f38d8",
					"line": 76,
					"resource_type": "Deployment",
					"resource_name": "release-name-imaginary",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-imaginary}}.spec.template.spec.containers.name={{imaginary}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
