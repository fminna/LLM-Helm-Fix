{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 111,
	"files_parsed": 1,
	"lines_parsed": 108,
	"lines_ignored": 3,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 2,
		"INFO": 0,
		"LOW": 7,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 18,
	"total_bom_resources": 0,
	"start": "2024-05-17T22:29:36.418887+02:00",
	"end": "2024-05-17T22:29:38.323709+02:00",
	"paths": [
		"templates/coredns_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "4ff3e4c85c50b3bcfbda31ed3b7a931fd1605281aa563b79847b1306f20d727e",
					"line": 78,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}",
					"search_line": 78,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "239cb21c025d3b9ffcd78cae73e6fcb79229c310a652331b9be63d8ff6bf2fde",
					"line": 85,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.volumeMounts.name={{coredns-config}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.volumeMounts.name={{coredns-config}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.volumeMounts.name={{coredns-config}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "a53505ffa28e529a1c972a2530907b701e636539f8c1f85535a8a6a83ca711bc",
					"line": 73,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.securityContext.runAsUser=1613",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "cd463f16cbcf02a43fc15b103c29b9c10dfb0a8cf2bdbda6d1cddfdb9997f662",
					"line": 77,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "e8d79ca04f4126245aaecbc915e305e6951d9add8ed14b148c8c89c05e12df55",
					"line": 77,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "62d96630e12053eb3d3c713401b995b08fd57b757af065b1226fd9a9ed6756ec",
					"line": 77,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "c3c2aa3feddac236e0300140c9b06895b17e81f68a8b77e5bc6858ca6e2e2614",
					"line": 78,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "9293a6729b6840cdb0905caadfcbcadc9b5c48a5b30e1173f3fc60ebd60ea447",
					"line": 71,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "67a12a4488f8caaf5eee5f51cb32fdc64449c53ad43fbbf34e892e5ac5fccd7d",
					"line": 30,
					"resource_type": "Service",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{release-name-coredns}}",
					"search_line": 30,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-coredns-config",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-coredns-config}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "0e667173d8438ef37dbca8a46e1b4705a26eb64d998482b8193984930761bacc",
					"line": 53,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{release-name-coredns}}",
					"search_line": 53,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "7b0cc5f5e4e33c4dda692e582abcf3f93d957bf49d423770e482cd4b370b938b",
					"line": 105,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=coredns has limits defined",
					"actual_value": "spec.template.spec.containers.name=coredns doesn't have limits defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "0c431d2eecebe2d806cf2ca6a31f34bde165628f0205f182652b175036367f91",
					"line": 105,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=coredns.resources should have requests defined",
					"actual_value": "spec.template.spec.containers.name=coredns.resources doesn't have requests defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "483823a4368d7462b5f9bbf97b603f3a8c069bcb87dd2b6a2c7d1ace1ad373b7",
					"line": 81,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.spec.containers.name={{coredns}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "39d46500eddb588f615eec18149aa9d245be39f6588733aa9d0bb0496088e99b",
					"line": 67,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{coredns}}",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{coredns}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "55c927010b52646630e4fd27024c41aebd8265c59c8b63e7bd161bf6c69e766f",
					"line": 78,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}.spec.containers.name={{coredns}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}}.spec.containers.name={{coredns}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{release-name-coredns}}.spec.containers.name={{coredns}}.securityContext.capabilities is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "966535e159df46dbed1d51b996b9116de10d254654d6860e5ab2f5b4fad732d6",
					"line": 30,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-coredns}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/coredns_template.yaml",
					"similarity_id": "aab96e3f32c0e0cb60f51369a9533db95259e6345b757646369259e8930f77f7",
					"line": 30,
					"resource_type": "Deployment",
					"resource_name": "release-name-coredns",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-coredns}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-coredns}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-coredns}} does not have a 'ResourceQuota' policy associated"
				}
			]
		}
	]
}
