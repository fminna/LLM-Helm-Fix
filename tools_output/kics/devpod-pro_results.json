{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 262,
	"files_parsed": 1,
	"lines_parsed": 252,
	"lines_ignored": 10,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 8,
		"MEDIUM": 11,
		"TRACE": 0
	},
	"total_counter": 20,
	"total_bom_resources": 0,
	"start": "2024-06-26T00:55:01.171991+02:00",
	"end": "2024-06-26T00:55:03.245787+02:00",
	"paths": [
		"templates/devpod-pro_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "8baa9b2f224a750388a8a4193073ecd58a51e14461a137cd96040d39e9df56a7",
					"line": 234,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.volumeMounts.name={{loft-data}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.volumeMounts.name={{loft-data}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.volumeMounts.name={{loft-data}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "d157b2e8794a1dd60dbbcb566580bd40f2fee10da3cc0e9deb3e9878bf4888d1",
					"line": 242,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "b2d86361969adb141a88119819312bfb022fd9a6d01f6e683db27078c15d969a",
					"line": 242,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "44e83b37aad57f17437681723fdb2d5574b83c3749346a4ec4ca26fe34a41c0e",
					"line": 191,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "be1e691567e8224e57203781774773ceef1ff0ecc9563f16f096e4073f34a33a",
					"line": 95,
					"resource_type": "Service",
					"resource_name": "loft-ingress-wakeup-agent",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-ingress-wakeup-agent}}.namespace",
					"search_line": 95,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "164224c207f73fcf68501ad40220aa1a1b152d19a2b5d2319af9d33f12c2ecde",
					"line": 118,
					"resource_type": "Service",
					"resource_name": "loft",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft}}.namespace",
					"search_line": 118,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "0e667173d8438ef37dbca8a46e1b4705a26eb64d998482b8193984930761bacc",
					"line": 53,
					"resource_type": "Service",
					"resource_name": "loft-apiservice",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-apiservice}}.namespace",
					"search_line": 53,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "2d88d762a97116080d8415a00a9279a8b87e1165a042193acecbd31f61501e9f",
					"line": 147,
					"resource_type": "Service",
					"resource_name": "loft-webhook-agent",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-webhook-agent}}.namespace",
					"search_line": 147,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "e63655551f9cfc8b80092d7963c5d4cd066df1908aaaa40b5e537f99e0660e79",
					"line": 74,
					"resource_type": "Service",
					"resource_name": "loft-apiservice-agent",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-apiservice-agent}}.namespace",
					"search_line": 74,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "6c949637ae1bcedc80607b9ab1969ab87067a7d507a54d12f25b993cb54ae914",
					"line": 19,
					"resource_type": "Secret",
					"resource_name": "loft-manager-config",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-manager-config}}.namespace",
					"search_line": 19,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "202e2d205100825905de37d23959f9f177bdf733180ffdd824e7cb3aba36666a",
					"line": 169,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft}}.namespace",
					"search_line": 169,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "ServiceAccount",
					"resource_name": "loft",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "08bad7877620a52ca7cdbe1b9e98412247443dbe2598492d9822bc8c05196d74",
					"line": 45,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "loft-management-admin",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-management-admin}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'loft-management-admin' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'loft-management-admin' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "42ad07dbb9bd7164d7576b9b4188abaf075e4a7cf73c43951952c85ca038d5ed",
					"line": 198,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "0a5fda50531f5f0371c7a18d410182cf6fca02e16bfc103f290a0c09f5a57b35",
					"line": 187,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{manager}}",
					"actual_value": "metadata.name={{loft}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{manager}}"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "ea466c84d24db6cad855cf4fd36229c48089b22e504cc4b585f93516c4763cbb",
					"line": 169,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}",
					"search_line": 169,
					"search_value": "",
					"expected_value": "metadata.name={{loft}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{loft}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "f66682ace75604ddcd03f269d127f5e828f9f2b69de696ac5bdd75f659cbbd28",
					"line": 169,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}",
					"search_line": 169,
					"search_value": "",
					"expected_value": "metadata.name={{loft}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{loft}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "0325fec7a36d5dd7ef271462f9519f69acd7f5da648fff4821818cc6eb74ea9b",
					"line": 242,
					"resource_type": "Deployment",
					"resource_name": "loft",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}",
					"search_line": 242,
					"search_value": "",
					"expected_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{loft}}.spec.template.spec.containers.name={{manager}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		},
		{
			"query_name": "Service Does Not Target Pod",
			"query_id": "3ca03a61-3249-4c16-8427-6f8e47dda729",
			"query_url": "https://kubernetes.io/docs/concepts/services-networking/service/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Service should Target a Pod",
			"description_id": "e7c26645",
			"files": [
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "fb3c3112890d6d2af51d0dcca4372ac564fe98fcb3d3e7876ae6f927d463c165",
					"line": 83,
					"resource_type": "Service",
					"resource_name": "loft-apiservice-agent",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-apiservice-agent}}.spec.ports.port={{443}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft-apiservice-agent}}.spec.ports.port={{443}} has a Pod port",
					"actual_value": "metadata.name={{loft-apiservice-agent}}.spec.ports.port={{443}} does not have a Pod port"
				},
				{
					"file_name": "templates/devpod-pro_template.yaml",
					"similarity_id": "131df2015f45e2bde19063878c13ab36158a2a2dba5348f3c7bac1f4107ad4f7",
					"line": 62,
					"resource_type": "Service",
					"resource_name": "loft-apiservice",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{loft-apiservice}}.spec.ports.port={{443}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{loft-apiservice}}.spec.ports.port={{443}} has a Pod port",
					"actual_value": "metadata.name={{loft-apiservice}}.spec.ports.port={{443}} does not have a Pod port"
				}
			]
		}
	]
}
