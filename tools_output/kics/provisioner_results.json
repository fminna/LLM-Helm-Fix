{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 153,
	"files_parsed": 1,
	"lines_parsed": 147,
	"lines_ignored": 6,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 6,
		"INFO": 0,
		"LOW": 8,
		"MEDIUM": 11,
		"TRACE": 0
	},
	"total_counter": 25,
	"total_bom_resources": 0,
	"start": "2024-06-26T03:34:08.725612+02:00",
	"end": "2024-06-26T03:34:10.775687+02:00",
	"paths": [
		"/usr/local/opt/kics/share/kics/assets/queries",
		"templates/provisioner_template.yaml"
	],
	"queries": [
		{
			"query_name": "Container Is Privileged",
			"query_id": "dd29336b-fe57-445b-a26e-e6aa867ae609",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/#privileged-mode-for-containers",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Privileged containers lack essential security restrictions and should be avoided by removing the 'privileged' flag or by changing its value to false",
			"description_id": "55f59030",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "f1e53ef9598882d7297506c2b368d8a0758140570014cef309d2ab8520e0fe8d",
					"line": 119,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.privileged",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.privileged is unset or false",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.privileged is true"
				}
			]
		},
		{
			"query_name": "Non Kube System Pod With Host Mount",
			"query_id": "aa8f7a35-9923-4cad-bd61-a19b7f6aac91",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "A non kube-system workload should not have hostPath mounted",
			"description_id": "e8553157",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "a44fd2905d05d398fd02a5c5694ca8d09fec81f40ff5a4b44e35109f961d592a",
					"line": 149,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.volumes.name={{provisioner-dev}}.hostPath.path",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'release-name-provisioner' of kind 'DaemonSet' in non kube-system namespace 'default' should not have hostPath '/dev' mounted",
					"actual_value": "Resource name 'release-name-provisioner' of kind 'DaemonSet' in non kube-system namespace 'default' has a hostPath '/dev' mounted"
				},
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "ed764b0788159c205cca1f08c3c2f2add4e3b9eb5afd92946961e9218ac3b6fa",
					"line": 152,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.volumes.name={{fast-disks}}.hostPath.path",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'release-name-provisioner' of kind 'DaemonSet' in non kube-system namespace 'default' should not have hostPath '/mnt/fast-disks' mounted",
					"actual_value": "Resource name 'release-name-provisioner' of kind 'DaemonSet' in non kube-system namespace 'default' has a hostPath '/mnt/fast-disks' mounted"
				}
			]
		},
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "d4e9449031f3564a194a2bbc7acc6b85a222d5099f622e52b794af8a8fe7c550",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": 118,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "6d3c9d8102179b3d8ab62443963fc9d979089d1bbbe1205eca244d64996ce17a",
					"line": 138,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.volumeMounts.name={{provisioner-dev}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.volumeMounts.name={{provisioner-dev}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.volumeMounts.name={{provisioner-dev}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Workload Mounting With Sensitive OS Directory",
			"query_id": "5308a7a8-06f8-45ac-bf10-791fe21de46e",
			"query_url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Workload is mounting a volume with sensitive OS Directory",
			"description_id": "73339cde",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "4f5e609e2e6a13e4605a5b1074c77172b48aa1cbd6259fc818442042933dec05",
					"line": 149,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.volumes.name={{provisioner-dev}}.hostPath.path",
					"search_line": 149,
					"search_value": "",
					"expected_value": "Workload name 'release-name-provisioner' of kind 'DaemonSet' should not mount a host sensitive OS directory '/dev' with hostPath",
					"actual_value": "Workload name 'release-name-provisioner' of kind 'DaemonSet' is mounting a host sensitive OS directory '/dev' with hostPath"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "b21ac85239371896cb2eba8224b5489fdd6fe805865c41d4d4ba96f384e8dd57",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": 118,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "af73023375170904df8175f0c9c96f3664a61d8d7605b186bbf60447def248e0",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "ee4c4ed901cd8128b3c285bcae7fa2ac40bfa77b1f8020cdb0015b624d69b54d",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "b205065115d6da99808be37ae91edc2b95ca2761c724ca8085c78403380426f5",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "8b521decc84db9ab4071b0b80985cf041e230ceb1db563b7517b5d44187e9bf3",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "b981bb56747753c0f9d0d2891e0e19d372ce30f39de9fb306b99c5285be1ac6a",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "d9b24162014cb56e8e6e4a5a382ef1d2e829fc1d6aa73162b9d1e026aa43c368",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "a7e2c4f3ccb3e4a076f333b68f940b6ff817107955d7a0305f69490bd3d0efb9",
					"line": 113,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "ServiceAccount",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "6c949637ae1bcedc80607b9ab1969ab87067a7d507a54d12f25b993cb54ae914",
					"line": 19,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-provisioner-config",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner-config}}.namespace",
					"search_line": 19,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "be1e691567e8224e57203781774773ceef1ff0ecc9563f16f096e4073f34a33a",
					"line": 95,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.namespace",
					"search_line": 95,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "05baf27ecde87bb9a5af166b9df2a0bd528bd6862c855df31055e591f38d128b",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name=provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=provisioner has resources defined",
					"actual_value": "spec.template.spec.containers.name=provisioner doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "f470a182c33356167793de02ed3b9e1f89ff5eaa5eb9ecf41a9455fcc7d9e0ef",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name=provisioner",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=provisioner should have resources defined",
					"actual_value": "spec.template.spec.containers.name=provisioner doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "c53014a2d4c28a3446ef25102940d0edef7789b017fe51f94e078ea8cebba6bc",
					"line": 116,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "c4e7e005761d84e8b2699fbc08caf387825995aa3e88441f7d10f23d47bd852c",
					"line": 111,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.metadata",
					"search_line": 111,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{provisioner}}",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{provisioner}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "46c27b1d3d26f4a011c36ddabe03d8e0dc213e042bd25b64ce95242db221de96",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.containers.name={{provisioner}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.containers.name={{provisioner}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.containers.name={{provisioner}}.securityContext.capabilities is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "4bced110a3586ef92051b4e3ac42b0ddc0916a60d48ea485ff7a814350596a23",
					"line": 95,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}",
					"search_line": 95,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-provisioner}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "23e5c6da8155aa93fb05c65f51a31e5591bc1b5de194e8bab3712c03f1abffac",
					"line": 95,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}",
					"search_line": 95,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-provisioner}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/provisioner_template.yaml",
					"similarity_id": "4d55dcc0ff0f1b4e56f9b70f1c87c52c205061f37b2d963d6b6692b363b37818",
					"line": 118,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-provisioner",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}",
					"search_line": 118,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-provisioner}}.spec.template.spec.containers.name={{provisioner}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
