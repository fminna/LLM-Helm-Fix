{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 421,
	"files_parsed": 1,
	"lines_parsed": 416,
	"lines_ignored": 5,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 0,
		"INFO": 0,
		"LOW": 5,
		"MEDIUM": 5,
		"TRACE": 0
	},
	"total_counter": 10,
	"total_bom_resources": 0,
	"start": "2024-05-17T23:27:22.367122+02:00",
	"end": "2024-05-17T23:27:24.228781+02:00",
	"paths": [
		"templates/access-manager_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "a658cb871a98807e2158c10f1c0aa22d5f5a17ba5a9ffb90924c2ee86ec46c0f",
					"line": 411,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.securityContext.runAsUser=1001",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "3af58de82c2fa4724b7b7d3b2740ff72cdc1ef9addb5ca0949dc8e15d13c5f9f",
					"line": 400,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "45891bc085f840085ca871527202e7918b99a78d5336f6dfd900d6557582983a",
					"line": 397,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{access-manager}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{access-manager}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "ab84076330460b372b2682b7bba6bc848eba65c25d5a0e29291c858cd5c64ada",
					"line": 11,
					"resource_type": "ServiceAccount",
					"resource_name": "release-name-access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ServiceAccount}}.metadata.name={{release-name-access-manager}}",
					"search_line": 11,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "8ee75a8b29cf955426b002a46db1d07841e369a296c15ff3ac7697dd712c76d2",
					"line": 380,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{access-manager}}",
					"search_line": 380,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "e2a3ea26dd29d954b09d849975dae9ff6b143d6f6fb8e95607e12ced96da4c3e",
					"line": 373,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "release-name-access-manager",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-access-manager}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'release-name-access-manager' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'release-name-access-manager' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "eb739d5fc1059bac74747c219f1c82da3449c2f957c0ba83b0e3c441cb88cb05",
					"line": 402,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{access-manager}}.spec.template.spec.containers.name={{access-manager}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "baaeaf28e73aead7644862241d69d048fbe2a8b365a22a807b13f383945b8796",
					"line": 393,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{access-manager}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{access-manager}}",
					"actual_value": "metadata.name={{access-manager}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{access-manager}}"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "e1f17d0a9cf565596111c21ff7b2649e91554e5fefc5ff12a641bc06ad1aada2",
					"line": 380,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{access-manager}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{access-manager}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/access-manager_template.yaml",
					"similarity_id": "df0fe4c23495c9e9676939c5f67802271adadc336d08ef7a10e5ec3b22e7d78d",
					"line": 380,
					"resource_type": "Deployment",
					"resource_name": "access-manager",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{access-manager}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{access-manager}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{access-manager}} does not have a 'ResourceQuota' policy associated"
				}
			]
		}
	]
}
