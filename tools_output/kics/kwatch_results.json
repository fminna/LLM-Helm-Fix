{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 92,
	"files_parsed": 1,
	"lines_parsed": 87,
	"lines_ignored": 5,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 5,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 15,
	"total_bom_resources": 0,
	"start": "2024-06-26T00:48:29.169862+02:00",
	"end": "2024-06-26T00:48:31.213243+02:00",
	"paths": [
		"/usr/local/opt/kics/share/kics/assets/queries",
		"templates/kwatch_template.yaml"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "33fcabdd1dacbf653f02f0b220c19f97753b08d1a9dd017952d465f386a49baa",
					"line": 71,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}",
					"search_line": 71,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "9ae9582d1ba0c7f26904526884d473adadf8128f2a0359b315a88df1016f83af",
					"line": 75,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.runAsUser=101",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.runAsUser should be set to a UID \u003e= 10000",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.runAsUser is set to a low UID"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "eaf6a60b87025d08ff51175c085d5e01a7fce863c1c97f8754dab670b71e0285",
					"line": 70,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "2bd5430522759d3aacb16123c0ab1d71ee9a55e395d8e820b348838dab8ed4cb",
					"line": 70,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "de7b13899bb6ff9292b57d638181c8bb11e762809de355c14ba835ad691fa85b",
					"line": 70,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "09a99397cdd6fb5fff2e2c8d28a39141df74a828827d093e94e103d38e15840d",
					"line": 71,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "4ea2e48a321614419efec20461bab761afe50d9620a036adbe033d4e0daef3fc",
					"line": 66,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "39ee5b2e7df16453f25292c7c92404822fab885073f66f16f2271555bf66becb",
					"line": 14,
					"resource_type": "ConfigMap",
					"resource_name": "release-name",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name}}.namespace",
					"search_line": 14,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "3d245361eb8e2f528907e46b644bb889f98ea442f521ec836ef1ab746a4e7cd7",
					"line": 48,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-kwatch}}.namespace",
					"search_line": 48,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "3f31a81195f136b5622324e938828c418481cb0c4a51720d33c11d3df1e91776",
					"line": 7,
					"resource_type": "ServiceAccount",
					"resource_name": "release-name",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name}}.namespace",
					"search_line": 7,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "15e9204a013292751feb4dd8bd8dda2f10e2086a628ce6178f576f5674e23fa8",
					"line": 84,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.spec.containers.name={{kwatch}}.resources",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=kwatch.resources should have requests defined",
					"actual_value": "spec.template.spec.containers.name=kwatch.resources doesn't have requests defined"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "32844a13e215697ae0fb4803cb29c9bec81fef862f8cbee4b7e08c307c0fb682",
					"line": 62,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{kwatch}}",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{kwatch}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "5272d476380cbc7a991bab29eb7e4ac1b5588261efa58c87f782da9069954ce3",
					"line": 71,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}.spec.containers.name={{kwatch}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}}.spec.containers.name={{kwatch}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{release-name-kwatch}}.spec.containers.name={{kwatch}}.securityContext.capabilities is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "4fdd13069dd9726c60d0e94c951e74bc2dae80b2d8932ff7df3fc80d4147ef10",
					"line": 48,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}",
					"search_line": 48,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-kwatch}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/kwatch_template.yaml",
					"similarity_id": "f72cd54fe1e8c475d34521ddce31cda45d5c5e7d3fa480040b25216af9907379",
					"line": 48,
					"resource_type": "Deployment",
					"resource_name": "release-name-kwatch",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-kwatch}}",
					"search_line": 48,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-kwatch}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-kwatch}} does not have a 'ResourceQuota' policy associated"
				}
			]
		}
	]
}
