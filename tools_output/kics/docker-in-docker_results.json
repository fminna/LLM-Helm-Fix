{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 192,
	"files_parsed": 1,
	"lines_parsed": 186,
	"lines_ignored": 6,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 4,
		"INFO": 0,
		"LOW": 16,
		"MEDIUM": 21,
		"TRACE": 0
	},
	"total_counter": 41,
	"total_bom_resources": 0,
	"start": "2024-06-26T01:26:02.92153+02:00",
	"end": "2024-06-26T01:26:04.981073+02:00",
	"paths": [
		"templates/docker-in-docker_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Container Is Privileged",
			"query_id": "dd29336b-fe57-445b-a26e-e6aa867ae609",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/#privileged-mode-for-containers",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Privileged containers lack essential security restrictions and should be avoided by removing the 'privileged' flag or by changing its value to false",
			"description_id": "55f59030",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "9d57ad805713256063e039e77f48540011488c4dc217d237242466e7e0145664",
					"line": 124,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.privileged",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.privileged is unset or false",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.privileged is true"
				}
			]
		},
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "9e5c3d1d923a9eb42fc9b203516534f9c1b50c579cebab280a96d3fbed9e0e45",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": 123,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.allowPrivilegeEscalation is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "6815f355f25a01569c64d1e073de4e1188ffbba15fae6a3d80c08b42b676b895",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "c6d639f9d40a87748c953f4dae75d70d7bb0e076409315aadbee9a2d9c21c0fc",
					"line": 126,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.volumeMounts.name={{storage}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.volumeMounts.name={{storage}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.volumeMounts.name={{storage}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "a997e6d5007835477f1af90e37b5037222bea1fe667f0efd4406a73925064769",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": 123,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "8d63e4e760a384bcdab7d4a882ad0fdc06a91646bb0d1ba4ff1eb517e3185d02",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "6c1ebe564f80669497f06585ab8064c5367dd9a399062eb5eab0db52d241a4ba",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.runAsUser is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "0e9c8f335be7cb622894c45bc8eae0e5a5bd4a0b9a0ca52dc324cf74f646b5f0",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "bd63fbfeba14532fb3d7c84b588b5cbd876f395b1f8efc07ff14bca52c38b749",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.resources.limits.memory is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "0100bb7da65605807a734d8a20b9fa2a12f3b22ffe07fadb984a29fbb7a61f21",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "ac733116c0063d68dae126045ab7b833aa899a0d0fda05f35b948e048dabb92c",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.resources.requests.memory is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "ffabaf8963d6f07781ce10724baecde9beeb57cff030ba312208e8df736e152b",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "24cd9963c457ae0f9ae9a98d75ab2768d8015569bb776c07066ffef366dfab5a",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.capabilities.drop is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "46b2b558fe592ef1c5a87d883cb21699e05e9567d1cdfe834472b271bd207ee3",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "32afc89536c74afed8ca153fc6785c6e974adf7fa4f30abfca6ba65de00b605b",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.readinessProbe is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "9d3d71d066d52ad0ac7ea7aafb58cac9f9fc195daed24c28f9b25cbcf3a2868f",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "9b40d9878a7ae6fee415b1ff8cb625b85c23fcfced47d182cf2fb7f7364ee63d",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.seccompProfile.type is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "195725ab5ed5ef72723eac95c1402fb28f0dbb52729121d0767a9effbc5509e6",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "3e1d6f5bb35ec252ca169204116514fe89fbe9441fcb997e743c2a943e57680b",
					"line": 99,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "6da7878077dc4c1a53976921c39692ae6269c99a07fabc1063f065ed87e09ef9",
					"line": 43,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-docker-in-docker}}",
					"search_line": 43,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "aa046e828e49579b6588197bf226463a6a7dc70775dc3e9df106f02f7a465186",
					"line": 80,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{release-name-docker-in-docker}}",
					"search_line": 80,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "37ef1d20c3d6f99bce67d2dc6927d1d6bee6eac885937e2caeec80965ed5d01a",
					"line": 32,
					"resource_type": "Secret",
					"resource_name": "release-name-docker-in-docker-cert-client",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker-cert-client}}.namespace",
					"search_line": 32,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "e0bfc54238037c64e40271bb2b37e02df64f586e4be2456f392e8a4c785b0f9b",
					"line": 57,
					"resource_type": "Service",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Service}}.metadata.name={{release-name-docker-in-docker}}",
					"search_line": 57,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "8c0aea17f3c1306c1a1bcef958c07ffdd33924d69e6a3ab4ab681cebc7b71c1a",
					"line": 20,
					"resource_type": "Secret",
					"resource_name": "release-name-docker-in-docker-cert-server",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker-cert-server}}.namespace",
					"search_line": 20,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "ServiceAccount",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ServiceAccount}}.metadata.name={{release-name-docker-in-docker}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "56e059dac0c0ecf2d537951e3c57a8b1e2c6ae474be37d3a6be4c90e64c212ac",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name=dind",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=dind has resources defined",
					"actual_value": "spec.template.spec.containers.name=dind doesn't have resources defined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "cf52bc54f9cd77934ffabf640b71408200aa7cc609b82c6dbd64f01007aa76fc",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name=gc",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=gc has resources defined",
					"actual_value": "spec.template.spec.containers.name=gc doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "051cf5e41d9850d448d0ba26b5d67581fc97008e313637df61a8914792857c92",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name=gc",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=gc should have resources defined",
					"actual_value": "spec.template.spec.containers.name=gc doesn't have resources defined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "40811524718539d76fa5c46b754fbd2dd0326b8c9aecc4f22e4ef0168c1a46b9",
					"line": 113,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name=dind",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=dind should have resources defined",
					"actual_value": "spec.template.spec.containers.name=dind doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "402a7f7cf034127f6abce88e9a011e74e71d2647de52f6ffcc5572789b8c03e5",
					"line": 155,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.imagePullPolicy relies on mutable images in cache"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "0c9356343fa644b777690bf35b674294d7cf162be763cf3f5d86a9097c5a6325",
					"line": 115,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "12bd07fc53eb995f981cc3047b8980e542da664c7a1d7011f3bd8d3cf0d06497",
					"line": 95,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{gc}}",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{gc}}"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "12bd07fc53eb995f981cc3047b8980e542da664c7a1d7011f3bd8d3cf0d06497",
					"line": 95,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{dind}}",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{dind}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "7d4583088be030c126766549eb48e93bf2a90a71d35fde1eccd191499e7e9423",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name={{dind}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name={{dind}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name={{dind}}.securityContext.capabilities is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "e52399a9666a6bebfa17854c2a3f71140c2305788d65fa255306651dfb7dfe34",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name=gc",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name=gc.securityContext should be set",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.containers.name=gc.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "f67c7430e1b0e51539fc496b126328335c4593c500f9c194f385375392faab2e",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-docker-in-docker}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "a6073f9fbd3f25a80c7e3e14e08265b5dbee1641559f0e40a1e50bb3c98152e1",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-docker-in-docker}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "4a2929ec8118c58e8b0114e0cc3bced6ec67dbcc76a6eb7959c6f441f550ab59",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name=gc",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=gc has a security context",
					"actual_value": "spec.template.spec.containers.name=gc does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "2c652caf83c61e063837747348833fa63e8616d7bc2a2baa135557c53ff60c7e",
					"line": 123,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}",
					"search_line": 123,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{dind}}.securityContext.readOnlyRootFilesystem is undefined"
				},
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "ee42ae2fd3adbd1d25104434a276d74090a4d43b76cc04a82b320d00ea809d8e",
					"line": 153,
					"resource_type": "Deployment",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.template.spec.containers.name={{gc}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		},
		{
			"query_name": "Service Does Not Target Pod",
			"query_id": "3ca03a61-3249-4c16-8427-6f8e47dda729",
			"query_url": "https://kubernetes.io/docs/concepts/services-networking/service/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Service should Target a Pod",
			"description_id": "e7c26645",
			"files": [
				{
					"file_name": "templates/docker-in-docker_template.yaml",
					"similarity_id": "291c4275bc5f63b5c5cd9ed0c1bde188b91c53bcfc30902e43e0bda8eec10c79",
					"line": 68,
					"resource_type": "Service",
					"resource_name": "release-name-docker-in-docker",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-docker-in-docker}}.spec.ports.port={{2376}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-docker-in-docker}}.spec.ports.port={{2376}} has a Pod port",
					"actual_value": "metadata.name={{release-name-docker-in-docker}}.spec.ports.port={{2376}} does not have a Pod port"
				}
			]
		}
	]
}
