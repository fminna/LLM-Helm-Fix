{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 101,
	"files_parsed": 1,
	"lines_parsed": 97,
	"lines_ignored": 4,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 6,
		"INFO": 0,
		"LOW": 8,
		"MEDIUM": 12,
		"TRACE": 0
	},
	"total_counter": 26,
	"total_bom_resources": 0,
	"start": "2024-05-17T21:01:10.575613+02:00",
	"end": "2024-05-17T21:01:12.464696+02:00",
	"paths": [
		"/usr/local/opt/kics/share/kics/assets/queries",
		"templates/koherence_template.yaml"
	],
	"queries": [
		{
			"query_name": "Container Is Privileged",
			"query_id": "dd29336b-fe57-445b-a26e-e6aa867ae609",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/#privileged-mode-for-containers",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Privileged containers lack essential security restrictions and should be avoided by removing the 'privileged' flag or by changing its value to false",
			"description_id": "55f59030",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "2368f73c702e3ac0750ee275899d83ba1607a7033ac27b413e9c6f9eeb900089",
					"line": 92,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.privileged",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.privileged is unset or false",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.privileged is true"
				}
			]
		},
		{
			"query_name": "Non Kube System Pod With Host Mount",
			"query_id": "aa8f7a35-9923-4cad-bd61-a19b7f6aac91",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "A non kube-system workload should not have hostPath mounted",
			"description_id": "e8553157",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "4e4cc34a68a58168410650ccaef3ce37bf5f8221dfb649fdec7c9e633199d6f5",
					"line": 69,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.volumes.name={{host-run-release-name}}.hostPath.path",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'release-name-koherence' of kind 'DaemonSet' in non kube-system namespace 'default' should not have hostPath '/run/koherence' mounted",
					"actual_value": "Resource name 'release-name-koherence' of kind 'DaemonSet' in non kube-system namespace 'default' has a hostPath '/run/koherence' mounted"
				}
			]
		},
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "011ed6a2a324073d2734448a6711ea5510b90c80b5369fe3ce5571a0d7e80676",
					"line": 91,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.allowPrivilegeEscalation",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.allowPrivilegeEscalation should be set to false",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.allowPrivilegeEscalation is true"
				}
			]
		},
		{
			"query_name": "Shared Host PID Namespace",
			"query_id": "302736f4-b16c-41b8-befe-c0baffa0bd9d",
			"query_url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Container should not share the host process ID namespace",
			"description_id": "c34092eb",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "cb5e5cd2e0a0926e7ef662c0a08f3faf2ea7ea405ef827ed1a027a6226fdbc02",
					"line": 94,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.hostPID",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.hostPID' should be set to false or undefined",
					"actual_value": "'spec.template.spec.hostPID' is true"
				}
			]
		},
		{
			"query_name": "Volume Mount With OS Directory Write Permissions",
			"query_id": "b7652612-de4e-4466-a0bf-1cd81f0c6063",
			"query_url": "https://kubernetes.io/docs/concepts/storage/volumes/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Containers can mount sensitive folders from the hosts, giving them potentially dangerous access to critical host configurations and binaries.",
			"description_id": "e42b7901",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "c025527eb0f597514b2bd61f7e27dfc7cdb1d63be2619a088490b777358d36e5",
					"line": 80,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.volumeMounts.name={{host-run-release-name}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.volumeMounts.name={{host-run-release-name}}.readOnly should be defined and set to true",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.volumeMounts.name={{host-run-release-name}}.readOnly is undefined"
				}
			]
		},
		{
			"query_name": "Workload Mounting With Sensitive OS Directory",
			"query_id": "5308a7a8-06f8-45ac-bf10-791fe21de46e",
			"query_url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Workload is mounting a volume with sensitive OS Directory",
			"description_id": "73339cde",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "56bc80f475a6a8f26fb69ee8387ed58e1e67b8afd7b23115cd71f9b7fd507d4d",
					"line": 69,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.volumes.name={{host-run-release-name}}.hostPath.path",
					"search_line": 69,
					"search_value": "",
					"expected_value": "Workload name 'release-name-koherence' of kind 'DaemonSet' should not mount a host sensitive OS directory '/run/koherence' with hostPath",
					"actual_value": "Workload name 'release-name-koherence' of kind 'DaemonSet' is mounting a host sensitive OS directory '/run/koherence' with hostPath"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "ed35fea3c7be81afcab0ba87ff11128012a54842573bc7dec4de7f3d3c9ee01f",
					"line": 90,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}",
					"search_line": 90,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "bc9544f9726cf7d4ab550097fa0726dd8e8cb3b78da1d9c9371dfe9a43998e4c",
					"line": 90,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "74a899889f12a702ffc64fd43a52eb80bfbdcd0670a185034d2404e524bc6e1b",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "137f2f8efffe59b814bd8458c5e88152ca2d07a39f83379f20df18720aa717e8",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "408e3023dc04f5ce83cd0ab9469b9671cf0d70bc1540e51a2761df06b15ef751",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "6aaa3a99cab135324a2c74501a81724c25bfb1dbdb6c4395eeeddee31e8a5d17",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "6dfbb321a33150c4505291d95984e18129b7e68f9c540009f33cb8c23b2d7b62",
					"line": 90,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "aa00b17d5307f7798ecb649171e198ca90e42496a7dc9c8fd6122d93a94e6dff",
					"line": 61,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "810a04c3a482b2c78415fcb7d1a35336638459b611e30d00db88f8180d2ac4bc",
					"line": 44,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.namespace",
					"search_line": 44,
					"search_value": "",
					"expected_value": "'metadata.namespace' should not be set to default, kube-system or kube-public",
					"actual_value": "'metadata.namespace' is set to default"
				},
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "39ee5b2e7df16453f25292c7c92404822fab885073f66f16f2271555bf66becb",
					"line": 14,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-script",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-script}}",
					"search_line": 14,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "47ca45a10301dd9a1c2bc5047ed78c9170831c3033ed4519328afd35845d1840",
					"line": 35,
					"resource_type": "ConfigMap",
					"resource_name": "release-name-env",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{ConfigMap}}.metadata.name={{release-name-env}}",
					"search_line": 35,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				},
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "Secret",
					"resource_name": "release-name-provider-env",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Secret}}.metadata.name={{release-name-provider-env}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "58e7deb8a6c981748ae5bb8291ad2612d0fa899433d3c11532553d7d6eb23d54",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name=koherence",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=koherence has resources defined",
					"actual_value": "spec.template.spec.containers.name=koherence doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "35159198e7f35a3638f6cf608ff8d5ce7f4ea3462f5771d035041e680ce04653",
					"line": 72,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name=koherence",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=koherence should have resources defined",
					"actual_value": "spec.template.spec.containers.name=koherence doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "e7daaf0e89605e3bf7ad5f5d1eeceab80438322bcc11ea664addebef0528ffe6",
					"line": 74,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "c3862d3a304741307a2871c00825c63fc6e1a67a96732480a23ffc2143b76077",
					"line": 57,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{koherence}}",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{koherence}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "c9d3c09e218415d15f698b9f93ea7287b336444f7bbaaa9732bfa3e17053026c",
					"line": 90,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}.spec.containers.name={{koherence}}.securityContext",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}}.spec.containers.name={{koherence}}.securityContext.capabilities should be set",
					"actual_value": "metadata.name={{release-name-koherence}}.spec.containers.name={{koherence}}.securityContext.capabilities is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "c7794624fb8522530f6092f495dc5f835ed2bc80e607a1d90a83e2dde3e13f61",
					"line": 44,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}",
					"search_line": 44,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{release-name-koherence}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "1bbb3326d09b99302c2f7716b4baeed928b83e07ae6af70f2f0ceee150ffbf80",
					"line": 44,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{release-name-koherence}}",
					"search_line": 44,
					"search_value": "",
					"expected_value": "metadata.name={{release-name-koherence}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{release-name-koherence}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Secrets As Environment Variables",
			"query_id": "3d658f8b-d988-41a0-a841-40043121de1e",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Secret Management",
			"experimental": false,
			"description": "Container should not use secrets as environment variables",
			"description_id": "99365a7d",
			"files": [
				{
					"file_name": "templates/koherence_template.yaml",
					"similarity_id": "b76f71f59d785f576c2bc2d17f8f52fbb49faf1bbd5806903a82f3a6ceff2d97",
					"line": 85,
					"resource_type": "DaemonSet",
					"resource_name": "release-name-koherence",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{release-name-koherence}}.spec.template.spec.containers.name={{koherence}}.envFrom",
					"search_line": -1,
					"search_value": "",
					"expected_value": "'spec.template.spec.containers.name={{koherence}}.envFrom.secretRef' should be undefined",
					"actual_value": "'spec.template.spec.containers.name={{koherence}}.envFrom.secretRef' is defined"
				}
			]
		}
	]
}
