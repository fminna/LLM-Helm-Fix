{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 52,
	"files_parsed": 1,
	"lines_parsed": 47,
	"lines_ignored": 5,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 9,
		"MEDIUM": 7,
		"TRACE": 0
	},
	"total_counter": 17,
	"total_bom_resources": 0,
	"start": "2024-05-17T21:54:46.828321+02:00",
	"end": "2024-05-17T21:54:48.750546+02:00",
	"paths": [
		"templates/CubeUniverse_template.yaml",
		"/usr/local/opt/kics/share/kics/assets/queries"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "f1277819a057abb7c4bbfc51a7e21c9b94384461d58a8079af43e9792a83d2e0",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "afa2fb25d781a4610f31cbfe26637d2dac7bc40b4b17f3cf96c32260326a30fc",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "7b487b92268393c4ed0ce8fb392d2fa2e0b0a64bad46e80f85e1e3fc509a759f",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "9c12e555366fc5e54a9fed4451302e8ee78fc074ac687a4661116ed480715c9f",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "7db146e9da4556a7359195cb0e8338d303d035f57f36224cf4bca562b727e7c6",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "5117e70021e967843098386406a2bb5f00a77a412580d3e52befef074251228d",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "7a72317baeb983b22def321add0097e7f7dc153bd078b272b3da4982b9ce0fde",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "2d6e6d9ca7bc4289c184210def69a2efe871572f9fc189579e8c7efdbe98762a",
					"line": 39,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "e06bc1a927f2585ddd19548b5d0ad4ac7b88d01779493cb30d23511b2f066327",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name=cubeuniverse-prepare",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=cubeuniverse-prepare has resources defined",
					"actual_value": "spec.template.spec.containers.name=cubeuniverse-prepare doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "907cc1b8a01890ec0a18fbfceafc11ca7c32d44766194eb75bfe7e9a842dd431",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name=cubeuniverse-prepare",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=cubeuniverse-prepare should have resources defined",
					"actual_value": "spec.template.spec.containers.name=cubeuniverse-prepare doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Cluster Admin Rolebinding With Superuser Permissions",
			"query_id": "249328b8-5f0f-409f-b1dd-029f07882e11",
			"query_url": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Ensure that the cluster-admin role is only used where required (RBAC)",
			"description_id": "567eee7e",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "0fb906d0fae0eca1963ef7021118b2acb2c4286157a2d2531ade60b861bcd7f5",
					"line": 25,
					"resource_type": "ClusterRoleBinding",
					"resource_name": "universe-binding",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{universe-binding}}.roleRef.name=cluster-admin",
					"search_line": -1,
					"search_value": "",
					"expected_value": "Resource name 'universe-binding' of kind 'ClusterRoleBinding' isn't binding 'cluster-admin' role with superuser permissions",
					"actual_value": "Resource name 'universe-binding' of kind 'ClusterRoleBinding' is binding 'cluster-admin' role with superuser permissions"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "ffa6ec30552c29e8c3c859f23518e798570699e62f0c930bdedd618db71d397c",
					"line": 35,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.annotations should specify an AppArmor profile for container {{cubeuniverse-prepare}}",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.annotations does not specify an AppArmor profile for container {{cubeuniverse-prepare}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "91898d22b7e2b14efd30880da93d3964a2676ee6fc95085785fc8c21642b8fa6",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.containers.name=cubeuniverse-prepare",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.containers.name=cubeuniverse-prepare.securityContext should be set",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.containers.name=cubeuniverse-prepare.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "989e9f8e05f3abd7351c20b4b34867ec31a0f972583e8f6be80e4fbbd3f74d52",
					"line": 36,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}",
					"search_line": 36,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{cubeuniverse-prepare}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "ad878a918fe85fb76f7ad68aa6360b0a6565f90cd5e1f7b180548f92872c7bc1",
					"line": 36,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}",
					"search_line": 36,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{cubeuniverse-prepare}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "5c705545f655a909c4b04b79ab19af4219db55c1948cd894b970448c651783a0",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name=cubeuniverse-prepare",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=cubeuniverse-prepare has a security context",
					"actual_value": "spec.template.spec.containers.name=cubeuniverse-prepare does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/CubeUniverse_template.yaml",
					"similarity_id": "8e862dd1504603cc62c650ee4725292f22b15e83395eff945fad894caf98d90a",
					"line": 41,
					"resource_type": "Job",
					"resource_name": "cubeuniverse-prepare",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{cubeuniverse-prepare}}.spec.template.spec.containers.name={{cubeuniverse-prepare}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
