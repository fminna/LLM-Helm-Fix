{
	"kics_version": "2.0.0",
	"files_scanned": 1,
	"lines_scanned": 25,
	"files_parsed": 1,
	"lines_parsed": 24,
	"lines_ignored": 1,
	"files_failed_to_scan": 0,
	"queries_total": 134,
	"queries_failed_to_execute": 0,
	"queries_failed_to_compute_similarity_id": 0,
	"scan_id": "console",
	"severity_counters": {
		"CRITICAL": 0,
		"HIGH": 1,
		"INFO": 0,
		"LOW": 9,
		"MEDIUM": 9,
		"TRACE": 0
	},
	"total_counter": 19,
	"total_bom_resources": 0,
	"start": "2024-06-26T00:50:06.480032+02:00",
	"end": "2024-06-26T00:50:08.588295+02:00",
	"paths": [
		"/usr/local/opt/kics/share/kics/assets/queries",
		"templates/workerapp_template.yaml"
	],
	"queries": [
		{
			"query_name": "Privilege Escalation Allowed",
			"query_id": "5572cc5e-1e4c-4113-92a6-7a8a3bd25e6d",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "HIGH",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should not run with allowPrivilegeEscalation in order to prevent them from gaining more privileges than their parent process",
			"description_id": "525fccf4",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "09852f767e80bddc37c55638e59bac2ae21e37777ea8f415d57e1e8ca1036191",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.allowPrivilegeEscalation should be set and should be set to false",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.allowPrivilegeEscalation is undefined"
				}
			]
		},
		{
			"query_name": "Container Running As Root",
			"query_id": "cf34805e-3872-4c08-bf92-6ff7bb0cfadb",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Containers should only run as non-root user. This limits the exploitability of security misconfigurations and restricts an attacker's possibilities in case of compromise",
			"description_id": "9d5b1d16",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "dadb5bf9bb79fb683ab569a986c08aa59869eb75729b4cd22bc2138960a1f453",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.runAsUser is higher than 0 and/or 'runAsNonRoot' is true",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.runAsUser is 0 and 'runAsNonRoot' is false"
				}
			]
		},
		{
			"query_name": "Container Running With Low UID",
			"query_id": "02323c00-cdc3-4fdc-a310-4f2b3e7a1660",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Check if containers are running with low UID, which might cause conflicts with the host's user table.",
			"description_id": "fc2c11f9",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "1a50cb6e2de64ee86f2d16e7589d6f94abc1fea263f451d7a3c4b57fe7328e55",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.runAsUser should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.runAsUser is undefined"
				}
			]
		},
		{
			"query_name": "Memory Limits Not Defined",
			"query_id": "b14d1bc4-a208-45db-92f0-e21f8e2588e9",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory limits should be defined for each container. This prevents potential resource exhaustion by ensuring that containers consume not more than the designated amount of memory",
			"description_id": "e0ba95cc",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "85461656a78b94154244a17037dbb38e327fa2f862728675c13e3de669a6a35c",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.resources.limits.memory should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.resources.limits.memory is undefined"
				}
			]
		},
		{
			"query_name": "Memory Requests Not Defined",
			"query_id": "229588ef-8fde-40c8-8756-f4f2b5825ded",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "Memory requests should be defined for each container. This allows the kubelet to reserve the requested amount of system resources and prevents over-provisioning on individual nodes",
			"description_id": "3dcbd683",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "36beec669399cebef64a8c5260e3c22c03e1f4a1628709f3f51a11c696848a18",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.resources.requests.memory should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.resources.requests.memory is undefined"
				}
			]
		},
		{
			"query_name": "NET_RAW Capabilities Not Being Dropped",
			"query_id": "dbbc6705-d541-43b0-b166-dd4be8208b54",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should drop 'ALL' or at least 'NET_RAW' capabilities",
			"description_id": "e9790956",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "ce6214e5f212f92a4c6cfe94e59877064541f6f1b9df3c65707dd879b2fe0dae",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.capabilities.drop should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.capabilities.drop is undefined"
				}
			]
		},
		{
			"query_name": "Readiness Probe Is Not Configured",
			"query_id": "a659f3b5-9bf0-438a-bd9a-7d3a6427f1e3",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Availability",
			"experimental": false,
			"description": "Check if Readiness Probe is not configured.",
			"description_id": "28c0498a",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "f1d144143fe959d40e0e9bc2336e993e17966ae3e5f9af27c8c2a74fc64ba4dc",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.readinessProbe should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.readinessProbe is undefined"
				}
			]
		},
		{
			"query_name": "Seccomp Profile Is Not Configured",
			"query_id": "f377b83e-bd07-4f48-a591-60c82b14a78b",
			"query_url": "https://kubernetes.io/docs/tutorials/security/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Containers should be configured with a secure Seccomp profile to restrict potentially dangerous syscalls",
			"description_id": "d943c7e7",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "15ca912803ebe50331e3f03e9ed645177e15f66dbeeee4772c4975edb013a9a5",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.seccompProfile.type should be defined",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.seccompProfile.type is undefined"
				}
			]
		},
		{
			"query_name": "Service Account Token Automount Not Disabled",
			"query_id": "48471392-d4d0-47c0-b135-cdec95eb3eef",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Defaults",
			"experimental": false,
			"description": "Service Account Tokens are automatically mounted even if not necessary",
			"description_id": "51cade0f",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "1ad331ed4d4510043bb591c040ff7cef327630bc563c19d2c3aad359492c9958",
					"line": 21,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.automountServiceAccountToken should be defined and set to false",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.automountServiceAccountToken is undefined"
				}
			]
		},
		{
			"query_name": "Using Unrecommended Namespace",
			"query_id": "611ab018-c4aa-4ba2-b0f6-a448337509a6",
			"query_url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/",
			"severity": "MEDIUM",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Namespaces like 'default', 'kube-system' or 'kube-public' should not be used",
			"description_id": "29549ea9",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "400f6dc4cd112714683ac627622b291d4028cdc32d425be30428e558e006056f",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "kind={{Deployment}}.metadata.name={{workerapp-deployment}}",
					"search_line": 6,
					"search_value": "",
					"expected_value": "metadata.namespace should be defined and not null",
					"actual_value": "metadata.namespace is undefined or null"
				}
			]
		},
		{
			"query_name": "CPU Limits Not Set",
			"query_id": "4ac0e2b7-d2d2-4af7-8799-e8de6721ccda",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU limits should be set because if the system has CPU time free, a container is guaranteed to be allocated as much CPU as it requests",
			"description_id": "9a2ef763",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "3875b4e86dc947974fe627b08aec9b550c4418400c1a85b305a88508744466a0",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name=workerapp-container",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=workerapp-container has resources defined",
					"actual_value": "spec.template.spec.containers.name=workerapp-container doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "CPU Requests Not Set",
			"query_id": "ca469dd4-c736-448f-8ac1-30a642705e0a",
			"query_url": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Resource Management",
			"experimental": false,
			"description": "CPU requests should be set to ensure the sum of the resource requests of the scheduled Containers is less than the capacity of the node",
			"description_id": "ac7ad5df",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "b555b04f8fdbc8180d03428875839433172e0250c76dc7832b388ad23eea5616",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name=workerapp-container",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=workerapp-container should have resources defined",
					"actual_value": "spec.template.spec.containers.name=workerapp-container doesn't have resources defined"
				}
			]
		},
		{
			"query_name": "Image Pull Policy Of The Container Is Not Set To Always",
			"query_id": "caa3479d-885d-4882-9aac-95e5e78ef5c2",
			"query_url": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Image Pull Policy of the container must be defined and set to Always",
			"description_id": "201e3c8d",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "a88ec5067e744cc30eaec1865f7f204cdcc03c7c93291794efbc168153835a47",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "IncorrectValue",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.imagePullPolicy",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.imagePullPolicy should be set to 'Always'",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.imagePullPolicy relies on mutable images in cache"
				}
			]
		},
		{
			"query_name": "Missing AppArmor Profile",
			"query_id": "8b36775e-183d-4d46-b0f7-96a6f34a723f",
			"query_url": "https://kubernetes.io/docs/tutorials/clusters/apparmor/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Access Control",
			"experimental": false,
			"description": "Containers should be configured with an AppArmor profile to enforce fine-grained access control over low-level system resources",
			"description_id": "59c17c0a",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "413a1f5d9256533cbf5460f55ff10b1b52913e921a8c10490c0cdcc05e78d353",
					"line": 16,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.metadata",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.metadata.annotations should specify an AppArmor profile for container {{workerapp-container}}",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.metadata.annotations does not specify an AppArmor profile for container {{workerapp-container}}"
				}
			]
		},
		{
			"query_name": "No Drop Capabilities for Containers",
			"query_id": "268ca686-7fb7-4ae9-b129-955a2a89064e",
			"query_url": "https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Best Practices",
			"experimental": false,
			"description": "Sees if Kubernetes Drop Capabilities exists to ensure containers security context",
			"description_id": "9d3ca6db",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "6cf38beafc767b846514690f1b35f5f19a5e7d1984d41d6bdfa4c067e504fb1c",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.containers.name=workerapp-container",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.containers.name=workerapp-container.securityContext should be set",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.containers.name=workerapp-container.securityContext is undefined"
				}
			]
		},
		{
			"query_name": "Pod or Container Without LimitRange",
			"query_id": "4a20ebac-1060-4c81-95d1-1f7f620e983b",
			"query_url": "https://kubernetes.io/docs/concepts/policy/limit-range/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a LimitRange policy associated to ensure that resource allocations of Pods, Containers and PersistentVolumeClaims do not exceed the defined boundaries",
			"description_id": "142ed21f",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "7d508400056cdeb69b219697e65c7738e6073f22cf2d765aad28d08369464f5c",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}} has a 'LimitRange' policy associated",
					"actual_value": "metadata.name={{workerapp-deployment}} does not have a 'LimitRange' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without ResourceQuota",
			"query_id": "48a5beba-e4c0-4584-a2aa-e6894e4cf424",
			"query_url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "Each namespace should have a ResourceQuota policy associated to limit the total amount of resources Pods, Containers and PersistentVolumeClaims can consume",
			"description_id": "86499ed5",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "66be4e6245052c881f94ae9395f078c7cdd1bd658dbf7f4cb586a87515ee82c8",
					"line": 6,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}} has a 'ResourceQuota' policy associated",
					"actual_value": "metadata.name={{workerapp-deployment}} does not have a 'ResourceQuota' policy associated"
				}
			]
		},
		{
			"query_name": "Pod or Container Without Security Context",
			"query_id": "a97a340a-0063-418e-b3a1-3028941d0995",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Insecure Configurations",
			"experimental": false,
			"description": "A security context defines privilege and access control settings for a Pod or Container",
			"description_id": "68a1650b",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "814e63c8d677b8821d4291480a6f65045f53733073095d429ad41d91f3bc8cd3",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name=workerapp-container",
					"search_line": -1,
					"search_value": "",
					"expected_value": "spec.template.spec.containers.name=workerapp-container has a security context",
					"actual_value": "spec.template.spec.containers.name=workerapp-container does not have a security context"
				}
			]
		},
		{
			"query_name": "Root Container Not Mounted Read-only",
			"query_id": "a9c2f49d-0671-4fc9-9ece-f4e261e128d0",
			"query_url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
			"severity": "LOW",
			"platform": "Kubernetes",
			"category": "Build Process",
			"experimental": false,
			"description": "Check if the root container filesystem is not being mounted read-only.",
			"description_id": "0d2df1e5",
			"files": [
				{
					"file_name": "templates/workerapp_template.yaml",
					"similarity_id": "266de5b465d186ad79374909ee0aac3017d7ac8ad2d03b6bcadd95d07a5d469e",
					"line": 23,
					"resource_type": "Deployment",
					"resource_name": "workerapp-deployment",
					"issue_type": "MissingAttribute",
					"search_key": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}",
					"search_line": -1,
					"search_value": "",
					"expected_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.readOnlyRootFilesystem should be set to true",
					"actual_value": "metadata.name={{workerapp-deployment}}.spec.template.spec.containers.name={{workerapp-container}}.securityContext.readOnlyRootFilesystem is undefined"
				}
			]
		}
	]
}
